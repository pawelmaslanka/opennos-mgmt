/*
Package oc is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was true
in this case).

This package was generated by /Users/pmaslank/Development/golang/pkg/mod/github.com/openconfig/ygot@v0.6.0/ygen/commongen.go
using the following YANG input files:
	- public/release/models/platform/openconfig-platform-transceiver.yang
	- public/release/models/lacp/openconfig-lacp.yang
	- public/release/models/lldp/openconfig-lldp.yang
	- public/release/models/stp/openconfig-spanning-tree.yang
	- public/release/models/interfaces/openconfig-interfaces.yang
	- public/release/models/interfaces/openconfig-if-ip.yang
	- public/release/models/interfaces/openconfig-if-aggregate.yang
	- public/release/models/interfaces/openconfig-if-ethernet.yang
	- public/release/models/interfaces/openconfig-if-ip-ext.yang
Imported modules were sourced from:
	- public/...
	- deps/...
*/
package oc

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/goyang/pkg/yang"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

var (
	SchemaTree map[string]*yang.Entry
)

func init() {
	var err error
	if SchemaTree, err = UnzipSchema(); err != nil {
		panic("schema error: " + err.Error())
	}
}

// Schema returns the details of the generated schema.
func Schema() (*ytypes.Schema, error) {
	uzp, err := UnzipSchema()
	if err != nil {
		return nil, fmt.Errorf("cannot unzip schema, %v", err)
	}

	return &ytypes.Schema{
		Root:       &Device{},
		SchemaTree: uzp,
		Unmarshal:  Unmarshal,
	}, nil
}

// UnzipSchema unzips the zipped schema and returns a map of yang.Entry nodes,
// keyed by the name of the struct that the yang.Entry describes the schema for.
func UnzipSchema() (map[string]*yang.Entry, error) {
	var schemaTree map[string]*yang.Entry
	var err error
	if schemaTree, err = ygot.GzipToSchema(ySchema); err != nil {
		return nil, fmt.Errorf("could not unzip the schema; %v", err)
	}
	return schemaTree, nil
}

// Unmarshal unmarshals data, which must be RFC7951 JSON format, into
// destStruct, which must be non-nil and the correct GoStruct type. It returns
// an error if the destStruct is not found in the schema or the data cannot be
// unmarshaled. The supplied options (opts) are used to control the behaviour
// of the unmarshal function - for example, determining whether errors are
// thrown for unknown fields in the input JSON.
func Unmarshal(data []byte, destStruct ygot.GoStruct, opts ...ytypes.UnmarshalOpt) error {
	tn := reflect.TypeOf(destStruct).Elem().Name()
	schema, ok := SchemaTree[tn]
	if !ok {
		return fmt.Errorf("could not find schema for type %s", tn)
	}
	var jsonTree interface{}
	if err := json.Unmarshal([]byte(data), &jsonTree); err != nil {
		return err
	}
	return ytypes.Unmarshal(schema, destStruct, jsonTree, opts...)
}

// Component represents the /openconfig-platform/components/component YANG schema element.
type Component struct {
	ΛMetadata          []ygot.Annotation                               `path:"@" ygotAnnotation:"true"`
	AllocatedPower     *uint32                                         `path:"state/allocated-power" module:"openconfig-platform"`
	ΛAllocatedPower    []ygot.Annotation                               `path:"state/@allocated-power" ygotAnnotation:"true"`
	Backplane          *Component_Backplane                            `path:"backplane" module:"openconfig-platform"`
	ΛBackplane         []ygot.Annotation                               `path:"@backplane" ygotAnnotation:"true"`
	Chassis            *Component_Chassis                              `path:"chassis" module:"openconfig-platform"`
	ΛChassis           []ygot.Annotation                               `path:"@chassis" ygotAnnotation:"true"`
	Cpu                *Component_Cpu                                  `path:"cpu" module:"openconfig-platform"`
	ΛCpu               []ygot.Annotation                               `path:"@cpu" ygotAnnotation:"true"`
	Description        *string                                         `path:"state/description" module:"openconfig-platform"`
	ΛDescription       []ygot.Annotation                               `path:"state/@description" ygotAnnotation:"true"`
	Empty              *bool                                           `path:"state/empty" module:"openconfig-platform"`
	ΛEmpty             []ygot.Annotation                               `path:"state/@empty" ygotAnnotation:"true"`
	Fabric             *Component_Fabric                               `path:"fabric" module:"openconfig-platform"`
	ΛFabric            []ygot.Annotation                               `path:"@fabric" ygotAnnotation:"true"`
	Fan                *Component_Fan                                  `path:"fan" module:"openconfig-platform"`
	ΛFan               []ygot.Annotation                               `path:"@fan" ygotAnnotation:"true"`
	FirmwareVersion    *string                                         `path:"state/firmware-version" module:"openconfig-platform"`
	ΛFirmwareVersion   []ygot.Annotation                               `path:"state/@firmware-version" ygotAnnotation:"true"`
	HardwareVersion    *string                                         `path:"state/hardware-version" module:"openconfig-platform"`
	ΛHardwareVersion   []ygot.Annotation                               `path:"state/@hardware-version" ygotAnnotation:"true"`
	Id                 *string                                         `path:"state/id" module:"openconfig-platform"`
	ΛId                []ygot.Annotation                               `path:"state/@id" ygotAnnotation:"true"`
	IntegratedCircuit  *Component_IntegratedCircuit                    `path:"integrated-circuit" module:"openconfig-platform"`
	ΛIntegratedCircuit []ygot.Annotation                               `path:"@integrated-circuit" ygotAnnotation:"true"`
	Location           *string                                         `path:"state/location" module:"openconfig-platform"`
	ΛLocation          []ygot.Annotation                               `path:"state/@location" ygotAnnotation:"true"`
	Memory             *Component_Memory                               `path:"state/memory" module:"openconfig-platform"`
	ΛMemory            []ygot.Annotation                               `path:"state/@memory" ygotAnnotation:"true"`
	MfgDate            *string                                         `path:"state/mfg-date" module:"openconfig-platform"`
	ΛMfgDate           []ygot.Annotation                               `path:"state/@mfg-date" ygotAnnotation:"true"`
	MfgName            *string                                         `path:"state/mfg-name" module:"openconfig-platform"`
	ΛMfgName           []ygot.Annotation                               `path:"state/@mfg-name" ygotAnnotation:"true"`
	Name               *string                                         `path:"config/name|name" module:"openconfig-platform"`
	ΛName              []ygot.Annotation                               `path:"config/@name|@name" ygotAnnotation:"true"`
	OperStatus         E_OpenconfigPlatformTypes_COMPONENT_OPER_STATUS `path:"state/oper-status" module:"openconfig-platform"`
	ΛOperStatus        []ygot.Annotation                               `path:"state/@oper-status" ygotAnnotation:"true"`
	Parent             *string                                         `path:"state/parent" module:"openconfig-platform"`
	ΛParent            []ygot.Annotation                               `path:"state/@parent" ygotAnnotation:"true"`
	PartNo             *string                                         `path:"state/part-no" module:"openconfig-platform"`
	ΛPartNo            []ygot.Annotation                               `path:"state/@part-no" ygotAnnotation:"true"`
	Port               *Component_Port                                 `path:"port" module:"openconfig-platform"`
	ΛPort              []ygot.Annotation                               `path:"@port" ygotAnnotation:"true"`
	PowerSupply        *Component_PowerSupply                          `path:"power-supply" module:"openconfig-platform"`
	ΛPowerSupply       []ygot.Annotation                               `path:"@power-supply" ygotAnnotation:"true"`
	Property           map[string]*Component_Property                  `path:"properties/property" module:"openconfig-platform"`
	ΛProperty          []ygot.Annotation                               `path:"properties/@property" ygotAnnotation:"true"`
	Removable          *bool                                           `path:"state/removable" module:"openconfig-platform"`
	ΛRemovable         []ygot.Annotation                               `path:"state/@removable" ygotAnnotation:"true"`
	SerialNo           *string                                         `path:"state/serial-no" module:"openconfig-platform"`
	ΛSerialNo          []ygot.Annotation                               `path:"state/@serial-no" ygotAnnotation:"true"`
	SoftwareVersion    *string                                         `path:"state/software-version" module:"openconfig-platform"`
	ΛSoftwareVersion   []ygot.Annotation                               `path:"state/@software-version" ygotAnnotation:"true"`
	Storage            *Component_Storage                              `path:"storage" module:"openconfig-platform"`
	ΛStorage           []ygot.Annotation                               `path:"@storage" ygotAnnotation:"true"`
	Subcomponent       map[string]*Component_Subcomponent              `path:"subcomponents/subcomponent" module:"openconfig-platform"`
	ΛSubcomponent      []ygot.Annotation                               `path:"subcomponents/@subcomponent" ygotAnnotation:"true"`
	Temperature        *Component_Temperature                          `path:"state/temperature" module:"openconfig-platform"`
	ΛTemperature       []ygot.Annotation                               `path:"state/@temperature" ygotAnnotation:"true"`
	Transceiver        *Component_Transceiver                          `path:"transceiver" module:"openconfig-platform-transceiver"`
	ΛTransceiver       []ygot.Annotation                               `path:"@transceiver" ygotAnnotation:"true"`
	Type               Component_Type_Union                            `path:"state/type" module:"openconfig-platform"`
	ΛType              []ygot.Annotation                               `path:"state/@type" ygotAnnotation:"true"`
	UsedPower          *uint32                                         `path:"state/used-power" module:"openconfig-platform"`
	ΛUsedPower         []ygot.Annotation                               `path:"state/@used-power" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component) IsYANGGoStruct() {}

// NewProperty creates a new entry in the Property list of the
// Component struct. The keys of the list are populated from the input
// arguments.
func (t *Component) NewProperty(Name string) (*Component_Property, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Property == nil {
		t.Property = make(map[string]*Component_Property)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Property[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Property", key)
	}

	t.Property[key] = &Component_Property{
		Name: &Name,
	}

	return t.Property[key], nil
}

// RenameProperty renames an entry in the list Property within
// the Component struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Component) RenameProperty(oldK, newK string) error {
	if _, ok := t.Property[newK]; ok {
		return fmt.Errorf("key %v already exists in Property", newK)
	}

	e, ok := t.Property[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Property", oldK)
	}
	e.Name = &newK

	t.Property[newK] = e
	delete(t.Property, oldK)
	return nil
}

// GetOrCreateProperty retrieves the value with the specified keys from
// the receiver Component. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Component) GetOrCreateProperty(Name string) *Component_Property {

	key := Name

	if v, ok := t.Property[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewProperty(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateProperty got unexpected error: %v", err))
	}
	return v
}

// GetProperty retrieves the value with the specified key from
// the Property map field of Component. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Component) GetProperty(Name string) *Component_Property {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Property[key]; ok {
		return lm
	}
	return nil
}

// AppendProperty appends the supplied Component_Property struct to the
// list Property of Component. If the key value(s) specified in
// the supplied Component_Property already exist in the list, an error is
// returned.
func (t *Component) AppendProperty(v *Component_Property) error {
	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Property == nil {
		t.Property = make(map[string]*Component_Property)
	}

	if _, ok := t.Property[key]; ok {
		return fmt.Errorf("duplicate key for list Property %v", key)
	}

	t.Property[key] = v
	return nil
}

// NewSubcomponent creates a new entry in the Subcomponent list of the
// Component struct. The keys of the list are populated from the input
// arguments.
func (t *Component) NewSubcomponent(Name string) (*Component_Subcomponent, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Subcomponent == nil {
		t.Subcomponent = make(map[string]*Component_Subcomponent)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Subcomponent[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Subcomponent", key)
	}

	t.Subcomponent[key] = &Component_Subcomponent{
		Name: &Name,
	}

	return t.Subcomponent[key], nil
}

// RenameSubcomponent renames an entry in the list Subcomponent within
// the Component struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Component) RenameSubcomponent(oldK, newK string) error {
	if _, ok := t.Subcomponent[newK]; ok {
		return fmt.Errorf("key %v already exists in Subcomponent", newK)
	}

	e, ok := t.Subcomponent[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Subcomponent", oldK)
	}
	e.Name = &newK

	t.Subcomponent[newK] = e
	delete(t.Subcomponent, oldK)
	return nil
}

// GetOrCreateSubcomponent retrieves the value with the specified keys from
// the receiver Component. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Component) GetOrCreateSubcomponent(Name string) *Component_Subcomponent {

	key := Name

	if v, ok := t.Subcomponent[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSubcomponent(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSubcomponent got unexpected error: %v", err))
	}
	return v
}

// GetSubcomponent retrieves the value with the specified key from
// the Subcomponent map field of Component. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Component) GetSubcomponent(Name string) *Component_Subcomponent {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Subcomponent[key]; ok {
		return lm
	}
	return nil
}

// AppendSubcomponent appends the supplied Component_Subcomponent struct to the
// list Subcomponent of Component. If the key value(s) specified in
// the supplied Component_Subcomponent already exist in the list, an error is
// returned.
func (t *Component) AppendSubcomponent(v *Component_Subcomponent) error {
	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Subcomponent == nil {
		t.Subcomponent = make(map[string]*Component_Subcomponent)
	}

	if _, ok := t.Subcomponent[key]; ok {
		return fmt.Errorf("duplicate key for list Subcomponent %v", key)
	}

	t.Subcomponent[key] = v
	return nil
}

// GetOrCreateBackplane retrieves the value of the Backplane field
// or returns the existing field if it already exists.
func (t *Component) GetOrCreateBackplane() *Component_Backplane {
	if t.Backplane != nil {
		return t.Backplane
	}
	t.Backplane = &Component_Backplane{}
	return t.Backplane
}

// GetOrCreateChassis retrieves the value of the Chassis field
// or returns the existing field if it already exists.
func (t *Component) GetOrCreateChassis() *Component_Chassis {
	if t.Chassis != nil {
		return t.Chassis
	}
	t.Chassis = &Component_Chassis{}
	return t.Chassis
}

// GetOrCreateCpu retrieves the value of the Cpu field
// or returns the existing field if it already exists.
func (t *Component) GetOrCreateCpu() *Component_Cpu {
	if t.Cpu != nil {
		return t.Cpu
	}
	t.Cpu = &Component_Cpu{}
	return t.Cpu
}

// GetOrCreateFabric retrieves the value of the Fabric field
// or returns the existing field if it already exists.
func (t *Component) GetOrCreateFabric() *Component_Fabric {
	if t.Fabric != nil {
		return t.Fabric
	}
	t.Fabric = &Component_Fabric{}
	return t.Fabric
}

// GetOrCreateFan retrieves the value of the Fan field
// or returns the existing field if it already exists.
func (t *Component) GetOrCreateFan() *Component_Fan {
	if t.Fan != nil {
		return t.Fan
	}
	t.Fan = &Component_Fan{}
	return t.Fan
}

// GetOrCreateIntegratedCircuit retrieves the value of the IntegratedCircuit field
// or returns the existing field if it already exists.
func (t *Component) GetOrCreateIntegratedCircuit() *Component_IntegratedCircuit {
	if t.IntegratedCircuit != nil {
		return t.IntegratedCircuit
	}
	t.IntegratedCircuit = &Component_IntegratedCircuit{}
	return t.IntegratedCircuit
}

// GetOrCreateMemory retrieves the value of the Memory field
// or returns the existing field if it already exists.
func (t *Component) GetOrCreateMemory() *Component_Memory {
	if t.Memory != nil {
		return t.Memory
	}
	t.Memory = &Component_Memory{}
	return t.Memory
}

// GetOrCreatePort retrieves the value of the Port field
// or returns the existing field if it already exists.
func (t *Component) GetOrCreatePort() *Component_Port {
	if t.Port != nil {
		return t.Port
	}
	t.Port = &Component_Port{}
	return t.Port
}

// GetOrCreatePowerSupply retrieves the value of the PowerSupply field
// or returns the existing field if it already exists.
func (t *Component) GetOrCreatePowerSupply() *Component_PowerSupply {
	if t.PowerSupply != nil {
		return t.PowerSupply
	}
	t.PowerSupply = &Component_PowerSupply{}
	return t.PowerSupply
}

// GetOrCreateStorage retrieves the value of the Storage field
// or returns the existing field if it already exists.
func (t *Component) GetOrCreateStorage() *Component_Storage {
	if t.Storage != nil {
		return t.Storage
	}
	t.Storage = &Component_Storage{}
	return t.Storage
}

// GetOrCreateTemperature retrieves the value of the Temperature field
// or returns the existing field if it already exists.
func (t *Component) GetOrCreateTemperature() *Component_Temperature {
	if t.Temperature != nil {
		return t.Temperature
	}
	t.Temperature = &Component_Temperature{}
	return t.Temperature
}

// GetOrCreateTransceiver retrieves the value of the Transceiver field
// or returns the existing field if it already exists.
func (t *Component) GetOrCreateTransceiver() *Component_Transceiver {
	if t.Transceiver != nil {
		return t.Transceiver
	}
	t.Transceiver = &Component_Transceiver{}
	return t.Transceiver
}

// GetBackplane returns the value of the Backplane struct pointer
// from Component. If the receiver or the field Backplane is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component) GetBackplane() *Component_Backplane {
	if t != nil && t.Backplane != nil {
		return t.Backplane
	}
	return nil
}

// GetChassis returns the value of the Chassis struct pointer
// from Component. If the receiver or the field Chassis is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component) GetChassis() *Component_Chassis {
	if t != nil && t.Chassis != nil {
		return t.Chassis
	}
	return nil
}

// GetCpu returns the value of the Cpu struct pointer
// from Component. If the receiver or the field Cpu is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component) GetCpu() *Component_Cpu {
	if t != nil && t.Cpu != nil {
		return t.Cpu
	}
	return nil
}

// GetFabric returns the value of the Fabric struct pointer
// from Component. If the receiver or the field Fabric is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component) GetFabric() *Component_Fabric {
	if t != nil && t.Fabric != nil {
		return t.Fabric
	}
	return nil
}

// GetFan returns the value of the Fan struct pointer
// from Component. If the receiver or the field Fan is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component) GetFan() *Component_Fan {
	if t != nil && t.Fan != nil {
		return t.Fan
	}
	return nil
}

// GetIntegratedCircuit returns the value of the IntegratedCircuit struct pointer
// from Component. If the receiver or the field IntegratedCircuit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component) GetIntegratedCircuit() *Component_IntegratedCircuit {
	if t != nil && t.IntegratedCircuit != nil {
		return t.IntegratedCircuit
	}
	return nil
}

// GetMemory returns the value of the Memory struct pointer
// from Component. If the receiver or the field Memory is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component) GetMemory() *Component_Memory {
	if t != nil && t.Memory != nil {
		return t.Memory
	}
	return nil
}

// GetPort returns the value of the Port struct pointer
// from Component. If the receiver or the field Port is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component) GetPort() *Component_Port {
	if t != nil && t.Port != nil {
		return t.Port
	}
	return nil
}

// GetPowerSupply returns the value of the PowerSupply struct pointer
// from Component. If the receiver or the field PowerSupply is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component) GetPowerSupply() *Component_PowerSupply {
	if t != nil && t.PowerSupply != nil {
		return t.PowerSupply
	}
	return nil
}

// GetStorage returns the value of the Storage struct pointer
// from Component. If the receiver or the field Storage is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component) GetStorage() *Component_Storage {
	if t != nil && t.Storage != nil {
		return t.Storage
	}
	return nil
}

// GetTemperature returns the value of the Temperature struct pointer
// from Component. If the receiver or the field Temperature is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component) GetTemperature() *Component_Temperature {
	if t != nil && t.Temperature != nil {
		return t.Temperature
	}
	return nil
}

// GetTransceiver returns the value of the Transceiver struct pointer
// from Component. If the receiver or the field Transceiver is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component) GetTransceiver() *Component_Transceiver {
	if t != nil && t.Transceiver != nil {
		return t.Transceiver
	}
	return nil
}

// GetAllocatedPower retrieves the value of the leaf AllocatedPower from the Component
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AllocatedPower is set, it can safely use t.GetAllocatedPower()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AllocatedPower == nil'
// before retrieving the leaf's value.
func (t *Component) GetAllocatedPower() uint32 {
	if t == nil || t.AllocatedPower == nil {
		return 0
	}
	return *t.AllocatedPower
}

// GetDescription retrieves the value of the leaf Description from the Component
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Description is set, it can safely use t.GetDescription()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Description == nil'
// before retrieving the leaf's value.
func (t *Component) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEmpty retrieves the value of the leaf Empty from the Component
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Empty is set, it can safely use t.GetEmpty()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Empty == nil'
// before retrieving the leaf's value.
func (t *Component) GetEmpty() bool {
	if t == nil || t.Empty == nil {
		return false
	}
	return *t.Empty
}

// GetFirmwareVersion retrieves the value of the leaf FirmwareVersion from the Component
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if FirmwareVersion is set, it can safely use t.GetFirmwareVersion()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.FirmwareVersion == nil'
// before retrieving the leaf's value.
func (t *Component) GetFirmwareVersion() string {
	if t == nil || t.FirmwareVersion == nil {
		return ""
	}
	return *t.FirmwareVersion
}

// GetHardwareVersion retrieves the value of the leaf HardwareVersion from the Component
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if HardwareVersion is set, it can safely use t.GetHardwareVersion()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.HardwareVersion == nil'
// before retrieving the leaf's value.
func (t *Component) GetHardwareVersion() string {
	if t == nil || t.HardwareVersion == nil {
		return ""
	}
	return *t.HardwareVersion
}

// GetId retrieves the value of the leaf Id from the Component
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Id is set, it can safely use t.GetId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Id == nil'
// before retrieving the leaf's value.
func (t *Component) GetId() string {
	if t == nil || t.Id == nil {
		return ""
	}
	return *t.Id
}

// GetLocation retrieves the value of the leaf Location from the Component
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Location is set, it can safely use t.GetLocation()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Location == nil'
// before retrieving the leaf's value.
func (t *Component) GetLocation() string {
	if t == nil || t.Location == nil {
		return ""
	}
	return *t.Location
}

// GetMfgDate retrieves the value of the leaf MfgDate from the Component
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MfgDate is set, it can safely use t.GetMfgDate()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MfgDate == nil'
// before retrieving the leaf's value.
func (t *Component) GetMfgDate() string {
	if t == nil || t.MfgDate == nil {
		return ""
	}
	return *t.MfgDate
}

// GetMfgName retrieves the value of the leaf MfgName from the Component
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MfgName is set, it can safely use t.GetMfgName()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MfgName == nil'
// before retrieving the leaf's value.
func (t *Component) GetMfgName() string {
	if t == nil || t.MfgName == nil {
		return ""
	}
	return *t.MfgName
}

// GetName retrieves the value of the leaf Name from the Component
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Name is set, it can safely use t.GetName()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Name == nil'
// before retrieving the leaf's value.
func (t *Component) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetOperStatus retrieves the value of the leaf OperStatus from the Component
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OperStatus is set, it can safely use t.GetOperStatus()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OperStatus == nil'
// before retrieving the leaf's value.
func (t *Component) GetOperStatus() E_OpenconfigPlatformTypes_COMPONENT_OPER_STATUS {
	if t == nil || t.OperStatus == 0 {
		return 0
	}
	return t.OperStatus
}

// GetParent retrieves the value of the leaf Parent from the Component
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Parent is set, it can safely use t.GetParent()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Parent == nil'
// before retrieving the leaf's value.
func (t *Component) GetParent() string {
	if t == nil || t.Parent == nil {
		return ""
	}
	return *t.Parent
}

// GetPartNo retrieves the value of the leaf PartNo from the Component
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PartNo is set, it can safely use t.GetPartNo()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PartNo == nil'
// before retrieving the leaf's value.
func (t *Component) GetPartNo() string {
	if t == nil || t.PartNo == nil {
		return ""
	}
	return *t.PartNo
}

// GetRemovable retrieves the value of the leaf Removable from the Component
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Removable is set, it can safely use t.GetRemovable()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Removable == nil'
// before retrieving the leaf's value.
func (t *Component) GetRemovable() bool {
	if t == nil || t.Removable == nil {
		return false
	}
	return *t.Removable
}

// GetSerialNo retrieves the value of the leaf SerialNo from the Component
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if SerialNo is set, it can safely use t.GetSerialNo()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.SerialNo == nil'
// before retrieving the leaf's value.
func (t *Component) GetSerialNo() string {
	if t == nil || t.SerialNo == nil {
		return ""
	}
	return *t.SerialNo
}

// GetSoftwareVersion retrieves the value of the leaf SoftwareVersion from the Component
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if SoftwareVersion is set, it can safely use t.GetSoftwareVersion()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.SoftwareVersion == nil'
// before retrieving the leaf's value.
func (t *Component) GetSoftwareVersion() string {
	if t == nil || t.SoftwareVersion == nil {
		return ""
	}
	return *t.SoftwareVersion
}

// GetType retrieves the value of the leaf Type from the Component
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Type is set, it can safely use t.GetType()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Type == nil'
// before retrieving the leaf's value.
func (t *Component) GetType() Component_Type_Union {
	if t == nil || t.Type == nil {
		return nil
	}
	return t.Type
}

// GetUsedPower retrieves the value of the leaf UsedPower from the Component
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if UsedPower is set, it can safely use t.GetUsedPower()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.UsedPower == nil'
// before retrieving the leaf's value.
func (t *Component) GetUsedPower() uint32 {
	if t == nil || t.UsedPower == nil {
		return 0
	}
	return *t.UsedPower
}

// ΛListKeyMap returns the keys of the Component struct, which is a YANG list entry.
func (t *Component) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Component_Type_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-platform/components/component/state/type within the YANG schema.
type Component_Type_Union interface {
	Is_Component_Type_Union()
}

// Component_Type_Union_E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT is used when /openconfig-platform/components/component/state/type
// is to be set to a E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT value.
type Component_Type_Union_E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT struct {
	E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
}

// Is_Component_Type_Union ensures that Component_Type_Union_E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
// implements the Component_Type_Union interface.
func (*Component_Type_Union_E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT) Is_Component_Type_Union() {
}

// Component_Type_Union_E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT is used when /openconfig-platform/components/component/state/type
// is to be set to a E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT value.
type Component_Type_Union_E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT struct {
	E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT
}

// Is_Component_Type_Union ensures that Component_Type_Union_E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT
// implements the Component_Type_Union interface.
func (*Component_Type_Union_E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT) Is_Component_Type_Union() {
}

// To_Component_Type_Union takes an input interface{} and attempts to convert it to a struct
// which implements the Component_Type_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *Component) To_Component_Type_Union(i interface{}) (Component_Type_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT:
		return &Component_Type_Union_E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT{v}, nil
	case E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT:
		return &Component_Type_Union_E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to Component_Type_Union, unknown union type, got: %T, want any of [E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT, E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT]", i, i)
	}
}

// Component_Backplane represents the /openconfig-platform/components/component/backplane YANG schema element.
type Component_Backplane struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_Backplane implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Backplane) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Backplane) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Backplane"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Backplane) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Component_Chassis represents the /openconfig-platform/components/component/chassis YANG schema element.
type Component_Chassis struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_Chassis implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Chassis) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Chassis) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Chassis"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Chassis) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Component_Cpu represents the /openconfig-platform/components/component/cpu YANG schema element.
type Component_Cpu struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_Cpu implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Cpu) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Cpu) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Cpu"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Cpu) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Component_Fabric represents the /openconfig-platform/components/component/fabric YANG schema element.
type Component_Fabric struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_Fabric implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Fabric) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Fabric) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Fabric"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Fabric) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Component_Fan represents the /openconfig-platform/components/component/fan YANG schema element.
type Component_Fan struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_Fan implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Fan) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Fan) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Fan"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Fan) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Component_IntegratedCircuit represents the /openconfig-platform/components/component/integrated-circuit YANG schema element.
type Component_IntegratedCircuit struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_IntegratedCircuit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_IntegratedCircuit) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_IntegratedCircuit) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_IntegratedCircuit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_IntegratedCircuit) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Component_Memory represents the /openconfig-platform/components/component/state/memory YANG schema element.
type Component_Memory struct {
	ΛMetadata  []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Available  *uint64           `path:"available" module:"openconfig-platform"`
	ΛAvailable []ygot.Annotation `path:"@available" ygotAnnotation:"true"`
	Utilized   *uint64           `path:"utilized" module:"openconfig-platform"`
	ΛUtilized  []ygot.Annotation `path:"@utilized" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_Memory implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Memory) IsYANGGoStruct() {}

// GetAvailable retrieves the value of the leaf Available from the Component_Memory
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Available is set, it can safely use t.GetAvailable()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Available == nil'
// before retrieving the leaf's value.
func (t *Component_Memory) GetAvailable() uint64 {
	if t == nil || t.Available == nil {
		return 0
	}
	return *t.Available
}

// GetUtilized retrieves the value of the leaf Utilized from the Component_Memory
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Utilized is set, it can safely use t.GetUtilized()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Utilized == nil'
// before retrieving the leaf's value.
func (t *Component_Memory) GetUtilized() uint64 {
	if t == nil || t.Utilized == nil {
		return 0
	}
	return *t.Utilized
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Memory) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Memory"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Memory) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Component_Port represents the /openconfig-platform/components/component/port YANG schema element.
type Component_Port struct {
	ΛMetadata     []ygot.Annotation            `path:"@" ygotAnnotation:"true"`
	BreakoutMode  *Component_Port_BreakoutMode `path:"breakout-mode" module:"openconfig-platform-port"`
	ΛBreakoutMode []ygot.Annotation            `path:"@breakout-mode" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_Port implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Port) IsYANGGoStruct() {}

// GetOrCreateBreakoutMode retrieves the value of the BreakoutMode field
// or returns the existing field if it already exists.
func (t *Component_Port) GetOrCreateBreakoutMode() *Component_Port_BreakoutMode {
	if t.BreakoutMode != nil {
		return t.BreakoutMode
	}
	t.BreakoutMode = &Component_Port_BreakoutMode{}
	return t.BreakoutMode
}

// GetBreakoutMode returns the value of the BreakoutMode struct pointer
// from Component_Port. If the receiver or the field BreakoutMode is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component_Port) GetBreakoutMode() *Component_Port_BreakoutMode {
	if t != nil && t.BreakoutMode != nil {
		return t.BreakoutMode
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Port) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Port"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Port) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Component_Port_BreakoutMode represents the /openconfig-platform/components/component/port/breakout-mode YANG schema element.
type Component_Port_BreakoutMode struct {
	ΛMetadata     []ygot.Annotation                     `path:"@" ygotAnnotation:"true"`
	ChannelSpeed  E_OpenconfigIfEthernet_ETHERNET_SPEED `path:"config/channel-speed" module:"openconfig-platform-port"`
	ΛChannelSpeed []ygot.Annotation                     `path:"config/@channel-speed" ygotAnnotation:"true"`
	NumChannels   *uint8                                `path:"config/num-channels" module:"openconfig-platform-port"`
	ΛNumChannels  []ygot.Annotation                     `path:"config/@num-channels" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_Port_BreakoutMode implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Port_BreakoutMode) IsYANGGoStruct() {}

// GetChannelSpeed retrieves the value of the leaf ChannelSpeed from the Component_Port_BreakoutMode
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ChannelSpeed is set, it can safely use t.GetChannelSpeed()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ChannelSpeed == nil'
// before retrieving the leaf's value.
func (t *Component_Port_BreakoutMode) GetChannelSpeed() E_OpenconfigIfEthernet_ETHERNET_SPEED {
	if t == nil || t.ChannelSpeed == 0 {
		return 0
	}
	return t.ChannelSpeed
}

// GetNumChannels retrieves the value of the leaf NumChannels from the Component_Port_BreakoutMode
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if NumChannels is set, it can safely use t.GetNumChannels()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.NumChannels == nil'
// before retrieving the leaf's value.
func (t *Component_Port_BreakoutMode) GetNumChannels() uint8 {
	if t == nil || t.NumChannels == nil {
		return 0
	}
	return *t.NumChannels
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Port_BreakoutMode) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Port_BreakoutMode"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Port_BreakoutMode) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Component_PowerSupply represents the /openconfig-platform/components/component/power-supply YANG schema element.
type Component_PowerSupply struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_PowerSupply implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_PowerSupply) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_PowerSupply) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_PowerSupply"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_PowerSupply) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Component_Property represents the /openconfig-platform/components/component/properties/property YANG schema element.
type Component_Property struct {
	ΛMetadata     []ygot.Annotation              `path:"@" ygotAnnotation:"true"`
	Configurable  *bool                          `path:"state/configurable" module:"openconfig-platform"`
	ΛConfigurable []ygot.Annotation              `path:"state/@configurable" ygotAnnotation:"true"`
	Name          *string                        `path:"config/name|name" module:"openconfig-platform"`
	ΛName         []ygot.Annotation              `path:"config/@name|@name" ygotAnnotation:"true"`
	Value         Component_Property_Value_Union `path:"config/value" module:"openconfig-platform"`
	ΛValue        []ygot.Annotation              `path:"config/@value" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_Property implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Property) IsYANGGoStruct() {}

// GetConfigurable retrieves the value of the leaf Configurable from the Component_Property
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Configurable is set, it can safely use t.GetConfigurable()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Configurable == nil'
// before retrieving the leaf's value.
func (t *Component_Property) GetConfigurable() bool {
	if t == nil || t.Configurable == nil {
		return false
	}
	return *t.Configurable
}

// GetName retrieves the value of the leaf Name from the Component_Property
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Name is set, it can safely use t.GetName()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Name == nil'
// before retrieving the leaf's value.
func (t *Component_Property) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetValue retrieves the value of the leaf Value from the Component_Property
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Value is set, it can safely use t.GetValue()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Value == nil'
// before retrieving the leaf's value.
func (t *Component_Property) GetValue() Component_Property_Value_Union {
	if t == nil || t.Value == nil {
		return nil
	}
	return t.Value
}

// ΛListKeyMap returns the keys of the Component_Property struct, which is a YANG list entry.
func (t *Component_Property) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Property) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Property"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Property) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Component_Property_Value_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-platform/components/component/properties/property/config/value within the YANG schema.
type Component_Property_Value_Union interface {
	Is_Component_Property_Value_Union()
}

// Component_Property_Value_Union_Bool is used when /openconfig-platform/components/component/properties/property/config/value
// is to be set to a bool value.
type Component_Property_Value_Union_Bool struct {
	Bool bool
}

// Is_Component_Property_Value_Union ensures that Component_Property_Value_Union_Bool
// implements the Component_Property_Value_Union interface.
func (*Component_Property_Value_Union_Bool) Is_Component_Property_Value_Union() {}

// Component_Property_Value_Union_Float64 is used when /openconfig-platform/components/component/properties/property/config/value
// is to be set to a float64 value.
type Component_Property_Value_Union_Float64 struct {
	Float64 float64
}

// Is_Component_Property_Value_Union ensures that Component_Property_Value_Union_Float64
// implements the Component_Property_Value_Union interface.
func (*Component_Property_Value_Union_Float64) Is_Component_Property_Value_Union() {}

// Component_Property_Value_Union_Int64 is used when /openconfig-platform/components/component/properties/property/config/value
// is to be set to a int64 value.
type Component_Property_Value_Union_Int64 struct {
	Int64 int64
}

// Is_Component_Property_Value_Union ensures that Component_Property_Value_Union_Int64
// implements the Component_Property_Value_Union interface.
func (*Component_Property_Value_Union_Int64) Is_Component_Property_Value_Union() {}

// Component_Property_Value_Union_String is used when /openconfig-platform/components/component/properties/property/config/value
// is to be set to a string value.
type Component_Property_Value_Union_String struct {
	String string
}

// Is_Component_Property_Value_Union ensures that Component_Property_Value_Union_String
// implements the Component_Property_Value_Union interface.
func (*Component_Property_Value_Union_String) Is_Component_Property_Value_Union() {}

// Component_Property_Value_Union_Uint64 is used when /openconfig-platform/components/component/properties/property/config/value
// is to be set to a uint64 value.
type Component_Property_Value_Union_Uint64 struct {
	Uint64 uint64
}

// Is_Component_Property_Value_Union ensures that Component_Property_Value_Union_Uint64
// implements the Component_Property_Value_Union interface.
func (*Component_Property_Value_Union_Uint64) Is_Component_Property_Value_Union() {}

// To_Component_Property_Value_Union takes an input interface{} and attempts to convert it to a struct
// which implements the Component_Property_Value_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *Component_Property) To_Component_Property_Value_Union(i interface{}) (Component_Property_Value_Union, error) {
	switch v := i.(type) {
	case bool:
		return &Component_Property_Value_Union_Bool{v}, nil
	case float64:
		return &Component_Property_Value_Union_Float64{v}, nil
	case int64:
		return &Component_Property_Value_Union_Int64{v}, nil
	case string:
		return &Component_Property_Value_Union_String{v}, nil
	case uint64:
		return &Component_Property_Value_Union_Uint64{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to Component_Property_Value_Union, unknown union type, got: %T, want any of [bool, float64, int64, string, uint64]", i, i)
	}
}

// Component_Storage represents the /openconfig-platform/components/component/storage YANG schema element.
type Component_Storage struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_Storage implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Storage) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Storage) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Storage"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Storage) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Component_Subcomponent represents the /openconfig-platform/components/component/subcomponents/subcomponent YANG schema element.
type Component_Subcomponent struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Name      *string           `path:"config/name|name" module:"openconfig-platform"`
	ΛName     []ygot.Annotation `path:"config/@name|@name" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_Subcomponent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Subcomponent) IsYANGGoStruct() {}

// GetName retrieves the value of the leaf Name from the Component_Subcomponent
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Name is set, it can safely use t.GetName()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Name == nil'
// before retrieving the leaf's value.
func (t *Component_Subcomponent) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// ΛListKeyMap returns the keys of the Component_Subcomponent struct, which is a YANG list entry.
func (t *Component_Subcomponent) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Subcomponent) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Subcomponent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Subcomponent) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Component_Temperature represents the /openconfig-platform/components/component/state/temperature YANG schema element.
type Component_Temperature struct {
	ΛMetadata       []ygot.Annotation                                `path:"@" ygotAnnotation:"true"`
	AlarmSeverity   E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY `path:"alarm-severity" module:"openconfig-platform"`
	ΛAlarmSeverity  []ygot.Annotation                                `path:"@alarm-severity" ygotAnnotation:"true"`
	AlarmStatus     *bool                                            `path:"alarm-status" module:"openconfig-platform"`
	ΛAlarmStatus    []ygot.Annotation                                `path:"@alarm-status" ygotAnnotation:"true"`
	AlarmThreshold  *uint32                                          `path:"alarm-threshold" module:"openconfig-platform"`
	ΛAlarmThreshold []ygot.Annotation                                `path:"@alarm-threshold" ygotAnnotation:"true"`
	Avg             *float64                                         `path:"avg" module:"openconfig-platform"`
	ΛAvg            []ygot.Annotation                                `path:"@avg" ygotAnnotation:"true"`
	Instant         *float64                                         `path:"instant" module:"openconfig-platform"`
	ΛInstant        []ygot.Annotation                                `path:"@instant" ygotAnnotation:"true"`
	Interval        *uint64                                          `path:"interval" module:"openconfig-platform"`
	ΛInterval       []ygot.Annotation                                `path:"@interval" ygotAnnotation:"true"`
	Max             *float64                                         `path:"max" module:"openconfig-platform"`
	ΛMax            []ygot.Annotation                                `path:"@max" ygotAnnotation:"true"`
	MaxTime         *uint64                                          `path:"max-time" module:"openconfig-platform"`
	ΛMaxTime        []ygot.Annotation                                `path:"@max-time" ygotAnnotation:"true"`
	Min             *float64                                         `path:"min" module:"openconfig-platform"`
	ΛMin            []ygot.Annotation                                `path:"@min" ygotAnnotation:"true"`
	MinTime         *uint64                                          `path:"min-time" module:"openconfig-platform"`
	ΛMinTime        []ygot.Annotation                                `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_Temperature implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Temperature) IsYANGGoStruct() {}

// GetAlarmSeverity retrieves the value of the leaf AlarmSeverity from the Component_Temperature
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AlarmSeverity is set, it can safely use t.GetAlarmSeverity()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AlarmSeverity == nil'
// before retrieving the leaf's value.
func (t *Component_Temperature) GetAlarmSeverity() E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY {
	if t == nil || t.AlarmSeverity == 0 {
		return 0
	}
	return t.AlarmSeverity
}

// GetAlarmStatus retrieves the value of the leaf AlarmStatus from the Component_Temperature
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AlarmStatus is set, it can safely use t.GetAlarmStatus()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AlarmStatus == nil'
// before retrieving the leaf's value.
func (t *Component_Temperature) GetAlarmStatus() bool {
	if t == nil || t.AlarmStatus == nil {
		return false
	}
	return *t.AlarmStatus
}

// GetAlarmThreshold retrieves the value of the leaf AlarmThreshold from the Component_Temperature
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AlarmThreshold is set, it can safely use t.GetAlarmThreshold()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AlarmThreshold == nil'
// before retrieving the leaf's value.
func (t *Component_Temperature) GetAlarmThreshold() uint32 {
	if t == nil || t.AlarmThreshold == nil {
		return 0
	}
	return *t.AlarmThreshold
}

// GetAvg retrieves the value of the leaf Avg from the Component_Temperature
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Avg is set, it can safely use t.GetAvg()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Avg == nil'
// before retrieving the leaf's value.
func (t *Component_Temperature) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the Component_Temperature
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Instant is set, it can safely use t.GetInstant()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Instant == nil'
// before retrieving the leaf's value.
func (t *Component_Temperature) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the Component_Temperature
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Interval is set, it can safely use t.GetInterval()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Interval == nil'
// before retrieving the leaf's value.
func (t *Component_Temperature) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the Component_Temperature
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Max is set, it can safely use t.GetMax()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Max == nil'
// before retrieving the leaf's value.
func (t *Component_Temperature) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the Component_Temperature
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaxTime is set, it can safely use t.GetMaxTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaxTime == nil'
// before retrieving the leaf's value.
func (t *Component_Temperature) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the Component_Temperature
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Min is set, it can safely use t.GetMin()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Min == nil'
// before retrieving the leaf's value.
func (t *Component_Temperature) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the Component_Temperature
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MinTime is set, it can safely use t.GetMinTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MinTime == nil'
// before retrieving the leaf's value.
func (t *Component_Temperature) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Temperature) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Temperature"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Temperature) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Component_Transceiver represents the /openconfig-platform/components/component/transceiver YANG schema element.
type Component_Transceiver struct {
	ΛMetadata               []ygot.Annotation                                       `path:"@" ygotAnnotation:"true"`
	Channel                 map[uint16]*Component_Transceiver_Channel               `path:"physical-channels/channel" module:"openconfig-platform-transceiver"`
	ΛChannel                []ygot.Annotation                                       `path:"physical-channels/@channel" ygotAnnotation:"true"`
	ConnectorType           E_OpenconfigTransportTypes_FIBER_CONNECTOR_TYPE         `path:"state/connector-type" module:"openconfig-platform-transceiver"`
	ΛConnectorType          []ygot.Annotation                                       `path:"state/@connector-type" ygotAnnotation:"true"`
	DateCode                *string                                                 `path:"state/date-code" module:"openconfig-platform-transceiver"`
	ΛDateCode               []ygot.Annotation                                       `path:"state/@date-code" ygotAnnotation:"true"`
	Enabled                 *bool                                                   `path:"config/enabled" module:"openconfig-platform-transceiver"`
	ΛEnabled                []ygot.Annotation                                       `path:"config/@enabled" ygotAnnotation:"true"`
	EthernetPmd             E_OpenconfigTransportTypes_ETHERNET_PMD_TYPE            `path:"state/ethernet-pmd" module:"openconfig-platform-transceiver"`
	ΛEthernetPmd            []ygot.Annotation                                       `path:"state/@ethernet-pmd" ygotAnnotation:"true"`
	EthernetPmdPreconf      E_OpenconfigTransportTypes_ETHERNET_PMD_TYPE            `path:"config/ethernet-pmd-preconf" module:"openconfig-platform-transceiver"`
	ΛEthernetPmdPreconf     []ygot.Annotation                                       `path:"config/@ethernet-pmd-preconf" ygotAnnotation:"true"`
	FaultCondition          *bool                                                   `path:"state/fault-condition" module:"openconfig-platform-transceiver"`
	ΛFaultCondition         []ygot.Annotation                                       `path:"state/@fault-condition" ygotAnnotation:"true"`
	FecCorrectedBits        *uint64                                                 `path:"state/fec-corrected-bits" module:"openconfig-platform-transceiver"`
	ΛFecCorrectedBits       []ygot.Annotation                                       `path:"state/@fec-corrected-bits" ygotAnnotation:"true"`
	FecCorrectedBytes       *uint64                                                 `path:"state/fec-corrected-bytes" module:"openconfig-platform-transceiver"`
	ΛFecCorrectedBytes      []ygot.Annotation                                       `path:"state/@fec-corrected-bytes" ygotAnnotation:"true"`
	FecMode                 E_OpenconfigPlatformTypes_FEC_MODE_TYPE                 `path:"config/fec-mode" module:"openconfig-platform-transceiver"`
	ΛFecMode                []ygot.Annotation                                       `path:"config/@fec-mode" ygotAnnotation:"true"`
	FecStatus               E_OpenconfigPlatformTypes_FEC_STATUS_TYPE               `path:"state/fec-status" module:"openconfig-platform-transceiver"`
	ΛFecStatus              []ygot.Annotation                                       `path:"state/@fec-status" ygotAnnotation:"true"`
	FecUncorrectableBlocks  *uint64                                                 `path:"state/fec-uncorrectable-blocks" module:"openconfig-platform-transceiver"`
	ΛFecUncorrectableBlocks []ygot.Annotation                                       `path:"state/@fec-uncorrectable-blocks" ygotAnnotation:"true"`
	FecUncorrectableWords   *uint64                                                 `path:"state/fec-uncorrectable-words" module:"openconfig-platform-transceiver"`
	ΛFecUncorrectableWords  []ygot.Annotation                                       `path:"state/@fec-uncorrectable-words" ygotAnnotation:"true"`
	FormFactor              E_OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE `path:"state/form-factor" module:"openconfig-platform-transceiver"`
	ΛFormFactor             []ygot.Annotation                                       `path:"state/@form-factor" ygotAnnotation:"true"`
	FormFactorPreconf       E_OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE `path:"config/form-factor-preconf" module:"openconfig-platform-transceiver"`
	ΛFormFactorPreconf      []ygot.Annotation                                       `path:"config/@form-factor-preconf" ygotAnnotation:"true"`
	InputPower              *Component_Transceiver_InputPower                       `path:"state/input-power" module:"openconfig-platform-transceiver"`
	ΛInputPower             []ygot.Annotation                                       `path:"state/@input-power" ygotAnnotation:"true"`
	LaserBiasCurrent        *Component_Transceiver_LaserBiasCurrent                 `path:"state/laser-bias-current" module:"openconfig-platform-transceiver"`
	ΛLaserBiasCurrent       []ygot.Annotation                                       `path:"state/@laser-bias-current" ygotAnnotation:"true"`
	OtnComplianceCode       E_OpenconfigTransportTypes_OTN_APPLICATION_CODE         `path:"state/otn-compliance-code" module:"openconfig-platform-transceiver"`
	ΛOtnComplianceCode      []ygot.Annotation                                       `path:"state/@otn-compliance-code" ygotAnnotation:"true"`
	OutputPower             *Component_Transceiver_OutputPower                      `path:"state/output-power" module:"openconfig-platform-transceiver"`
	ΛOutputPower            []ygot.Annotation                                       `path:"state/@output-power" ygotAnnotation:"true"`
	PostFecBer              *Component_Transceiver_PostFecBer                       `path:"state/post-fec-ber" module:"openconfig-platform-transceiver"`
	ΛPostFecBer             []ygot.Annotation                                       `path:"state/@post-fec-ber" ygotAnnotation:"true"`
	PreFecBer               *Component_Transceiver_PreFecBer                        `path:"state/pre-fec-ber" module:"openconfig-platform-transceiver"`
	ΛPreFecBer              []ygot.Annotation                                       `path:"state/@pre-fec-ber" ygotAnnotation:"true"`
	Present                 E_OpenconfigPlatformTransceiver_Transceiver_Present     `path:"state/present" module:"openconfig-platform-transceiver"`
	ΛPresent                []ygot.Annotation                                       `path:"state/@present" ygotAnnotation:"true"`
	SerialNo                *string                                                 `path:"state/serial-no" module:"openconfig-platform-transceiver"`
	ΛSerialNo               []ygot.Annotation                                       `path:"state/@serial-no" ygotAnnotation:"true"`
	SonetSdhComplianceCode  E_OpenconfigTransportTypes_SONET_APPLICATION_CODE       `path:"state/sonet-sdh-compliance-code" module:"openconfig-platform-transceiver"`
	ΛSonetSdhComplianceCode []ygot.Annotation                                       `path:"state/@sonet-sdh-compliance-code" ygotAnnotation:"true"`
	Vendor                  *string                                                 `path:"state/vendor" module:"openconfig-platform-transceiver"`
	ΛVendor                 []ygot.Annotation                                       `path:"state/@vendor" ygotAnnotation:"true"`
	VendorPart              *string                                                 `path:"state/vendor-part" module:"openconfig-platform-transceiver"`
	ΛVendorPart             []ygot.Annotation                                       `path:"state/@vendor-part" ygotAnnotation:"true"`
	VendorRev               *string                                                 `path:"state/vendor-rev" module:"openconfig-platform-transceiver"`
	ΛVendorRev              []ygot.Annotation                                       `path:"state/@vendor-rev" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_Transceiver implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Transceiver) IsYANGGoStruct() {}

// NewChannel creates a new entry in the Channel list of the
// Component_Transceiver struct. The keys of the list are populated from the input
// arguments.
func (t *Component_Transceiver) NewChannel(Index uint16) (*Component_Transceiver_Channel, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Channel == nil {
		t.Channel = make(map[uint16]*Component_Transceiver_Channel)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Channel[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Channel", key)
	}

	t.Channel[key] = &Component_Transceiver_Channel{
		Index: &Index,
	}

	return t.Channel[key], nil
}

// RenameChannel renames an entry in the list Channel within
// the Component_Transceiver struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Component_Transceiver) RenameChannel(oldK, newK uint16) error {
	if _, ok := t.Channel[newK]; ok {
		return fmt.Errorf("key %v already exists in Channel", newK)
	}

	e, ok := t.Channel[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Channel", oldK)
	}
	e.Index = &newK

	t.Channel[newK] = e
	delete(t.Channel, oldK)
	return nil
}

// GetOrCreateChannel retrieves the value with the specified keys from
// the receiver Component_Transceiver. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Component_Transceiver) GetOrCreateChannel(Index uint16) *Component_Transceiver_Channel {

	key := Index

	if v, ok := t.Channel[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewChannel(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateChannel got unexpected error: %v", err))
	}
	return v
}

// GetChannel retrieves the value with the specified key from
// the Channel map field of Component_Transceiver. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Component_Transceiver) GetChannel(Index uint16) *Component_Transceiver_Channel {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.Channel[key]; ok {
		return lm
	}
	return nil
}

// AppendChannel appends the supplied Component_Transceiver_Channel struct to the
// list Channel of Component_Transceiver. If the key value(s) specified in
// the supplied Component_Transceiver_Channel already exist in the list, an error is
// returned.
func (t *Component_Transceiver) AppendChannel(v *Component_Transceiver_Channel) error {
	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Channel == nil {
		t.Channel = make(map[uint16]*Component_Transceiver_Channel)
	}

	if _, ok := t.Channel[key]; ok {
		return fmt.Errorf("duplicate key for list Channel %v", key)
	}

	t.Channel[key] = v
	return nil
}

// GetOrCreateInputPower retrieves the value of the InputPower field
// or returns the existing field if it already exists.
func (t *Component_Transceiver) GetOrCreateInputPower() *Component_Transceiver_InputPower {
	if t.InputPower != nil {
		return t.InputPower
	}
	t.InputPower = &Component_Transceiver_InputPower{}
	return t.InputPower
}

// GetOrCreateLaserBiasCurrent retrieves the value of the LaserBiasCurrent field
// or returns the existing field if it already exists.
func (t *Component_Transceiver) GetOrCreateLaserBiasCurrent() *Component_Transceiver_LaserBiasCurrent {
	if t.LaserBiasCurrent != nil {
		return t.LaserBiasCurrent
	}
	t.LaserBiasCurrent = &Component_Transceiver_LaserBiasCurrent{}
	return t.LaserBiasCurrent
}

// GetOrCreateOutputPower retrieves the value of the OutputPower field
// or returns the existing field if it already exists.
func (t *Component_Transceiver) GetOrCreateOutputPower() *Component_Transceiver_OutputPower {
	if t.OutputPower != nil {
		return t.OutputPower
	}
	t.OutputPower = &Component_Transceiver_OutputPower{}
	return t.OutputPower
}

// GetOrCreatePostFecBer retrieves the value of the PostFecBer field
// or returns the existing field if it already exists.
func (t *Component_Transceiver) GetOrCreatePostFecBer() *Component_Transceiver_PostFecBer {
	if t.PostFecBer != nil {
		return t.PostFecBer
	}
	t.PostFecBer = &Component_Transceiver_PostFecBer{}
	return t.PostFecBer
}

// GetOrCreatePreFecBer retrieves the value of the PreFecBer field
// or returns the existing field if it already exists.
func (t *Component_Transceiver) GetOrCreatePreFecBer() *Component_Transceiver_PreFecBer {
	if t.PreFecBer != nil {
		return t.PreFecBer
	}
	t.PreFecBer = &Component_Transceiver_PreFecBer{}
	return t.PreFecBer
}

// GetInputPower returns the value of the InputPower struct pointer
// from Component_Transceiver. If the receiver or the field InputPower is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component_Transceiver) GetInputPower() *Component_Transceiver_InputPower {
	if t != nil && t.InputPower != nil {
		return t.InputPower
	}
	return nil
}

// GetLaserBiasCurrent returns the value of the LaserBiasCurrent struct pointer
// from Component_Transceiver. If the receiver or the field LaserBiasCurrent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component_Transceiver) GetLaserBiasCurrent() *Component_Transceiver_LaserBiasCurrent {
	if t != nil && t.LaserBiasCurrent != nil {
		return t.LaserBiasCurrent
	}
	return nil
}

// GetOutputPower returns the value of the OutputPower struct pointer
// from Component_Transceiver. If the receiver or the field OutputPower is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component_Transceiver) GetOutputPower() *Component_Transceiver_OutputPower {
	if t != nil && t.OutputPower != nil {
		return t.OutputPower
	}
	return nil
}

// GetPostFecBer returns the value of the PostFecBer struct pointer
// from Component_Transceiver. If the receiver or the field PostFecBer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component_Transceiver) GetPostFecBer() *Component_Transceiver_PostFecBer {
	if t != nil && t.PostFecBer != nil {
		return t.PostFecBer
	}
	return nil
}

// GetPreFecBer returns the value of the PreFecBer struct pointer
// from Component_Transceiver. If the receiver or the field PreFecBer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component_Transceiver) GetPreFecBer() *Component_Transceiver_PreFecBer {
	if t != nil && t.PreFecBer != nil {
		return t.PreFecBer
	}
	return nil
}

// GetConnectorType retrieves the value of the leaf ConnectorType from the Component_Transceiver
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ConnectorType is set, it can safely use t.GetConnectorType()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ConnectorType == nil'
// before retrieving the leaf's value.
func (t *Component_Transceiver) GetConnectorType() E_OpenconfigTransportTypes_FIBER_CONNECTOR_TYPE {
	if t == nil || t.ConnectorType == 0 {
		return 0
	}
	return t.ConnectorType
}

// GetDateCode retrieves the value of the leaf DateCode from the Component_Transceiver
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if DateCode is set, it can safely use t.GetDateCode()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.DateCode == nil'
// before retrieving the leaf's value.
func (t *Component_Transceiver) GetDateCode() string {
	if t == nil || t.DateCode == nil {
		return ""
	}
	return *t.DateCode
}

// GetEnabled retrieves the value of the leaf Enabled from the Component_Transceiver
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Enabled is set, it can safely use t.GetEnabled()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Enabled == nil'
// before retrieving the leaf's value.
func (t *Component_Transceiver) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// GetEthernetPmd retrieves the value of the leaf EthernetPmd from the Component_Transceiver
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if EthernetPmd is set, it can safely use t.GetEthernetPmd()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.EthernetPmd == nil'
// before retrieving the leaf's value.
func (t *Component_Transceiver) GetEthernetPmd() E_OpenconfigTransportTypes_ETHERNET_PMD_TYPE {
	if t == nil || t.EthernetPmd == 0 {
		return 0
	}
	return t.EthernetPmd
}

// GetEthernetPmdPreconf retrieves the value of the leaf EthernetPmdPreconf from the Component_Transceiver
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if EthernetPmdPreconf is set, it can safely use t.GetEthernetPmdPreconf()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.EthernetPmdPreconf == nil'
// before retrieving the leaf's value.
func (t *Component_Transceiver) GetEthernetPmdPreconf() E_OpenconfigTransportTypes_ETHERNET_PMD_TYPE {
	if t == nil || t.EthernetPmdPreconf == 0 {
		return 0
	}
	return t.EthernetPmdPreconf
}

// GetFaultCondition retrieves the value of the leaf FaultCondition from the Component_Transceiver
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if FaultCondition is set, it can safely use t.GetFaultCondition()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.FaultCondition == nil'
// before retrieving the leaf's value.
func (t *Component_Transceiver) GetFaultCondition() bool {
	if t == nil || t.FaultCondition == nil {
		return false
	}
	return *t.FaultCondition
}

// GetFecCorrectedBits retrieves the value of the leaf FecCorrectedBits from the Component_Transceiver
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if FecCorrectedBits is set, it can safely use t.GetFecCorrectedBits()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.FecCorrectedBits == nil'
// before retrieving the leaf's value.
func (t *Component_Transceiver) GetFecCorrectedBits() uint64 {
	if t == nil || t.FecCorrectedBits == nil {
		return 0
	}
	return *t.FecCorrectedBits
}

// GetFecCorrectedBytes retrieves the value of the leaf FecCorrectedBytes from the Component_Transceiver
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if FecCorrectedBytes is set, it can safely use t.GetFecCorrectedBytes()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.FecCorrectedBytes == nil'
// before retrieving the leaf's value.
func (t *Component_Transceiver) GetFecCorrectedBytes() uint64 {
	if t == nil || t.FecCorrectedBytes == nil {
		return 0
	}
	return *t.FecCorrectedBytes
}

// GetFecMode retrieves the value of the leaf FecMode from the Component_Transceiver
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if FecMode is set, it can safely use t.GetFecMode()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.FecMode == nil'
// before retrieving the leaf's value.
func (t *Component_Transceiver) GetFecMode() E_OpenconfigPlatformTypes_FEC_MODE_TYPE {
	if t == nil || t.FecMode == 0 {
		return 0
	}
	return t.FecMode
}

// GetFecStatus retrieves the value of the leaf FecStatus from the Component_Transceiver
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if FecStatus is set, it can safely use t.GetFecStatus()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.FecStatus == nil'
// before retrieving the leaf's value.
func (t *Component_Transceiver) GetFecStatus() E_OpenconfigPlatformTypes_FEC_STATUS_TYPE {
	if t == nil || t.FecStatus == 0 {
		return 0
	}
	return t.FecStatus
}

// GetFecUncorrectableBlocks retrieves the value of the leaf FecUncorrectableBlocks from the Component_Transceiver
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if FecUncorrectableBlocks is set, it can safely use t.GetFecUncorrectableBlocks()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.FecUncorrectableBlocks == nil'
// before retrieving the leaf's value.
func (t *Component_Transceiver) GetFecUncorrectableBlocks() uint64 {
	if t == nil || t.FecUncorrectableBlocks == nil {
		return 0
	}
	return *t.FecUncorrectableBlocks
}

// GetFecUncorrectableWords retrieves the value of the leaf FecUncorrectableWords from the Component_Transceiver
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if FecUncorrectableWords is set, it can safely use t.GetFecUncorrectableWords()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.FecUncorrectableWords == nil'
// before retrieving the leaf's value.
func (t *Component_Transceiver) GetFecUncorrectableWords() uint64 {
	if t == nil || t.FecUncorrectableWords == nil {
		return 0
	}
	return *t.FecUncorrectableWords
}

// GetFormFactor retrieves the value of the leaf FormFactor from the Component_Transceiver
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if FormFactor is set, it can safely use t.GetFormFactor()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.FormFactor == nil'
// before retrieving the leaf's value.
func (t *Component_Transceiver) GetFormFactor() E_OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE {
	if t == nil || t.FormFactor == 0 {
		return 0
	}
	return t.FormFactor
}

// GetFormFactorPreconf retrieves the value of the leaf FormFactorPreconf from the Component_Transceiver
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if FormFactorPreconf is set, it can safely use t.GetFormFactorPreconf()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.FormFactorPreconf == nil'
// before retrieving the leaf's value.
func (t *Component_Transceiver) GetFormFactorPreconf() E_OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE {
	if t == nil || t.FormFactorPreconf == 0 {
		return 0
	}
	return t.FormFactorPreconf
}

// GetOtnComplianceCode retrieves the value of the leaf OtnComplianceCode from the Component_Transceiver
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OtnComplianceCode is set, it can safely use t.GetOtnComplianceCode()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OtnComplianceCode == nil'
// before retrieving the leaf's value.
func (t *Component_Transceiver) GetOtnComplianceCode() E_OpenconfigTransportTypes_OTN_APPLICATION_CODE {
	if t == nil || t.OtnComplianceCode == 0 {
		return 0
	}
	return t.OtnComplianceCode
}

// GetPresent retrieves the value of the leaf Present from the Component_Transceiver
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Present is set, it can safely use t.GetPresent()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Present == nil'
// before retrieving the leaf's value.
func (t *Component_Transceiver) GetPresent() E_OpenconfigPlatformTransceiver_Transceiver_Present {
	if t == nil || t.Present == 0 {
		return 0
	}
	return t.Present
}

// GetSerialNo retrieves the value of the leaf SerialNo from the Component_Transceiver
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if SerialNo is set, it can safely use t.GetSerialNo()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.SerialNo == nil'
// before retrieving the leaf's value.
func (t *Component_Transceiver) GetSerialNo() string {
	if t == nil || t.SerialNo == nil {
		return ""
	}
	return *t.SerialNo
}

// GetSonetSdhComplianceCode retrieves the value of the leaf SonetSdhComplianceCode from the Component_Transceiver
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if SonetSdhComplianceCode is set, it can safely use t.GetSonetSdhComplianceCode()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.SonetSdhComplianceCode == nil'
// before retrieving the leaf's value.
func (t *Component_Transceiver) GetSonetSdhComplianceCode() E_OpenconfigTransportTypes_SONET_APPLICATION_CODE {
	if t == nil || t.SonetSdhComplianceCode == 0 {
		return 0
	}
	return t.SonetSdhComplianceCode
}

// GetVendor retrieves the value of the leaf Vendor from the Component_Transceiver
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Vendor is set, it can safely use t.GetVendor()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Vendor == nil'
// before retrieving the leaf's value.
func (t *Component_Transceiver) GetVendor() string {
	if t == nil || t.Vendor == nil {
		return ""
	}
	return *t.Vendor
}

// GetVendorPart retrieves the value of the leaf VendorPart from the Component_Transceiver
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if VendorPart is set, it can safely use t.GetVendorPart()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.VendorPart == nil'
// before retrieving the leaf's value.
func (t *Component_Transceiver) GetVendorPart() string {
	if t == nil || t.VendorPart == nil {
		return ""
	}
	return *t.VendorPart
}

// GetVendorRev retrieves the value of the leaf VendorRev from the Component_Transceiver
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if VendorRev is set, it can safely use t.GetVendorRev()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.VendorRev == nil'
// before retrieving the leaf's value.
func (t *Component_Transceiver) GetVendorRev() string {
	if t == nil || t.VendorRev == nil {
		return ""
	}
	return *t.VendorRev
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Transceiver) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Transceiver"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Transceiver) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Component_Transceiver_Channel represents the /openconfig-platform/components/component/transceiver/physical-channels/channel YANG schema element.
type Component_Transceiver_Channel struct {
	ΛMetadata          []ygot.Annotation                               `path:"@" ygotAnnotation:"true"`
	Description        *string                                         `path:"config/description" module:"openconfig-platform-transceiver"`
	ΛDescription       []ygot.Annotation                               `path:"config/@description" ygotAnnotation:"true"`
	Index              *uint16                                         `path:"config/index|index" module:"openconfig-platform-transceiver"`
	ΛIndex             []ygot.Annotation                               `path:"config/@index|@index" ygotAnnotation:"true"`
	InputPower         *Component_Transceiver_Channel_InputPower       `path:"state/input-power" module:"openconfig-platform-transceiver"`
	ΛInputPower        []ygot.Annotation                               `path:"state/@input-power" ygotAnnotation:"true"`
	LaserBiasCurrent   *Component_Transceiver_Channel_LaserBiasCurrent `path:"state/laser-bias-current" module:"openconfig-platform-transceiver"`
	ΛLaserBiasCurrent  []ygot.Annotation                               `path:"state/@laser-bias-current" ygotAnnotation:"true"`
	OutputFrequency    *uint64                                         `path:"state/output-frequency" module:"openconfig-platform-transceiver"`
	ΛOutputFrequency   []ygot.Annotation                               `path:"state/@output-frequency" ygotAnnotation:"true"`
	OutputPower        *Component_Transceiver_Channel_OutputPower      `path:"state/output-power" module:"openconfig-platform-transceiver"`
	ΛOutputPower       []ygot.Annotation                               `path:"state/@output-power" ygotAnnotation:"true"`
	TargetOutputPower  *float64                                        `path:"config/target-output-power" module:"openconfig-platform-transceiver"`
	ΛTargetOutputPower []ygot.Annotation                               `path:"config/@target-output-power" ygotAnnotation:"true"`
	TxLaser            *bool                                           `path:"config/tx-laser" module:"openconfig-platform-transceiver"`
	ΛTxLaser           []ygot.Annotation                               `path:"config/@tx-laser" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_Transceiver_Channel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Transceiver_Channel) IsYANGGoStruct() {}

// GetOrCreateInputPower retrieves the value of the InputPower field
// or returns the existing field if it already exists.
func (t *Component_Transceiver_Channel) GetOrCreateInputPower() *Component_Transceiver_Channel_InputPower {
	if t.InputPower != nil {
		return t.InputPower
	}
	t.InputPower = &Component_Transceiver_Channel_InputPower{}
	return t.InputPower
}

// GetOrCreateLaserBiasCurrent retrieves the value of the LaserBiasCurrent field
// or returns the existing field if it already exists.
func (t *Component_Transceiver_Channel) GetOrCreateLaserBiasCurrent() *Component_Transceiver_Channel_LaserBiasCurrent {
	if t.LaserBiasCurrent != nil {
		return t.LaserBiasCurrent
	}
	t.LaserBiasCurrent = &Component_Transceiver_Channel_LaserBiasCurrent{}
	return t.LaserBiasCurrent
}

// GetOrCreateOutputPower retrieves the value of the OutputPower field
// or returns the existing field if it already exists.
func (t *Component_Transceiver_Channel) GetOrCreateOutputPower() *Component_Transceiver_Channel_OutputPower {
	if t.OutputPower != nil {
		return t.OutputPower
	}
	t.OutputPower = &Component_Transceiver_Channel_OutputPower{}
	return t.OutputPower
}

// GetInputPower returns the value of the InputPower struct pointer
// from Component_Transceiver_Channel. If the receiver or the field InputPower is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component_Transceiver_Channel) GetInputPower() *Component_Transceiver_Channel_InputPower {
	if t != nil && t.InputPower != nil {
		return t.InputPower
	}
	return nil
}

// GetLaserBiasCurrent returns the value of the LaserBiasCurrent struct pointer
// from Component_Transceiver_Channel. If the receiver or the field LaserBiasCurrent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component_Transceiver_Channel) GetLaserBiasCurrent() *Component_Transceiver_Channel_LaserBiasCurrent {
	if t != nil && t.LaserBiasCurrent != nil {
		return t.LaserBiasCurrent
	}
	return nil
}

// GetOutputPower returns the value of the OutputPower struct pointer
// from Component_Transceiver_Channel. If the receiver or the field OutputPower is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component_Transceiver_Channel) GetOutputPower() *Component_Transceiver_Channel_OutputPower {
	if t != nil && t.OutputPower != nil {
		return t.OutputPower
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the Component_Transceiver_Channel
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Description is set, it can safely use t.GetDescription()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Description == nil'
// before retrieving the leaf's value.
func (t *Component_Transceiver_Channel) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetIndex retrieves the value of the leaf Index from the Component_Transceiver_Channel
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Index is set, it can safely use t.GetIndex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Index == nil'
// before retrieving the leaf's value.
func (t *Component_Transceiver_Channel) GetIndex() uint16 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// GetOutputFrequency retrieves the value of the leaf OutputFrequency from the Component_Transceiver_Channel
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutputFrequency is set, it can safely use t.GetOutputFrequency()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutputFrequency == nil'
// before retrieving the leaf's value.
func (t *Component_Transceiver_Channel) GetOutputFrequency() uint64 {
	if t == nil || t.OutputFrequency == nil {
		return 0
	}
	return *t.OutputFrequency
}

// GetTargetOutputPower retrieves the value of the leaf TargetOutputPower from the Component_Transceiver_Channel
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if TargetOutputPower is set, it can safely use t.GetTargetOutputPower()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.TargetOutputPower == nil'
// before retrieving the leaf's value.
func (t *Component_Transceiver_Channel) GetTargetOutputPower() float64 {
	if t == nil || t.TargetOutputPower == nil {
		return 0.0
	}
	return *t.TargetOutputPower
}

// GetTxLaser retrieves the value of the leaf TxLaser from the Component_Transceiver_Channel
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if TxLaser is set, it can safely use t.GetTxLaser()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.TxLaser == nil'
// before retrieving the leaf's value.
func (t *Component_Transceiver_Channel) GetTxLaser() bool {
	if t == nil || t.TxLaser == nil {
		return false
	}
	return *t.TxLaser
}

// ΛListKeyMap returns the keys of the Component_Transceiver_Channel struct, which is a YANG list entry.
func (t *Component_Transceiver_Channel) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Transceiver_Channel) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Transceiver_Channel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Transceiver_Channel) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Component_Transceiver_Channel_InputPower represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/input-power YANG schema element.
type Component_Transceiver_Channel_InputPower struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-platform-transceiver"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-platform-transceiver"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-platform-transceiver"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-platform-transceiver"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-platform-transceiver"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-platform-transceiver"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-platform-transceiver"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_Transceiver_Channel_InputPower implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Transceiver_Channel_InputPower) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the Component_Transceiver_Channel_InputPower
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Avg is set, it can safely use t.GetAvg()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Avg == nil'
// before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_InputPower) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the Component_Transceiver_Channel_InputPower
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Instant is set, it can safely use t.GetInstant()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Instant == nil'
// before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_InputPower) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the Component_Transceiver_Channel_InputPower
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Interval is set, it can safely use t.GetInterval()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Interval == nil'
// before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_InputPower) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the Component_Transceiver_Channel_InputPower
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Max is set, it can safely use t.GetMax()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Max == nil'
// before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_InputPower) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the Component_Transceiver_Channel_InputPower
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaxTime is set, it can safely use t.GetMaxTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaxTime == nil'
// before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_InputPower) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the Component_Transceiver_Channel_InputPower
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Min is set, it can safely use t.GetMin()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Min == nil'
// before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_InputPower) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the Component_Transceiver_Channel_InputPower
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MinTime is set, it can safely use t.GetMinTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MinTime == nil'
// before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_InputPower) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Transceiver_Channel_InputPower) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Transceiver_Channel_InputPower"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Transceiver_Channel_InputPower) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Component_Transceiver_Channel_LaserBiasCurrent represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/laser-bias-current YANG schema element.
type Component_Transceiver_Channel_LaserBiasCurrent struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-platform-transceiver"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-platform-transceiver"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-platform-transceiver"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-platform-transceiver"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-platform-transceiver"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-platform-transceiver"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-platform-transceiver"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_Transceiver_Channel_LaserBiasCurrent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Transceiver_Channel_LaserBiasCurrent) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the Component_Transceiver_Channel_LaserBiasCurrent
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Avg is set, it can safely use t.GetAvg()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Avg == nil'
// before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_LaserBiasCurrent) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the Component_Transceiver_Channel_LaserBiasCurrent
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Instant is set, it can safely use t.GetInstant()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Instant == nil'
// before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_LaserBiasCurrent) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the Component_Transceiver_Channel_LaserBiasCurrent
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Interval is set, it can safely use t.GetInterval()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Interval == nil'
// before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_LaserBiasCurrent) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the Component_Transceiver_Channel_LaserBiasCurrent
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Max is set, it can safely use t.GetMax()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Max == nil'
// before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_LaserBiasCurrent) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the Component_Transceiver_Channel_LaserBiasCurrent
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaxTime is set, it can safely use t.GetMaxTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaxTime == nil'
// before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_LaserBiasCurrent) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the Component_Transceiver_Channel_LaserBiasCurrent
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Min is set, it can safely use t.GetMin()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Min == nil'
// before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_LaserBiasCurrent) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the Component_Transceiver_Channel_LaserBiasCurrent
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MinTime is set, it can safely use t.GetMinTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MinTime == nil'
// before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_LaserBiasCurrent) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Transceiver_Channel_LaserBiasCurrent) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Transceiver_Channel_LaserBiasCurrent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Transceiver_Channel_LaserBiasCurrent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Component_Transceiver_Channel_OutputPower represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/output-power YANG schema element.
type Component_Transceiver_Channel_OutputPower struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-platform-transceiver"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-platform-transceiver"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-platform-transceiver"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-platform-transceiver"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-platform-transceiver"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-platform-transceiver"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-platform-transceiver"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_Transceiver_Channel_OutputPower implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Transceiver_Channel_OutputPower) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the Component_Transceiver_Channel_OutputPower
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Avg is set, it can safely use t.GetAvg()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Avg == nil'
// before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_OutputPower) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the Component_Transceiver_Channel_OutputPower
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Instant is set, it can safely use t.GetInstant()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Instant == nil'
// before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_OutputPower) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the Component_Transceiver_Channel_OutputPower
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Interval is set, it can safely use t.GetInterval()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Interval == nil'
// before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_OutputPower) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the Component_Transceiver_Channel_OutputPower
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Max is set, it can safely use t.GetMax()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Max == nil'
// before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_OutputPower) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the Component_Transceiver_Channel_OutputPower
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaxTime is set, it can safely use t.GetMaxTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaxTime == nil'
// before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_OutputPower) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the Component_Transceiver_Channel_OutputPower
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Min is set, it can safely use t.GetMin()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Min == nil'
// before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_OutputPower) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the Component_Transceiver_Channel_OutputPower
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MinTime is set, it can safely use t.GetMinTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MinTime == nil'
// before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_OutputPower) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Transceiver_Channel_OutputPower) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Transceiver_Channel_OutputPower"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Transceiver_Channel_OutputPower) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Component_Transceiver_InputPower represents the /openconfig-platform/components/component/transceiver/state/input-power YANG schema element.
type Component_Transceiver_InputPower struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-platform-transceiver"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-platform-transceiver"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-platform-transceiver"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-platform-transceiver"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-platform-transceiver"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-platform-transceiver"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-platform-transceiver"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_Transceiver_InputPower implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Transceiver_InputPower) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the Component_Transceiver_InputPower
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Avg is set, it can safely use t.GetAvg()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Avg == nil'
// before retrieving the leaf's value.
func (t *Component_Transceiver_InputPower) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the Component_Transceiver_InputPower
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Instant is set, it can safely use t.GetInstant()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Instant == nil'
// before retrieving the leaf's value.
func (t *Component_Transceiver_InputPower) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the Component_Transceiver_InputPower
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Interval is set, it can safely use t.GetInterval()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Interval == nil'
// before retrieving the leaf's value.
func (t *Component_Transceiver_InputPower) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the Component_Transceiver_InputPower
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Max is set, it can safely use t.GetMax()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Max == nil'
// before retrieving the leaf's value.
func (t *Component_Transceiver_InputPower) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the Component_Transceiver_InputPower
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaxTime is set, it can safely use t.GetMaxTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaxTime == nil'
// before retrieving the leaf's value.
func (t *Component_Transceiver_InputPower) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the Component_Transceiver_InputPower
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Min is set, it can safely use t.GetMin()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Min == nil'
// before retrieving the leaf's value.
func (t *Component_Transceiver_InputPower) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the Component_Transceiver_InputPower
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MinTime is set, it can safely use t.GetMinTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MinTime == nil'
// before retrieving the leaf's value.
func (t *Component_Transceiver_InputPower) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Transceiver_InputPower) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Transceiver_InputPower"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Transceiver_InputPower) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Component_Transceiver_LaserBiasCurrent represents the /openconfig-platform/components/component/transceiver/state/laser-bias-current YANG schema element.
type Component_Transceiver_LaserBiasCurrent struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-platform-transceiver"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-platform-transceiver"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-platform-transceiver"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-platform-transceiver"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-platform-transceiver"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-platform-transceiver"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-platform-transceiver"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_Transceiver_LaserBiasCurrent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Transceiver_LaserBiasCurrent) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the Component_Transceiver_LaserBiasCurrent
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Avg is set, it can safely use t.GetAvg()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Avg == nil'
// before retrieving the leaf's value.
func (t *Component_Transceiver_LaserBiasCurrent) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the Component_Transceiver_LaserBiasCurrent
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Instant is set, it can safely use t.GetInstant()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Instant == nil'
// before retrieving the leaf's value.
func (t *Component_Transceiver_LaserBiasCurrent) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the Component_Transceiver_LaserBiasCurrent
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Interval is set, it can safely use t.GetInterval()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Interval == nil'
// before retrieving the leaf's value.
func (t *Component_Transceiver_LaserBiasCurrent) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the Component_Transceiver_LaserBiasCurrent
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Max is set, it can safely use t.GetMax()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Max == nil'
// before retrieving the leaf's value.
func (t *Component_Transceiver_LaserBiasCurrent) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the Component_Transceiver_LaserBiasCurrent
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaxTime is set, it can safely use t.GetMaxTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaxTime == nil'
// before retrieving the leaf's value.
func (t *Component_Transceiver_LaserBiasCurrent) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the Component_Transceiver_LaserBiasCurrent
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Min is set, it can safely use t.GetMin()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Min == nil'
// before retrieving the leaf's value.
func (t *Component_Transceiver_LaserBiasCurrent) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the Component_Transceiver_LaserBiasCurrent
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MinTime is set, it can safely use t.GetMinTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MinTime == nil'
// before retrieving the leaf's value.
func (t *Component_Transceiver_LaserBiasCurrent) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Transceiver_LaserBiasCurrent) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Transceiver_LaserBiasCurrent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Transceiver_LaserBiasCurrent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Component_Transceiver_OutputPower represents the /openconfig-platform/components/component/transceiver/state/output-power YANG schema element.
type Component_Transceiver_OutputPower struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-platform-transceiver"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-platform-transceiver"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-platform-transceiver"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-platform-transceiver"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-platform-transceiver"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-platform-transceiver"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-platform-transceiver"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_Transceiver_OutputPower implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Transceiver_OutputPower) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the Component_Transceiver_OutputPower
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Avg is set, it can safely use t.GetAvg()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Avg == nil'
// before retrieving the leaf's value.
func (t *Component_Transceiver_OutputPower) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the Component_Transceiver_OutputPower
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Instant is set, it can safely use t.GetInstant()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Instant == nil'
// before retrieving the leaf's value.
func (t *Component_Transceiver_OutputPower) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the Component_Transceiver_OutputPower
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Interval is set, it can safely use t.GetInterval()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Interval == nil'
// before retrieving the leaf's value.
func (t *Component_Transceiver_OutputPower) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the Component_Transceiver_OutputPower
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Max is set, it can safely use t.GetMax()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Max == nil'
// before retrieving the leaf's value.
func (t *Component_Transceiver_OutputPower) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the Component_Transceiver_OutputPower
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaxTime is set, it can safely use t.GetMaxTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaxTime == nil'
// before retrieving the leaf's value.
func (t *Component_Transceiver_OutputPower) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the Component_Transceiver_OutputPower
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Min is set, it can safely use t.GetMin()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Min == nil'
// before retrieving the leaf's value.
func (t *Component_Transceiver_OutputPower) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the Component_Transceiver_OutputPower
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MinTime is set, it can safely use t.GetMinTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MinTime == nil'
// before retrieving the leaf's value.
func (t *Component_Transceiver_OutputPower) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Transceiver_OutputPower) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Transceiver_OutputPower"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Transceiver_OutputPower) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Component_Transceiver_PostFecBer represents the /openconfig-platform/components/component/transceiver/state/post-fec-ber YANG schema element.
type Component_Transceiver_PostFecBer struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-platform-transceiver"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-platform-transceiver"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-platform-transceiver"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-platform-transceiver"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-platform-transceiver"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-platform-transceiver"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-platform-transceiver"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_Transceiver_PostFecBer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Transceiver_PostFecBer) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the Component_Transceiver_PostFecBer
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Avg is set, it can safely use t.GetAvg()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Avg == nil'
// before retrieving the leaf's value.
func (t *Component_Transceiver_PostFecBer) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the Component_Transceiver_PostFecBer
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Instant is set, it can safely use t.GetInstant()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Instant == nil'
// before retrieving the leaf's value.
func (t *Component_Transceiver_PostFecBer) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the Component_Transceiver_PostFecBer
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Interval is set, it can safely use t.GetInterval()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Interval == nil'
// before retrieving the leaf's value.
func (t *Component_Transceiver_PostFecBer) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the Component_Transceiver_PostFecBer
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Max is set, it can safely use t.GetMax()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Max == nil'
// before retrieving the leaf's value.
func (t *Component_Transceiver_PostFecBer) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the Component_Transceiver_PostFecBer
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaxTime is set, it can safely use t.GetMaxTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaxTime == nil'
// before retrieving the leaf's value.
func (t *Component_Transceiver_PostFecBer) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the Component_Transceiver_PostFecBer
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Min is set, it can safely use t.GetMin()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Min == nil'
// before retrieving the leaf's value.
func (t *Component_Transceiver_PostFecBer) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the Component_Transceiver_PostFecBer
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MinTime is set, it can safely use t.GetMinTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MinTime == nil'
// before retrieving the leaf's value.
func (t *Component_Transceiver_PostFecBer) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Transceiver_PostFecBer) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Transceiver_PostFecBer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Transceiver_PostFecBer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Component_Transceiver_PreFecBer represents the /openconfig-platform/components/component/transceiver/state/pre-fec-ber YANG schema element.
type Component_Transceiver_PreFecBer struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-platform-transceiver"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-platform-transceiver"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-platform-transceiver"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-platform-transceiver"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-platform-transceiver"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-platform-transceiver"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-platform-transceiver"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_Transceiver_PreFecBer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Transceiver_PreFecBer) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the Component_Transceiver_PreFecBer
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Avg is set, it can safely use t.GetAvg()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Avg == nil'
// before retrieving the leaf's value.
func (t *Component_Transceiver_PreFecBer) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the Component_Transceiver_PreFecBer
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Instant is set, it can safely use t.GetInstant()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Instant == nil'
// before retrieving the leaf's value.
func (t *Component_Transceiver_PreFecBer) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the Component_Transceiver_PreFecBer
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Interval is set, it can safely use t.GetInterval()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Interval == nil'
// before retrieving the leaf's value.
func (t *Component_Transceiver_PreFecBer) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the Component_Transceiver_PreFecBer
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Max is set, it can safely use t.GetMax()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Max == nil'
// before retrieving the leaf's value.
func (t *Component_Transceiver_PreFecBer) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the Component_Transceiver_PreFecBer
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaxTime is set, it can safely use t.GetMaxTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaxTime == nil'
// before retrieving the leaf's value.
func (t *Component_Transceiver_PreFecBer) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the Component_Transceiver_PreFecBer
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Min is set, it can safely use t.GetMin()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Min == nil'
// before retrieving the leaf's value.
func (t *Component_Transceiver_PreFecBer) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the Component_Transceiver_PreFecBer
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MinTime is set, it can safely use t.GetMinTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MinTime == nil'
// before retrieving the leaf's value.
func (t *Component_Transceiver_PreFecBer) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Transceiver_PreFecBer) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Transceiver_PreFecBer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Transceiver_PreFecBer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Device represents the /device YANG schema element.
type Device struct {
	ΛMetadata  []ygot.Annotation     `path:"@" ygotAnnotation:"true"`
	Component  map[string]*Component `path:"components/component" module:"openconfig-platform"`
	ΛComponent []ygot.Annotation     `path:"components/@component" ygotAnnotation:"true"`
	Interface  map[string]*Interface `path:"interfaces/interface" module:"openconfig-interfaces"`
	ΛInterface []ygot.Annotation     `path:"interfaces/@interface" ygotAnnotation:"true"`
	Lacp       *Lacp                 `path:"lacp" module:"openconfig-lacp"`
	ΛLacp      []ygot.Annotation     `path:"@lacp" ygotAnnotation:"true"`
	Lldp       *Lldp                 `path:"lldp" module:"openconfig-lldp"`
	ΛLldp      []ygot.Annotation     `path:"@lldp" ygotAnnotation:"true"`
	Stp        *Stp                  `path:"stp" module:"openconfig-spanning-tree"`
	ΛStp       []ygot.Annotation     `path:"@stp" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Device implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Device) IsYANGGoStruct() {}

// NewComponent creates a new entry in the Component list of the
// Device struct. The keys of the list are populated from the input
// arguments.
func (t *Device) NewComponent(Name string) (*Component, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Component == nil {
		t.Component = make(map[string]*Component)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Component[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Component", key)
	}

	t.Component[key] = &Component{
		Name: &Name,
	}

	return t.Component[key], nil
}

// RenameComponent renames an entry in the list Component within
// the Device struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Device) RenameComponent(oldK, newK string) error {
	if _, ok := t.Component[newK]; ok {
		return fmt.Errorf("key %v already exists in Component", newK)
	}

	e, ok := t.Component[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Component", oldK)
	}
	e.Name = &newK

	t.Component[newK] = e
	delete(t.Component, oldK)
	return nil
}

// GetOrCreateComponent retrieves the value with the specified keys from
// the receiver Device. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Device) GetOrCreateComponent(Name string) *Component {

	key := Name

	if v, ok := t.Component[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewComponent(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateComponent got unexpected error: %v", err))
	}
	return v
}

// GetComponent retrieves the value with the specified key from
// the Component map field of Device. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Device) GetComponent(Name string) *Component {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Component[key]; ok {
		return lm
	}
	return nil
}

// AppendComponent appends the supplied Component struct to the
// list Component of Device. If the key value(s) specified in
// the supplied Component already exist in the list, an error is
// returned.
func (t *Device) AppendComponent(v *Component) error {
	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Component == nil {
		t.Component = make(map[string]*Component)
	}

	if _, ok := t.Component[key]; ok {
		return fmt.Errorf("duplicate key for list Component %v", key)
	}

	t.Component[key] = v
	return nil
}

// NewInterface creates a new entry in the Interface list of the
// Device struct. The keys of the list are populated from the input
// arguments.
func (t *Device) NewInterface(Name string) (*Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*Interface)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &Interface{
		Name: &Name,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the Device struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Device) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.Name = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver Device. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Device) GetOrCreateInterface(Name string) *Interface {

	key := Name

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of Device. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Device) GetInterface(Name string) *Interface {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// AppendInterface appends the supplied Interface struct to the
// list Interface of Device. If the key value(s) specified in
// the supplied Interface already exist in the list, an error is
// returned.
func (t *Device) AppendInterface(v *Interface) error {
	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// GetOrCreateLacp retrieves the value of the Lacp field
// or returns the existing field if it already exists.
func (t *Device) GetOrCreateLacp() *Lacp {
	if t.Lacp != nil {
		return t.Lacp
	}
	t.Lacp = &Lacp{}
	return t.Lacp
}

// GetOrCreateLldp retrieves the value of the Lldp field
// or returns the existing field if it already exists.
func (t *Device) GetOrCreateLldp() *Lldp {
	if t.Lldp != nil {
		return t.Lldp
	}
	t.Lldp = &Lldp{}
	return t.Lldp
}

// GetOrCreateStp retrieves the value of the Stp field
// or returns the existing field if it already exists.
func (t *Device) GetOrCreateStp() *Stp {
	if t.Stp != nil {
		return t.Stp
	}
	t.Stp = &Stp{}
	return t.Stp
}

// GetLacp returns the value of the Lacp struct pointer
// from Device. If the receiver or the field Lacp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Device) GetLacp() *Lacp {
	if t != nil && t.Lacp != nil {
		return t.Lacp
	}
	return nil
}

// GetLldp returns the value of the Lldp struct pointer
// from Device. If the receiver or the field Lldp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Device) GetLldp() *Lldp {
	if t != nil && t.Lldp != nil {
		return t.Lldp
	}
	return nil
}

// GetStp returns the value of the Stp struct pointer
// from Device. If the receiver or the field Stp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Device) GetStp() *Stp {
	if t != nil && t.Stp != nil {
		return t.Stp
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Device) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Device"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Device) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Interface represents the /openconfig-interfaces/interfaces/interface YANG schema element.
type Interface struct {
	ΛMetadata        []ygot.Annotation                            `path:"@" ygotAnnotation:"true"`
	AdminStatus      E_OpenconfigInterfaces_Interface_AdminStatus `path:"state/admin-status" module:"openconfig-interfaces"`
	ΛAdminStatus     []ygot.Annotation                            `path:"state/@admin-status" ygotAnnotation:"true"`
	Aggregation      *Interface_Aggregation                       `path:"aggregation" module:"openconfig-if-aggregate"`
	ΛAggregation     []ygot.Annotation                            `path:"@aggregation" ygotAnnotation:"true"`
	Counters         *Interface_Counters                          `path:"state/counters" module:"openconfig-interfaces"`
	ΛCounters        []ygot.Annotation                            `path:"state/@counters" ygotAnnotation:"true"`
	Description      *string                                      `path:"config/description" module:"openconfig-interfaces"`
	ΛDescription     []ygot.Annotation                            `path:"config/@description" ygotAnnotation:"true"`
	Enabled          *bool                                        `path:"config/enabled" module:"openconfig-interfaces"`
	ΛEnabled         []ygot.Annotation                            `path:"config/@enabled" ygotAnnotation:"true"`
	Ethernet         *Interface_Ethernet                          `path:"ethernet" module:"openconfig-if-ethernet"`
	ΛEthernet        []ygot.Annotation                            `path:"@ethernet" ygotAnnotation:"true"`
	HardwarePort     *string                                      `path:"state/hardware-port" module:"openconfig-platform-port"`
	ΛHardwarePort    []ygot.Annotation                            `path:"state/@hardware-port" ygotAnnotation:"true"`
	HoldTime         *Interface_HoldTime                          `path:"hold-time" module:"openconfig-interfaces"`
	ΛHoldTime        []ygot.Annotation                            `path:"@hold-time" ygotAnnotation:"true"`
	Ifindex          *uint32                                      `path:"state/ifindex" module:"openconfig-interfaces"`
	ΛIfindex         []ygot.Annotation                            `path:"state/@ifindex" ygotAnnotation:"true"`
	LastChange       *uint64                                      `path:"state/last-change" module:"openconfig-interfaces"`
	ΛLastChange      []ygot.Annotation                            `path:"state/@last-change" ygotAnnotation:"true"`
	Logical          *bool                                        `path:"state/logical" module:"openconfig-interfaces"`
	ΛLogical         []ygot.Annotation                            `path:"state/@logical" ygotAnnotation:"true"`
	LoopbackMode     *bool                                        `path:"config/loopback-mode" module:"openconfig-interfaces"`
	ΛLoopbackMode    []ygot.Annotation                            `path:"config/@loopback-mode" ygotAnnotation:"true"`
	Mtu              *uint16                                      `path:"config/mtu" module:"openconfig-interfaces"`
	ΛMtu             []ygot.Annotation                            `path:"config/@mtu" ygotAnnotation:"true"`
	Name             *string                                      `path:"config/name|name" module:"openconfig-interfaces"`
	ΛName            []ygot.Annotation                            `path:"config/@name|@name" ygotAnnotation:"true"`
	OperStatus       E_OpenconfigInterfaces_Interface_OperStatus  `path:"state/oper-status" module:"openconfig-interfaces"`
	ΛOperStatus      []ygot.Annotation                            `path:"state/@oper-status" ygotAnnotation:"true"`
	PhysicalChannel  []uint16                                     `path:"state/physical-channel" module:"openconfig-platform-transceiver"`
	ΛPhysicalChannel []ygot.Annotation                            `path:"state/@physical-channel" ygotAnnotation:"true"`
	RoutedVlan       *Interface_RoutedVlan                        `path:"routed-vlan" module:"openconfig-vlan"`
	ΛRoutedVlan      []ygot.Annotation                            `path:"@routed-vlan" ygotAnnotation:"true"`
	Subinterface     map[uint32]*Interface_Subinterface           `path:"subinterfaces/subinterface" module:"openconfig-interfaces"`
	ΛSubinterface    []ygot.Annotation                            `path:"subinterfaces/@subinterface" ygotAnnotation:"true"`
	Tpid             E_OpenconfigVlanTypes_TPID_TYPES             `path:"config/tpid" module:"openconfig-vlan"`
	ΛTpid            []ygot.Annotation                            `path:"config/@tpid" ygotAnnotation:"true"`
	Transceiver      *string                                      `path:"state/transceiver" module:"openconfig-platform-transceiver"`
	ΛTransceiver     []ygot.Annotation                            `path:"state/@transceiver" ygotAnnotation:"true"`
	Type             E_IETFInterfaces_InterfaceType               `path:"config/type" module:"openconfig-interfaces"`
	ΛType            []ygot.Annotation                            `path:"config/@type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface) IsYANGGoStruct() {}

// NewSubinterface creates a new entry in the Subinterface list of the
// Interface struct. The keys of the list are populated from the input
// arguments.
func (t *Interface) NewSubinterface(Index uint32) (*Interface_Subinterface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Subinterface == nil {
		t.Subinterface = make(map[uint32]*Interface_Subinterface)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Subinterface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Subinterface", key)
	}

	t.Subinterface[key] = &Interface_Subinterface{
		Index: &Index,
	}

	return t.Subinterface[key], nil
}

// RenameSubinterface renames an entry in the list Subinterface within
// the Interface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Interface) RenameSubinterface(oldK, newK uint32) error {
	if _, ok := t.Subinterface[newK]; ok {
		return fmt.Errorf("key %v already exists in Subinterface", newK)
	}

	e, ok := t.Subinterface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Subinterface", oldK)
	}
	e.Index = &newK

	t.Subinterface[newK] = e
	delete(t.Subinterface, oldK)
	return nil
}

// GetOrCreateSubinterface retrieves the value with the specified keys from
// the receiver Interface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Interface) GetOrCreateSubinterface(Index uint32) *Interface_Subinterface {

	key := Index

	if v, ok := t.Subinterface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSubinterface(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSubinterface got unexpected error: %v", err))
	}
	return v
}

// GetSubinterface retrieves the value with the specified key from
// the Subinterface map field of Interface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Interface) GetSubinterface(Index uint32) *Interface_Subinterface {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.Subinterface[key]; ok {
		return lm
	}
	return nil
}

// AppendSubinterface appends the supplied Interface_Subinterface struct to the
// list Subinterface of Interface. If the key value(s) specified in
// the supplied Interface_Subinterface already exist in the list, an error is
// returned.
func (t *Interface) AppendSubinterface(v *Interface_Subinterface) error {
	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Subinterface == nil {
		t.Subinterface = make(map[uint32]*Interface_Subinterface)
	}

	if _, ok := t.Subinterface[key]; ok {
		return fmt.Errorf("duplicate key for list Subinterface %v", key)
	}

	t.Subinterface[key] = v
	return nil
}

// GetOrCreateAggregation retrieves the value of the Aggregation field
// or returns the existing field if it already exists.
func (t *Interface) GetOrCreateAggregation() *Interface_Aggregation {
	if t.Aggregation != nil {
		return t.Aggregation
	}
	t.Aggregation = &Interface_Aggregation{}
	return t.Aggregation
}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *Interface) GetOrCreateCounters() *Interface_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &Interface_Counters{}
	return t.Counters
}

// GetOrCreateEthernet retrieves the value of the Ethernet field
// or returns the existing field if it already exists.
func (t *Interface) GetOrCreateEthernet() *Interface_Ethernet {
	if t.Ethernet != nil {
		return t.Ethernet
	}
	t.Ethernet = &Interface_Ethernet{}
	return t.Ethernet
}

// GetOrCreateHoldTime retrieves the value of the HoldTime field
// or returns the existing field if it already exists.
func (t *Interface) GetOrCreateHoldTime() *Interface_HoldTime {
	if t.HoldTime != nil {
		return t.HoldTime
	}
	t.HoldTime = &Interface_HoldTime{}
	return t.HoldTime
}

// GetOrCreateRoutedVlan retrieves the value of the RoutedVlan field
// or returns the existing field if it already exists.
func (t *Interface) GetOrCreateRoutedVlan() *Interface_RoutedVlan {
	if t.RoutedVlan != nil {
		return t.RoutedVlan
	}
	t.RoutedVlan = &Interface_RoutedVlan{}
	return t.RoutedVlan
}

// GetAggregation returns the value of the Aggregation struct pointer
// from Interface. If the receiver or the field Aggregation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface) GetAggregation() *Interface_Aggregation {
	if t != nil && t.Aggregation != nil {
		return t.Aggregation
	}
	return nil
}

// GetCounters returns the value of the Counters struct pointer
// from Interface. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface) GetCounters() *Interface_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetEthernet returns the value of the Ethernet struct pointer
// from Interface. If the receiver or the field Ethernet is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface) GetEthernet() *Interface_Ethernet {
	if t != nil && t.Ethernet != nil {
		return t.Ethernet
	}
	return nil
}

// GetHoldTime returns the value of the HoldTime struct pointer
// from Interface. If the receiver or the field HoldTime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface) GetHoldTime() *Interface_HoldTime {
	if t != nil && t.HoldTime != nil {
		return t.HoldTime
	}
	return nil
}

// GetRoutedVlan returns the value of the RoutedVlan struct pointer
// from Interface. If the receiver or the field RoutedVlan is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface) GetRoutedVlan() *Interface_RoutedVlan {
	if t != nil && t.RoutedVlan != nil {
		return t.RoutedVlan
	}
	return nil
}

// GetAdminStatus retrieves the value of the leaf AdminStatus from the Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AdminStatus is set, it can safely use t.GetAdminStatus()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AdminStatus == nil'
// before retrieving the leaf's value.
func (t *Interface) GetAdminStatus() E_OpenconfigInterfaces_Interface_AdminStatus {
	if t == nil || t.AdminStatus == 0 {
		return 0
	}
	return t.AdminStatus
}

// GetDescription retrieves the value of the leaf Description from the Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Description is set, it can safely use t.GetDescription()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Description == nil'
// before retrieving the leaf's value.
func (t *Interface) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEnabled retrieves the value of the leaf Enabled from the Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Enabled is set, it can safely use t.GetEnabled()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Enabled == nil'
// before retrieving the leaf's value.
func (t *Interface) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return true
	}
	return *t.Enabled
}

// GetHardwarePort retrieves the value of the leaf HardwarePort from the Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if HardwarePort is set, it can safely use t.GetHardwarePort()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.HardwarePort == nil'
// before retrieving the leaf's value.
func (t *Interface) GetHardwarePort() string {
	if t == nil || t.HardwarePort == nil {
		return ""
	}
	return *t.HardwarePort
}

// GetIfindex retrieves the value of the leaf Ifindex from the Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Ifindex is set, it can safely use t.GetIfindex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Ifindex == nil'
// before retrieving the leaf's value.
func (t *Interface) GetIfindex() uint32 {
	if t == nil || t.Ifindex == nil {
		return 0
	}
	return *t.Ifindex
}

// GetLastChange retrieves the value of the leaf LastChange from the Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LastChange is set, it can safely use t.GetLastChange()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LastChange == nil'
// before retrieving the leaf's value.
func (t *Interface) GetLastChange() uint64 {
	if t == nil || t.LastChange == nil {
		return 0
	}
	return *t.LastChange
}

// GetLogical retrieves the value of the leaf Logical from the Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Logical is set, it can safely use t.GetLogical()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Logical == nil'
// before retrieving the leaf's value.
func (t *Interface) GetLogical() bool {
	if t == nil || t.Logical == nil {
		return false
	}
	return *t.Logical
}

// GetLoopbackMode retrieves the value of the leaf LoopbackMode from the Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LoopbackMode is set, it can safely use t.GetLoopbackMode()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LoopbackMode == nil'
// before retrieving the leaf's value.
func (t *Interface) GetLoopbackMode() bool {
	if t == nil || t.LoopbackMode == nil {
		return false
	}
	return *t.LoopbackMode
}

// GetMtu retrieves the value of the leaf Mtu from the Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Mtu is set, it can safely use t.GetMtu()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Mtu == nil'
// before retrieving the leaf's value.
func (t *Interface) GetMtu() uint16 {
	if t == nil || t.Mtu == nil {
		return 0
	}
	return *t.Mtu
}

// GetName retrieves the value of the leaf Name from the Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Name is set, it can safely use t.GetName()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Name == nil'
// before retrieving the leaf's value.
func (t *Interface) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetOperStatus retrieves the value of the leaf OperStatus from the Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OperStatus is set, it can safely use t.GetOperStatus()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OperStatus == nil'
// before retrieving the leaf's value.
func (t *Interface) GetOperStatus() E_OpenconfigInterfaces_Interface_OperStatus {
	if t == nil || t.OperStatus == 0 {
		return 0
	}
	return t.OperStatus
}

// GetPhysicalChannel retrieves the value of the leaf PhysicalChannel from the Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PhysicalChannel is set, it can safely use t.GetPhysicalChannel()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PhysicalChannel == nil'
// before retrieving the leaf's value.
func (t *Interface) GetPhysicalChannel() []uint16 {
	if t == nil || t.PhysicalChannel == nil {
		return nil
	}
	return t.PhysicalChannel
}

// GetTpid retrieves the value of the leaf Tpid from the Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Tpid is set, it can safely use t.GetTpid()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Tpid == nil'
// before retrieving the leaf's value.
func (t *Interface) GetTpid() E_OpenconfigVlanTypes_TPID_TYPES {
	if t == nil || t.Tpid == 0 {
		return OpenconfigVlanTypes_TPID_TYPES_TPID_0X8100
	}
	return t.Tpid
}

// GetTransceiver retrieves the value of the leaf Transceiver from the Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Transceiver is set, it can safely use t.GetTransceiver()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Transceiver == nil'
// before retrieving the leaf's value.
func (t *Interface) GetTransceiver() string {
	if t == nil || t.Transceiver == nil {
		return ""
	}
	return *t.Transceiver
}

// GetType retrieves the value of the leaf Type from the Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Type is set, it can safely use t.GetType()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Type == nil'
// before retrieving the leaf's value.
func (t *Interface) GetType() E_IETFInterfaces_InterfaceType {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// ΛListKeyMap returns the keys of the Interface struct, which is a YANG list entry.
func (t *Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Interface_Aggregation represents the /openconfig-interfaces/interfaces/interface/aggregation YANG schema element.
type Interface_Aggregation struct {
	ΛMetadata     []ygot.Annotation                       `path:"@" ygotAnnotation:"true"`
	LagSpeed      *uint32                                 `path:"state/lag-speed" module:"openconfig-if-aggregate"`
	ΛLagSpeed     []ygot.Annotation                       `path:"state/@lag-speed" ygotAnnotation:"true"`
	LagType       E_OpenconfigIfAggregate_AggregationType `path:"config/lag-type" module:"openconfig-if-aggregate"`
	ΛLagType      []ygot.Annotation                       `path:"config/@lag-type" ygotAnnotation:"true"`
	Member        []string                                `path:"state/member" module:"openconfig-if-aggregate"`
	ΛMember       []ygot.Annotation                       `path:"state/@member" ygotAnnotation:"true"`
	MinLinks      *uint16                                 `path:"config/min-links" module:"openconfig-if-aggregate"`
	ΛMinLinks     []ygot.Annotation                       `path:"config/@min-links" ygotAnnotation:"true"`
	SwitchedVlan  *Interface_Aggregation_SwitchedVlan     `path:"switched-vlan" module:"openconfig-vlan"`
	ΛSwitchedVlan []ygot.Annotation                       `path:"@switched-vlan" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Interface_Aggregation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Aggregation) IsYANGGoStruct() {}

// GetOrCreateSwitchedVlan retrieves the value of the SwitchedVlan field
// or returns the existing field if it already exists.
func (t *Interface_Aggregation) GetOrCreateSwitchedVlan() *Interface_Aggregation_SwitchedVlan {
	if t.SwitchedVlan != nil {
		return t.SwitchedVlan
	}
	t.SwitchedVlan = &Interface_Aggregation_SwitchedVlan{}
	return t.SwitchedVlan
}

// GetSwitchedVlan returns the value of the SwitchedVlan struct pointer
// from Interface_Aggregation. If the receiver or the field SwitchedVlan is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Aggregation) GetSwitchedVlan() *Interface_Aggregation_SwitchedVlan {
	if t != nil && t.SwitchedVlan != nil {
		return t.SwitchedVlan
	}
	return nil
}

// GetLagSpeed retrieves the value of the leaf LagSpeed from the Interface_Aggregation
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LagSpeed is set, it can safely use t.GetLagSpeed()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LagSpeed == nil'
// before retrieving the leaf's value.
func (t *Interface_Aggregation) GetLagSpeed() uint32 {
	if t == nil || t.LagSpeed == nil {
		return 0
	}
	return *t.LagSpeed
}

// GetLagType retrieves the value of the leaf LagType from the Interface_Aggregation
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LagType is set, it can safely use t.GetLagType()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LagType == nil'
// before retrieving the leaf's value.
func (t *Interface_Aggregation) GetLagType() E_OpenconfigIfAggregate_AggregationType {
	if t == nil || t.LagType == 0 {
		return 0
	}
	return t.LagType
}

// GetMember retrieves the value of the leaf Member from the Interface_Aggregation
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Member is set, it can safely use t.GetMember()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Member == nil'
// before retrieving the leaf's value.
func (t *Interface_Aggregation) GetMember() []string {
	if t == nil || t.Member == nil {
		return nil
	}
	return t.Member
}

// GetMinLinks retrieves the value of the leaf MinLinks from the Interface_Aggregation
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MinLinks is set, it can safely use t.GetMinLinks()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MinLinks == nil'
// before retrieving the leaf's value.
func (t *Interface_Aggregation) GetMinLinks() uint16 {
	if t == nil || t.MinLinks == nil {
		return 0
	}
	return *t.MinLinks
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Aggregation) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Aggregation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Aggregation) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Interface_Aggregation_SwitchedVlan represents the /openconfig-interfaces/interfaces/interface/aggregation/switched-vlan YANG schema element.
type Interface_Aggregation_SwitchedVlan struct {
	ΛMetadata      []ygot.Annotation                                     `path:"@" ygotAnnotation:"true"`
	AccessVlan     *uint16                                               `path:"config/access-vlan" module:"openconfig-vlan"`
	ΛAccessVlan    []ygot.Annotation                                     `path:"config/@access-vlan" ygotAnnotation:"true"`
	InterfaceMode  E_OpenconfigVlan_VlanModeType                         `path:"config/interface-mode" module:"openconfig-vlan"`
	ΛInterfaceMode []ygot.Annotation                                     `path:"config/@interface-mode" ygotAnnotation:"true"`
	NativeVlan     *uint16                                               `path:"config/native-vlan" module:"openconfig-vlan"`
	ΛNativeVlan    []ygot.Annotation                                     `path:"config/@native-vlan" ygotAnnotation:"true"`
	TrunkVlans     []Interface_Aggregation_SwitchedVlan_TrunkVlans_Union `path:"config/trunk-vlans" module:"openconfig-vlan"`
	ΛTrunkVlans    []ygot.Annotation                                     `path:"config/@trunk-vlans" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Interface_Aggregation_SwitchedVlan implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Aggregation_SwitchedVlan) IsYANGGoStruct() {}

// GetAccessVlan retrieves the value of the leaf AccessVlan from the Interface_Aggregation_SwitchedVlan
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AccessVlan is set, it can safely use t.GetAccessVlan()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AccessVlan == nil'
// before retrieving the leaf's value.
func (t *Interface_Aggregation_SwitchedVlan) GetAccessVlan() uint16 {
	if t == nil || t.AccessVlan == nil {
		return 0
	}
	return *t.AccessVlan
}

// GetInterfaceMode retrieves the value of the leaf InterfaceMode from the Interface_Aggregation_SwitchedVlan
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InterfaceMode is set, it can safely use t.GetInterfaceMode()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InterfaceMode == nil'
// before retrieving the leaf's value.
func (t *Interface_Aggregation_SwitchedVlan) GetInterfaceMode() E_OpenconfigVlan_VlanModeType {
	if t == nil || t.InterfaceMode == 0 {
		return 0
	}
	return t.InterfaceMode
}

// GetNativeVlan retrieves the value of the leaf NativeVlan from the Interface_Aggregation_SwitchedVlan
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if NativeVlan is set, it can safely use t.GetNativeVlan()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.NativeVlan == nil'
// before retrieving the leaf's value.
func (t *Interface_Aggregation_SwitchedVlan) GetNativeVlan() uint16 {
	if t == nil || t.NativeVlan == nil {
		return 0
	}
	return *t.NativeVlan
}

// GetTrunkVlans retrieves the value of the leaf TrunkVlans from the Interface_Aggregation_SwitchedVlan
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if TrunkVlans is set, it can safely use t.GetTrunkVlans()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.TrunkVlans == nil'
// before retrieving the leaf's value.
func (t *Interface_Aggregation_SwitchedVlan) GetTrunkVlans() []Interface_Aggregation_SwitchedVlan_TrunkVlans_Union {
	if t == nil || t.TrunkVlans == nil {
		return nil
	}
	return t.TrunkVlans
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Aggregation_SwitchedVlan) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Aggregation_SwitchedVlan"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Aggregation_SwitchedVlan) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_Aggregation_SwitchedVlan_TrunkVlans_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-interfaces/interfaces/interface/aggregation/switched-vlan/config/trunk-vlans within the YANG schema.
type Interface_Aggregation_SwitchedVlan_TrunkVlans_Union interface {
	Is_Interface_Aggregation_SwitchedVlan_TrunkVlans_Union()
}

// Interface_Aggregation_SwitchedVlan_TrunkVlans_Union_String is used when /openconfig-interfaces/interfaces/interface/aggregation/switched-vlan/config/trunk-vlans
// is to be set to a string value.
type Interface_Aggregation_SwitchedVlan_TrunkVlans_Union_String struct {
	String string
}

// Is_Interface_Aggregation_SwitchedVlan_TrunkVlans_Union ensures that Interface_Aggregation_SwitchedVlan_TrunkVlans_Union_String
// implements the Interface_Aggregation_SwitchedVlan_TrunkVlans_Union interface.
func (*Interface_Aggregation_SwitchedVlan_TrunkVlans_Union_String) Is_Interface_Aggregation_SwitchedVlan_TrunkVlans_Union() {
}

// Interface_Aggregation_SwitchedVlan_TrunkVlans_Union_Uint16 is used when /openconfig-interfaces/interfaces/interface/aggregation/switched-vlan/config/trunk-vlans
// is to be set to a uint16 value.
type Interface_Aggregation_SwitchedVlan_TrunkVlans_Union_Uint16 struct {
	Uint16 uint16
}

// Is_Interface_Aggregation_SwitchedVlan_TrunkVlans_Union ensures that Interface_Aggregation_SwitchedVlan_TrunkVlans_Union_Uint16
// implements the Interface_Aggregation_SwitchedVlan_TrunkVlans_Union interface.
func (*Interface_Aggregation_SwitchedVlan_TrunkVlans_Union_Uint16) Is_Interface_Aggregation_SwitchedVlan_TrunkVlans_Union() {
}

// To_Interface_Aggregation_SwitchedVlan_TrunkVlans_Union takes an input interface{} and attempts to convert it to a struct
// which implements the Interface_Aggregation_SwitchedVlan_TrunkVlans_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *Interface_Aggregation_SwitchedVlan) To_Interface_Aggregation_SwitchedVlan_TrunkVlans_Union(i interface{}) (Interface_Aggregation_SwitchedVlan_TrunkVlans_Union, error) {
	switch v := i.(type) {
	case string:
		return &Interface_Aggregation_SwitchedVlan_TrunkVlans_Union_String{v}, nil
	case uint16:
		return &Interface_Aggregation_SwitchedVlan_TrunkVlans_Union_Uint16{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to Interface_Aggregation_SwitchedVlan_TrunkVlans_Union, unknown union type, got: %T, want any of [string, uint16]", i, i)
	}
}

// Interface_Counters represents the /openconfig-interfaces/interfaces/interface/state/counters YANG schema element.
type Interface_Counters struct {
	ΛMetadata           []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	CarrierTransitions  *uint64           `path:"carrier-transitions" module:"openconfig-interfaces"`
	ΛCarrierTransitions []ygot.Annotation `path:"@carrier-transitions" ygotAnnotation:"true"`
	InBroadcastPkts     *uint64           `path:"in-broadcast-pkts" module:"openconfig-interfaces"`
	ΛInBroadcastPkts    []ygot.Annotation `path:"@in-broadcast-pkts" ygotAnnotation:"true"`
	InDiscards          *uint64           `path:"in-discards" module:"openconfig-interfaces"`
	ΛInDiscards         []ygot.Annotation `path:"@in-discards" ygotAnnotation:"true"`
	InErrors            *uint64           `path:"in-errors" module:"openconfig-interfaces"`
	ΛInErrors           []ygot.Annotation `path:"@in-errors" ygotAnnotation:"true"`
	InFcsErrors         *uint64           `path:"in-fcs-errors" module:"openconfig-interfaces"`
	ΛInFcsErrors        []ygot.Annotation `path:"@in-fcs-errors" ygotAnnotation:"true"`
	InMulticastPkts     *uint64           `path:"in-multicast-pkts" module:"openconfig-interfaces"`
	ΛInMulticastPkts    []ygot.Annotation `path:"@in-multicast-pkts" ygotAnnotation:"true"`
	InOctets            *uint64           `path:"in-octets" module:"openconfig-interfaces"`
	ΛInOctets           []ygot.Annotation `path:"@in-octets" ygotAnnotation:"true"`
	InPkts              *uint64           `path:"in-pkts" module:"openconfig-interfaces"`
	ΛInPkts             []ygot.Annotation `path:"@in-pkts" ygotAnnotation:"true"`
	InUnicastPkts       *uint64           `path:"in-unicast-pkts" module:"openconfig-interfaces"`
	ΛInUnicastPkts      []ygot.Annotation `path:"@in-unicast-pkts" ygotAnnotation:"true"`
	InUnknownProtos     *uint64           `path:"in-unknown-protos" module:"openconfig-interfaces"`
	ΛInUnknownProtos    []ygot.Annotation `path:"@in-unknown-protos" ygotAnnotation:"true"`
	LastClear           *uint64           `path:"last-clear" module:"openconfig-interfaces"`
	ΛLastClear          []ygot.Annotation `path:"@last-clear" ygotAnnotation:"true"`
	OutBroadcastPkts    *uint64           `path:"out-broadcast-pkts" module:"openconfig-interfaces"`
	ΛOutBroadcastPkts   []ygot.Annotation `path:"@out-broadcast-pkts" ygotAnnotation:"true"`
	OutDiscards         *uint64           `path:"out-discards" module:"openconfig-interfaces"`
	ΛOutDiscards        []ygot.Annotation `path:"@out-discards" ygotAnnotation:"true"`
	OutErrors           *uint64           `path:"out-errors" module:"openconfig-interfaces"`
	ΛOutErrors          []ygot.Annotation `path:"@out-errors" ygotAnnotation:"true"`
	OutMulticastPkts    *uint64           `path:"out-multicast-pkts" module:"openconfig-interfaces"`
	ΛOutMulticastPkts   []ygot.Annotation `path:"@out-multicast-pkts" ygotAnnotation:"true"`
	OutOctets           *uint64           `path:"out-octets" module:"openconfig-interfaces"`
	ΛOutOctets          []ygot.Annotation `path:"@out-octets" ygotAnnotation:"true"`
	OutPkts             *uint64           `path:"out-pkts" module:"openconfig-interfaces"`
	ΛOutPkts            []ygot.Annotation `path:"@out-pkts" ygotAnnotation:"true"`
	OutUnicastPkts      *uint64           `path:"out-unicast-pkts" module:"openconfig-interfaces"`
	ΛOutUnicastPkts     []ygot.Annotation `path:"@out-unicast-pkts" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Interface_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Counters) IsYANGGoStruct() {}

// GetCarrierTransitions retrieves the value of the leaf CarrierTransitions from the Interface_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if CarrierTransitions is set, it can safely use t.GetCarrierTransitions()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.CarrierTransitions == nil'
// before retrieving the leaf's value.
func (t *Interface_Counters) GetCarrierTransitions() uint64 {
	if t == nil || t.CarrierTransitions == nil {
		return 0
	}
	return *t.CarrierTransitions
}

// GetInBroadcastPkts retrieves the value of the leaf InBroadcastPkts from the Interface_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InBroadcastPkts is set, it can safely use t.GetInBroadcastPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InBroadcastPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_Counters) GetInBroadcastPkts() uint64 {
	if t == nil || t.InBroadcastPkts == nil {
		return 0
	}
	return *t.InBroadcastPkts
}

// GetInDiscards retrieves the value of the leaf InDiscards from the Interface_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InDiscards is set, it can safely use t.GetInDiscards()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InDiscards == nil'
// before retrieving the leaf's value.
func (t *Interface_Counters) GetInDiscards() uint64 {
	if t == nil || t.InDiscards == nil {
		return 0
	}
	return *t.InDiscards
}

// GetInErrors retrieves the value of the leaf InErrors from the Interface_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InErrors is set, it can safely use t.GetInErrors()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InErrors == nil'
// before retrieving the leaf's value.
func (t *Interface_Counters) GetInErrors() uint64 {
	if t == nil || t.InErrors == nil {
		return 0
	}
	return *t.InErrors
}

// GetInFcsErrors retrieves the value of the leaf InFcsErrors from the Interface_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InFcsErrors is set, it can safely use t.GetInFcsErrors()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InFcsErrors == nil'
// before retrieving the leaf's value.
func (t *Interface_Counters) GetInFcsErrors() uint64 {
	if t == nil || t.InFcsErrors == nil {
		return 0
	}
	return *t.InFcsErrors
}

// GetInMulticastPkts retrieves the value of the leaf InMulticastPkts from the Interface_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InMulticastPkts is set, it can safely use t.GetInMulticastPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InMulticastPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_Counters) GetInMulticastPkts() uint64 {
	if t == nil || t.InMulticastPkts == nil {
		return 0
	}
	return *t.InMulticastPkts
}

// GetInOctets retrieves the value of the leaf InOctets from the Interface_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InOctets is set, it can safely use t.GetInOctets()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InOctets == nil'
// before retrieving the leaf's value.
func (t *Interface_Counters) GetInOctets() uint64 {
	if t == nil || t.InOctets == nil {
		return 0
	}
	return *t.InOctets
}

// GetInPkts retrieves the value of the leaf InPkts from the Interface_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InPkts is set, it can safely use t.GetInPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_Counters) GetInPkts() uint64 {
	if t == nil || t.InPkts == nil {
		return 0
	}
	return *t.InPkts
}

// GetInUnicastPkts retrieves the value of the leaf InUnicastPkts from the Interface_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InUnicastPkts is set, it can safely use t.GetInUnicastPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InUnicastPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_Counters) GetInUnicastPkts() uint64 {
	if t == nil || t.InUnicastPkts == nil {
		return 0
	}
	return *t.InUnicastPkts
}

// GetInUnknownProtos retrieves the value of the leaf InUnknownProtos from the Interface_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InUnknownProtos is set, it can safely use t.GetInUnknownProtos()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InUnknownProtos == nil'
// before retrieving the leaf's value.
func (t *Interface_Counters) GetInUnknownProtos() uint64 {
	if t == nil || t.InUnknownProtos == nil {
		return 0
	}
	return *t.InUnknownProtos
}

// GetLastClear retrieves the value of the leaf LastClear from the Interface_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LastClear is set, it can safely use t.GetLastClear()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LastClear == nil'
// before retrieving the leaf's value.
func (t *Interface_Counters) GetLastClear() uint64 {
	if t == nil || t.LastClear == nil {
		return 0
	}
	return *t.LastClear
}

// GetOutBroadcastPkts retrieves the value of the leaf OutBroadcastPkts from the Interface_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutBroadcastPkts is set, it can safely use t.GetOutBroadcastPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutBroadcastPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_Counters) GetOutBroadcastPkts() uint64 {
	if t == nil || t.OutBroadcastPkts == nil {
		return 0
	}
	return *t.OutBroadcastPkts
}

// GetOutDiscards retrieves the value of the leaf OutDiscards from the Interface_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutDiscards is set, it can safely use t.GetOutDiscards()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutDiscards == nil'
// before retrieving the leaf's value.
func (t *Interface_Counters) GetOutDiscards() uint64 {
	if t == nil || t.OutDiscards == nil {
		return 0
	}
	return *t.OutDiscards
}

// GetOutErrors retrieves the value of the leaf OutErrors from the Interface_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutErrors is set, it can safely use t.GetOutErrors()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutErrors == nil'
// before retrieving the leaf's value.
func (t *Interface_Counters) GetOutErrors() uint64 {
	if t == nil || t.OutErrors == nil {
		return 0
	}
	return *t.OutErrors
}

// GetOutMulticastPkts retrieves the value of the leaf OutMulticastPkts from the Interface_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutMulticastPkts is set, it can safely use t.GetOutMulticastPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutMulticastPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_Counters) GetOutMulticastPkts() uint64 {
	if t == nil || t.OutMulticastPkts == nil {
		return 0
	}
	return *t.OutMulticastPkts
}

// GetOutOctets retrieves the value of the leaf OutOctets from the Interface_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutOctets is set, it can safely use t.GetOutOctets()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutOctets == nil'
// before retrieving the leaf's value.
func (t *Interface_Counters) GetOutOctets() uint64 {
	if t == nil || t.OutOctets == nil {
		return 0
	}
	return *t.OutOctets
}

// GetOutPkts retrieves the value of the leaf OutPkts from the Interface_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutPkts is set, it can safely use t.GetOutPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_Counters) GetOutPkts() uint64 {
	if t == nil || t.OutPkts == nil {
		return 0
	}
	return *t.OutPkts
}

// GetOutUnicastPkts retrieves the value of the leaf OutUnicastPkts from the Interface_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutUnicastPkts is set, it can safely use t.GetOutUnicastPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutUnicastPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_Counters) GetOutUnicastPkts() uint64 {
	if t == nil || t.OutUnicastPkts == nil {
		return 0
	}
	return *t.OutUnicastPkts
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Counters) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Counters) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Interface_Ethernet represents the /openconfig-interfaces/interfaces/interface/ethernet YANG schema element.
type Interface_Ethernet struct {
	ΛMetadata             []ygot.Annotation                                    `path:"@" ygotAnnotation:"true"`
	AggregateId           *string                                              `path:"config/aggregate-id" module:"openconfig-if-aggregate"`
	ΛAggregateId          []ygot.Annotation                                    `path:"config/@aggregate-id" ygotAnnotation:"true"`
	AutoNegotiate         *bool                                                `path:"config/auto-negotiate" module:"openconfig-if-ethernet"`
	ΛAutoNegotiate        []ygot.Annotation                                    `path:"config/@auto-negotiate" ygotAnnotation:"true"`
	Counters              *Interface_Ethernet_Counters                         `path:"state/counters" module:"openconfig-if-ethernet"`
	ΛCounters             []ygot.Annotation                                    `path:"state/@counters" ygotAnnotation:"true"`
	DuplexMode            E_OpenconfigIfEthernet_Ethernet_DuplexMode           `path:"config/duplex-mode" module:"openconfig-if-ethernet"`
	ΛDuplexMode           []ygot.Annotation                                    `path:"config/@duplex-mode" ygotAnnotation:"true"`
	EnableFlowControl     *bool                                                `path:"config/enable-flow-control" module:"openconfig-if-ethernet"`
	ΛEnableFlowControl    []ygot.Annotation                                    `path:"config/@enable-flow-control" ygotAnnotation:"true"`
	HwMacAddress          *string                                              `path:"state/hw-mac-address" module:"openconfig-if-ethernet"`
	ΛHwMacAddress         []ygot.Annotation                                    `path:"state/@hw-mac-address" ygotAnnotation:"true"`
	MacAddress            *string                                              `path:"config/mac-address" module:"openconfig-if-ethernet"`
	ΛMacAddress           []ygot.Annotation                                    `path:"config/@mac-address" ygotAnnotation:"true"`
	NegotiatedDuplexMode  E_OpenconfigIfEthernet_Ethernet_NegotiatedDuplexMode `path:"state/negotiated-duplex-mode" module:"openconfig-if-ethernet"`
	ΛNegotiatedDuplexMode []ygot.Annotation                                    `path:"state/@negotiated-duplex-mode" ygotAnnotation:"true"`
	NegotiatedPortSpeed   E_OpenconfigIfEthernet_ETHERNET_SPEED                `path:"state/negotiated-port-speed" module:"openconfig-if-ethernet"`
	ΛNegotiatedPortSpeed  []ygot.Annotation                                    `path:"state/@negotiated-port-speed" ygotAnnotation:"true"`
	PortSpeed             E_OpenconfigIfEthernet_ETHERNET_SPEED                `path:"config/port-speed" module:"openconfig-if-ethernet"`
	ΛPortSpeed            []ygot.Annotation                                    `path:"config/@port-speed" ygotAnnotation:"true"`
	SwitchedVlan          *Interface_Ethernet_SwitchedVlan                     `path:"switched-vlan" module:"openconfig-vlan"`
	ΛSwitchedVlan         []ygot.Annotation                                    `path:"@switched-vlan" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Interface_Ethernet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Ethernet) IsYANGGoStruct() {}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *Interface_Ethernet) GetOrCreateCounters() *Interface_Ethernet_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &Interface_Ethernet_Counters{}
	return t.Counters
}

// GetOrCreateSwitchedVlan retrieves the value of the SwitchedVlan field
// or returns the existing field if it already exists.
func (t *Interface_Ethernet) GetOrCreateSwitchedVlan() *Interface_Ethernet_SwitchedVlan {
	if t.SwitchedVlan != nil {
		return t.SwitchedVlan
	}
	t.SwitchedVlan = &Interface_Ethernet_SwitchedVlan{}
	return t.SwitchedVlan
}

// GetCounters returns the value of the Counters struct pointer
// from Interface_Ethernet. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Ethernet) GetCounters() *Interface_Ethernet_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetSwitchedVlan returns the value of the SwitchedVlan struct pointer
// from Interface_Ethernet. If the receiver or the field SwitchedVlan is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Ethernet) GetSwitchedVlan() *Interface_Ethernet_SwitchedVlan {
	if t != nil && t.SwitchedVlan != nil {
		return t.SwitchedVlan
	}
	return nil
}

// GetAggregateId retrieves the value of the leaf AggregateId from the Interface_Ethernet
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AggregateId is set, it can safely use t.GetAggregateId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AggregateId == nil'
// before retrieving the leaf's value.
func (t *Interface_Ethernet) GetAggregateId() string {
	if t == nil || t.AggregateId == nil {
		return ""
	}
	return *t.AggregateId
}

// GetAutoNegotiate retrieves the value of the leaf AutoNegotiate from the Interface_Ethernet
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AutoNegotiate is set, it can safely use t.GetAutoNegotiate()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AutoNegotiate == nil'
// before retrieving the leaf's value.
func (t *Interface_Ethernet) GetAutoNegotiate() bool {
	if t == nil || t.AutoNegotiate == nil {
		return true
	}
	return *t.AutoNegotiate
}

// GetDuplexMode retrieves the value of the leaf DuplexMode from the Interface_Ethernet
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if DuplexMode is set, it can safely use t.GetDuplexMode()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.DuplexMode == nil'
// before retrieving the leaf's value.
func (t *Interface_Ethernet) GetDuplexMode() E_OpenconfigIfEthernet_Ethernet_DuplexMode {
	if t == nil || t.DuplexMode == 0 {
		return 0
	}
	return t.DuplexMode
}

// GetEnableFlowControl retrieves the value of the leaf EnableFlowControl from the Interface_Ethernet
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if EnableFlowControl is set, it can safely use t.GetEnableFlowControl()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.EnableFlowControl == nil'
// before retrieving the leaf's value.
func (t *Interface_Ethernet) GetEnableFlowControl() bool {
	if t == nil || t.EnableFlowControl == nil {
		return false
	}
	return *t.EnableFlowControl
}

// GetHwMacAddress retrieves the value of the leaf HwMacAddress from the Interface_Ethernet
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if HwMacAddress is set, it can safely use t.GetHwMacAddress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.HwMacAddress == nil'
// before retrieving the leaf's value.
func (t *Interface_Ethernet) GetHwMacAddress() string {
	if t == nil || t.HwMacAddress == nil {
		return ""
	}
	return *t.HwMacAddress
}

// GetMacAddress retrieves the value of the leaf MacAddress from the Interface_Ethernet
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MacAddress is set, it can safely use t.GetMacAddress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MacAddress == nil'
// before retrieving the leaf's value.
func (t *Interface_Ethernet) GetMacAddress() string {
	if t == nil || t.MacAddress == nil {
		return ""
	}
	return *t.MacAddress
}

// GetNegotiatedDuplexMode retrieves the value of the leaf NegotiatedDuplexMode from the Interface_Ethernet
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if NegotiatedDuplexMode is set, it can safely use t.GetNegotiatedDuplexMode()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.NegotiatedDuplexMode == nil'
// before retrieving the leaf's value.
func (t *Interface_Ethernet) GetNegotiatedDuplexMode() E_OpenconfigIfEthernet_Ethernet_NegotiatedDuplexMode {
	if t == nil || t.NegotiatedDuplexMode == 0 {
		return 0
	}
	return t.NegotiatedDuplexMode
}

// GetNegotiatedPortSpeed retrieves the value of the leaf NegotiatedPortSpeed from the Interface_Ethernet
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if NegotiatedPortSpeed is set, it can safely use t.GetNegotiatedPortSpeed()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.NegotiatedPortSpeed == nil'
// before retrieving the leaf's value.
func (t *Interface_Ethernet) GetNegotiatedPortSpeed() E_OpenconfigIfEthernet_ETHERNET_SPEED {
	if t == nil || t.NegotiatedPortSpeed == 0 {
		return 0
	}
	return t.NegotiatedPortSpeed
}

// GetPortSpeed retrieves the value of the leaf PortSpeed from the Interface_Ethernet
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PortSpeed is set, it can safely use t.GetPortSpeed()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PortSpeed == nil'
// before retrieving the leaf's value.
func (t *Interface_Ethernet) GetPortSpeed() E_OpenconfigIfEthernet_ETHERNET_SPEED {
	if t == nil || t.PortSpeed == 0 {
		return 0
	}
	return t.PortSpeed
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Ethernet) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Ethernet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Ethernet) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Interface_Ethernet_Counters represents the /openconfig-interfaces/interfaces/interface/ethernet/state/counters YANG schema element.
type Interface_Ethernet_Counters struct {
	ΛMetadata            []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	In_8021QFrames       *uint64           `path:"in-8021q-frames" module:"openconfig-if-ethernet"`
	ΛIn_8021QFrames      []ygot.Annotation `path:"@in-8021q-frames" ygotAnnotation:"true"`
	InBlockErrors        *uint64           `path:"in-block-errors" module:"openconfig-if-ethernet"`
	ΛInBlockErrors       []ygot.Annotation `path:"@in-block-errors" ygotAnnotation:"true"`
	InCrcErrors          *uint64           `path:"in-crc-errors" module:"openconfig-if-ethernet"`
	ΛInCrcErrors         []ygot.Annotation `path:"@in-crc-errors" ygotAnnotation:"true"`
	InFragmentFrames     *uint64           `path:"in-fragment-frames" module:"openconfig-if-ethernet"`
	ΛInFragmentFrames    []ygot.Annotation `path:"@in-fragment-frames" ygotAnnotation:"true"`
	InJabberFrames       *uint64           `path:"in-jabber-frames" module:"openconfig-if-ethernet"`
	ΛInJabberFrames      []ygot.Annotation `path:"@in-jabber-frames" ygotAnnotation:"true"`
	InMacControlFrames   *uint64           `path:"in-mac-control-frames" module:"openconfig-if-ethernet"`
	ΛInMacControlFrames  []ygot.Annotation `path:"@in-mac-control-frames" ygotAnnotation:"true"`
	InMacPauseFrames     *uint64           `path:"in-mac-pause-frames" module:"openconfig-if-ethernet"`
	ΛInMacPauseFrames    []ygot.Annotation `path:"@in-mac-pause-frames" ygotAnnotation:"true"`
	InOversizeFrames     *uint64           `path:"in-oversize-frames" module:"openconfig-if-ethernet"`
	ΛInOversizeFrames    []ygot.Annotation `path:"@in-oversize-frames" ygotAnnotation:"true"`
	InUndersizeFrames    *uint64           `path:"in-undersize-frames" module:"openconfig-if-ethernet"`
	ΛInUndersizeFrames   []ygot.Annotation `path:"@in-undersize-frames" ygotAnnotation:"true"`
	Out_8021QFrames      *uint64           `path:"out-8021q-frames" module:"openconfig-if-ethernet"`
	ΛOut_8021QFrames     []ygot.Annotation `path:"@out-8021q-frames" ygotAnnotation:"true"`
	OutMacControlFrames  *uint64           `path:"out-mac-control-frames" module:"openconfig-if-ethernet"`
	ΛOutMacControlFrames []ygot.Annotation `path:"@out-mac-control-frames" ygotAnnotation:"true"`
	OutMacPauseFrames    *uint64           `path:"out-mac-pause-frames" module:"openconfig-if-ethernet"`
	ΛOutMacPauseFrames   []ygot.Annotation `path:"@out-mac-pause-frames" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Interface_Ethernet_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Ethernet_Counters) IsYANGGoStruct() {}

// GetIn_8021QFrames retrieves the value of the leaf In_8021QFrames from the Interface_Ethernet_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if In_8021QFrames is set, it can safely use t.GetIn_8021QFrames()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.In_8021QFrames == nil'
// before retrieving the leaf's value.
func (t *Interface_Ethernet_Counters) GetIn_8021QFrames() uint64 {
	if t == nil || t.In_8021QFrames == nil {
		return 0
	}
	return *t.In_8021QFrames
}

// GetInBlockErrors retrieves the value of the leaf InBlockErrors from the Interface_Ethernet_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InBlockErrors is set, it can safely use t.GetInBlockErrors()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InBlockErrors == nil'
// before retrieving the leaf's value.
func (t *Interface_Ethernet_Counters) GetInBlockErrors() uint64 {
	if t == nil || t.InBlockErrors == nil {
		return 0
	}
	return *t.InBlockErrors
}

// GetInCrcErrors retrieves the value of the leaf InCrcErrors from the Interface_Ethernet_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InCrcErrors is set, it can safely use t.GetInCrcErrors()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InCrcErrors == nil'
// before retrieving the leaf's value.
func (t *Interface_Ethernet_Counters) GetInCrcErrors() uint64 {
	if t == nil || t.InCrcErrors == nil {
		return 0
	}
	return *t.InCrcErrors
}

// GetInFragmentFrames retrieves the value of the leaf InFragmentFrames from the Interface_Ethernet_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InFragmentFrames is set, it can safely use t.GetInFragmentFrames()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InFragmentFrames == nil'
// before retrieving the leaf's value.
func (t *Interface_Ethernet_Counters) GetInFragmentFrames() uint64 {
	if t == nil || t.InFragmentFrames == nil {
		return 0
	}
	return *t.InFragmentFrames
}

// GetInJabberFrames retrieves the value of the leaf InJabberFrames from the Interface_Ethernet_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InJabberFrames is set, it can safely use t.GetInJabberFrames()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InJabberFrames == nil'
// before retrieving the leaf's value.
func (t *Interface_Ethernet_Counters) GetInJabberFrames() uint64 {
	if t == nil || t.InJabberFrames == nil {
		return 0
	}
	return *t.InJabberFrames
}

// GetInMacControlFrames retrieves the value of the leaf InMacControlFrames from the Interface_Ethernet_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InMacControlFrames is set, it can safely use t.GetInMacControlFrames()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InMacControlFrames == nil'
// before retrieving the leaf's value.
func (t *Interface_Ethernet_Counters) GetInMacControlFrames() uint64 {
	if t == nil || t.InMacControlFrames == nil {
		return 0
	}
	return *t.InMacControlFrames
}

// GetInMacPauseFrames retrieves the value of the leaf InMacPauseFrames from the Interface_Ethernet_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InMacPauseFrames is set, it can safely use t.GetInMacPauseFrames()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InMacPauseFrames == nil'
// before retrieving the leaf's value.
func (t *Interface_Ethernet_Counters) GetInMacPauseFrames() uint64 {
	if t == nil || t.InMacPauseFrames == nil {
		return 0
	}
	return *t.InMacPauseFrames
}

// GetInOversizeFrames retrieves the value of the leaf InOversizeFrames from the Interface_Ethernet_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InOversizeFrames is set, it can safely use t.GetInOversizeFrames()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InOversizeFrames == nil'
// before retrieving the leaf's value.
func (t *Interface_Ethernet_Counters) GetInOversizeFrames() uint64 {
	if t == nil || t.InOversizeFrames == nil {
		return 0
	}
	return *t.InOversizeFrames
}

// GetInUndersizeFrames retrieves the value of the leaf InUndersizeFrames from the Interface_Ethernet_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InUndersizeFrames is set, it can safely use t.GetInUndersizeFrames()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InUndersizeFrames == nil'
// before retrieving the leaf's value.
func (t *Interface_Ethernet_Counters) GetInUndersizeFrames() uint64 {
	if t == nil || t.InUndersizeFrames == nil {
		return 0
	}
	return *t.InUndersizeFrames
}

// GetOut_8021QFrames retrieves the value of the leaf Out_8021QFrames from the Interface_Ethernet_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Out_8021QFrames is set, it can safely use t.GetOut_8021QFrames()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Out_8021QFrames == nil'
// before retrieving the leaf's value.
func (t *Interface_Ethernet_Counters) GetOut_8021QFrames() uint64 {
	if t == nil || t.Out_8021QFrames == nil {
		return 0
	}
	return *t.Out_8021QFrames
}

// GetOutMacControlFrames retrieves the value of the leaf OutMacControlFrames from the Interface_Ethernet_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutMacControlFrames is set, it can safely use t.GetOutMacControlFrames()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutMacControlFrames == nil'
// before retrieving the leaf's value.
func (t *Interface_Ethernet_Counters) GetOutMacControlFrames() uint64 {
	if t == nil || t.OutMacControlFrames == nil {
		return 0
	}
	return *t.OutMacControlFrames
}

// GetOutMacPauseFrames retrieves the value of the leaf OutMacPauseFrames from the Interface_Ethernet_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutMacPauseFrames is set, it can safely use t.GetOutMacPauseFrames()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutMacPauseFrames == nil'
// before retrieving the leaf's value.
func (t *Interface_Ethernet_Counters) GetOutMacPauseFrames() uint64 {
	if t == nil || t.OutMacPauseFrames == nil {
		return 0
	}
	return *t.OutMacPauseFrames
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Ethernet_Counters) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Ethernet_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Ethernet_Counters) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Interface_Ethernet_SwitchedVlan represents the /openconfig-interfaces/interfaces/interface/ethernet/switched-vlan YANG schema element.
type Interface_Ethernet_SwitchedVlan struct {
	ΛMetadata      []ygot.Annotation                                  `path:"@" ygotAnnotation:"true"`
	AccessVlan     *uint16                                            `path:"config/access-vlan" module:"openconfig-vlan"`
	ΛAccessVlan    []ygot.Annotation                                  `path:"config/@access-vlan" ygotAnnotation:"true"`
	InterfaceMode  E_OpenconfigVlan_VlanModeType                      `path:"config/interface-mode" module:"openconfig-vlan"`
	ΛInterfaceMode []ygot.Annotation                                  `path:"config/@interface-mode" ygotAnnotation:"true"`
	NativeVlan     *uint16                                            `path:"config/native-vlan" module:"openconfig-vlan"`
	ΛNativeVlan    []ygot.Annotation                                  `path:"config/@native-vlan" ygotAnnotation:"true"`
	TrunkVlans     []Interface_Ethernet_SwitchedVlan_TrunkVlans_Union `path:"config/trunk-vlans" module:"openconfig-vlan"`
	ΛTrunkVlans    []ygot.Annotation                                  `path:"config/@trunk-vlans" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Interface_Ethernet_SwitchedVlan implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Ethernet_SwitchedVlan) IsYANGGoStruct() {}

// GetAccessVlan retrieves the value of the leaf AccessVlan from the Interface_Ethernet_SwitchedVlan
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AccessVlan is set, it can safely use t.GetAccessVlan()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AccessVlan == nil'
// before retrieving the leaf's value.
func (t *Interface_Ethernet_SwitchedVlan) GetAccessVlan() uint16 {
	if t == nil || t.AccessVlan == nil {
		return 0
	}
	return *t.AccessVlan
}

// GetInterfaceMode retrieves the value of the leaf InterfaceMode from the Interface_Ethernet_SwitchedVlan
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InterfaceMode is set, it can safely use t.GetInterfaceMode()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InterfaceMode == nil'
// before retrieving the leaf's value.
func (t *Interface_Ethernet_SwitchedVlan) GetInterfaceMode() E_OpenconfigVlan_VlanModeType {
	if t == nil || t.InterfaceMode == 0 {
		return 0
	}
	return t.InterfaceMode
}

// GetNativeVlan retrieves the value of the leaf NativeVlan from the Interface_Ethernet_SwitchedVlan
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if NativeVlan is set, it can safely use t.GetNativeVlan()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.NativeVlan == nil'
// before retrieving the leaf's value.
func (t *Interface_Ethernet_SwitchedVlan) GetNativeVlan() uint16 {
	if t == nil || t.NativeVlan == nil {
		return 0
	}
	return *t.NativeVlan
}

// GetTrunkVlans retrieves the value of the leaf TrunkVlans from the Interface_Ethernet_SwitchedVlan
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if TrunkVlans is set, it can safely use t.GetTrunkVlans()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.TrunkVlans == nil'
// before retrieving the leaf's value.
func (t *Interface_Ethernet_SwitchedVlan) GetTrunkVlans() []Interface_Ethernet_SwitchedVlan_TrunkVlans_Union {
	if t == nil || t.TrunkVlans == nil {
		return nil
	}
	return t.TrunkVlans
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Ethernet_SwitchedVlan) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Ethernet_SwitchedVlan"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Ethernet_SwitchedVlan) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_Ethernet_SwitchedVlan_TrunkVlans_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-interfaces/interfaces/interface/ethernet/switched-vlan/config/trunk-vlans within the YANG schema.
type Interface_Ethernet_SwitchedVlan_TrunkVlans_Union interface {
	Is_Interface_Ethernet_SwitchedVlan_TrunkVlans_Union()
}

// Interface_Ethernet_SwitchedVlan_TrunkVlans_Union_String is used when /openconfig-interfaces/interfaces/interface/ethernet/switched-vlan/config/trunk-vlans
// is to be set to a string value.
type Interface_Ethernet_SwitchedVlan_TrunkVlans_Union_String struct {
	String string
}

// Is_Interface_Ethernet_SwitchedVlan_TrunkVlans_Union ensures that Interface_Ethernet_SwitchedVlan_TrunkVlans_Union_String
// implements the Interface_Ethernet_SwitchedVlan_TrunkVlans_Union interface.
func (*Interface_Ethernet_SwitchedVlan_TrunkVlans_Union_String) Is_Interface_Ethernet_SwitchedVlan_TrunkVlans_Union() {
}

// Interface_Ethernet_SwitchedVlan_TrunkVlans_Union_Uint16 is used when /openconfig-interfaces/interfaces/interface/ethernet/switched-vlan/config/trunk-vlans
// is to be set to a uint16 value.
type Interface_Ethernet_SwitchedVlan_TrunkVlans_Union_Uint16 struct {
	Uint16 uint16
}

// Is_Interface_Ethernet_SwitchedVlan_TrunkVlans_Union ensures that Interface_Ethernet_SwitchedVlan_TrunkVlans_Union_Uint16
// implements the Interface_Ethernet_SwitchedVlan_TrunkVlans_Union interface.
func (*Interface_Ethernet_SwitchedVlan_TrunkVlans_Union_Uint16) Is_Interface_Ethernet_SwitchedVlan_TrunkVlans_Union() {
}

// To_Interface_Ethernet_SwitchedVlan_TrunkVlans_Union takes an input interface{} and attempts to convert it to a struct
// which implements the Interface_Ethernet_SwitchedVlan_TrunkVlans_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *Interface_Ethernet_SwitchedVlan) To_Interface_Ethernet_SwitchedVlan_TrunkVlans_Union(i interface{}) (Interface_Ethernet_SwitchedVlan_TrunkVlans_Union, error) {
	switch v := i.(type) {
	case string:
		return &Interface_Ethernet_SwitchedVlan_TrunkVlans_Union_String{v}, nil
	case uint16:
		return &Interface_Ethernet_SwitchedVlan_TrunkVlans_Union_Uint16{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to Interface_Ethernet_SwitchedVlan_TrunkVlans_Union, unknown union type, got: %T, want any of [string, uint16]", i, i)
	}
}

// Interface_HoldTime represents the /openconfig-interfaces/interfaces/interface/hold-time YANG schema element.
type Interface_HoldTime struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Down      *uint32           `path:"config/down" module:"openconfig-interfaces"`
	ΛDown     []ygot.Annotation `path:"config/@down" ygotAnnotation:"true"`
	Up        *uint32           `path:"config/up" module:"openconfig-interfaces"`
	ΛUp       []ygot.Annotation `path:"config/@up" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Interface_HoldTime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_HoldTime) IsYANGGoStruct() {}

// GetDown retrieves the value of the leaf Down from the Interface_HoldTime
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Down is set, it can safely use t.GetDown()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Down == nil'
// before retrieving the leaf's value.
func (t *Interface_HoldTime) GetDown() uint32 {
	if t == nil || t.Down == nil {
		return 0
	}
	return *t.Down
}

// GetUp retrieves the value of the leaf Up from the Interface_HoldTime
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Up is set, it can safely use t.GetUp()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Up == nil'
// before retrieving the leaf's value.
func (t *Interface_HoldTime) GetUp() uint32 {
	if t == nil || t.Up == nil {
		return 0
	}
	return *t.Up
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_HoldTime) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_HoldTime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_HoldTime) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Interface_RoutedVlan represents the /openconfig-interfaces/interfaces/interface/routed-vlan YANG schema element.
type Interface_RoutedVlan struct {
	ΛMetadata []ygot.Annotation               `path:"@" ygotAnnotation:"true"`
	Ipv4      *Interface_RoutedVlan_Ipv4      `path:"ipv4" module:"openconfig-if-ip"`
	ΛIpv4     []ygot.Annotation               `path:"@ipv4" ygotAnnotation:"true"`
	Ipv6      *Interface_RoutedVlan_Ipv6      `path:"ipv6" module:"openconfig-if-ip"`
	ΛIpv6     []ygot.Annotation               `path:"@ipv6" ygotAnnotation:"true"`
	Vlan      Interface_RoutedVlan_Vlan_Union `path:"config/vlan" module:"openconfig-vlan"`
	ΛVlan     []ygot.Annotation               `path:"config/@vlan" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Interface_RoutedVlan implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_RoutedVlan) IsYANGGoStruct() {}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *Interface_RoutedVlan) GetOrCreateIpv4() *Interface_RoutedVlan_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &Interface_RoutedVlan_Ipv4{}
	return t.Ipv4
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *Interface_RoutedVlan) GetOrCreateIpv6() *Interface_RoutedVlan_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &Interface_RoutedVlan_Ipv6{}
	return t.Ipv6
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from Interface_RoutedVlan. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_RoutedVlan) GetIpv4() *Interface_RoutedVlan_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from Interface_RoutedVlan. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_RoutedVlan) GetIpv6() *Interface_RoutedVlan_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// GetVlan retrieves the value of the leaf Vlan from the Interface_RoutedVlan
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Vlan is set, it can safely use t.GetVlan()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Vlan == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan) GetVlan() Interface_RoutedVlan_Vlan_Union {
	if t == nil || t.Vlan == nil {
		return nil
	}
	return t.Vlan
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_RoutedVlan) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_RoutedVlan"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_RoutedVlan) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Interface_RoutedVlan_Vlan_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-interfaces/interfaces/interface/routed-vlan/config/vlan within the YANG schema.
type Interface_RoutedVlan_Vlan_Union interface {
	Is_Interface_RoutedVlan_Vlan_Union()
}

// Interface_RoutedVlan_Vlan_Union_String is used when /openconfig-interfaces/interfaces/interface/routed-vlan/config/vlan
// is to be set to a string value.
type Interface_RoutedVlan_Vlan_Union_String struct {
	String string
}

// Is_Interface_RoutedVlan_Vlan_Union ensures that Interface_RoutedVlan_Vlan_Union_String
// implements the Interface_RoutedVlan_Vlan_Union interface.
func (*Interface_RoutedVlan_Vlan_Union_String) Is_Interface_RoutedVlan_Vlan_Union() {}

// Interface_RoutedVlan_Vlan_Union_Uint16 is used when /openconfig-interfaces/interfaces/interface/routed-vlan/config/vlan
// is to be set to a uint16 value.
type Interface_RoutedVlan_Vlan_Union_Uint16 struct {
	Uint16 uint16
}

// Is_Interface_RoutedVlan_Vlan_Union ensures that Interface_RoutedVlan_Vlan_Union_Uint16
// implements the Interface_RoutedVlan_Vlan_Union interface.
func (*Interface_RoutedVlan_Vlan_Union_Uint16) Is_Interface_RoutedVlan_Vlan_Union() {}

// To_Interface_RoutedVlan_Vlan_Union takes an input interface{} and attempts to convert it to a struct
// which implements the Interface_RoutedVlan_Vlan_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *Interface_RoutedVlan) To_Interface_RoutedVlan_Vlan_Union(i interface{}) (Interface_RoutedVlan_Vlan_Union, error) {
	switch v := i.(type) {
	case string:
		return &Interface_RoutedVlan_Vlan_Union_String{v}, nil
	case uint16:
		return &Interface_RoutedVlan_Vlan_Union_Uint16{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to Interface_RoutedVlan_Vlan_Union, unknown union type, got: %T, want any of [string, uint16]", i, i)
	}
}

// Interface_RoutedVlan_Ipv4 represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4 YANG schema element.
type Interface_RoutedVlan_Ipv4 struct {
	ΛMetadata   []ygot.Annotation                              `path:"@" ygotAnnotation:"true"`
	Address     map[string]*Interface_RoutedVlan_Ipv4_Address  `path:"addresses/address" module:"openconfig-if-ip"`
	ΛAddress    []ygot.Annotation                              `path:"addresses/@address" ygotAnnotation:"true"`
	Counters    *Interface_RoutedVlan_Ipv4_Counters            `path:"state/counters" module:"openconfig-if-ip"`
	ΛCounters   []ygot.Annotation                              `path:"state/@counters" ygotAnnotation:"true"`
	DhcpClient  *bool                                          `path:"config/dhcp-client" module:"openconfig-if-ip"`
	ΛDhcpClient []ygot.Annotation                              `path:"config/@dhcp-client" ygotAnnotation:"true"`
	Enabled     *bool                                          `path:"config/enabled" module:"openconfig-if-ip"`
	ΛEnabled    []ygot.Annotation                              `path:"config/@enabled" ygotAnnotation:"true"`
	Mtu         *uint16                                        `path:"config/mtu" module:"openconfig-if-ip"`
	ΛMtu        []ygot.Annotation                              `path:"config/@mtu" ygotAnnotation:"true"`
	Neighbor    map[string]*Interface_RoutedVlan_Ipv4_Neighbor `path:"neighbors/neighbor" module:"openconfig-if-ip"`
	ΛNeighbor   []ygot.Annotation                              `path:"neighbors/@neighbor" ygotAnnotation:"true"`
	ProxyArp    *Interface_RoutedVlan_Ipv4_ProxyArp            `path:"proxy-arp" module:"openconfig-if-ip"`
	ΛProxyArp   []ygot.Annotation                              `path:"@proxy-arp" ygotAnnotation:"true"`
	Unnumbered  *Interface_RoutedVlan_Ipv4_Unnumbered          `path:"unnumbered" module:"openconfig-if-ip"`
	ΛUnnumbered []ygot.Annotation                              `path:"@unnumbered" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Interface_RoutedVlan_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_RoutedVlan_Ipv4) IsYANGGoStruct() {}

// NewAddress creates a new entry in the Address list of the
// Interface_RoutedVlan_Ipv4 struct. The keys of the list are populated from the input
// arguments.
func (t *Interface_RoutedVlan_Ipv4) NewAddress(Ip string) (*Interface_RoutedVlan_Ipv4_Address, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Address == nil {
		t.Address = make(map[string]*Interface_RoutedVlan_Ipv4_Address)
	}

	key := Ip

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Address[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Address", key)
	}

	t.Address[key] = &Interface_RoutedVlan_Ipv4_Address{
		Ip: &Ip,
	}

	return t.Address[key], nil
}

// RenameAddress renames an entry in the list Address within
// the Interface_RoutedVlan_Ipv4 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Interface_RoutedVlan_Ipv4) RenameAddress(oldK, newK string) error {
	if _, ok := t.Address[newK]; ok {
		return fmt.Errorf("key %v already exists in Address", newK)
	}

	e, ok := t.Address[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Address", oldK)
	}
	e.Ip = &newK

	t.Address[newK] = e
	delete(t.Address, oldK)
	return nil
}

// GetOrCreateAddress retrieves the value with the specified keys from
// the receiver Interface_RoutedVlan_Ipv4. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Interface_RoutedVlan_Ipv4) GetOrCreateAddress(Ip string) *Interface_RoutedVlan_Ipv4_Address {

	key := Ip

	if v, ok := t.Address[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAddress(Ip)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAddress got unexpected error: %v", err))
	}
	return v
}

// GetAddress retrieves the value with the specified key from
// the Address map field of Interface_RoutedVlan_Ipv4. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Interface_RoutedVlan_Ipv4) GetAddress(Ip string) *Interface_RoutedVlan_Ipv4_Address {

	if t == nil {
		return nil
	}

	key := Ip

	if lm, ok := t.Address[key]; ok {
		return lm
	}
	return nil
}

// AppendAddress appends the supplied Interface_RoutedVlan_Ipv4_Address struct to the
// list Address of Interface_RoutedVlan_Ipv4. If the key value(s) specified in
// the supplied Interface_RoutedVlan_Ipv4_Address already exist in the list, an error is
// returned.
func (t *Interface_RoutedVlan_Ipv4) AppendAddress(v *Interface_RoutedVlan_Ipv4_Address) error {
	key := *v.Ip

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Address == nil {
		t.Address = make(map[string]*Interface_RoutedVlan_Ipv4_Address)
	}

	if _, ok := t.Address[key]; ok {
		return fmt.Errorf("duplicate key for list Address %v", key)
	}

	t.Address[key] = v
	return nil
}

// NewNeighbor creates a new entry in the Neighbor list of the
// Interface_RoutedVlan_Ipv4 struct. The keys of the list are populated from the input
// arguments.
func (t *Interface_RoutedVlan_Ipv4) NewNeighbor(Ip string) (*Interface_RoutedVlan_Ipv4_Neighbor, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*Interface_RoutedVlan_Ipv4_Neighbor)
	}

	key := Ip

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Neighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Neighbor", key)
	}

	t.Neighbor[key] = &Interface_RoutedVlan_Ipv4_Neighbor{
		Ip: &Ip,
	}

	return t.Neighbor[key], nil
}

// RenameNeighbor renames an entry in the list Neighbor within
// the Interface_RoutedVlan_Ipv4 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Interface_RoutedVlan_Ipv4) RenameNeighbor(oldK, newK string) error {
	if _, ok := t.Neighbor[newK]; ok {
		return fmt.Errorf("key %v already exists in Neighbor", newK)
	}

	e, ok := t.Neighbor[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Neighbor", oldK)
	}
	e.Ip = &newK

	t.Neighbor[newK] = e
	delete(t.Neighbor, oldK)
	return nil
}

// GetOrCreateNeighbor retrieves the value with the specified keys from
// the receiver Interface_RoutedVlan_Ipv4. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Interface_RoutedVlan_Ipv4) GetOrCreateNeighbor(Ip string) *Interface_RoutedVlan_Ipv4_Neighbor {

	key := Ip

	if v, ok := t.Neighbor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNeighbor(Ip)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNeighbor got unexpected error: %v", err))
	}
	return v
}

// GetNeighbor retrieves the value with the specified key from
// the Neighbor map field of Interface_RoutedVlan_Ipv4. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Interface_RoutedVlan_Ipv4) GetNeighbor(Ip string) *Interface_RoutedVlan_Ipv4_Neighbor {

	if t == nil {
		return nil
	}

	key := Ip

	if lm, ok := t.Neighbor[key]; ok {
		return lm
	}
	return nil
}

// AppendNeighbor appends the supplied Interface_RoutedVlan_Ipv4_Neighbor struct to the
// list Neighbor of Interface_RoutedVlan_Ipv4. If the key value(s) specified in
// the supplied Interface_RoutedVlan_Ipv4_Neighbor already exist in the list, an error is
// returned.
func (t *Interface_RoutedVlan_Ipv4) AppendNeighbor(v *Interface_RoutedVlan_Ipv4_Neighbor) error {
	key := *v.Ip

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*Interface_RoutedVlan_Ipv4_Neighbor)
	}

	if _, ok := t.Neighbor[key]; ok {
		return fmt.Errorf("duplicate key for list Neighbor %v", key)
	}

	t.Neighbor[key] = v
	return nil
}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *Interface_RoutedVlan_Ipv4) GetOrCreateCounters() *Interface_RoutedVlan_Ipv4_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &Interface_RoutedVlan_Ipv4_Counters{}
	return t.Counters
}

// GetOrCreateProxyArp retrieves the value of the ProxyArp field
// or returns the existing field if it already exists.
func (t *Interface_RoutedVlan_Ipv4) GetOrCreateProxyArp() *Interface_RoutedVlan_Ipv4_ProxyArp {
	if t.ProxyArp != nil {
		return t.ProxyArp
	}
	t.ProxyArp = &Interface_RoutedVlan_Ipv4_ProxyArp{}
	return t.ProxyArp
}

// GetOrCreateUnnumbered retrieves the value of the Unnumbered field
// or returns the existing field if it already exists.
func (t *Interface_RoutedVlan_Ipv4) GetOrCreateUnnumbered() *Interface_RoutedVlan_Ipv4_Unnumbered {
	if t.Unnumbered != nil {
		return t.Unnumbered
	}
	t.Unnumbered = &Interface_RoutedVlan_Ipv4_Unnumbered{}
	return t.Unnumbered
}

// GetCounters returns the value of the Counters struct pointer
// from Interface_RoutedVlan_Ipv4. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_RoutedVlan_Ipv4) GetCounters() *Interface_RoutedVlan_Ipv4_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetProxyArp returns the value of the ProxyArp struct pointer
// from Interface_RoutedVlan_Ipv4. If the receiver or the field ProxyArp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_RoutedVlan_Ipv4) GetProxyArp() *Interface_RoutedVlan_Ipv4_ProxyArp {
	if t != nil && t.ProxyArp != nil {
		return t.ProxyArp
	}
	return nil
}

// GetUnnumbered returns the value of the Unnumbered struct pointer
// from Interface_RoutedVlan_Ipv4. If the receiver or the field Unnumbered is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_RoutedVlan_Ipv4) GetUnnumbered() *Interface_RoutedVlan_Ipv4_Unnumbered {
	if t != nil && t.Unnumbered != nil {
		return t.Unnumbered
	}
	return nil
}

// GetDhcpClient retrieves the value of the leaf DhcpClient from the Interface_RoutedVlan_Ipv4
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if DhcpClient is set, it can safely use t.GetDhcpClient()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.DhcpClient == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4) GetDhcpClient() bool {
	if t == nil || t.DhcpClient == nil {
		return false
	}
	return *t.DhcpClient
}

// GetEnabled retrieves the value of the leaf Enabled from the Interface_RoutedVlan_Ipv4
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Enabled is set, it can safely use t.GetEnabled()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Enabled == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return true
	}
	return *t.Enabled
}

// GetMtu retrieves the value of the leaf Mtu from the Interface_RoutedVlan_Ipv4
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Mtu is set, it can safely use t.GetMtu()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Mtu == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4) GetMtu() uint16 {
	if t == nil || t.Mtu == nil {
		return 0
	}
	return *t.Mtu
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_RoutedVlan_Ipv4) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_RoutedVlan_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_RoutedVlan_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Interface_RoutedVlan_Ipv4_Address represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address YANG schema element.
type Interface_RoutedVlan_Ipv4_Address struct {
	ΛMetadata     []ygot.Annotation                                      `path:"@" ygotAnnotation:"true"`
	Ip            *string                                                `path:"config/ip|ip" module:"openconfig-if-ip"`
	ΛIp           []ygot.Annotation                                      `path:"config/@ip|@ip" ygotAnnotation:"true"`
	Origin        E_OpenconfigIfIp_IpAddressOrigin                       `path:"state/origin" module:"openconfig-if-ip"`
	ΛOrigin       []ygot.Annotation                                      `path:"state/@origin" ygotAnnotation:"true"`
	PrefixLength  *uint8                                                 `path:"config/prefix-length" module:"openconfig-if-ip"`
	ΛPrefixLength []ygot.Annotation                                      `path:"config/@prefix-length" ygotAnnotation:"true"`
	VrrpGroup     map[uint8]*Interface_RoutedVlan_Ipv4_Address_VrrpGroup `path:"vrrp/vrrp-group" module:"openconfig-if-ip"`
	ΛVrrpGroup    []ygot.Annotation                                      `path:"vrrp/@vrrp-group" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Interface_RoutedVlan_Ipv4_Address implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_RoutedVlan_Ipv4_Address) IsYANGGoStruct() {}

// NewVrrpGroup creates a new entry in the VrrpGroup list of the
// Interface_RoutedVlan_Ipv4_Address struct. The keys of the list are populated from the input
// arguments.
func (t *Interface_RoutedVlan_Ipv4_Address) NewVrrpGroup(VirtualRouterId uint8) (*Interface_RoutedVlan_Ipv4_Address_VrrpGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VrrpGroup == nil {
		t.VrrpGroup = make(map[uint8]*Interface_RoutedVlan_Ipv4_Address_VrrpGroup)
	}

	key := VirtualRouterId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.VrrpGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list VrrpGroup", key)
	}

	t.VrrpGroup[key] = &Interface_RoutedVlan_Ipv4_Address_VrrpGroup{
		VirtualRouterId: &VirtualRouterId,
	}

	return t.VrrpGroup[key], nil
}

// RenameVrrpGroup renames an entry in the list VrrpGroup within
// the Interface_RoutedVlan_Ipv4_Address struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Interface_RoutedVlan_Ipv4_Address) RenameVrrpGroup(oldK, newK uint8) error {
	if _, ok := t.VrrpGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in VrrpGroup", newK)
	}

	e, ok := t.VrrpGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in VrrpGroup", oldK)
	}
	e.VirtualRouterId = &newK

	t.VrrpGroup[newK] = e
	delete(t.VrrpGroup, oldK)
	return nil
}

// GetOrCreateVrrpGroup retrieves the value with the specified keys from
// the receiver Interface_RoutedVlan_Ipv4_Address. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Interface_RoutedVlan_Ipv4_Address) GetOrCreateVrrpGroup(VirtualRouterId uint8) *Interface_RoutedVlan_Ipv4_Address_VrrpGroup {

	key := VirtualRouterId

	if v, ok := t.VrrpGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewVrrpGroup(VirtualRouterId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateVrrpGroup got unexpected error: %v", err))
	}
	return v
}

// GetVrrpGroup retrieves the value with the specified key from
// the VrrpGroup map field of Interface_RoutedVlan_Ipv4_Address. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Interface_RoutedVlan_Ipv4_Address) GetVrrpGroup(VirtualRouterId uint8) *Interface_RoutedVlan_Ipv4_Address_VrrpGroup {

	if t == nil {
		return nil
	}

	key := VirtualRouterId

	if lm, ok := t.VrrpGroup[key]; ok {
		return lm
	}
	return nil
}

// AppendVrrpGroup appends the supplied Interface_RoutedVlan_Ipv4_Address_VrrpGroup struct to the
// list VrrpGroup of Interface_RoutedVlan_Ipv4_Address. If the key value(s) specified in
// the supplied Interface_RoutedVlan_Ipv4_Address_VrrpGroup already exist in the list, an error is
// returned.
func (t *Interface_RoutedVlan_Ipv4_Address) AppendVrrpGroup(v *Interface_RoutedVlan_Ipv4_Address_VrrpGroup) error {
	key := *v.VirtualRouterId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VrrpGroup == nil {
		t.VrrpGroup = make(map[uint8]*Interface_RoutedVlan_Ipv4_Address_VrrpGroup)
	}

	if _, ok := t.VrrpGroup[key]; ok {
		return fmt.Errorf("duplicate key for list VrrpGroup %v", key)
	}

	t.VrrpGroup[key] = v
	return nil
}

// GetIp retrieves the value of the leaf Ip from the Interface_RoutedVlan_Ipv4_Address
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Ip is set, it can safely use t.GetIp()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Ip == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Address) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetOrigin retrieves the value of the leaf Origin from the Interface_RoutedVlan_Ipv4_Address
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Origin is set, it can safely use t.GetOrigin()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Origin == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Address) GetOrigin() E_OpenconfigIfIp_IpAddressOrigin {
	if t == nil || t.Origin == 0 {
		return 0
	}
	return t.Origin
}

// GetPrefixLength retrieves the value of the leaf PrefixLength from the Interface_RoutedVlan_Ipv4_Address
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PrefixLength is set, it can safely use t.GetPrefixLength()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PrefixLength == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Address) GetPrefixLength() uint8 {
	if t == nil || t.PrefixLength == nil {
		return 0
	}
	return *t.PrefixLength
}

// ΛListKeyMap returns the keys of the Interface_RoutedVlan_Ipv4_Address struct, which is a YANG list entry.
func (t *Interface_RoutedVlan_Ipv4_Address) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ip == nil {
		return nil, fmt.Errorf("nil value for key Ip")
	}

	return map[string]interface{}{
		"ip": *t.Ip,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_RoutedVlan_Ipv4_Address) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_RoutedVlan_Ipv4_Address"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_RoutedVlan_Ipv4_Address) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup struct {
	ΛMetadata              []ygot.Annotation                                              `path:"@" ygotAnnotation:"true"`
	AcceptMode             *bool                                                          `path:"config/accept-mode" module:"openconfig-if-ip"`
	ΛAcceptMode            []ygot.Annotation                                              `path:"config/@accept-mode" ygotAnnotation:"true"`
	AdvertisementInterval  *uint16                                                        `path:"config/advertisement-interval" module:"openconfig-if-ip"`
	ΛAdvertisementInterval []ygot.Annotation                                              `path:"config/@advertisement-interval" ygotAnnotation:"true"`
	CurrentPriority        *uint8                                                         `path:"state/current-priority" module:"openconfig-if-ip"`
	ΛCurrentPriority       []ygot.Annotation                                              `path:"state/@current-priority" ygotAnnotation:"true"`
	InterfaceTracking      *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking `path:"interface-tracking" module:"openconfig-if-ip"`
	ΛInterfaceTracking     []ygot.Annotation                                              `path:"@interface-tracking" ygotAnnotation:"true"`
	Preempt                *bool                                                          `path:"config/preempt" module:"openconfig-if-ip"`
	ΛPreempt               []ygot.Annotation                                              `path:"config/@preempt" ygotAnnotation:"true"`
	PreemptDelay           *uint16                                                        `path:"config/preempt-delay" module:"openconfig-if-ip"`
	ΛPreemptDelay          []ygot.Annotation                                              `path:"config/@preempt-delay" ygotAnnotation:"true"`
	Priority               *uint8                                                         `path:"config/priority" module:"openconfig-if-ip"`
	ΛPriority              []ygot.Annotation                                              `path:"config/@priority" ygotAnnotation:"true"`
	VirtualAddress         []string                                                       `path:"config/virtual-address" module:"openconfig-if-ip"`
	ΛVirtualAddress        []ygot.Annotation                                              `path:"config/@virtual-address" ygotAnnotation:"true"`
	VirtualRouterId        *uint8                                                         `path:"config/virtual-router-id|virtual-router-id" module:"openconfig-if-ip"`
	ΛVirtualRouterId       []ygot.Annotation                                              `path:"config/@virtual-router-id|@virtual-router-id" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Interface_RoutedVlan_Ipv4_Address_VrrpGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_RoutedVlan_Ipv4_Address_VrrpGroup) IsYANGGoStruct() {}

// GetOrCreateInterfaceTracking retrieves the value of the InterfaceTracking field
// or returns the existing field if it already exists.
func (t *Interface_RoutedVlan_Ipv4_Address_VrrpGroup) GetOrCreateInterfaceTracking() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking {
	if t.InterfaceTracking != nil {
		return t.InterfaceTracking
	}
	t.InterfaceTracking = &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking{}
	return t.InterfaceTracking
}

// GetInterfaceTracking returns the value of the InterfaceTracking struct pointer
// from Interface_RoutedVlan_Ipv4_Address_VrrpGroup. If the receiver or the field InterfaceTracking is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_RoutedVlan_Ipv4_Address_VrrpGroup) GetInterfaceTracking() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking {
	if t != nil && t.InterfaceTracking != nil {
		return t.InterfaceTracking
	}
	return nil
}

// GetAcceptMode retrieves the value of the leaf AcceptMode from the Interface_RoutedVlan_Ipv4_Address_VrrpGroup
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AcceptMode is set, it can safely use t.GetAcceptMode()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AcceptMode == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Address_VrrpGroup) GetAcceptMode() bool {
	if t == nil || t.AcceptMode == nil {
		return false
	}
	return *t.AcceptMode
}

// GetAdvertisementInterval retrieves the value of the leaf AdvertisementInterval from the Interface_RoutedVlan_Ipv4_Address_VrrpGroup
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AdvertisementInterval is set, it can safely use t.GetAdvertisementInterval()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AdvertisementInterval == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Address_VrrpGroup) GetAdvertisementInterval() uint16 {
	if t == nil || t.AdvertisementInterval == nil {
		return 100
	}
	return *t.AdvertisementInterval
}

// GetCurrentPriority retrieves the value of the leaf CurrentPriority from the Interface_RoutedVlan_Ipv4_Address_VrrpGroup
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if CurrentPriority is set, it can safely use t.GetCurrentPriority()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.CurrentPriority == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Address_VrrpGroup) GetCurrentPriority() uint8 {
	if t == nil || t.CurrentPriority == nil {
		return 0
	}
	return *t.CurrentPriority
}

// GetPreempt retrieves the value of the leaf Preempt from the Interface_RoutedVlan_Ipv4_Address_VrrpGroup
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Preempt is set, it can safely use t.GetPreempt()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Preempt == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Address_VrrpGroup) GetPreempt() bool {
	if t == nil || t.Preempt == nil {
		return true
	}
	return *t.Preempt
}

// GetPreemptDelay retrieves the value of the leaf PreemptDelay from the Interface_RoutedVlan_Ipv4_Address_VrrpGroup
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PreemptDelay is set, it can safely use t.GetPreemptDelay()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PreemptDelay == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Address_VrrpGroup) GetPreemptDelay() uint16 {
	if t == nil || t.PreemptDelay == nil {
		return 0
	}
	return *t.PreemptDelay
}

// GetPriority retrieves the value of the leaf Priority from the Interface_RoutedVlan_Ipv4_Address_VrrpGroup
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Priority is set, it can safely use t.GetPriority()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Priority == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Address_VrrpGroup) GetPriority() uint8 {
	if t == nil || t.Priority == nil {
		return 100
	}
	return *t.Priority
}

// GetVirtualAddress retrieves the value of the leaf VirtualAddress from the Interface_RoutedVlan_Ipv4_Address_VrrpGroup
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if VirtualAddress is set, it can safely use t.GetVirtualAddress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.VirtualAddress == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Address_VrrpGroup) GetVirtualAddress() []string {
	if t == nil || t.VirtualAddress == nil {
		return nil
	}
	return t.VirtualAddress
}

// GetVirtualRouterId retrieves the value of the leaf VirtualRouterId from the Interface_RoutedVlan_Ipv4_Address_VrrpGroup
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if VirtualRouterId is set, it can safely use t.GetVirtualRouterId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.VirtualRouterId == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Address_VrrpGroup) GetVirtualRouterId() uint8 {
	if t == nil || t.VirtualRouterId == nil {
		return 0
	}
	return *t.VirtualRouterId
}

// ΛListKeyMap returns the keys of the Interface_RoutedVlan_Ipv4_Address_VrrpGroup struct, which is a YANG list entry.
func (t *Interface_RoutedVlan_Ipv4_Address_VrrpGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.VirtualRouterId == nil {
		return nil, fmt.Errorf("nil value for key VirtualRouterId")
	}

	return map[string]interface{}{
		"virtual-router-id": *t.VirtualRouterId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_RoutedVlan_Ipv4_Address_VrrpGroup) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_RoutedVlan_Ipv4_Address_VrrpGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_RoutedVlan_Ipv4_Address_VrrpGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking struct {
	ΛMetadata          []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	PriorityDecrement  *uint8            `path:"config/priority-decrement" module:"openconfig-if-ip"`
	ΛPriorityDecrement []ygot.Annotation `path:"config/@priority-decrement" ygotAnnotation:"true"`
	TrackInterface     []string          `path:"config/track-interface" module:"openconfig-if-ip"`
	ΛTrackInterface    []ygot.Annotation `path:"config/@track-interface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking) IsYANGGoStruct() {}

// GetPriorityDecrement retrieves the value of the leaf PriorityDecrement from the Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PriorityDecrement is set, it can safely use t.GetPriorityDecrement()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PriorityDecrement == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking) GetPriorityDecrement() uint8 {
	if t == nil || t.PriorityDecrement == nil {
		return 0
	}
	return *t.PriorityDecrement
}

// GetTrackInterface retrieves the value of the leaf TrackInterface from the Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if TrackInterface is set, it can safely use t.GetTrackInterface()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.TrackInterface == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking) GetTrackInterface() []string {
	if t == nil || t.TrackInterface == nil {
		return nil
	}
	return t.TrackInterface
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_RoutedVlan_Ipv4_Counters represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters struct {
	ΛMetadata           []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	InDiscardedPkts     *uint64           `path:"in-discarded-pkts" module:"openconfig-if-ip"`
	ΛInDiscardedPkts    []ygot.Annotation `path:"@in-discarded-pkts" ygotAnnotation:"true"`
	InErrorPkts         *uint64           `path:"in-error-pkts" module:"openconfig-if-ip"`
	ΛInErrorPkts        []ygot.Annotation `path:"@in-error-pkts" ygotAnnotation:"true"`
	InForwardedOctets   *uint64           `path:"in-forwarded-octets" module:"openconfig-if-ip"`
	ΛInForwardedOctets  []ygot.Annotation `path:"@in-forwarded-octets" ygotAnnotation:"true"`
	InForwardedPkts     *uint64           `path:"in-forwarded-pkts" module:"openconfig-if-ip"`
	ΛInForwardedPkts    []ygot.Annotation `path:"@in-forwarded-pkts" ygotAnnotation:"true"`
	InOctets            *uint64           `path:"in-octets" module:"openconfig-if-ip"`
	ΛInOctets           []ygot.Annotation `path:"@in-octets" ygotAnnotation:"true"`
	InPkts              *uint64           `path:"in-pkts" module:"openconfig-if-ip"`
	ΛInPkts             []ygot.Annotation `path:"@in-pkts" ygotAnnotation:"true"`
	OutDiscardedPkts    *uint64           `path:"out-discarded-pkts" module:"openconfig-if-ip"`
	ΛOutDiscardedPkts   []ygot.Annotation `path:"@out-discarded-pkts" ygotAnnotation:"true"`
	OutErrorPkts        *uint64           `path:"out-error-pkts" module:"openconfig-if-ip"`
	ΛOutErrorPkts       []ygot.Annotation `path:"@out-error-pkts" ygotAnnotation:"true"`
	OutForwardedOctets  *uint64           `path:"out-forwarded-octets" module:"openconfig-if-ip"`
	ΛOutForwardedOctets []ygot.Annotation `path:"@out-forwarded-octets" ygotAnnotation:"true"`
	OutForwardedPkts    *uint64           `path:"out-forwarded-pkts" module:"openconfig-if-ip"`
	ΛOutForwardedPkts   []ygot.Annotation `path:"@out-forwarded-pkts" ygotAnnotation:"true"`
	OutOctets           *uint64           `path:"out-octets" module:"openconfig-if-ip"`
	ΛOutOctets          []ygot.Annotation `path:"@out-octets" ygotAnnotation:"true"`
	OutPkts             *uint64           `path:"out-pkts" module:"openconfig-if-ip"`
	ΛOutPkts            []ygot.Annotation `path:"@out-pkts" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Interface_RoutedVlan_Ipv4_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_RoutedVlan_Ipv4_Counters) IsYANGGoStruct() {}

// GetInDiscardedPkts retrieves the value of the leaf InDiscardedPkts from the Interface_RoutedVlan_Ipv4_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InDiscardedPkts is set, it can safely use t.GetInDiscardedPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InDiscardedPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Counters) GetInDiscardedPkts() uint64 {
	if t == nil || t.InDiscardedPkts == nil {
		return 0
	}
	return *t.InDiscardedPkts
}

// GetInErrorPkts retrieves the value of the leaf InErrorPkts from the Interface_RoutedVlan_Ipv4_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InErrorPkts is set, it can safely use t.GetInErrorPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InErrorPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Counters) GetInErrorPkts() uint64 {
	if t == nil || t.InErrorPkts == nil {
		return 0
	}
	return *t.InErrorPkts
}

// GetInForwardedOctets retrieves the value of the leaf InForwardedOctets from the Interface_RoutedVlan_Ipv4_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InForwardedOctets is set, it can safely use t.GetInForwardedOctets()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InForwardedOctets == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Counters) GetInForwardedOctets() uint64 {
	if t == nil || t.InForwardedOctets == nil {
		return 0
	}
	return *t.InForwardedOctets
}

// GetInForwardedPkts retrieves the value of the leaf InForwardedPkts from the Interface_RoutedVlan_Ipv4_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InForwardedPkts is set, it can safely use t.GetInForwardedPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InForwardedPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Counters) GetInForwardedPkts() uint64 {
	if t == nil || t.InForwardedPkts == nil {
		return 0
	}
	return *t.InForwardedPkts
}

// GetInOctets retrieves the value of the leaf InOctets from the Interface_RoutedVlan_Ipv4_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InOctets is set, it can safely use t.GetInOctets()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InOctets == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Counters) GetInOctets() uint64 {
	if t == nil || t.InOctets == nil {
		return 0
	}
	return *t.InOctets
}

// GetInPkts retrieves the value of the leaf InPkts from the Interface_RoutedVlan_Ipv4_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InPkts is set, it can safely use t.GetInPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Counters) GetInPkts() uint64 {
	if t == nil || t.InPkts == nil {
		return 0
	}
	return *t.InPkts
}

// GetOutDiscardedPkts retrieves the value of the leaf OutDiscardedPkts from the Interface_RoutedVlan_Ipv4_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutDiscardedPkts is set, it can safely use t.GetOutDiscardedPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutDiscardedPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Counters) GetOutDiscardedPkts() uint64 {
	if t == nil || t.OutDiscardedPkts == nil {
		return 0
	}
	return *t.OutDiscardedPkts
}

// GetOutErrorPkts retrieves the value of the leaf OutErrorPkts from the Interface_RoutedVlan_Ipv4_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutErrorPkts is set, it can safely use t.GetOutErrorPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutErrorPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Counters) GetOutErrorPkts() uint64 {
	if t == nil || t.OutErrorPkts == nil {
		return 0
	}
	return *t.OutErrorPkts
}

// GetOutForwardedOctets retrieves the value of the leaf OutForwardedOctets from the Interface_RoutedVlan_Ipv4_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutForwardedOctets is set, it can safely use t.GetOutForwardedOctets()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutForwardedOctets == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Counters) GetOutForwardedOctets() uint64 {
	if t == nil || t.OutForwardedOctets == nil {
		return 0
	}
	return *t.OutForwardedOctets
}

// GetOutForwardedPkts retrieves the value of the leaf OutForwardedPkts from the Interface_RoutedVlan_Ipv4_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutForwardedPkts is set, it can safely use t.GetOutForwardedPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutForwardedPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Counters) GetOutForwardedPkts() uint64 {
	if t == nil || t.OutForwardedPkts == nil {
		return 0
	}
	return *t.OutForwardedPkts
}

// GetOutOctets retrieves the value of the leaf OutOctets from the Interface_RoutedVlan_Ipv4_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutOctets is set, it can safely use t.GetOutOctets()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutOctets == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Counters) GetOutOctets() uint64 {
	if t == nil || t.OutOctets == nil {
		return 0
	}
	return *t.OutOctets
}

// GetOutPkts retrieves the value of the leaf OutPkts from the Interface_RoutedVlan_Ipv4_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutPkts is set, it can safely use t.GetOutPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Counters) GetOutPkts() uint64 {
	if t == nil || t.OutPkts == nil {
		return 0
	}
	return *t.OutPkts
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_RoutedVlan_Ipv4_Counters) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_RoutedVlan_Ipv4_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_RoutedVlan_Ipv4_Counters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_RoutedVlan_Ipv4_Neighbor represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor YANG schema element.
type Interface_RoutedVlan_Ipv4_Neighbor struct {
	ΛMetadata         []ygot.Annotation               `path:"@" ygotAnnotation:"true"`
	Ip                *string                         `path:"config/ip|ip" module:"openconfig-if-ip"`
	ΛIp               []ygot.Annotation               `path:"config/@ip|@ip" ygotAnnotation:"true"`
	LinkLayerAddress  *string                         `path:"config/link-layer-address" module:"openconfig-if-ip"`
	ΛLinkLayerAddress []ygot.Annotation               `path:"config/@link-layer-address" ygotAnnotation:"true"`
	Origin            E_OpenconfigIfIp_NeighborOrigin `path:"state/origin" module:"openconfig-if-ip"`
	ΛOrigin           []ygot.Annotation               `path:"state/@origin" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Interface_RoutedVlan_Ipv4_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_RoutedVlan_Ipv4_Neighbor) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the Interface_RoutedVlan_Ipv4_Neighbor
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Ip is set, it can safely use t.GetIp()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Ip == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Neighbor) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetLinkLayerAddress retrieves the value of the leaf LinkLayerAddress from the Interface_RoutedVlan_Ipv4_Neighbor
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LinkLayerAddress is set, it can safely use t.GetLinkLayerAddress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LinkLayerAddress == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Neighbor) GetLinkLayerAddress() string {
	if t == nil || t.LinkLayerAddress == nil {
		return ""
	}
	return *t.LinkLayerAddress
}

// GetOrigin retrieves the value of the leaf Origin from the Interface_RoutedVlan_Ipv4_Neighbor
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Origin is set, it can safely use t.GetOrigin()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Origin == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Neighbor) GetOrigin() E_OpenconfigIfIp_NeighborOrigin {
	if t == nil || t.Origin == 0 {
		return 0
	}
	return t.Origin
}

// ΛListKeyMap returns the keys of the Interface_RoutedVlan_Ipv4_Neighbor struct, which is a YANG list entry.
func (t *Interface_RoutedVlan_Ipv4_Neighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ip == nil {
		return nil, fmt.Errorf("nil value for key Ip")
	}

	return map[string]interface{}{
		"ip": *t.Ip,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_RoutedVlan_Ipv4_Neighbor) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_RoutedVlan_Ipv4_Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_RoutedVlan_Ipv4_Neighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_RoutedVlan_Ipv4_ProxyArp represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/proxy-arp YANG schema element.
type Interface_RoutedVlan_Ipv4_ProxyArp struct {
	ΛMetadata []ygot.Annotation              `path:"@" ygotAnnotation:"true"`
	Mode      E_OpenconfigIfIp_ProxyArp_Mode `path:"config/mode" module:"openconfig-if-ip"`
	ΛMode     []ygot.Annotation              `path:"config/@mode" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Interface_RoutedVlan_Ipv4_ProxyArp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_RoutedVlan_Ipv4_ProxyArp) IsYANGGoStruct() {}

// GetMode retrieves the value of the leaf Mode from the Interface_RoutedVlan_Ipv4_ProxyArp
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Mode is set, it can safely use t.GetMode()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Mode == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_ProxyArp) GetMode() E_OpenconfigIfIp_ProxyArp_Mode {
	if t == nil || t.Mode == 0 {
		return OpenconfigIfIp_ProxyArp_Mode_DISABLE
	}
	return t.Mode
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_RoutedVlan_Ipv4_ProxyArp) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_RoutedVlan_Ipv4_ProxyArp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_RoutedVlan_Ipv4_ProxyArp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_RoutedVlan_Ipv4_Unnumbered represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/unnumbered YANG schema element.
type Interface_RoutedVlan_Ipv4_Unnumbered struct {
	ΛMetadata     []ygot.Annotation                                  `path:"@" ygotAnnotation:"true"`
	Enabled       *bool                                              `path:"config/enabled" module:"openconfig-if-ip"`
	ΛEnabled      []ygot.Annotation                                  `path:"config/@enabled" ygotAnnotation:"true"`
	InterfaceRef  *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef `path:"interface-ref" module:"openconfig-if-ip"`
	ΛInterfaceRef []ygot.Annotation                                  `path:"@interface-ref" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Interface_RoutedVlan_Ipv4_Unnumbered implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_RoutedVlan_Ipv4_Unnumbered) IsYANGGoStruct() {}

// GetOrCreateInterfaceRef retrieves the value of the InterfaceRef field
// or returns the existing field if it already exists.
func (t *Interface_RoutedVlan_Ipv4_Unnumbered) GetOrCreateInterfaceRef() *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef {
	if t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	t.InterfaceRef = &Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef{}
	return t.InterfaceRef
}

// GetInterfaceRef returns the value of the InterfaceRef struct pointer
// from Interface_RoutedVlan_Ipv4_Unnumbered. If the receiver or the field InterfaceRef is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_RoutedVlan_Ipv4_Unnumbered) GetInterfaceRef() *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef {
	if t != nil && t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	return nil
}

// GetEnabled retrieves the value of the leaf Enabled from the Interface_RoutedVlan_Ipv4_Unnumbered
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Enabled is set, it can safely use t.GetEnabled()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Enabled == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Unnumbered) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_RoutedVlan_Ipv4_Unnumbered) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_RoutedVlan_Ipv4_Unnumbered"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_RoutedVlan_Ipv4_Unnumbered) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/unnumbered/interface-ref YANG schema element.
type Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef struct {
	ΛMetadata     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Interface     *string           `path:"config/interface" module:"openconfig-if-ip"`
	ΛInterface    []ygot.Annotation `path:"config/@interface" ygotAnnotation:"true"`
	Subinterface  *uint32           `path:"config/subinterface" module:"openconfig-if-ip"`
	ΛSubinterface []ygot.Annotation `path:"config/@subinterface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef) IsYANGGoStruct() {}

// GetInterface retrieves the value of the leaf Interface from the Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Interface is set, it can safely use t.GetInterface()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Interface == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// GetSubinterface retrieves the value of the leaf Subinterface from the Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Subinterface is set, it can safely use t.GetSubinterface()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Subinterface == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef) GetSubinterface() uint32 {
	if t == nil || t.Subinterface == nil {
		return 0
	}
	return *t.Subinterface
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_RoutedVlan_Ipv6 represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6 YANG schema element.
type Interface_RoutedVlan_Ipv6 struct {
	ΛMetadata               []ygot.Annotation                              `path:"@" ygotAnnotation:"true"`
	Address                 map[string]*Interface_RoutedVlan_Ipv6_Address  `path:"addresses/address" module:"openconfig-if-ip"`
	ΛAddress                []ygot.Annotation                              `path:"addresses/@address" ygotAnnotation:"true"`
	Counters                *Interface_RoutedVlan_Ipv6_Counters            `path:"state/counters" module:"openconfig-if-ip"`
	ΛCounters               []ygot.Annotation                              `path:"state/@counters" ygotAnnotation:"true"`
	DhcpClient              *bool                                          `path:"config/dhcp-client" module:"openconfig-if-ip"`
	ΛDhcpClient             []ygot.Annotation                              `path:"config/@dhcp-client" ygotAnnotation:"true"`
	DupAddrDetectTransmits  *uint32                                        `path:"config/dup-addr-detect-transmits" module:"openconfig-if-ip"`
	ΛDupAddrDetectTransmits []ygot.Annotation                              `path:"config/@dup-addr-detect-transmits" ygotAnnotation:"true"`
	Enabled                 *bool                                          `path:"config/enabled" module:"openconfig-if-ip"`
	ΛEnabled                []ygot.Annotation                              `path:"config/@enabled" ygotAnnotation:"true"`
	Mtu                     *uint32                                        `path:"config/mtu" module:"openconfig-if-ip"`
	ΛMtu                    []ygot.Annotation                              `path:"config/@mtu" ygotAnnotation:"true"`
	Neighbor                map[string]*Interface_RoutedVlan_Ipv6_Neighbor `path:"neighbors/neighbor" module:"openconfig-if-ip"`
	ΛNeighbor               []ygot.Annotation                              `path:"neighbors/@neighbor" ygotAnnotation:"true"`
	RouterAdvertisement     *Interface_RoutedVlan_Ipv6_RouterAdvertisement `path:"router-advertisement" module:"openconfig-if-ip"`
	ΛRouterAdvertisement    []ygot.Annotation                              `path:"@router-advertisement" ygotAnnotation:"true"`
	Unnumbered              *Interface_RoutedVlan_Ipv6_Unnumbered          `path:"unnumbered" module:"openconfig-if-ip"`
	ΛUnnumbered             []ygot.Annotation                              `path:"@unnumbered" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Interface_RoutedVlan_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_RoutedVlan_Ipv6) IsYANGGoStruct() {}

// NewAddress creates a new entry in the Address list of the
// Interface_RoutedVlan_Ipv6 struct. The keys of the list are populated from the input
// arguments.
func (t *Interface_RoutedVlan_Ipv6) NewAddress(Ip string) (*Interface_RoutedVlan_Ipv6_Address, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Address == nil {
		t.Address = make(map[string]*Interface_RoutedVlan_Ipv6_Address)
	}

	key := Ip

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Address[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Address", key)
	}

	t.Address[key] = &Interface_RoutedVlan_Ipv6_Address{
		Ip: &Ip,
	}

	return t.Address[key], nil
}

// RenameAddress renames an entry in the list Address within
// the Interface_RoutedVlan_Ipv6 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Interface_RoutedVlan_Ipv6) RenameAddress(oldK, newK string) error {
	if _, ok := t.Address[newK]; ok {
		return fmt.Errorf("key %v already exists in Address", newK)
	}

	e, ok := t.Address[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Address", oldK)
	}
	e.Ip = &newK

	t.Address[newK] = e
	delete(t.Address, oldK)
	return nil
}

// GetOrCreateAddress retrieves the value with the specified keys from
// the receiver Interface_RoutedVlan_Ipv6. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Interface_RoutedVlan_Ipv6) GetOrCreateAddress(Ip string) *Interface_RoutedVlan_Ipv6_Address {

	key := Ip

	if v, ok := t.Address[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAddress(Ip)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAddress got unexpected error: %v", err))
	}
	return v
}

// GetAddress retrieves the value with the specified key from
// the Address map field of Interface_RoutedVlan_Ipv6. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Interface_RoutedVlan_Ipv6) GetAddress(Ip string) *Interface_RoutedVlan_Ipv6_Address {

	if t == nil {
		return nil
	}

	key := Ip

	if lm, ok := t.Address[key]; ok {
		return lm
	}
	return nil
}

// AppendAddress appends the supplied Interface_RoutedVlan_Ipv6_Address struct to the
// list Address of Interface_RoutedVlan_Ipv6. If the key value(s) specified in
// the supplied Interface_RoutedVlan_Ipv6_Address already exist in the list, an error is
// returned.
func (t *Interface_RoutedVlan_Ipv6) AppendAddress(v *Interface_RoutedVlan_Ipv6_Address) error {
	key := *v.Ip

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Address == nil {
		t.Address = make(map[string]*Interface_RoutedVlan_Ipv6_Address)
	}

	if _, ok := t.Address[key]; ok {
		return fmt.Errorf("duplicate key for list Address %v", key)
	}

	t.Address[key] = v
	return nil
}

// NewNeighbor creates a new entry in the Neighbor list of the
// Interface_RoutedVlan_Ipv6 struct. The keys of the list are populated from the input
// arguments.
func (t *Interface_RoutedVlan_Ipv6) NewNeighbor(Ip string) (*Interface_RoutedVlan_Ipv6_Neighbor, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*Interface_RoutedVlan_Ipv6_Neighbor)
	}

	key := Ip

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Neighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Neighbor", key)
	}

	t.Neighbor[key] = &Interface_RoutedVlan_Ipv6_Neighbor{
		Ip: &Ip,
	}

	return t.Neighbor[key], nil
}

// RenameNeighbor renames an entry in the list Neighbor within
// the Interface_RoutedVlan_Ipv6 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Interface_RoutedVlan_Ipv6) RenameNeighbor(oldK, newK string) error {
	if _, ok := t.Neighbor[newK]; ok {
		return fmt.Errorf("key %v already exists in Neighbor", newK)
	}

	e, ok := t.Neighbor[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Neighbor", oldK)
	}
	e.Ip = &newK

	t.Neighbor[newK] = e
	delete(t.Neighbor, oldK)
	return nil
}

// GetOrCreateNeighbor retrieves the value with the specified keys from
// the receiver Interface_RoutedVlan_Ipv6. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Interface_RoutedVlan_Ipv6) GetOrCreateNeighbor(Ip string) *Interface_RoutedVlan_Ipv6_Neighbor {

	key := Ip

	if v, ok := t.Neighbor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNeighbor(Ip)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNeighbor got unexpected error: %v", err))
	}
	return v
}

// GetNeighbor retrieves the value with the specified key from
// the Neighbor map field of Interface_RoutedVlan_Ipv6. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Interface_RoutedVlan_Ipv6) GetNeighbor(Ip string) *Interface_RoutedVlan_Ipv6_Neighbor {

	if t == nil {
		return nil
	}

	key := Ip

	if lm, ok := t.Neighbor[key]; ok {
		return lm
	}
	return nil
}

// AppendNeighbor appends the supplied Interface_RoutedVlan_Ipv6_Neighbor struct to the
// list Neighbor of Interface_RoutedVlan_Ipv6. If the key value(s) specified in
// the supplied Interface_RoutedVlan_Ipv6_Neighbor already exist in the list, an error is
// returned.
func (t *Interface_RoutedVlan_Ipv6) AppendNeighbor(v *Interface_RoutedVlan_Ipv6_Neighbor) error {
	key := *v.Ip

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*Interface_RoutedVlan_Ipv6_Neighbor)
	}

	if _, ok := t.Neighbor[key]; ok {
		return fmt.Errorf("duplicate key for list Neighbor %v", key)
	}

	t.Neighbor[key] = v
	return nil
}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *Interface_RoutedVlan_Ipv6) GetOrCreateCounters() *Interface_RoutedVlan_Ipv6_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &Interface_RoutedVlan_Ipv6_Counters{}
	return t.Counters
}

// GetOrCreateRouterAdvertisement retrieves the value of the RouterAdvertisement field
// or returns the existing field if it already exists.
func (t *Interface_RoutedVlan_Ipv6) GetOrCreateRouterAdvertisement() *Interface_RoutedVlan_Ipv6_RouterAdvertisement {
	if t.RouterAdvertisement != nil {
		return t.RouterAdvertisement
	}
	t.RouterAdvertisement = &Interface_RoutedVlan_Ipv6_RouterAdvertisement{}
	return t.RouterAdvertisement
}

// GetOrCreateUnnumbered retrieves the value of the Unnumbered field
// or returns the existing field if it already exists.
func (t *Interface_RoutedVlan_Ipv6) GetOrCreateUnnumbered() *Interface_RoutedVlan_Ipv6_Unnumbered {
	if t.Unnumbered != nil {
		return t.Unnumbered
	}
	t.Unnumbered = &Interface_RoutedVlan_Ipv6_Unnumbered{}
	return t.Unnumbered
}

// GetCounters returns the value of the Counters struct pointer
// from Interface_RoutedVlan_Ipv6. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_RoutedVlan_Ipv6) GetCounters() *Interface_RoutedVlan_Ipv6_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetRouterAdvertisement returns the value of the RouterAdvertisement struct pointer
// from Interface_RoutedVlan_Ipv6. If the receiver or the field RouterAdvertisement is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_RoutedVlan_Ipv6) GetRouterAdvertisement() *Interface_RoutedVlan_Ipv6_RouterAdvertisement {
	if t != nil && t.RouterAdvertisement != nil {
		return t.RouterAdvertisement
	}
	return nil
}

// GetUnnumbered returns the value of the Unnumbered struct pointer
// from Interface_RoutedVlan_Ipv6. If the receiver or the field Unnumbered is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_RoutedVlan_Ipv6) GetUnnumbered() *Interface_RoutedVlan_Ipv6_Unnumbered {
	if t != nil && t.Unnumbered != nil {
		return t.Unnumbered
	}
	return nil
}

// GetDhcpClient retrieves the value of the leaf DhcpClient from the Interface_RoutedVlan_Ipv6
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if DhcpClient is set, it can safely use t.GetDhcpClient()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.DhcpClient == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6) GetDhcpClient() bool {
	if t == nil || t.DhcpClient == nil {
		return false
	}
	return *t.DhcpClient
}

// GetDupAddrDetectTransmits retrieves the value of the leaf DupAddrDetectTransmits from the Interface_RoutedVlan_Ipv6
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if DupAddrDetectTransmits is set, it can safely use t.GetDupAddrDetectTransmits()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.DupAddrDetectTransmits == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6) GetDupAddrDetectTransmits() uint32 {
	if t == nil || t.DupAddrDetectTransmits == nil {
		return 1
	}
	return *t.DupAddrDetectTransmits
}

// GetEnabled retrieves the value of the leaf Enabled from the Interface_RoutedVlan_Ipv6
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Enabled is set, it can safely use t.GetEnabled()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Enabled == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return true
	}
	return *t.Enabled
}

// GetMtu retrieves the value of the leaf Mtu from the Interface_RoutedVlan_Ipv6
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Mtu is set, it can safely use t.GetMtu()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Mtu == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6) GetMtu() uint32 {
	if t == nil || t.Mtu == nil {
		return 0
	}
	return *t.Mtu
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_RoutedVlan_Ipv6) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_RoutedVlan_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_RoutedVlan_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Interface_RoutedVlan_Ipv6_Address represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address YANG schema element.
type Interface_RoutedVlan_Ipv6_Address struct {
	ΛMetadata     []ygot.Annotation                                      `path:"@" ygotAnnotation:"true"`
	Ip            *string                                                `path:"config/ip|ip" module:"openconfig-if-ip"`
	ΛIp           []ygot.Annotation                                      `path:"config/@ip|@ip" ygotAnnotation:"true"`
	Origin        E_OpenconfigIfIp_IpAddressOrigin                       `path:"state/origin" module:"openconfig-if-ip"`
	ΛOrigin       []ygot.Annotation                                      `path:"state/@origin" ygotAnnotation:"true"`
	PrefixLength  *uint8                                                 `path:"config/prefix-length" module:"openconfig-if-ip"`
	ΛPrefixLength []ygot.Annotation                                      `path:"config/@prefix-length" ygotAnnotation:"true"`
	Status        E_OpenconfigIfIp_Address_Status                        `path:"state/status" module:"openconfig-if-ip"`
	ΛStatus       []ygot.Annotation                                      `path:"state/@status" ygotAnnotation:"true"`
	VrrpGroup     map[uint8]*Interface_RoutedVlan_Ipv6_Address_VrrpGroup `path:"vrrp/vrrp-group" module:"openconfig-if-ip"`
	ΛVrrpGroup    []ygot.Annotation                                      `path:"vrrp/@vrrp-group" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Interface_RoutedVlan_Ipv6_Address implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_RoutedVlan_Ipv6_Address) IsYANGGoStruct() {}

// NewVrrpGroup creates a new entry in the VrrpGroup list of the
// Interface_RoutedVlan_Ipv6_Address struct. The keys of the list are populated from the input
// arguments.
func (t *Interface_RoutedVlan_Ipv6_Address) NewVrrpGroup(VirtualRouterId uint8) (*Interface_RoutedVlan_Ipv6_Address_VrrpGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VrrpGroup == nil {
		t.VrrpGroup = make(map[uint8]*Interface_RoutedVlan_Ipv6_Address_VrrpGroup)
	}

	key := VirtualRouterId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.VrrpGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list VrrpGroup", key)
	}

	t.VrrpGroup[key] = &Interface_RoutedVlan_Ipv6_Address_VrrpGroup{
		VirtualRouterId: &VirtualRouterId,
	}

	return t.VrrpGroup[key], nil
}

// RenameVrrpGroup renames an entry in the list VrrpGroup within
// the Interface_RoutedVlan_Ipv6_Address struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Interface_RoutedVlan_Ipv6_Address) RenameVrrpGroup(oldK, newK uint8) error {
	if _, ok := t.VrrpGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in VrrpGroup", newK)
	}

	e, ok := t.VrrpGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in VrrpGroup", oldK)
	}
	e.VirtualRouterId = &newK

	t.VrrpGroup[newK] = e
	delete(t.VrrpGroup, oldK)
	return nil
}

// GetOrCreateVrrpGroup retrieves the value with the specified keys from
// the receiver Interface_RoutedVlan_Ipv6_Address. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Interface_RoutedVlan_Ipv6_Address) GetOrCreateVrrpGroup(VirtualRouterId uint8) *Interface_RoutedVlan_Ipv6_Address_VrrpGroup {

	key := VirtualRouterId

	if v, ok := t.VrrpGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewVrrpGroup(VirtualRouterId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateVrrpGroup got unexpected error: %v", err))
	}
	return v
}

// GetVrrpGroup retrieves the value with the specified key from
// the VrrpGroup map field of Interface_RoutedVlan_Ipv6_Address. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Interface_RoutedVlan_Ipv6_Address) GetVrrpGroup(VirtualRouterId uint8) *Interface_RoutedVlan_Ipv6_Address_VrrpGroup {

	if t == nil {
		return nil
	}

	key := VirtualRouterId

	if lm, ok := t.VrrpGroup[key]; ok {
		return lm
	}
	return nil
}

// AppendVrrpGroup appends the supplied Interface_RoutedVlan_Ipv6_Address_VrrpGroup struct to the
// list VrrpGroup of Interface_RoutedVlan_Ipv6_Address. If the key value(s) specified in
// the supplied Interface_RoutedVlan_Ipv6_Address_VrrpGroup already exist in the list, an error is
// returned.
func (t *Interface_RoutedVlan_Ipv6_Address) AppendVrrpGroup(v *Interface_RoutedVlan_Ipv6_Address_VrrpGroup) error {
	key := *v.VirtualRouterId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VrrpGroup == nil {
		t.VrrpGroup = make(map[uint8]*Interface_RoutedVlan_Ipv6_Address_VrrpGroup)
	}

	if _, ok := t.VrrpGroup[key]; ok {
		return fmt.Errorf("duplicate key for list VrrpGroup %v", key)
	}

	t.VrrpGroup[key] = v
	return nil
}

// GetIp retrieves the value of the leaf Ip from the Interface_RoutedVlan_Ipv6_Address
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Ip is set, it can safely use t.GetIp()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Ip == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Address) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetOrigin retrieves the value of the leaf Origin from the Interface_RoutedVlan_Ipv6_Address
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Origin is set, it can safely use t.GetOrigin()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Origin == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Address) GetOrigin() E_OpenconfigIfIp_IpAddressOrigin {
	if t == nil || t.Origin == 0 {
		return 0
	}
	return t.Origin
}

// GetPrefixLength retrieves the value of the leaf PrefixLength from the Interface_RoutedVlan_Ipv6_Address
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PrefixLength is set, it can safely use t.GetPrefixLength()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PrefixLength == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Address) GetPrefixLength() uint8 {
	if t == nil || t.PrefixLength == nil {
		return 0
	}
	return *t.PrefixLength
}

// GetStatus retrieves the value of the leaf Status from the Interface_RoutedVlan_Ipv6_Address
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Status is set, it can safely use t.GetStatus()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Status == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Address) GetStatus() E_OpenconfigIfIp_Address_Status {
	if t == nil || t.Status == 0 {
		return 0
	}
	return t.Status
}

// ΛListKeyMap returns the keys of the Interface_RoutedVlan_Ipv6_Address struct, which is a YANG list entry.
func (t *Interface_RoutedVlan_Ipv6_Address) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ip == nil {
		return nil, fmt.Errorf("nil value for key Ip")
	}

	return map[string]interface{}{
		"ip": *t.Ip,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_RoutedVlan_Ipv6_Address) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_RoutedVlan_Ipv6_Address"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_RoutedVlan_Ipv6_Address) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup struct {
	ΛMetadata              []ygot.Annotation                                              `path:"@" ygotAnnotation:"true"`
	AcceptMode             *bool                                                          `path:"config/accept-mode" module:"openconfig-if-ip"`
	ΛAcceptMode            []ygot.Annotation                                              `path:"config/@accept-mode" ygotAnnotation:"true"`
	AdvertisementInterval  *uint16                                                        `path:"config/advertisement-interval" module:"openconfig-if-ip"`
	ΛAdvertisementInterval []ygot.Annotation                                              `path:"config/@advertisement-interval" ygotAnnotation:"true"`
	CurrentPriority        *uint8                                                         `path:"state/current-priority" module:"openconfig-if-ip"`
	ΛCurrentPriority       []ygot.Annotation                                              `path:"state/@current-priority" ygotAnnotation:"true"`
	InterfaceTracking      *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking `path:"interface-tracking" module:"openconfig-if-ip"`
	ΛInterfaceTracking     []ygot.Annotation                                              `path:"@interface-tracking" ygotAnnotation:"true"`
	Preempt                *bool                                                          `path:"config/preempt" module:"openconfig-if-ip"`
	ΛPreempt               []ygot.Annotation                                              `path:"config/@preempt" ygotAnnotation:"true"`
	PreemptDelay           *uint16                                                        `path:"config/preempt-delay" module:"openconfig-if-ip"`
	ΛPreemptDelay          []ygot.Annotation                                              `path:"config/@preempt-delay" ygotAnnotation:"true"`
	Priority               *uint8                                                         `path:"config/priority" module:"openconfig-if-ip"`
	ΛPriority              []ygot.Annotation                                              `path:"config/@priority" ygotAnnotation:"true"`
	VirtualAddress         []string                                                       `path:"config/virtual-address" module:"openconfig-if-ip"`
	ΛVirtualAddress        []ygot.Annotation                                              `path:"config/@virtual-address" ygotAnnotation:"true"`
	VirtualLinkLocal       *string                                                        `path:"config/virtual-link-local" module:"openconfig-if-ip"`
	ΛVirtualLinkLocal      []ygot.Annotation                                              `path:"config/@virtual-link-local" ygotAnnotation:"true"`
	VirtualRouterId        *uint8                                                         `path:"config/virtual-router-id|virtual-router-id" module:"openconfig-if-ip"`
	ΛVirtualRouterId       []ygot.Annotation                                              `path:"config/@virtual-router-id|@virtual-router-id" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Interface_RoutedVlan_Ipv6_Address_VrrpGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_RoutedVlan_Ipv6_Address_VrrpGroup) IsYANGGoStruct() {}

// GetOrCreateInterfaceTracking retrieves the value of the InterfaceTracking field
// or returns the existing field if it already exists.
func (t *Interface_RoutedVlan_Ipv6_Address_VrrpGroup) GetOrCreateInterfaceTracking() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking {
	if t.InterfaceTracking != nil {
		return t.InterfaceTracking
	}
	t.InterfaceTracking = &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking{}
	return t.InterfaceTracking
}

// GetInterfaceTracking returns the value of the InterfaceTracking struct pointer
// from Interface_RoutedVlan_Ipv6_Address_VrrpGroup. If the receiver or the field InterfaceTracking is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_RoutedVlan_Ipv6_Address_VrrpGroup) GetInterfaceTracking() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking {
	if t != nil && t.InterfaceTracking != nil {
		return t.InterfaceTracking
	}
	return nil
}

// GetAcceptMode retrieves the value of the leaf AcceptMode from the Interface_RoutedVlan_Ipv6_Address_VrrpGroup
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AcceptMode is set, it can safely use t.GetAcceptMode()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AcceptMode == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Address_VrrpGroup) GetAcceptMode() bool {
	if t == nil || t.AcceptMode == nil {
		return false
	}
	return *t.AcceptMode
}

// GetAdvertisementInterval retrieves the value of the leaf AdvertisementInterval from the Interface_RoutedVlan_Ipv6_Address_VrrpGroup
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AdvertisementInterval is set, it can safely use t.GetAdvertisementInterval()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AdvertisementInterval == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Address_VrrpGroup) GetAdvertisementInterval() uint16 {
	if t == nil || t.AdvertisementInterval == nil {
		return 100
	}
	return *t.AdvertisementInterval
}

// GetCurrentPriority retrieves the value of the leaf CurrentPriority from the Interface_RoutedVlan_Ipv6_Address_VrrpGroup
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if CurrentPriority is set, it can safely use t.GetCurrentPriority()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.CurrentPriority == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Address_VrrpGroup) GetCurrentPriority() uint8 {
	if t == nil || t.CurrentPriority == nil {
		return 0
	}
	return *t.CurrentPriority
}

// GetPreempt retrieves the value of the leaf Preempt from the Interface_RoutedVlan_Ipv6_Address_VrrpGroup
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Preempt is set, it can safely use t.GetPreempt()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Preempt == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Address_VrrpGroup) GetPreempt() bool {
	if t == nil || t.Preempt == nil {
		return true
	}
	return *t.Preempt
}

// GetPreemptDelay retrieves the value of the leaf PreemptDelay from the Interface_RoutedVlan_Ipv6_Address_VrrpGroup
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PreemptDelay is set, it can safely use t.GetPreemptDelay()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PreemptDelay == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Address_VrrpGroup) GetPreemptDelay() uint16 {
	if t == nil || t.PreemptDelay == nil {
		return 0
	}
	return *t.PreemptDelay
}

// GetPriority retrieves the value of the leaf Priority from the Interface_RoutedVlan_Ipv6_Address_VrrpGroup
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Priority is set, it can safely use t.GetPriority()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Priority == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Address_VrrpGroup) GetPriority() uint8 {
	if t == nil || t.Priority == nil {
		return 100
	}
	return *t.Priority
}

// GetVirtualAddress retrieves the value of the leaf VirtualAddress from the Interface_RoutedVlan_Ipv6_Address_VrrpGroup
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if VirtualAddress is set, it can safely use t.GetVirtualAddress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.VirtualAddress == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Address_VrrpGroup) GetVirtualAddress() []string {
	if t == nil || t.VirtualAddress == nil {
		return nil
	}
	return t.VirtualAddress
}

// GetVirtualLinkLocal retrieves the value of the leaf VirtualLinkLocal from the Interface_RoutedVlan_Ipv6_Address_VrrpGroup
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if VirtualLinkLocal is set, it can safely use t.GetVirtualLinkLocal()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.VirtualLinkLocal == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Address_VrrpGroup) GetVirtualLinkLocal() string {
	if t == nil || t.VirtualLinkLocal == nil {
		return ""
	}
	return *t.VirtualLinkLocal
}

// GetVirtualRouterId retrieves the value of the leaf VirtualRouterId from the Interface_RoutedVlan_Ipv6_Address_VrrpGroup
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if VirtualRouterId is set, it can safely use t.GetVirtualRouterId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.VirtualRouterId == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Address_VrrpGroup) GetVirtualRouterId() uint8 {
	if t == nil || t.VirtualRouterId == nil {
		return 0
	}
	return *t.VirtualRouterId
}

// ΛListKeyMap returns the keys of the Interface_RoutedVlan_Ipv6_Address_VrrpGroup struct, which is a YANG list entry.
func (t *Interface_RoutedVlan_Ipv6_Address_VrrpGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.VirtualRouterId == nil {
		return nil, fmt.Errorf("nil value for key VirtualRouterId")
	}

	return map[string]interface{}{
		"virtual-router-id": *t.VirtualRouterId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_RoutedVlan_Ipv6_Address_VrrpGroup) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_RoutedVlan_Ipv6_Address_VrrpGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_RoutedVlan_Ipv6_Address_VrrpGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking struct {
	ΛMetadata          []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	PriorityDecrement  *uint8            `path:"config/priority-decrement" module:"openconfig-if-ip"`
	ΛPriorityDecrement []ygot.Annotation `path:"config/@priority-decrement" ygotAnnotation:"true"`
	TrackInterface     []string          `path:"config/track-interface" module:"openconfig-if-ip"`
	ΛTrackInterface    []ygot.Annotation `path:"config/@track-interface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking) IsYANGGoStruct() {}

// GetPriorityDecrement retrieves the value of the leaf PriorityDecrement from the Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PriorityDecrement is set, it can safely use t.GetPriorityDecrement()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PriorityDecrement == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking) GetPriorityDecrement() uint8 {
	if t == nil || t.PriorityDecrement == nil {
		return 0
	}
	return *t.PriorityDecrement
}

// GetTrackInterface retrieves the value of the leaf TrackInterface from the Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if TrackInterface is set, it can safely use t.GetTrackInterface()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.TrackInterface == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking) GetTrackInterface() []string {
	if t == nil || t.TrackInterface == nil {
		return nil
	}
	return t.TrackInterface
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_RoutedVlan_Ipv6_Counters represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters struct {
	ΛMetadata           []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	InDiscardedPkts     *uint64           `path:"in-discarded-pkts" module:"openconfig-if-ip"`
	ΛInDiscardedPkts    []ygot.Annotation `path:"@in-discarded-pkts" ygotAnnotation:"true"`
	InErrorPkts         *uint64           `path:"in-error-pkts" module:"openconfig-if-ip"`
	ΛInErrorPkts        []ygot.Annotation `path:"@in-error-pkts" ygotAnnotation:"true"`
	InForwardedOctets   *uint64           `path:"in-forwarded-octets" module:"openconfig-if-ip"`
	ΛInForwardedOctets  []ygot.Annotation `path:"@in-forwarded-octets" ygotAnnotation:"true"`
	InForwardedPkts     *uint64           `path:"in-forwarded-pkts" module:"openconfig-if-ip"`
	ΛInForwardedPkts    []ygot.Annotation `path:"@in-forwarded-pkts" ygotAnnotation:"true"`
	InOctets            *uint64           `path:"in-octets" module:"openconfig-if-ip"`
	ΛInOctets           []ygot.Annotation `path:"@in-octets" ygotAnnotation:"true"`
	InPkts              *uint64           `path:"in-pkts" module:"openconfig-if-ip"`
	ΛInPkts             []ygot.Annotation `path:"@in-pkts" ygotAnnotation:"true"`
	OutDiscardedPkts    *uint64           `path:"out-discarded-pkts" module:"openconfig-if-ip"`
	ΛOutDiscardedPkts   []ygot.Annotation `path:"@out-discarded-pkts" ygotAnnotation:"true"`
	OutErrorPkts        *uint64           `path:"out-error-pkts" module:"openconfig-if-ip"`
	ΛOutErrorPkts       []ygot.Annotation `path:"@out-error-pkts" ygotAnnotation:"true"`
	OutForwardedOctets  *uint64           `path:"out-forwarded-octets" module:"openconfig-if-ip"`
	ΛOutForwardedOctets []ygot.Annotation `path:"@out-forwarded-octets" ygotAnnotation:"true"`
	OutForwardedPkts    *uint64           `path:"out-forwarded-pkts" module:"openconfig-if-ip"`
	ΛOutForwardedPkts   []ygot.Annotation `path:"@out-forwarded-pkts" ygotAnnotation:"true"`
	OutOctets           *uint64           `path:"out-octets" module:"openconfig-if-ip"`
	ΛOutOctets          []ygot.Annotation `path:"@out-octets" ygotAnnotation:"true"`
	OutPkts             *uint64           `path:"out-pkts" module:"openconfig-if-ip"`
	ΛOutPkts            []ygot.Annotation `path:"@out-pkts" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Interface_RoutedVlan_Ipv6_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_RoutedVlan_Ipv6_Counters) IsYANGGoStruct() {}

// GetInDiscardedPkts retrieves the value of the leaf InDiscardedPkts from the Interface_RoutedVlan_Ipv6_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InDiscardedPkts is set, it can safely use t.GetInDiscardedPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InDiscardedPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Counters) GetInDiscardedPkts() uint64 {
	if t == nil || t.InDiscardedPkts == nil {
		return 0
	}
	return *t.InDiscardedPkts
}

// GetInErrorPkts retrieves the value of the leaf InErrorPkts from the Interface_RoutedVlan_Ipv6_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InErrorPkts is set, it can safely use t.GetInErrorPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InErrorPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Counters) GetInErrorPkts() uint64 {
	if t == nil || t.InErrorPkts == nil {
		return 0
	}
	return *t.InErrorPkts
}

// GetInForwardedOctets retrieves the value of the leaf InForwardedOctets from the Interface_RoutedVlan_Ipv6_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InForwardedOctets is set, it can safely use t.GetInForwardedOctets()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InForwardedOctets == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Counters) GetInForwardedOctets() uint64 {
	if t == nil || t.InForwardedOctets == nil {
		return 0
	}
	return *t.InForwardedOctets
}

// GetInForwardedPkts retrieves the value of the leaf InForwardedPkts from the Interface_RoutedVlan_Ipv6_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InForwardedPkts is set, it can safely use t.GetInForwardedPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InForwardedPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Counters) GetInForwardedPkts() uint64 {
	if t == nil || t.InForwardedPkts == nil {
		return 0
	}
	return *t.InForwardedPkts
}

// GetInOctets retrieves the value of the leaf InOctets from the Interface_RoutedVlan_Ipv6_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InOctets is set, it can safely use t.GetInOctets()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InOctets == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Counters) GetInOctets() uint64 {
	if t == nil || t.InOctets == nil {
		return 0
	}
	return *t.InOctets
}

// GetInPkts retrieves the value of the leaf InPkts from the Interface_RoutedVlan_Ipv6_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InPkts is set, it can safely use t.GetInPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Counters) GetInPkts() uint64 {
	if t == nil || t.InPkts == nil {
		return 0
	}
	return *t.InPkts
}

// GetOutDiscardedPkts retrieves the value of the leaf OutDiscardedPkts from the Interface_RoutedVlan_Ipv6_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutDiscardedPkts is set, it can safely use t.GetOutDiscardedPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutDiscardedPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Counters) GetOutDiscardedPkts() uint64 {
	if t == nil || t.OutDiscardedPkts == nil {
		return 0
	}
	return *t.OutDiscardedPkts
}

// GetOutErrorPkts retrieves the value of the leaf OutErrorPkts from the Interface_RoutedVlan_Ipv6_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutErrorPkts is set, it can safely use t.GetOutErrorPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutErrorPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Counters) GetOutErrorPkts() uint64 {
	if t == nil || t.OutErrorPkts == nil {
		return 0
	}
	return *t.OutErrorPkts
}

// GetOutForwardedOctets retrieves the value of the leaf OutForwardedOctets from the Interface_RoutedVlan_Ipv6_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutForwardedOctets is set, it can safely use t.GetOutForwardedOctets()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutForwardedOctets == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Counters) GetOutForwardedOctets() uint64 {
	if t == nil || t.OutForwardedOctets == nil {
		return 0
	}
	return *t.OutForwardedOctets
}

// GetOutForwardedPkts retrieves the value of the leaf OutForwardedPkts from the Interface_RoutedVlan_Ipv6_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutForwardedPkts is set, it can safely use t.GetOutForwardedPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutForwardedPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Counters) GetOutForwardedPkts() uint64 {
	if t == nil || t.OutForwardedPkts == nil {
		return 0
	}
	return *t.OutForwardedPkts
}

// GetOutOctets retrieves the value of the leaf OutOctets from the Interface_RoutedVlan_Ipv6_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutOctets is set, it can safely use t.GetOutOctets()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutOctets == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Counters) GetOutOctets() uint64 {
	if t == nil || t.OutOctets == nil {
		return 0
	}
	return *t.OutOctets
}

// GetOutPkts retrieves the value of the leaf OutPkts from the Interface_RoutedVlan_Ipv6_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutPkts is set, it can safely use t.GetOutPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Counters) GetOutPkts() uint64 {
	if t == nil || t.OutPkts == nil {
		return 0
	}
	return *t.OutPkts
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_RoutedVlan_Ipv6_Counters) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_RoutedVlan_Ipv6_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_RoutedVlan_Ipv6_Counters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_RoutedVlan_Ipv6_Neighbor represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor YANG schema element.
type Interface_RoutedVlan_Ipv6_Neighbor struct {
	ΛMetadata         []ygot.Annotation                       `path:"@" ygotAnnotation:"true"`
	Ip                *string                                 `path:"config/ip|ip" module:"openconfig-if-ip"`
	ΛIp               []ygot.Annotation                       `path:"config/@ip|@ip" ygotAnnotation:"true"`
	IsRouter          *bool                                   `path:"state/is-router" module:"openconfig-if-ip"`
	ΛIsRouter         []ygot.Annotation                       `path:"state/@is-router" ygotAnnotation:"true"`
	LinkLayerAddress  *string                                 `path:"config/link-layer-address" module:"openconfig-if-ip"`
	ΛLinkLayerAddress []ygot.Annotation                       `path:"config/@link-layer-address" ygotAnnotation:"true"`
	NeighborState     E_OpenconfigIfIp_Neighbor_NeighborState `path:"state/neighbor-state" module:"openconfig-if-ip"`
	ΛNeighborState    []ygot.Annotation                       `path:"state/@neighbor-state" ygotAnnotation:"true"`
	Origin            E_OpenconfigIfIp_NeighborOrigin         `path:"state/origin" module:"openconfig-if-ip"`
	ΛOrigin           []ygot.Annotation                       `path:"state/@origin" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Interface_RoutedVlan_Ipv6_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_RoutedVlan_Ipv6_Neighbor) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the Interface_RoutedVlan_Ipv6_Neighbor
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Ip is set, it can safely use t.GetIp()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Ip == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Neighbor) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetIsRouter retrieves the value of the leaf IsRouter from the Interface_RoutedVlan_Ipv6_Neighbor
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if IsRouter is set, it can safely use t.GetIsRouter()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.IsRouter == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Neighbor) GetIsRouter() bool {
	if t == nil || t.IsRouter == nil {
		return false
	}
	return *t.IsRouter
}

// GetLinkLayerAddress retrieves the value of the leaf LinkLayerAddress from the Interface_RoutedVlan_Ipv6_Neighbor
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LinkLayerAddress is set, it can safely use t.GetLinkLayerAddress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LinkLayerAddress == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Neighbor) GetLinkLayerAddress() string {
	if t == nil || t.LinkLayerAddress == nil {
		return ""
	}
	return *t.LinkLayerAddress
}

// GetNeighborState retrieves the value of the leaf NeighborState from the Interface_RoutedVlan_Ipv6_Neighbor
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if NeighborState is set, it can safely use t.GetNeighborState()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.NeighborState == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Neighbor) GetNeighborState() E_OpenconfigIfIp_Neighbor_NeighborState {
	if t == nil || t.NeighborState == 0 {
		return 0
	}
	return t.NeighborState
}

// GetOrigin retrieves the value of the leaf Origin from the Interface_RoutedVlan_Ipv6_Neighbor
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Origin is set, it can safely use t.GetOrigin()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Origin == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Neighbor) GetOrigin() E_OpenconfigIfIp_NeighborOrigin {
	if t == nil || t.Origin == 0 {
		return 0
	}
	return t.Origin
}

// ΛListKeyMap returns the keys of the Interface_RoutedVlan_Ipv6_Neighbor struct, which is a YANG list entry.
func (t *Interface_RoutedVlan_Ipv6_Neighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ip == nil {
		return nil, fmt.Errorf("nil value for key Ip")
	}

	return map[string]interface{}{
		"ip": *t.Ip,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_RoutedVlan_Ipv6_Neighbor) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_RoutedVlan_Ipv6_Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_RoutedVlan_Ipv6_Neighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Interval  *uint32           `path:"config/interval" module:"openconfig-if-ip"`
	ΛInterval []ygot.Annotation `path:"config/@interval" ygotAnnotation:"true"`
	Lifetime  *uint32           `path:"config/lifetime" module:"openconfig-if-ip"`
	ΛLifetime []ygot.Annotation `path:"config/@lifetime" ygotAnnotation:"true"`
	Suppress  *bool             `path:"config/suppress" module:"openconfig-if-ip"`
	ΛSuppress []ygot.Annotation `path:"config/@suppress" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Interface_RoutedVlan_Ipv6_RouterAdvertisement implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_RoutedVlan_Ipv6_RouterAdvertisement) IsYANGGoStruct() {}

// GetInterval retrieves the value of the leaf Interval from the Interface_RoutedVlan_Ipv6_RouterAdvertisement
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Interval is set, it can safely use t.GetInterval()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Interval == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_RouterAdvertisement) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetLifetime retrieves the value of the leaf Lifetime from the Interface_RoutedVlan_Ipv6_RouterAdvertisement
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Lifetime is set, it can safely use t.GetLifetime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Lifetime == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_RouterAdvertisement) GetLifetime() uint32 {
	if t == nil || t.Lifetime == nil {
		return 0
	}
	return *t.Lifetime
}

// GetSuppress retrieves the value of the leaf Suppress from the Interface_RoutedVlan_Ipv6_RouterAdvertisement
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Suppress is set, it can safely use t.GetSuppress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Suppress == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_RouterAdvertisement) GetSuppress() bool {
	if t == nil || t.Suppress == nil {
		return false
	}
	return *t.Suppress
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_RoutedVlan_Ipv6_RouterAdvertisement) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_RoutedVlan_Ipv6_RouterAdvertisement"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_RoutedVlan_Ipv6_RouterAdvertisement) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_RoutedVlan_Ipv6_Unnumbered represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/unnumbered YANG schema element.
type Interface_RoutedVlan_Ipv6_Unnumbered struct {
	ΛMetadata     []ygot.Annotation                                  `path:"@" ygotAnnotation:"true"`
	Enabled       *bool                                              `path:"config/enabled" module:"openconfig-if-ip"`
	ΛEnabled      []ygot.Annotation                                  `path:"config/@enabled" ygotAnnotation:"true"`
	InterfaceRef  *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef `path:"interface-ref" module:"openconfig-if-ip"`
	ΛInterfaceRef []ygot.Annotation                                  `path:"@interface-ref" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Interface_RoutedVlan_Ipv6_Unnumbered implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_RoutedVlan_Ipv6_Unnumbered) IsYANGGoStruct() {}

// GetOrCreateInterfaceRef retrieves the value of the InterfaceRef field
// or returns the existing field if it already exists.
func (t *Interface_RoutedVlan_Ipv6_Unnumbered) GetOrCreateInterfaceRef() *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef {
	if t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	t.InterfaceRef = &Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef{}
	return t.InterfaceRef
}

// GetInterfaceRef returns the value of the InterfaceRef struct pointer
// from Interface_RoutedVlan_Ipv6_Unnumbered. If the receiver or the field InterfaceRef is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_RoutedVlan_Ipv6_Unnumbered) GetInterfaceRef() *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef {
	if t != nil && t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	return nil
}

// GetEnabled retrieves the value of the leaf Enabled from the Interface_RoutedVlan_Ipv6_Unnumbered
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Enabled is set, it can safely use t.GetEnabled()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Enabled == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Unnumbered) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_RoutedVlan_Ipv6_Unnumbered) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_RoutedVlan_Ipv6_Unnumbered"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_RoutedVlan_Ipv6_Unnumbered) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/unnumbered/interface-ref YANG schema element.
type Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef struct {
	ΛMetadata     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Interface     *string           `path:"config/interface" module:"openconfig-if-ip"`
	ΛInterface    []ygot.Annotation `path:"config/@interface" ygotAnnotation:"true"`
	Subinterface  *uint32           `path:"config/subinterface" module:"openconfig-if-ip"`
	ΛSubinterface []ygot.Annotation `path:"config/@subinterface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef) IsYANGGoStruct() {}

// GetInterface retrieves the value of the leaf Interface from the Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Interface is set, it can safely use t.GetInterface()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Interface == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// GetSubinterface retrieves the value of the leaf Subinterface from the Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Subinterface is set, it can safely use t.GetSubinterface()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Subinterface == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef) GetSubinterface() uint32 {
	if t == nil || t.Subinterface == nil {
		return 0
	}
	return *t.Subinterface
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_Subinterface represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface YANG schema element.
type Interface_Subinterface struct {
	ΛMetadata    []ygot.Annotation                            `path:"@" ygotAnnotation:"true"`
	AdminStatus  E_OpenconfigInterfaces_Interface_AdminStatus `path:"state/admin-status" module:"openconfig-interfaces"`
	ΛAdminStatus []ygot.Annotation                            `path:"state/@admin-status" ygotAnnotation:"true"`
	Counters     *Interface_Subinterface_Counters             `path:"state/counters" module:"openconfig-interfaces"`
	ΛCounters    []ygot.Annotation                            `path:"state/@counters" ygotAnnotation:"true"`
	Description  *string                                      `path:"config/description" module:"openconfig-interfaces"`
	ΛDescription []ygot.Annotation                            `path:"config/@description" ygotAnnotation:"true"`
	Enabled      *bool                                        `path:"config/enabled" module:"openconfig-interfaces"`
	ΛEnabled     []ygot.Annotation                            `path:"config/@enabled" ygotAnnotation:"true"`
	Ifindex      *uint32                                      `path:"state/ifindex" module:"openconfig-interfaces"`
	ΛIfindex     []ygot.Annotation                            `path:"state/@ifindex" ygotAnnotation:"true"`
	Index        *uint32                                      `path:"config/index|index" module:"openconfig-interfaces"`
	ΛIndex       []ygot.Annotation                            `path:"config/@index|@index" ygotAnnotation:"true"`
	Ipv4         *Interface_Subinterface_Ipv4                 `path:"ipv4" module:"openconfig-if-ip"`
	ΛIpv4        []ygot.Annotation                            `path:"@ipv4" ygotAnnotation:"true"`
	Ipv6         *Interface_Subinterface_Ipv6                 `path:"ipv6" module:"openconfig-if-ip"`
	ΛIpv6        []ygot.Annotation                            `path:"@ipv6" ygotAnnotation:"true"`
	LastChange   *uint64                                      `path:"state/last-change" module:"openconfig-interfaces"`
	ΛLastChange  []ygot.Annotation                            `path:"state/@last-change" ygotAnnotation:"true"`
	Logical      *bool                                        `path:"state/logical" module:"openconfig-interfaces"`
	ΛLogical     []ygot.Annotation                            `path:"state/@logical" ygotAnnotation:"true"`
	Name         *string                                      `path:"state/name" module:"openconfig-interfaces"`
	ΛName        []ygot.Annotation                            `path:"state/@name" ygotAnnotation:"true"`
	OperStatus   E_OpenconfigInterfaces_Interface_OperStatus  `path:"state/oper-status" module:"openconfig-interfaces"`
	ΛOperStatus  []ygot.Annotation                            `path:"state/@oper-status" ygotAnnotation:"true"`
	Vlan         *Interface_Subinterface_Vlan                 `path:"vlan" module:"openconfig-vlan"`
	ΛVlan        []ygot.Annotation                            `path:"@vlan" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Interface_Subinterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface) IsYANGGoStruct() {}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *Interface_Subinterface) GetOrCreateCounters() *Interface_Subinterface_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &Interface_Subinterface_Counters{}
	return t.Counters
}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *Interface_Subinterface) GetOrCreateIpv4() *Interface_Subinterface_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &Interface_Subinterface_Ipv4{}
	return t.Ipv4
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *Interface_Subinterface) GetOrCreateIpv6() *Interface_Subinterface_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &Interface_Subinterface_Ipv6{}
	return t.Ipv6
}

// GetOrCreateVlan retrieves the value of the Vlan field
// or returns the existing field if it already exists.
func (t *Interface_Subinterface) GetOrCreateVlan() *Interface_Subinterface_Vlan {
	if t.Vlan != nil {
		return t.Vlan
	}
	t.Vlan = &Interface_Subinterface_Vlan{}
	return t.Vlan
}

// GetCounters returns the value of the Counters struct pointer
// from Interface_Subinterface. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Subinterface) GetCounters() *Interface_Subinterface_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from Interface_Subinterface. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Subinterface) GetIpv4() *Interface_Subinterface_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from Interface_Subinterface. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Subinterface) GetIpv6() *Interface_Subinterface_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// GetVlan returns the value of the Vlan struct pointer
// from Interface_Subinterface. If the receiver or the field Vlan is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Subinterface) GetVlan() *Interface_Subinterface_Vlan {
	if t != nil && t.Vlan != nil {
		return t.Vlan
	}
	return nil
}

// GetAdminStatus retrieves the value of the leaf AdminStatus from the Interface_Subinterface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AdminStatus is set, it can safely use t.GetAdminStatus()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AdminStatus == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface) GetAdminStatus() E_OpenconfigInterfaces_Interface_AdminStatus {
	if t == nil || t.AdminStatus == 0 {
		return 0
	}
	return t.AdminStatus
}

// GetDescription retrieves the value of the leaf Description from the Interface_Subinterface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Description is set, it can safely use t.GetDescription()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Description == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEnabled retrieves the value of the leaf Enabled from the Interface_Subinterface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Enabled is set, it can safely use t.GetEnabled()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Enabled == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return true
	}
	return *t.Enabled
}

// GetIfindex retrieves the value of the leaf Ifindex from the Interface_Subinterface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Ifindex is set, it can safely use t.GetIfindex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Ifindex == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface) GetIfindex() uint32 {
	if t == nil || t.Ifindex == nil {
		return 0
	}
	return *t.Ifindex
}

// GetIndex retrieves the value of the leaf Index from the Interface_Subinterface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Index is set, it can safely use t.GetIndex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Index == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface) GetIndex() uint32 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// GetLastChange retrieves the value of the leaf LastChange from the Interface_Subinterface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LastChange is set, it can safely use t.GetLastChange()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LastChange == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface) GetLastChange() uint64 {
	if t == nil || t.LastChange == nil {
		return 0
	}
	return *t.LastChange
}

// GetLogical retrieves the value of the leaf Logical from the Interface_Subinterface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Logical is set, it can safely use t.GetLogical()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Logical == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface) GetLogical() bool {
	if t == nil || t.Logical == nil {
		return false
	}
	return *t.Logical
}

// GetName retrieves the value of the leaf Name from the Interface_Subinterface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Name is set, it can safely use t.GetName()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Name == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetOperStatus retrieves the value of the leaf OperStatus from the Interface_Subinterface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OperStatus is set, it can safely use t.GetOperStatus()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OperStatus == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface) GetOperStatus() E_OpenconfigInterfaces_Interface_OperStatus {
	if t == nil || t.OperStatus == 0 {
		return 0
	}
	return t.OperStatus
}

// ΛListKeyMap returns the keys of the Interface_Subinterface struct, which is a YANG list entry.
func (t *Interface_Subinterface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Interface_Subinterface_Counters represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters YANG schema element.
type Interface_Subinterface_Counters struct {
	ΛMetadata           []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	CarrierTransitions  *uint64           `path:"carrier-transitions" module:"openconfig-interfaces"`
	ΛCarrierTransitions []ygot.Annotation `path:"@carrier-transitions" ygotAnnotation:"true"`
	InBroadcastPkts     *uint64           `path:"in-broadcast-pkts" module:"openconfig-interfaces"`
	ΛInBroadcastPkts    []ygot.Annotation `path:"@in-broadcast-pkts" ygotAnnotation:"true"`
	InDiscards          *uint64           `path:"in-discards" module:"openconfig-interfaces"`
	ΛInDiscards         []ygot.Annotation `path:"@in-discards" ygotAnnotation:"true"`
	InErrors            *uint64           `path:"in-errors" module:"openconfig-interfaces"`
	ΛInErrors           []ygot.Annotation `path:"@in-errors" ygotAnnotation:"true"`
	InFcsErrors         *uint64           `path:"in-fcs-errors" module:"openconfig-interfaces"`
	ΛInFcsErrors        []ygot.Annotation `path:"@in-fcs-errors" ygotAnnotation:"true"`
	InMulticastPkts     *uint64           `path:"in-multicast-pkts" module:"openconfig-interfaces"`
	ΛInMulticastPkts    []ygot.Annotation `path:"@in-multicast-pkts" ygotAnnotation:"true"`
	InOctets            *uint64           `path:"in-octets" module:"openconfig-interfaces"`
	ΛInOctets           []ygot.Annotation `path:"@in-octets" ygotAnnotation:"true"`
	InPkts              *uint64           `path:"in-pkts" module:"openconfig-interfaces"`
	ΛInPkts             []ygot.Annotation `path:"@in-pkts" ygotAnnotation:"true"`
	InUnicastPkts       *uint64           `path:"in-unicast-pkts" module:"openconfig-interfaces"`
	ΛInUnicastPkts      []ygot.Annotation `path:"@in-unicast-pkts" ygotAnnotation:"true"`
	InUnknownProtos     *uint64           `path:"in-unknown-protos" module:"openconfig-interfaces"`
	ΛInUnknownProtos    []ygot.Annotation `path:"@in-unknown-protos" ygotAnnotation:"true"`
	LastClear           *uint64           `path:"last-clear" module:"openconfig-interfaces"`
	ΛLastClear          []ygot.Annotation `path:"@last-clear" ygotAnnotation:"true"`
	OutBroadcastPkts    *uint64           `path:"out-broadcast-pkts" module:"openconfig-interfaces"`
	ΛOutBroadcastPkts   []ygot.Annotation `path:"@out-broadcast-pkts" ygotAnnotation:"true"`
	OutDiscards         *uint64           `path:"out-discards" module:"openconfig-interfaces"`
	ΛOutDiscards        []ygot.Annotation `path:"@out-discards" ygotAnnotation:"true"`
	OutErrors           *uint64           `path:"out-errors" module:"openconfig-interfaces"`
	ΛOutErrors          []ygot.Annotation `path:"@out-errors" ygotAnnotation:"true"`
	OutMulticastPkts    *uint64           `path:"out-multicast-pkts" module:"openconfig-interfaces"`
	ΛOutMulticastPkts   []ygot.Annotation `path:"@out-multicast-pkts" ygotAnnotation:"true"`
	OutOctets           *uint64           `path:"out-octets" module:"openconfig-interfaces"`
	ΛOutOctets          []ygot.Annotation `path:"@out-octets" ygotAnnotation:"true"`
	OutPkts             *uint64           `path:"out-pkts" module:"openconfig-interfaces"`
	ΛOutPkts            []ygot.Annotation `path:"@out-pkts" ygotAnnotation:"true"`
	OutUnicastPkts      *uint64           `path:"out-unicast-pkts" module:"openconfig-interfaces"`
	ΛOutUnicastPkts     []ygot.Annotation `path:"@out-unicast-pkts" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Counters) IsYANGGoStruct() {}

// GetCarrierTransitions retrieves the value of the leaf CarrierTransitions from the Interface_Subinterface_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if CarrierTransitions is set, it can safely use t.GetCarrierTransitions()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.CarrierTransitions == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Counters) GetCarrierTransitions() uint64 {
	if t == nil || t.CarrierTransitions == nil {
		return 0
	}
	return *t.CarrierTransitions
}

// GetInBroadcastPkts retrieves the value of the leaf InBroadcastPkts from the Interface_Subinterface_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InBroadcastPkts is set, it can safely use t.GetInBroadcastPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InBroadcastPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Counters) GetInBroadcastPkts() uint64 {
	if t == nil || t.InBroadcastPkts == nil {
		return 0
	}
	return *t.InBroadcastPkts
}

// GetInDiscards retrieves the value of the leaf InDiscards from the Interface_Subinterface_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InDiscards is set, it can safely use t.GetInDiscards()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InDiscards == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Counters) GetInDiscards() uint64 {
	if t == nil || t.InDiscards == nil {
		return 0
	}
	return *t.InDiscards
}

// GetInErrors retrieves the value of the leaf InErrors from the Interface_Subinterface_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InErrors is set, it can safely use t.GetInErrors()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InErrors == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Counters) GetInErrors() uint64 {
	if t == nil || t.InErrors == nil {
		return 0
	}
	return *t.InErrors
}

// GetInFcsErrors retrieves the value of the leaf InFcsErrors from the Interface_Subinterface_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InFcsErrors is set, it can safely use t.GetInFcsErrors()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InFcsErrors == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Counters) GetInFcsErrors() uint64 {
	if t == nil || t.InFcsErrors == nil {
		return 0
	}
	return *t.InFcsErrors
}

// GetInMulticastPkts retrieves the value of the leaf InMulticastPkts from the Interface_Subinterface_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InMulticastPkts is set, it can safely use t.GetInMulticastPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InMulticastPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Counters) GetInMulticastPkts() uint64 {
	if t == nil || t.InMulticastPkts == nil {
		return 0
	}
	return *t.InMulticastPkts
}

// GetInOctets retrieves the value of the leaf InOctets from the Interface_Subinterface_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InOctets is set, it can safely use t.GetInOctets()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InOctets == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Counters) GetInOctets() uint64 {
	if t == nil || t.InOctets == nil {
		return 0
	}
	return *t.InOctets
}

// GetInPkts retrieves the value of the leaf InPkts from the Interface_Subinterface_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InPkts is set, it can safely use t.GetInPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Counters) GetInPkts() uint64 {
	if t == nil || t.InPkts == nil {
		return 0
	}
	return *t.InPkts
}

// GetInUnicastPkts retrieves the value of the leaf InUnicastPkts from the Interface_Subinterface_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InUnicastPkts is set, it can safely use t.GetInUnicastPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InUnicastPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Counters) GetInUnicastPkts() uint64 {
	if t == nil || t.InUnicastPkts == nil {
		return 0
	}
	return *t.InUnicastPkts
}

// GetInUnknownProtos retrieves the value of the leaf InUnknownProtos from the Interface_Subinterface_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InUnknownProtos is set, it can safely use t.GetInUnknownProtos()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InUnknownProtos == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Counters) GetInUnknownProtos() uint64 {
	if t == nil || t.InUnknownProtos == nil {
		return 0
	}
	return *t.InUnknownProtos
}

// GetLastClear retrieves the value of the leaf LastClear from the Interface_Subinterface_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LastClear is set, it can safely use t.GetLastClear()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LastClear == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Counters) GetLastClear() uint64 {
	if t == nil || t.LastClear == nil {
		return 0
	}
	return *t.LastClear
}

// GetOutBroadcastPkts retrieves the value of the leaf OutBroadcastPkts from the Interface_Subinterface_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutBroadcastPkts is set, it can safely use t.GetOutBroadcastPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutBroadcastPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Counters) GetOutBroadcastPkts() uint64 {
	if t == nil || t.OutBroadcastPkts == nil {
		return 0
	}
	return *t.OutBroadcastPkts
}

// GetOutDiscards retrieves the value of the leaf OutDiscards from the Interface_Subinterface_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutDiscards is set, it can safely use t.GetOutDiscards()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutDiscards == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Counters) GetOutDiscards() uint64 {
	if t == nil || t.OutDiscards == nil {
		return 0
	}
	return *t.OutDiscards
}

// GetOutErrors retrieves the value of the leaf OutErrors from the Interface_Subinterface_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutErrors is set, it can safely use t.GetOutErrors()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutErrors == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Counters) GetOutErrors() uint64 {
	if t == nil || t.OutErrors == nil {
		return 0
	}
	return *t.OutErrors
}

// GetOutMulticastPkts retrieves the value of the leaf OutMulticastPkts from the Interface_Subinterface_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutMulticastPkts is set, it can safely use t.GetOutMulticastPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutMulticastPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Counters) GetOutMulticastPkts() uint64 {
	if t == nil || t.OutMulticastPkts == nil {
		return 0
	}
	return *t.OutMulticastPkts
}

// GetOutOctets retrieves the value of the leaf OutOctets from the Interface_Subinterface_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutOctets is set, it can safely use t.GetOutOctets()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutOctets == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Counters) GetOutOctets() uint64 {
	if t == nil || t.OutOctets == nil {
		return 0
	}
	return *t.OutOctets
}

// GetOutPkts retrieves the value of the leaf OutPkts from the Interface_Subinterface_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutPkts is set, it can safely use t.GetOutPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Counters) GetOutPkts() uint64 {
	if t == nil || t.OutPkts == nil {
		return 0
	}
	return *t.OutPkts
}

// GetOutUnicastPkts retrieves the value of the leaf OutUnicastPkts from the Interface_Subinterface_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutUnicastPkts is set, it can safely use t.GetOutUnicastPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutUnicastPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Counters) GetOutUnicastPkts() uint64 {
	if t == nil || t.OutUnicastPkts == nil {
		return 0
	}
	return *t.OutUnicastPkts
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Counters) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Counters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_Subinterface_Ipv4 represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4 YANG schema element.
type Interface_Subinterface_Ipv4 struct {
	ΛMetadata   []ygot.Annotation                                `path:"@" ygotAnnotation:"true"`
	Address     map[string]*Interface_Subinterface_Ipv4_Address  `path:"addresses/address" module:"openconfig-if-ip"`
	ΛAddress    []ygot.Annotation                                `path:"addresses/@address" ygotAnnotation:"true"`
	Counters    *Interface_Subinterface_Ipv4_Counters            `path:"state/counters" module:"openconfig-if-ip"`
	ΛCounters   []ygot.Annotation                                `path:"state/@counters" ygotAnnotation:"true"`
	DhcpClient  *bool                                            `path:"config/dhcp-client" module:"openconfig-if-ip"`
	ΛDhcpClient []ygot.Annotation                                `path:"config/@dhcp-client" ygotAnnotation:"true"`
	Enabled     *bool                                            `path:"config/enabled" module:"openconfig-if-ip"`
	ΛEnabled    []ygot.Annotation                                `path:"config/@enabled" ygotAnnotation:"true"`
	Mtu         *uint16                                          `path:"config/mtu" module:"openconfig-if-ip"`
	ΛMtu        []ygot.Annotation                                `path:"config/@mtu" ygotAnnotation:"true"`
	Neighbor    map[string]*Interface_Subinterface_Ipv4_Neighbor `path:"neighbors/neighbor" module:"openconfig-if-ip"`
	ΛNeighbor   []ygot.Annotation                                `path:"neighbors/@neighbor" ygotAnnotation:"true"`
	ProxyArp    *Interface_Subinterface_Ipv4_ProxyArp            `path:"proxy-arp" module:"openconfig-if-ip"`
	ΛProxyArp   []ygot.Annotation                                `path:"@proxy-arp" ygotAnnotation:"true"`
	Unnumbered  *Interface_Subinterface_Ipv4_Unnumbered          `path:"unnumbered" module:"openconfig-if-ip"`
	ΛUnnumbered []ygot.Annotation                                `path:"@unnumbered" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Ipv4) IsYANGGoStruct() {}

// NewAddress creates a new entry in the Address list of the
// Interface_Subinterface_Ipv4 struct. The keys of the list are populated from the input
// arguments.
func (t *Interface_Subinterface_Ipv4) NewAddress(Ip string) (*Interface_Subinterface_Ipv4_Address, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Address == nil {
		t.Address = make(map[string]*Interface_Subinterface_Ipv4_Address)
	}

	key := Ip

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Address[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Address", key)
	}

	t.Address[key] = &Interface_Subinterface_Ipv4_Address{
		Ip: &Ip,
	}

	return t.Address[key], nil
}

// RenameAddress renames an entry in the list Address within
// the Interface_Subinterface_Ipv4 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Interface_Subinterface_Ipv4) RenameAddress(oldK, newK string) error {
	if _, ok := t.Address[newK]; ok {
		return fmt.Errorf("key %v already exists in Address", newK)
	}

	e, ok := t.Address[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Address", oldK)
	}
	e.Ip = &newK

	t.Address[newK] = e
	delete(t.Address, oldK)
	return nil
}

// GetOrCreateAddress retrieves the value with the specified keys from
// the receiver Interface_Subinterface_Ipv4. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Interface_Subinterface_Ipv4) GetOrCreateAddress(Ip string) *Interface_Subinterface_Ipv4_Address {

	key := Ip

	if v, ok := t.Address[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAddress(Ip)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAddress got unexpected error: %v", err))
	}
	return v
}

// GetAddress retrieves the value with the specified key from
// the Address map field of Interface_Subinterface_Ipv4. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Interface_Subinterface_Ipv4) GetAddress(Ip string) *Interface_Subinterface_Ipv4_Address {

	if t == nil {
		return nil
	}

	key := Ip

	if lm, ok := t.Address[key]; ok {
		return lm
	}
	return nil
}

// AppendAddress appends the supplied Interface_Subinterface_Ipv4_Address struct to the
// list Address of Interface_Subinterface_Ipv4. If the key value(s) specified in
// the supplied Interface_Subinterface_Ipv4_Address already exist in the list, an error is
// returned.
func (t *Interface_Subinterface_Ipv4) AppendAddress(v *Interface_Subinterface_Ipv4_Address) error {
	key := *v.Ip

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Address == nil {
		t.Address = make(map[string]*Interface_Subinterface_Ipv4_Address)
	}

	if _, ok := t.Address[key]; ok {
		return fmt.Errorf("duplicate key for list Address %v", key)
	}

	t.Address[key] = v
	return nil
}

// NewNeighbor creates a new entry in the Neighbor list of the
// Interface_Subinterface_Ipv4 struct. The keys of the list are populated from the input
// arguments.
func (t *Interface_Subinterface_Ipv4) NewNeighbor(Ip string) (*Interface_Subinterface_Ipv4_Neighbor, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*Interface_Subinterface_Ipv4_Neighbor)
	}

	key := Ip

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Neighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Neighbor", key)
	}

	t.Neighbor[key] = &Interface_Subinterface_Ipv4_Neighbor{
		Ip: &Ip,
	}

	return t.Neighbor[key], nil
}

// RenameNeighbor renames an entry in the list Neighbor within
// the Interface_Subinterface_Ipv4 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Interface_Subinterface_Ipv4) RenameNeighbor(oldK, newK string) error {
	if _, ok := t.Neighbor[newK]; ok {
		return fmt.Errorf("key %v already exists in Neighbor", newK)
	}

	e, ok := t.Neighbor[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Neighbor", oldK)
	}
	e.Ip = &newK

	t.Neighbor[newK] = e
	delete(t.Neighbor, oldK)
	return nil
}

// GetOrCreateNeighbor retrieves the value with the specified keys from
// the receiver Interface_Subinterface_Ipv4. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Interface_Subinterface_Ipv4) GetOrCreateNeighbor(Ip string) *Interface_Subinterface_Ipv4_Neighbor {

	key := Ip

	if v, ok := t.Neighbor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNeighbor(Ip)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNeighbor got unexpected error: %v", err))
	}
	return v
}

// GetNeighbor retrieves the value with the specified key from
// the Neighbor map field of Interface_Subinterface_Ipv4. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Interface_Subinterface_Ipv4) GetNeighbor(Ip string) *Interface_Subinterface_Ipv4_Neighbor {

	if t == nil {
		return nil
	}

	key := Ip

	if lm, ok := t.Neighbor[key]; ok {
		return lm
	}
	return nil
}

// AppendNeighbor appends the supplied Interface_Subinterface_Ipv4_Neighbor struct to the
// list Neighbor of Interface_Subinterface_Ipv4. If the key value(s) specified in
// the supplied Interface_Subinterface_Ipv4_Neighbor already exist in the list, an error is
// returned.
func (t *Interface_Subinterface_Ipv4) AppendNeighbor(v *Interface_Subinterface_Ipv4_Neighbor) error {
	key := *v.Ip

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*Interface_Subinterface_Ipv4_Neighbor)
	}

	if _, ok := t.Neighbor[key]; ok {
		return fmt.Errorf("duplicate key for list Neighbor %v", key)
	}

	t.Neighbor[key] = v
	return nil
}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *Interface_Subinterface_Ipv4) GetOrCreateCounters() *Interface_Subinterface_Ipv4_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &Interface_Subinterface_Ipv4_Counters{}
	return t.Counters
}

// GetOrCreateProxyArp retrieves the value of the ProxyArp field
// or returns the existing field if it already exists.
func (t *Interface_Subinterface_Ipv4) GetOrCreateProxyArp() *Interface_Subinterface_Ipv4_ProxyArp {
	if t.ProxyArp != nil {
		return t.ProxyArp
	}
	t.ProxyArp = &Interface_Subinterface_Ipv4_ProxyArp{}
	return t.ProxyArp
}

// GetOrCreateUnnumbered retrieves the value of the Unnumbered field
// or returns the existing field if it already exists.
func (t *Interface_Subinterface_Ipv4) GetOrCreateUnnumbered() *Interface_Subinterface_Ipv4_Unnumbered {
	if t.Unnumbered != nil {
		return t.Unnumbered
	}
	t.Unnumbered = &Interface_Subinterface_Ipv4_Unnumbered{}
	return t.Unnumbered
}

// GetCounters returns the value of the Counters struct pointer
// from Interface_Subinterface_Ipv4. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Subinterface_Ipv4) GetCounters() *Interface_Subinterface_Ipv4_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetProxyArp returns the value of the ProxyArp struct pointer
// from Interface_Subinterface_Ipv4. If the receiver or the field ProxyArp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Subinterface_Ipv4) GetProxyArp() *Interface_Subinterface_Ipv4_ProxyArp {
	if t != nil && t.ProxyArp != nil {
		return t.ProxyArp
	}
	return nil
}

// GetUnnumbered returns the value of the Unnumbered struct pointer
// from Interface_Subinterface_Ipv4. If the receiver or the field Unnumbered is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Subinterface_Ipv4) GetUnnumbered() *Interface_Subinterface_Ipv4_Unnumbered {
	if t != nil && t.Unnumbered != nil {
		return t.Unnumbered
	}
	return nil
}

// GetDhcpClient retrieves the value of the leaf DhcpClient from the Interface_Subinterface_Ipv4
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if DhcpClient is set, it can safely use t.GetDhcpClient()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.DhcpClient == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4) GetDhcpClient() bool {
	if t == nil || t.DhcpClient == nil {
		return false
	}
	return *t.DhcpClient
}

// GetEnabled retrieves the value of the leaf Enabled from the Interface_Subinterface_Ipv4
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Enabled is set, it can safely use t.GetEnabled()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Enabled == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return true
	}
	return *t.Enabled
}

// GetMtu retrieves the value of the leaf Mtu from the Interface_Subinterface_Ipv4
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Mtu is set, it can safely use t.GetMtu()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Mtu == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4) GetMtu() uint16 {
	if t == nil || t.Mtu == nil {
		return 0
	}
	return *t.Mtu
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Ipv4) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Interface_Subinterface_Ipv4_Address represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address YANG schema element.
type Interface_Subinterface_Ipv4_Address struct {
	ΛMetadata     []ygot.Annotation                                        `path:"@" ygotAnnotation:"true"`
	Ip            *string                                                  `path:"config/ip|ip" module:"openconfig-if-ip"`
	ΛIp           []ygot.Annotation                                        `path:"config/@ip|@ip" ygotAnnotation:"true"`
	Origin        E_OpenconfigIfIp_IpAddressOrigin                         `path:"state/origin" module:"openconfig-if-ip"`
	ΛOrigin       []ygot.Annotation                                        `path:"state/@origin" ygotAnnotation:"true"`
	PrefixLength  *uint8                                                   `path:"config/prefix-length" module:"openconfig-if-ip"`
	ΛPrefixLength []ygot.Annotation                                        `path:"config/@prefix-length" ygotAnnotation:"true"`
	VrrpGroup     map[uint8]*Interface_Subinterface_Ipv4_Address_VrrpGroup `path:"vrrp/vrrp-group" module:"openconfig-if-ip"`
	ΛVrrpGroup    []ygot.Annotation                                        `path:"vrrp/@vrrp-group" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Ipv4_Address implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Ipv4_Address) IsYANGGoStruct() {}

// NewVrrpGroup creates a new entry in the VrrpGroup list of the
// Interface_Subinterface_Ipv4_Address struct. The keys of the list are populated from the input
// arguments.
func (t *Interface_Subinterface_Ipv4_Address) NewVrrpGroup(VirtualRouterId uint8) (*Interface_Subinterface_Ipv4_Address_VrrpGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VrrpGroup == nil {
		t.VrrpGroup = make(map[uint8]*Interface_Subinterface_Ipv4_Address_VrrpGroup)
	}

	key := VirtualRouterId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.VrrpGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list VrrpGroup", key)
	}

	t.VrrpGroup[key] = &Interface_Subinterface_Ipv4_Address_VrrpGroup{
		VirtualRouterId: &VirtualRouterId,
	}

	return t.VrrpGroup[key], nil
}

// RenameVrrpGroup renames an entry in the list VrrpGroup within
// the Interface_Subinterface_Ipv4_Address struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Interface_Subinterface_Ipv4_Address) RenameVrrpGroup(oldK, newK uint8) error {
	if _, ok := t.VrrpGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in VrrpGroup", newK)
	}

	e, ok := t.VrrpGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in VrrpGroup", oldK)
	}
	e.VirtualRouterId = &newK

	t.VrrpGroup[newK] = e
	delete(t.VrrpGroup, oldK)
	return nil
}

// GetOrCreateVrrpGroup retrieves the value with the specified keys from
// the receiver Interface_Subinterface_Ipv4_Address. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Interface_Subinterface_Ipv4_Address) GetOrCreateVrrpGroup(VirtualRouterId uint8) *Interface_Subinterface_Ipv4_Address_VrrpGroup {

	key := VirtualRouterId

	if v, ok := t.VrrpGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewVrrpGroup(VirtualRouterId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateVrrpGroup got unexpected error: %v", err))
	}
	return v
}

// GetVrrpGroup retrieves the value with the specified key from
// the VrrpGroup map field of Interface_Subinterface_Ipv4_Address. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Interface_Subinterface_Ipv4_Address) GetVrrpGroup(VirtualRouterId uint8) *Interface_Subinterface_Ipv4_Address_VrrpGroup {

	if t == nil {
		return nil
	}

	key := VirtualRouterId

	if lm, ok := t.VrrpGroup[key]; ok {
		return lm
	}
	return nil
}

// AppendVrrpGroup appends the supplied Interface_Subinterface_Ipv4_Address_VrrpGroup struct to the
// list VrrpGroup of Interface_Subinterface_Ipv4_Address. If the key value(s) specified in
// the supplied Interface_Subinterface_Ipv4_Address_VrrpGroup already exist in the list, an error is
// returned.
func (t *Interface_Subinterface_Ipv4_Address) AppendVrrpGroup(v *Interface_Subinterface_Ipv4_Address_VrrpGroup) error {
	key := *v.VirtualRouterId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VrrpGroup == nil {
		t.VrrpGroup = make(map[uint8]*Interface_Subinterface_Ipv4_Address_VrrpGroup)
	}

	if _, ok := t.VrrpGroup[key]; ok {
		return fmt.Errorf("duplicate key for list VrrpGroup %v", key)
	}

	t.VrrpGroup[key] = v
	return nil
}

// GetIp retrieves the value of the leaf Ip from the Interface_Subinterface_Ipv4_Address
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Ip is set, it can safely use t.GetIp()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Ip == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Address) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetOrigin retrieves the value of the leaf Origin from the Interface_Subinterface_Ipv4_Address
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Origin is set, it can safely use t.GetOrigin()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Origin == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Address) GetOrigin() E_OpenconfigIfIp_IpAddressOrigin {
	if t == nil || t.Origin == 0 {
		return 0
	}
	return t.Origin
}

// GetPrefixLength retrieves the value of the leaf PrefixLength from the Interface_Subinterface_Ipv4_Address
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PrefixLength is set, it can safely use t.GetPrefixLength()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PrefixLength == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Address) GetPrefixLength() uint8 {
	if t == nil || t.PrefixLength == nil {
		return 0
	}
	return *t.PrefixLength
}

// ΛListKeyMap returns the keys of the Interface_Subinterface_Ipv4_Address struct, which is a YANG list entry.
func (t *Interface_Subinterface_Ipv4_Address) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ip == nil {
		return nil, fmt.Errorf("nil value for key Ip")
	}

	return map[string]interface{}{
		"ip": *t.Ip,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Ipv4_Address) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Ipv4_Address"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Ipv4_Address) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup struct {
	ΛMetadata              []ygot.Annotation                                                `path:"@" ygotAnnotation:"true"`
	AcceptMode             *bool                                                            `path:"config/accept-mode" module:"openconfig-if-ip"`
	ΛAcceptMode            []ygot.Annotation                                                `path:"config/@accept-mode" ygotAnnotation:"true"`
	AdvertisementInterval  *uint16                                                          `path:"config/advertisement-interval" module:"openconfig-if-ip"`
	ΛAdvertisementInterval []ygot.Annotation                                                `path:"config/@advertisement-interval" ygotAnnotation:"true"`
	CurrentPriority        *uint8                                                           `path:"state/current-priority" module:"openconfig-if-ip"`
	ΛCurrentPriority       []ygot.Annotation                                                `path:"state/@current-priority" ygotAnnotation:"true"`
	InterfaceTracking      *Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking `path:"interface-tracking" module:"openconfig-if-ip"`
	ΛInterfaceTracking     []ygot.Annotation                                                `path:"@interface-tracking" ygotAnnotation:"true"`
	Preempt                *bool                                                            `path:"config/preempt" module:"openconfig-if-ip"`
	ΛPreempt               []ygot.Annotation                                                `path:"config/@preempt" ygotAnnotation:"true"`
	PreemptDelay           *uint16                                                          `path:"config/preempt-delay" module:"openconfig-if-ip"`
	ΛPreemptDelay          []ygot.Annotation                                                `path:"config/@preempt-delay" ygotAnnotation:"true"`
	Priority               *uint8                                                           `path:"config/priority" module:"openconfig-if-ip"`
	ΛPriority              []ygot.Annotation                                                `path:"config/@priority" ygotAnnotation:"true"`
	VirtualAddress         []string                                                         `path:"config/virtual-address" module:"openconfig-if-ip"`
	ΛVirtualAddress        []ygot.Annotation                                                `path:"config/@virtual-address" ygotAnnotation:"true"`
	VirtualRouterId        *uint8                                                           `path:"config/virtual-router-id|virtual-router-id" module:"openconfig-if-ip"`
	ΛVirtualRouterId       []ygot.Annotation                                                `path:"config/@virtual-router-id|@virtual-router-id" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Ipv4_Address_VrrpGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Ipv4_Address_VrrpGroup) IsYANGGoStruct() {}

// GetOrCreateInterfaceTracking retrieves the value of the InterfaceTracking field
// or returns the existing field if it already exists.
func (t *Interface_Subinterface_Ipv4_Address_VrrpGroup) GetOrCreateInterfaceTracking() *Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking {
	if t.InterfaceTracking != nil {
		return t.InterfaceTracking
	}
	t.InterfaceTracking = &Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking{}
	return t.InterfaceTracking
}

// GetInterfaceTracking returns the value of the InterfaceTracking struct pointer
// from Interface_Subinterface_Ipv4_Address_VrrpGroup. If the receiver or the field InterfaceTracking is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Subinterface_Ipv4_Address_VrrpGroup) GetInterfaceTracking() *Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking {
	if t != nil && t.InterfaceTracking != nil {
		return t.InterfaceTracking
	}
	return nil
}

// GetAcceptMode retrieves the value of the leaf AcceptMode from the Interface_Subinterface_Ipv4_Address_VrrpGroup
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AcceptMode is set, it can safely use t.GetAcceptMode()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AcceptMode == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Address_VrrpGroup) GetAcceptMode() bool {
	if t == nil || t.AcceptMode == nil {
		return false
	}
	return *t.AcceptMode
}

// GetAdvertisementInterval retrieves the value of the leaf AdvertisementInterval from the Interface_Subinterface_Ipv4_Address_VrrpGroup
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AdvertisementInterval is set, it can safely use t.GetAdvertisementInterval()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AdvertisementInterval == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Address_VrrpGroup) GetAdvertisementInterval() uint16 {
	if t == nil || t.AdvertisementInterval == nil {
		return 100
	}
	return *t.AdvertisementInterval
}

// GetCurrentPriority retrieves the value of the leaf CurrentPriority from the Interface_Subinterface_Ipv4_Address_VrrpGroup
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if CurrentPriority is set, it can safely use t.GetCurrentPriority()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.CurrentPriority == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Address_VrrpGroup) GetCurrentPriority() uint8 {
	if t == nil || t.CurrentPriority == nil {
		return 0
	}
	return *t.CurrentPriority
}

// GetPreempt retrieves the value of the leaf Preempt from the Interface_Subinterface_Ipv4_Address_VrrpGroup
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Preempt is set, it can safely use t.GetPreempt()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Preempt == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Address_VrrpGroup) GetPreempt() bool {
	if t == nil || t.Preempt == nil {
		return true
	}
	return *t.Preempt
}

// GetPreemptDelay retrieves the value of the leaf PreemptDelay from the Interface_Subinterface_Ipv4_Address_VrrpGroup
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PreemptDelay is set, it can safely use t.GetPreemptDelay()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PreemptDelay == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Address_VrrpGroup) GetPreemptDelay() uint16 {
	if t == nil || t.PreemptDelay == nil {
		return 0
	}
	return *t.PreemptDelay
}

// GetPriority retrieves the value of the leaf Priority from the Interface_Subinterface_Ipv4_Address_VrrpGroup
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Priority is set, it can safely use t.GetPriority()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Priority == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Address_VrrpGroup) GetPriority() uint8 {
	if t == nil || t.Priority == nil {
		return 100
	}
	return *t.Priority
}

// GetVirtualAddress retrieves the value of the leaf VirtualAddress from the Interface_Subinterface_Ipv4_Address_VrrpGroup
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if VirtualAddress is set, it can safely use t.GetVirtualAddress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.VirtualAddress == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Address_VrrpGroup) GetVirtualAddress() []string {
	if t == nil || t.VirtualAddress == nil {
		return nil
	}
	return t.VirtualAddress
}

// GetVirtualRouterId retrieves the value of the leaf VirtualRouterId from the Interface_Subinterface_Ipv4_Address_VrrpGroup
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if VirtualRouterId is set, it can safely use t.GetVirtualRouterId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.VirtualRouterId == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Address_VrrpGroup) GetVirtualRouterId() uint8 {
	if t == nil || t.VirtualRouterId == nil {
		return 0
	}
	return *t.VirtualRouterId
}

// ΛListKeyMap returns the keys of the Interface_Subinterface_Ipv4_Address_VrrpGroup struct, which is a YANG list entry.
func (t *Interface_Subinterface_Ipv4_Address_VrrpGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.VirtualRouterId == nil {
		return nil, fmt.Errorf("nil value for key VirtualRouterId")
	}

	return map[string]interface{}{
		"virtual-router-id": *t.VirtualRouterId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Ipv4_Address_VrrpGroup) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Ipv4_Address_VrrpGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Ipv4_Address_VrrpGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking struct {
	ΛMetadata          []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	PriorityDecrement  *uint8            `path:"config/priority-decrement" module:"openconfig-if-ip"`
	ΛPriorityDecrement []ygot.Annotation `path:"config/@priority-decrement" ygotAnnotation:"true"`
	TrackInterface     []string          `path:"config/track-interface" module:"openconfig-if-ip"`
	ΛTrackInterface    []ygot.Annotation `path:"config/@track-interface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking) IsYANGGoStruct() {}

// GetPriorityDecrement retrieves the value of the leaf PriorityDecrement from the Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PriorityDecrement is set, it can safely use t.GetPriorityDecrement()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PriorityDecrement == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking) GetPriorityDecrement() uint8 {
	if t == nil || t.PriorityDecrement == nil {
		return 0
	}
	return *t.PriorityDecrement
}

// GetTrackInterface retrieves the value of the leaf TrackInterface from the Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if TrackInterface is set, it can safely use t.GetTrackInterface()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.TrackInterface == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking) GetTrackInterface() []string {
	if t == nil || t.TrackInterface == nil {
		return nil
	}
	return t.TrackInterface
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_Subinterface_Ipv4_Counters represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters YANG schema element.
type Interface_Subinterface_Ipv4_Counters struct {
	ΛMetadata           []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	InDiscardedPkts     *uint64           `path:"in-discarded-pkts" module:"openconfig-if-ip"`
	ΛInDiscardedPkts    []ygot.Annotation `path:"@in-discarded-pkts" ygotAnnotation:"true"`
	InErrorPkts         *uint64           `path:"in-error-pkts" module:"openconfig-if-ip"`
	ΛInErrorPkts        []ygot.Annotation `path:"@in-error-pkts" ygotAnnotation:"true"`
	InForwardedOctets   *uint64           `path:"in-forwarded-octets" module:"openconfig-if-ip"`
	ΛInForwardedOctets  []ygot.Annotation `path:"@in-forwarded-octets" ygotAnnotation:"true"`
	InForwardedPkts     *uint64           `path:"in-forwarded-pkts" module:"openconfig-if-ip"`
	ΛInForwardedPkts    []ygot.Annotation `path:"@in-forwarded-pkts" ygotAnnotation:"true"`
	InOctets            *uint64           `path:"in-octets" module:"openconfig-if-ip"`
	ΛInOctets           []ygot.Annotation `path:"@in-octets" ygotAnnotation:"true"`
	InPkts              *uint64           `path:"in-pkts" module:"openconfig-if-ip"`
	ΛInPkts             []ygot.Annotation `path:"@in-pkts" ygotAnnotation:"true"`
	OutDiscardedPkts    *uint64           `path:"out-discarded-pkts" module:"openconfig-if-ip"`
	ΛOutDiscardedPkts   []ygot.Annotation `path:"@out-discarded-pkts" ygotAnnotation:"true"`
	OutErrorPkts        *uint64           `path:"out-error-pkts" module:"openconfig-if-ip"`
	ΛOutErrorPkts       []ygot.Annotation `path:"@out-error-pkts" ygotAnnotation:"true"`
	OutForwardedOctets  *uint64           `path:"out-forwarded-octets" module:"openconfig-if-ip"`
	ΛOutForwardedOctets []ygot.Annotation `path:"@out-forwarded-octets" ygotAnnotation:"true"`
	OutForwardedPkts    *uint64           `path:"out-forwarded-pkts" module:"openconfig-if-ip"`
	ΛOutForwardedPkts   []ygot.Annotation `path:"@out-forwarded-pkts" ygotAnnotation:"true"`
	OutOctets           *uint64           `path:"out-octets" module:"openconfig-if-ip"`
	ΛOutOctets          []ygot.Annotation `path:"@out-octets" ygotAnnotation:"true"`
	OutPkts             *uint64           `path:"out-pkts" module:"openconfig-if-ip"`
	ΛOutPkts            []ygot.Annotation `path:"@out-pkts" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Ipv4_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Ipv4_Counters) IsYANGGoStruct() {}

// GetInDiscardedPkts retrieves the value of the leaf InDiscardedPkts from the Interface_Subinterface_Ipv4_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InDiscardedPkts is set, it can safely use t.GetInDiscardedPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InDiscardedPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Counters) GetInDiscardedPkts() uint64 {
	if t == nil || t.InDiscardedPkts == nil {
		return 0
	}
	return *t.InDiscardedPkts
}

// GetInErrorPkts retrieves the value of the leaf InErrorPkts from the Interface_Subinterface_Ipv4_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InErrorPkts is set, it can safely use t.GetInErrorPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InErrorPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Counters) GetInErrorPkts() uint64 {
	if t == nil || t.InErrorPkts == nil {
		return 0
	}
	return *t.InErrorPkts
}

// GetInForwardedOctets retrieves the value of the leaf InForwardedOctets from the Interface_Subinterface_Ipv4_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InForwardedOctets is set, it can safely use t.GetInForwardedOctets()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InForwardedOctets == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Counters) GetInForwardedOctets() uint64 {
	if t == nil || t.InForwardedOctets == nil {
		return 0
	}
	return *t.InForwardedOctets
}

// GetInForwardedPkts retrieves the value of the leaf InForwardedPkts from the Interface_Subinterface_Ipv4_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InForwardedPkts is set, it can safely use t.GetInForwardedPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InForwardedPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Counters) GetInForwardedPkts() uint64 {
	if t == nil || t.InForwardedPkts == nil {
		return 0
	}
	return *t.InForwardedPkts
}

// GetInOctets retrieves the value of the leaf InOctets from the Interface_Subinterface_Ipv4_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InOctets is set, it can safely use t.GetInOctets()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InOctets == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Counters) GetInOctets() uint64 {
	if t == nil || t.InOctets == nil {
		return 0
	}
	return *t.InOctets
}

// GetInPkts retrieves the value of the leaf InPkts from the Interface_Subinterface_Ipv4_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InPkts is set, it can safely use t.GetInPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Counters) GetInPkts() uint64 {
	if t == nil || t.InPkts == nil {
		return 0
	}
	return *t.InPkts
}

// GetOutDiscardedPkts retrieves the value of the leaf OutDiscardedPkts from the Interface_Subinterface_Ipv4_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutDiscardedPkts is set, it can safely use t.GetOutDiscardedPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutDiscardedPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Counters) GetOutDiscardedPkts() uint64 {
	if t == nil || t.OutDiscardedPkts == nil {
		return 0
	}
	return *t.OutDiscardedPkts
}

// GetOutErrorPkts retrieves the value of the leaf OutErrorPkts from the Interface_Subinterface_Ipv4_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutErrorPkts is set, it can safely use t.GetOutErrorPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutErrorPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Counters) GetOutErrorPkts() uint64 {
	if t == nil || t.OutErrorPkts == nil {
		return 0
	}
	return *t.OutErrorPkts
}

// GetOutForwardedOctets retrieves the value of the leaf OutForwardedOctets from the Interface_Subinterface_Ipv4_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutForwardedOctets is set, it can safely use t.GetOutForwardedOctets()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutForwardedOctets == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Counters) GetOutForwardedOctets() uint64 {
	if t == nil || t.OutForwardedOctets == nil {
		return 0
	}
	return *t.OutForwardedOctets
}

// GetOutForwardedPkts retrieves the value of the leaf OutForwardedPkts from the Interface_Subinterface_Ipv4_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutForwardedPkts is set, it can safely use t.GetOutForwardedPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutForwardedPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Counters) GetOutForwardedPkts() uint64 {
	if t == nil || t.OutForwardedPkts == nil {
		return 0
	}
	return *t.OutForwardedPkts
}

// GetOutOctets retrieves the value of the leaf OutOctets from the Interface_Subinterface_Ipv4_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutOctets is set, it can safely use t.GetOutOctets()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutOctets == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Counters) GetOutOctets() uint64 {
	if t == nil || t.OutOctets == nil {
		return 0
	}
	return *t.OutOctets
}

// GetOutPkts retrieves the value of the leaf OutPkts from the Interface_Subinterface_Ipv4_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutPkts is set, it can safely use t.GetOutPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Counters) GetOutPkts() uint64 {
	if t == nil || t.OutPkts == nil {
		return 0
	}
	return *t.OutPkts
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Ipv4_Counters) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Ipv4_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Ipv4_Counters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_Subinterface_Ipv4_Neighbor represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor YANG schema element.
type Interface_Subinterface_Ipv4_Neighbor struct {
	ΛMetadata         []ygot.Annotation               `path:"@" ygotAnnotation:"true"`
	Ip                *string                         `path:"config/ip|ip" module:"openconfig-if-ip"`
	ΛIp               []ygot.Annotation               `path:"config/@ip|@ip" ygotAnnotation:"true"`
	LinkLayerAddress  *string                         `path:"config/link-layer-address" module:"openconfig-if-ip"`
	ΛLinkLayerAddress []ygot.Annotation               `path:"config/@link-layer-address" ygotAnnotation:"true"`
	Origin            E_OpenconfigIfIp_NeighborOrigin `path:"state/origin" module:"openconfig-if-ip"`
	ΛOrigin           []ygot.Annotation               `path:"state/@origin" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Ipv4_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Ipv4_Neighbor) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the Interface_Subinterface_Ipv4_Neighbor
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Ip is set, it can safely use t.GetIp()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Ip == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Neighbor) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetLinkLayerAddress retrieves the value of the leaf LinkLayerAddress from the Interface_Subinterface_Ipv4_Neighbor
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LinkLayerAddress is set, it can safely use t.GetLinkLayerAddress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LinkLayerAddress == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Neighbor) GetLinkLayerAddress() string {
	if t == nil || t.LinkLayerAddress == nil {
		return ""
	}
	return *t.LinkLayerAddress
}

// GetOrigin retrieves the value of the leaf Origin from the Interface_Subinterface_Ipv4_Neighbor
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Origin is set, it can safely use t.GetOrigin()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Origin == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Neighbor) GetOrigin() E_OpenconfigIfIp_NeighborOrigin {
	if t == nil || t.Origin == 0 {
		return 0
	}
	return t.Origin
}

// ΛListKeyMap returns the keys of the Interface_Subinterface_Ipv4_Neighbor struct, which is a YANG list entry.
func (t *Interface_Subinterface_Ipv4_Neighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ip == nil {
		return nil, fmt.Errorf("nil value for key Ip")
	}

	return map[string]interface{}{
		"ip": *t.Ip,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Ipv4_Neighbor) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Ipv4_Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Ipv4_Neighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_Subinterface_Ipv4_ProxyArp represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/proxy-arp YANG schema element.
type Interface_Subinterface_Ipv4_ProxyArp struct {
	ΛMetadata []ygot.Annotation              `path:"@" ygotAnnotation:"true"`
	Mode      E_OpenconfigIfIp_ProxyArp_Mode `path:"config/mode" module:"openconfig-if-ip"`
	ΛMode     []ygot.Annotation              `path:"config/@mode" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Ipv4_ProxyArp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Ipv4_ProxyArp) IsYANGGoStruct() {}

// GetMode retrieves the value of the leaf Mode from the Interface_Subinterface_Ipv4_ProxyArp
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Mode is set, it can safely use t.GetMode()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Mode == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_ProxyArp) GetMode() E_OpenconfigIfIp_ProxyArp_Mode {
	if t == nil || t.Mode == 0 {
		return OpenconfigIfIp_ProxyArp_Mode_DISABLE
	}
	return t.Mode
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Ipv4_ProxyArp) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Ipv4_ProxyArp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Ipv4_ProxyArp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_Subinterface_Ipv4_Unnumbered represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered YANG schema element.
type Interface_Subinterface_Ipv4_Unnumbered struct {
	ΛMetadata     []ygot.Annotation                                    `path:"@" ygotAnnotation:"true"`
	Enabled       *bool                                                `path:"config/enabled" module:"openconfig-if-ip"`
	ΛEnabled      []ygot.Annotation                                    `path:"config/@enabled" ygotAnnotation:"true"`
	InterfaceRef  *Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef `path:"interface-ref" module:"openconfig-if-ip"`
	ΛInterfaceRef []ygot.Annotation                                    `path:"@interface-ref" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Ipv4_Unnumbered implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Ipv4_Unnumbered) IsYANGGoStruct() {}

// GetOrCreateInterfaceRef retrieves the value of the InterfaceRef field
// or returns the existing field if it already exists.
func (t *Interface_Subinterface_Ipv4_Unnumbered) GetOrCreateInterfaceRef() *Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef {
	if t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	t.InterfaceRef = &Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef{}
	return t.InterfaceRef
}

// GetInterfaceRef returns the value of the InterfaceRef struct pointer
// from Interface_Subinterface_Ipv4_Unnumbered. If the receiver or the field InterfaceRef is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Subinterface_Ipv4_Unnumbered) GetInterfaceRef() *Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef {
	if t != nil && t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	return nil
}

// GetEnabled retrieves the value of the leaf Enabled from the Interface_Subinterface_Ipv4_Unnumbered
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Enabled is set, it can safely use t.GetEnabled()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Enabled == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Unnumbered) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Ipv4_Unnumbered) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Ipv4_Unnumbered"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Ipv4_Unnumbered) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered/interface-ref YANG schema element.
type Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef struct {
	ΛMetadata     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Interface     *string           `path:"config/interface" module:"openconfig-if-ip"`
	ΛInterface    []ygot.Annotation `path:"config/@interface" ygotAnnotation:"true"`
	Subinterface  *uint32           `path:"config/subinterface" module:"openconfig-if-ip"`
	ΛSubinterface []ygot.Annotation `path:"config/@subinterface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef) IsYANGGoStruct() {}

// GetInterface retrieves the value of the leaf Interface from the Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Interface is set, it can safely use t.GetInterface()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Interface == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// GetSubinterface retrieves the value of the leaf Subinterface from the Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Subinterface is set, it can safely use t.GetSubinterface()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Subinterface == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef) GetSubinterface() uint32 {
	if t == nil || t.Subinterface == nil {
		return 0
	}
	return *t.Subinterface
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_Subinterface_Ipv6 represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6 YANG schema element.
type Interface_Subinterface_Ipv6 struct {
	ΛMetadata               []ygot.Annotation                                `path:"@" ygotAnnotation:"true"`
	Address                 map[string]*Interface_Subinterface_Ipv6_Address  `path:"addresses/address" module:"openconfig-if-ip"`
	ΛAddress                []ygot.Annotation                                `path:"addresses/@address" ygotAnnotation:"true"`
	Autoconf                *Interface_Subinterface_Ipv6_Autoconf            `path:"autoconf" module:"openconfig-if-ip-ext"`
	ΛAutoconf               []ygot.Annotation                                `path:"@autoconf" ygotAnnotation:"true"`
	Counters                *Interface_Subinterface_Ipv6_Counters            `path:"state/counters" module:"openconfig-if-ip"`
	ΛCounters               []ygot.Annotation                                `path:"state/@counters" ygotAnnotation:"true"`
	DhcpClient              *bool                                            `path:"config/dhcp-client" module:"openconfig-if-ip"`
	ΛDhcpClient             []ygot.Annotation                                `path:"config/@dhcp-client" ygotAnnotation:"true"`
	DupAddrDetectTransmits  *uint32                                          `path:"config/dup-addr-detect-transmits" module:"openconfig-if-ip"`
	ΛDupAddrDetectTransmits []ygot.Annotation                                `path:"config/@dup-addr-detect-transmits" ygotAnnotation:"true"`
	Enabled                 *bool                                            `path:"config/enabled" module:"openconfig-if-ip"`
	ΛEnabled                []ygot.Annotation                                `path:"config/@enabled" ygotAnnotation:"true"`
	Mtu                     *uint32                                          `path:"config/mtu" module:"openconfig-if-ip"`
	ΛMtu                    []ygot.Annotation                                `path:"config/@mtu" ygotAnnotation:"true"`
	Neighbor                map[string]*Interface_Subinterface_Ipv6_Neighbor `path:"neighbors/neighbor" module:"openconfig-if-ip"`
	ΛNeighbor               []ygot.Annotation                                `path:"neighbors/@neighbor" ygotAnnotation:"true"`
	RouterAdvertisement     *Interface_Subinterface_Ipv6_RouterAdvertisement `path:"router-advertisement" module:"openconfig-if-ip"`
	ΛRouterAdvertisement    []ygot.Annotation                                `path:"@router-advertisement" ygotAnnotation:"true"`
	Unnumbered              *Interface_Subinterface_Ipv6_Unnumbered          `path:"unnumbered" module:"openconfig-if-ip"`
	ΛUnnumbered             []ygot.Annotation                                `path:"@unnumbered" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Ipv6) IsYANGGoStruct() {}

// NewAddress creates a new entry in the Address list of the
// Interface_Subinterface_Ipv6 struct. The keys of the list are populated from the input
// arguments.
func (t *Interface_Subinterface_Ipv6) NewAddress(Ip string) (*Interface_Subinterface_Ipv6_Address, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Address == nil {
		t.Address = make(map[string]*Interface_Subinterface_Ipv6_Address)
	}

	key := Ip

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Address[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Address", key)
	}

	t.Address[key] = &Interface_Subinterface_Ipv6_Address{
		Ip: &Ip,
	}

	return t.Address[key], nil
}

// RenameAddress renames an entry in the list Address within
// the Interface_Subinterface_Ipv6 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Interface_Subinterface_Ipv6) RenameAddress(oldK, newK string) error {
	if _, ok := t.Address[newK]; ok {
		return fmt.Errorf("key %v already exists in Address", newK)
	}

	e, ok := t.Address[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Address", oldK)
	}
	e.Ip = &newK

	t.Address[newK] = e
	delete(t.Address, oldK)
	return nil
}

// GetOrCreateAddress retrieves the value with the specified keys from
// the receiver Interface_Subinterface_Ipv6. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Interface_Subinterface_Ipv6) GetOrCreateAddress(Ip string) *Interface_Subinterface_Ipv6_Address {

	key := Ip

	if v, ok := t.Address[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAddress(Ip)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAddress got unexpected error: %v", err))
	}
	return v
}

// GetAddress retrieves the value with the specified key from
// the Address map field of Interface_Subinterface_Ipv6. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Interface_Subinterface_Ipv6) GetAddress(Ip string) *Interface_Subinterface_Ipv6_Address {

	if t == nil {
		return nil
	}

	key := Ip

	if lm, ok := t.Address[key]; ok {
		return lm
	}
	return nil
}

// AppendAddress appends the supplied Interface_Subinterface_Ipv6_Address struct to the
// list Address of Interface_Subinterface_Ipv6. If the key value(s) specified in
// the supplied Interface_Subinterface_Ipv6_Address already exist in the list, an error is
// returned.
func (t *Interface_Subinterface_Ipv6) AppendAddress(v *Interface_Subinterface_Ipv6_Address) error {
	key := *v.Ip

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Address == nil {
		t.Address = make(map[string]*Interface_Subinterface_Ipv6_Address)
	}

	if _, ok := t.Address[key]; ok {
		return fmt.Errorf("duplicate key for list Address %v", key)
	}

	t.Address[key] = v
	return nil
}

// NewNeighbor creates a new entry in the Neighbor list of the
// Interface_Subinterface_Ipv6 struct. The keys of the list are populated from the input
// arguments.
func (t *Interface_Subinterface_Ipv6) NewNeighbor(Ip string) (*Interface_Subinterface_Ipv6_Neighbor, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*Interface_Subinterface_Ipv6_Neighbor)
	}

	key := Ip

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Neighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Neighbor", key)
	}

	t.Neighbor[key] = &Interface_Subinterface_Ipv6_Neighbor{
		Ip: &Ip,
	}

	return t.Neighbor[key], nil
}

// RenameNeighbor renames an entry in the list Neighbor within
// the Interface_Subinterface_Ipv6 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Interface_Subinterface_Ipv6) RenameNeighbor(oldK, newK string) error {
	if _, ok := t.Neighbor[newK]; ok {
		return fmt.Errorf("key %v already exists in Neighbor", newK)
	}

	e, ok := t.Neighbor[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Neighbor", oldK)
	}
	e.Ip = &newK

	t.Neighbor[newK] = e
	delete(t.Neighbor, oldK)
	return nil
}

// GetOrCreateNeighbor retrieves the value with the specified keys from
// the receiver Interface_Subinterface_Ipv6. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Interface_Subinterface_Ipv6) GetOrCreateNeighbor(Ip string) *Interface_Subinterface_Ipv6_Neighbor {

	key := Ip

	if v, ok := t.Neighbor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNeighbor(Ip)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNeighbor got unexpected error: %v", err))
	}
	return v
}

// GetNeighbor retrieves the value with the specified key from
// the Neighbor map field of Interface_Subinterface_Ipv6. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Interface_Subinterface_Ipv6) GetNeighbor(Ip string) *Interface_Subinterface_Ipv6_Neighbor {

	if t == nil {
		return nil
	}

	key := Ip

	if lm, ok := t.Neighbor[key]; ok {
		return lm
	}
	return nil
}

// AppendNeighbor appends the supplied Interface_Subinterface_Ipv6_Neighbor struct to the
// list Neighbor of Interface_Subinterface_Ipv6. If the key value(s) specified in
// the supplied Interface_Subinterface_Ipv6_Neighbor already exist in the list, an error is
// returned.
func (t *Interface_Subinterface_Ipv6) AppendNeighbor(v *Interface_Subinterface_Ipv6_Neighbor) error {
	key := *v.Ip

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*Interface_Subinterface_Ipv6_Neighbor)
	}

	if _, ok := t.Neighbor[key]; ok {
		return fmt.Errorf("duplicate key for list Neighbor %v", key)
	}

	t.Neighbor[key] = v
	return nil
}

// GetOrCreateAutoconf retrieves the value of the Autoconf field
// or returns the existing field if it already exists.
func (t *Interface_Subinterface_Ipv6) GetOrCreateAutoconf() *Interface_Subinterface_Ipv6_Autoconf {
	if t.Autoconf != nil {
		return t.Autoconf
	}
	t.Autoconf = &Interface_Subinterface_Ipv6_Autoconf{}
	return t.Autoconf
}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *Interface_Subinterface_Ipv6) GetOrCreateCounters() *Interface_Subinterface_Ipv6_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &Interface_Subinterface_Ipv6_Counters{}
	return t.Counters
}

// GetOrCreateRouterAdvertisement retrieves the value of the RouterAdvertisement field
// or returns the existing field if it already exists.
func (t *Interface_Subinterface_Ipv6) GetOrCreateRouterAdvertisement() *Interface_Subinterface_Ipv6_RouterAdvertisement {
	if t.RouterAdvertisement != nil {
		return t.RouterAdvertisement
	}
	t.RouterAdvertisement = &Interface_Subinterface_Ipv6_RouterAdvertisement{}
	return t.RouterAdvertisement
}

// GetOrCreateUnnumbered retrieves the value of the Unnumbered field
// or returns the existing field if it already exists.
func (t *Interface_Subinterface_Ipv6) GetOrCreateUnnumbered() *Interface_Subinterface_Ipv6_Unnumbered {
	if t.Unnumbered != nil {
		return t.Unnumbered
	}
	t.Unnumbered = &Interface_Subinterface_Ipv6_Unnumbered{}
	return t.Unnumbered
}

// GetAutoconf returns the value of the Autoconf struct pointer
// from Interface_Subinterface_Ipv6. If the receiver or the field Autoconf is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Subinterface_Ipv6) GetAutoconf() *Interface_Subinterface_Ipv6_Autoconf {
	if t != nil && t.Autoconf != nil {
		return t.Autoconf
	}
	return nil
}

// GetCounters returns the value of the Counters struct pointer
// from Interface_Subinterface_Ipv6. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Subinterface_Ipv6) GetCounters() *Interface_Subinterface_Ipv6_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetRouterAdvertisement returns the value of the RouterAdvertisement struct pointer
// from Interface_Subinterface_Ipv6. If the receiver or the field RouterAdvertisement is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Subinterface_Ipv6) GetRouterAdvertisement() *Interface_Subinterface_Ipv6_RouterAdvertisement {
	if t != nil && t.RouterAdvertisement != nil {
		return t.RouterAdvertisement
	}
	return nil
}

// GetUnnumbered returns the value of the Unnumbered struct pointer
// from Interface_Subinterface_Ipv6. If the receiver or the field Unnumbered is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Subinterface_Ipv6) GetUnnumbered() *Interface_Subinterface_Ipv6_Unnumbered {
	if t != nil && t.Unnumbered != nil {
		return t.Unnumbered
	}
	return nil
}

// GetDhcpClient retrieves the value of the leaf DhcpClient from the Interface_Subinterface_Ipv6
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if DhcpClient is set, it can safely use t.GetDhcpClient()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.DhcpClient == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6) GetDhcpClient() bool {
	if t == nil || t.DhcpClient == nil {
		return false
	}
	return *t.DhcpClient
}

// GetDupAddrDetectTransmits retrieves the value of the leaf DupAddrDetectTransmits from the Interface_Subinterface_Ipv6
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if DupAddrDetectTransmits is set, it can safely use t.GetDupAddrDetectTransmits()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.DupAddrDetectTransmits == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6) GetDupAddrDetectTransmits() uint32 {
	if t == nil || t.DupAddrDetectTransmits == nil {
		return 1
	}
	return *t.DupAddrDetectTransmits
}

// GetEnabled retrieves the value of the leaf Enabled from the Interface_Subinterface_Ipv6
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Enabled is set, it can safely use t.GetEnabled()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Enabled == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return true
	}
	return *t.Enabled
}

// GetMtu retrieves the value of the leaf Mtu from the Interface_Subinterface_Ipv6
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Mtu is set, it can safely use t.GetMtu()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Mtu == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6) GetMtu() uint32 {
	if t == nil || t.Mtu == nil {
		return 0
	}
	return *t.Mtu
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Ipv6) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Interface_Subinterface_Ipv6_Address represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address YANG schema element.
type Interface_Subinterface_Ipv6_Address struct {
	ΛMetadata     []ygot.Annotation                                        `path:"@" ygotAnnotation:"true"`
	Ip            *string                                                  `path:"config/ip|ip" module:"openconfig-if-ip"`
	ΛIp           []ygot.Annotation                                        `path:"config/@ip|@ip" ygotAnnotation:"true"`
	Origin        E_OpenconfigIfIp_IpAddressOrigin                         `path:"state/origin" module:"openconfig-if-ip"`
	ΛOrigin       []ygot.Annotation                                        `path:"state/@origin" ygotAnnotation:"true"`
	PrefixLength  *uint8                                                   `path:"config/prefix-length" module:"openconfig-if-ip"`
	ΛPrefixLength []ygot.Annotation                                        `path:"config/@prefix-length" ygotAnnotation:"true"`
	Status        E_OpenconfigIfIp_Address_Status                          `path:"state/status" module:"openconfig-if-ip"`
	ΛStatus       []ygot.Annotation                                        `path:"state/@status" ygotAnnotation:"true"`
	VrrpGroup     map[uint8]*Interface_Subinterface_Ipv6_Address_VrrpGroup `path:"vrrp/vrrp-group" module:"openconfig-if-ip"`
	ΛVrrpGroup    []ygot.Annotation                                        `path:"vrrp/@vrrp-group" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Ipv6_Address implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Ipv6_Address) IsYANGGoStruct() {}

// NewVrrpGroup creates a new entry in the VrrpGroup list of the
// Interface_Subinterface_Ipv6_Address struct. The keys of the list are populated from the input
// arguments.
func (t *Interface_Subinterface_Ipv6_Address) NewVrrpGroup(VirtualRouterId uint8) (*Interface_Subinterface_Ipv6_Address_VrrpGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VrrpGroup == nil {
		t.VrrpGroup = make(map[uint8]*Interface_Subinterface_Ipv6_Address_VrrpGroup)
	}

	key := VirtualRouterId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.VrrpGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list VrrpGroup", key)
	}

	t.VrrpGroup[key] = &Interface_Subinterface_Ipv6_Address_VrrpGroup{
		VirtualRouterId: &VirtualRouterId,
	}

	return t.VrrpGroup[key], nil
}

// RenameVrrpGroup renames an entry in the list VrrpGroup within
// the Interface_Subinterface_Ipv6_Address struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Interface_Subinterface_Ipv6_Address) RenameVrrpGroup(oldK, newK uint8) error {
	if _, ok := t.VrrpGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in VrrpGroup", newK)
	}

	e, ok := t.VrrpGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in VrrpGroup", oldK)
	}
	e.VirtualRouterId = &newK

	t.VrrpGroup[newK] = e
	delete(t.VrrpGroup, oldK)
	return nil
}

// GetOrCreateVrrpGroup retrieves the value with the specified keys from
// the receiver Interface_Subinterface_Ipv6_Address. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Interface_Subinterface_Ipv6_Address) GetOrCreateVrrpGroup(VirtualRouterId uint8) *Interface_Subinterface_Ipv6_Address_VrrpGroup {

	key := VirtualRouterId

	if v, ok := t.VrrpGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewVrrpGroup(VirtualRouterId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateVrrpGroup got unexpected error: %v", err))
	}
	return v
}

// GetVrrpGroup retrieves the value with the specified key from
// the VrrpGroup map field of Interface_Subinterface_Ipv6_Address. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Interface_Subinterface_Ipv6_Address) GetVrrpGroup(VirtualRouterId uint8) *Interface_Subinterface_Ipv6_Address_VrrpGroup {

	if t == nil {
		return nil
	}

	key := VirtualRouterId

	if lm, ok := t.VrrpGroup[key]; ok {
		return lm
	}
	return nil
}

// AppendVrrpGroup appends the supplied Interface_Subinterface_Ipv6_Address_VrrpGroup struct to the
// list VrrpGroup of Interface_Subinterface_Ipv6_Address. If the key value(s) specified in
// the supplied Interface_Subinterface_Ipv6_Address_VrrpGroup already exist in the list, an error is
// returned.
func (t *Interface_Subinterface_Ipv6_Address) AppendVrrpGroup(v *Interface_Subinterface_Ipv6_Address_VrrpGroup) error {
	key := *v.VirtualRouterId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VrrpGroup == nil {
		t.VrrpGroup = make(map[uint8]*Interface_Subinterface_Ipv6_Address_VrrpGroup)
	}

	if _, ok := t.VrrpGroup[key]; ok {
		return fmt.Errorf("duplicate key for list VrrpGroup %v", key)
	}

	t.VrrpGroup[key] = v
	return nil
}

// GetIp retrieves the value of the leaf Ip from the Interface_Subinterface_Ipv6_Address
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Ip is set, it can safely use t.GetIp()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Ip == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Address) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetOrigin retrieves the value of the leaf Origin from the Interface_Subinterface_Ipv6_Address
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Origin is set, it can safely use t.GetOrigin()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Origin == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Address) GetOrigin() E_OpenconfigIfIp_IpAddressOrigin {
	if t == nil || t.Origin == 0 {
		return 0
	}
	return t.Origin
}

// GetPrefixLength retrieves the value of the leaf PrefixLength from the Interface_Subinterface_Ipv6_Address
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PrefixLength is set, it can safely use t.GetPrefixLength()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PrefixLength == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Address) GetPrefixLength() uint8 {
	if t == nil || t.PrefixLength == nil {
		return 0
	}
	return *t.PrefixLength
}

// GetStatus retrieves the value of the leaf Status from the Interface_Subinterface_Ipv6_Address
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Status is set, it can safely use t.GetStatus()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Status == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Address) GetStatus() E_OpenconfigIfIp_Address_Status {
	if t == nil || t.Status == 0 {
		return 0
	}
	return t.Status
}

// ΛListKeyMap returns the keys of the Interface_Subinterface_Ipv6_Address struct, which is a YANG list entry.
func (t *Interface_Subinterface_Ipv6_Address) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ip == nil {
		return nil, fmt.Errorf("nil value for key Ip")
	}

	return map[string]interface{}{
		"ip": *t.Ip,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Ipv6_Address) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Ipv6_Address"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Ipv6_Address) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup struct {
	ΛMetadata              []ygot.Annotation                                                `path:"@" ygotAnnotation:"true"`
	AcceptMode             *bool                                                            `path:"config/accept-mode" module:"openconfig-if-ip"`
	ΛAcceptMode            []ygot.Annotation                                                `path:"config/@accept-mode" ygotAnnotation:"true"`
	AdvertisementInterval  *uint16                                                          `path:"config/advertisement-interval" module:"openconfig-if-ip"`
	ΛAdvertisementInterval []ygot.Annotation                                                `path:"config/@advertisement-interval" ygotAnnotation:"true"`
	CurrentPriority        *uint8                                                           `path:"state/current-priority" module:"openconfig-if-ip"`
	ΛCurrentPriority       []ygot.Annotation                                                `path:"state/@current-priority" ygotAnnotation:"true"`
	InterfaceTracking      *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking `path:"interface-tracking" module:"openconfig-if-ip"`
	ΛInterfaceTracking     []ygot.Annotation                                                `path:"@interface-tracking" ygotAnnotation:"true"`
	Preempt                *bool                                                            `path:"config/preempt" module:"openconfig-if-ip"`
	ΛPreempt               []ygot.Annotation                                                `path:"config/@preempt" ygotAnnotation:"true"`
	PreemptDelay           *uint16                                                          `path:"config/preempt-delay" module:"openconfig-if-ip"`
	ΛPreemptDelay          []ygot.Annotation                                                `path:"config/@preempt-delay" ygotAnnotation:"true"`
	Priority               *uint8                                                           `path:"config/priority" module:"openconfig-if-ip"`
	ΛPriority              []ygot.Annotation                                                `path:"config/@priority" ygotAnnotation:"true"`
	VirtualAddress         []string                                                         `path:"config/virtual-address" module:"openconfig-if-ip"`
	ΛVirtualAddress        []ygot.Annotation                                                `path:"config/@virtual-address" ygotAnnotation:"true"`
	VirtualLinkLocal       *string                                                          `path:"config/virtual-link-local" module:"openconfig-if-ip"`
	ΛVirtualLinkLocal      []ygot.Annotation                                                `path:"config/@virtual-link-local" ygotAnnotation:"true"`
	VirtualRouterId        *uint8                                                           `path:"config/virtual-router-id|virtual-router-id" module:"openconfig-if-ip"`
	ΛVirtualRouterId       []ygot.Annotation                                                `path:"config/@virtual-router-id|@virtual-router-id" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Ipv6_Address_VrrpGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Ipv6_Address_VrrpGroup) IsYANGGoStruct() {}

// GetOrCreateInterfaceTracking retrieves the value of the InterfaceTracking field
// or returns the existing field if it already exists.
func (t *Interface_Subinterface_Ipv6_Address_VrrpGroup) GetOrCreateInterfaceTracking() *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking {
	if t.InterfaceTracking != nil {
		return t.InterfaceTracking
	}
	t.InterfaceTracking = &Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking{}
	return t.InterfaceTracking
}

// GetInterfaceTracking returns the value of the InterfaceTracking struct pointer
// from Interface_Subinterface_Ipv6_Address_VrrpGroup. If the receiver or the field InterfaceTracking is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Subinterface_Ipv6_Address_VrrpGroup) GetInterfaceTracking() *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking {
	if t != nil && t.InterfaceTracking != nil {
		return t.InterfaceTracking
	}
	return nil
}

// GetAcceptMode retrieves the value of the leaf AcceptMode from the Interface_Subinterface_Ipv6_Address_VrrpGroup
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AcceptMode is set, it can safely use t.GetAcceptMode()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AcceptMode == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Address_VrrpGroup) GetAcceptMode() bool {
	if t == nil || t.AcceptMode == nil {
		return false
	}
	return *t.AcceptMode
}

// GetAdvertisementInterval retrieves the value of the leaf AdvertisementInterval from the Interface_Subinterface_Ipv6_Address_VrrpGroup
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AdvertisementInterval is set, it can safely use t.GetAdvertisementInterval()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AdvertisementInterval == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Address_VrrpGroup) GetAdvertisementInterval() uint16 {
	if t == nil || t.AdvertisementInterval == nil {
		return 100
	}
	return *t.AdvertisementInterval
}

// GetCurrentPriority retrieves the value of the leaf CurrentPriority from the Interface_Subinterface_Ipv6_Address_VrrpGroup
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if CurrentPriority is set, it can safely use t.GetCurrentPriority()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.CurrentPriority == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Address_VrrpGroup) GetCurrentPriority() uint8 {
	if t == nil || t.CurrentPriority == nil {
		return 0
	}
	return *t.CurrentPriority
}

// GetPreempt retrieves the value of the leaf Preempt from the Interface_Subinterface_Ipv6_Address_VrrpGroup
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Preempt is set, it can safely use t.GetPreempt()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Preempt == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Address_VrrpGroup) GetPreempt() bool {
	if t == nil || t.Preempt == nil {
		return true
	}
	return *t.Preempt
}

// GetPreemptDelay retrieves the value of the leaf PreemptDelay from the Interface_Subinterface_Ipv6_Address_VrrpGroup
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PreemptDelay is set, it can safely use t.GetPreemptDelay()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PreemptDelay == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Address_VrrpGroup) GetPreemptDelay() uint16 {
	if t == nil || t.PreemptDelay == nil {
		return 0
	}
	return *t.PreemptDelay
}

// GetPriority retrieves the value of the leaf Priority from the Interface_Subinterface_Ipv6_Address_VrrpGroup
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Priority is set, it can safely use t.GetPriority()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Priority == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Address_VrrpGroup) GetPriority() uint8 {
	if t == nil || t.Priority == nil {
		return 100
	}
	return *t.Priority
}

// GetVirtualAddress retrieves the value of the leaf VirtualAddress from the Interface_Subinterface_Ipv6_Address_VrrpGroup
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if VirtualAddress is set, it can safely use t.GetVirtualAddress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.VirtualAddress == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Address_VrrpGroup) GetVirtualAddress() []string {
	if t == nil || t.VirtualAddress == nil {
		return nil
	}
	return t.VirtualAddress
}

// GetVirtualLinkLocal retrieves the value of the leaf VirtualLinkLocal from the Interface_Subinterface_Ipv6_Address_VrrpGroup
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if VirtualLinkLocal is set, it can safely use t.GetVirtualLinkLocal()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.VirtualLinkLocal == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Address_VrrpGroup) GetVirtualLinkLocal() string {
	if t == nil || t.VirtualLinkLocal == nil {
		return ""
	}
	return *t.VirtualLinkLocal
}

// GetVirtualRouterId retrieves the value of the leaf VirtualRouterId from the Interface_Subinterface_Ipv6_Address_VrrpGroup
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if VirtualRouterId is set, it can safely use t.GetVirtualRouterId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.VirtualRouterId == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Address_VrrpGroup) GetVirtualRouterId() uint8 {
	if t == nil || t.VirtualRouterId == nil {
		return 0
	}
	return *t.VirtualRouterId
}

// ΛListKeyMap returns the keys of the Interface_Subinterface_Ipv6_Address_VrrpGroup struct, which is a YANG list entry.
func (t *Interface_Subinterface_Ipv6_Address_VrrpGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.VirtualRouterId == nil {
		return nil, fmt.Errorf("nil value for key VirtualRouterId")
	}

	return map[string]interface{}{
		"virtual-router-id": *t.VirtualRouterId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Ipv6_Address_VrrpGroup) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Ipv6_Address_VrrpGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Ipv6_Address_VrrpGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking struct {
	ΛMetadata          []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	PriorityDecrement  *uint8            `path:"config/priority-decrement" module:"openconfig-if-ip"`
	ΛPriorityDecrement []ygot.Annotation `path:"config/@priority-decrement" ygotAnnotation:"true"`
	TrackInterface     []string          `path:"config/track-interface" module:"openconfig-if-ip"`
	ΛTrackInterface    []ygot.Annotation `path:"config/@track-interface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking) IsYANGGoStruct() {}

// GetPriorityDecrement retrieves the value of the leaf PriorityDecrement from the Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PriorityDecrement is set, it can safely use t.GetPriorityDecrement()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PriorityDecrement == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking) GetPriorityDecrement() uint8 {
	if t == nil || t.PriorityDecrement == nil {
		return 0
	}
	return *t.PriorityDecrement
}

// GetTrackInterface retrieves the value of the leaf TrackInterface from the Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if TrackInterface is set, it can safely use t.GetTrackInterface()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.TrackInterface == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking) GetTrackInterface() []string {
	if t == nil || t.TrackInterface == nil {
		return nil
	}
	return t.TrackInterface
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_Subinterface_Ipv6_Autoconf represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf YANG schema element.
type Interface_Subinterface_Ipv6_Autoconf struct {
	ΛMetadata                   []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	CreateGlobalAddresses       *bool             `path:"config/create-global-addresses" module:"openconfig-if-ip-ext"`
	ΛCreateGlobalAddresses      []ygot.Annotation `path:"config/@create-global-addresses" ygotAnnotation:"true"`
	CreateTemporaryAddresses    *bool             `path:"config/create-temporary-addresses" module:"openconfig-if-ip-ext"`
	ΛCreateTemporaryAddresses   []ygot.Annotation `path:"config/@create-temporary-addresses" ygotAnnotation:"true"`
	TemporaryPreferredLifetime  *uint32           `path:"config/temporary-preferred-lifetime" module:"openconfig-if-ip-ext"`
	ΛTemporaryPreferredLifetime []ygot.Annotation `path:"config/@temporary-preferred-lifetime" ygotAnnotation:"true"`
	TemporaryValidLifetime      *uint32           `path:"config/temporary-valid-lifetime" module:"openconfig-if-ip-ext"`
	ΛTemporaryValidLifetime     []ygot.Annotation `path:"config/@temporary-valid-lifetime" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Ipv6_Autoconf implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Ipv6_Autoconf) IsYANGGoStruct() {}

// GetCreateGlobalAddresses retrieves the value of the leaf CreateGlobalAddresses from the Interface_Subinterface_Ipv6_Autoconf
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if CreateGlobalAddresses is set, it can safely use t.GetCreateGlobalAddresses()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.CreateGlobalAddresses == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Autoconf) GetCreateGlobalAddresses() bool {
	if t == nil || t.CreateGlobalAddresses == nil {
		return true
	}
	return *t.CreateGlobalAddresses
}

// GetCreateTemporaryAddresses retrieves the value of the leaf CreateTemporaryAddresses from the Interface_Subinterface_Ipv6_Autoconf
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if CreateTemporaryAddresses is set, it can safely use t.GetCreateTemporaryAddresses()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.CreateTemporaryAddresses == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Autoconf) GetCreateTemporaryAddresses() bool {
	if t == nil || t.CreateTemporaryAddresses == nil {
		return false
	}
	return *t.CreateTemporaryAddresses
}

// GetTemporaryPreferredLifetime retrieves the value of the leaf TemporaryPreferredLifetime from the Interface_Subinterface_Ipv6_Autoconf
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if TemporaryPreferredLifetime is set, it can safely use t.GetTemporaryPreferredLifetime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.TemporaryPreferredLifetime == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Autoconf) GetTemporaryPreferredLifetime() uint32 {
	if t == nil || t.TemporaryPreferredLifetime == nil {
		return 86400
	}
	return *t.TemporaryPreferredLifetime
}

// GetTemporaryValidLifetime retrieves the value of the leaf TemporaryValidLifetime from the Interface_Subinterface_Ipv6_Autoconf
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if TemporaryValidLifetime is set, it can safely use t.GetTemporaryValidLifetime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.TemporaryValidLifetime == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Autoconf) GetTemporaryValidLifetime() uint32 {
	if t == nil || t.TemporaryValidLifetime == nil {
		return 604800
	}
	return *t.TemporaryValidLifetime
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Ipv6_Autoconf) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Ipv6_Autoconf"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Ipv6_Autoconf) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_Subinterface_Ipv6_Counters represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters YANG schema element.
type Interface_Subinterface_Ipv6_Counters struct {
	ΛMetadata           []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	InDiscardedPkts     *uint64           `path:"in-discarded-pkts" module:"openconfig-if-ip"`
	ΛInDiscardedPkts    []ygot.Annotation `path:"@in-discarded-pkts" ygotAnnotation:"true"`
	InErrorPkts         *uint64           `path:"in-error-pkts" module:"openconfig-if-ip"`
	ΛInErrorPkts        []ygot.Annotation `path:"@in-error-pkts" ygotAnnotation:"true"`
	InForwardedOctets   *uint64           `path:"in-forwarded-octets" module:"openconfig-if-ip"`
	ΛInForwardedOctets  []ygot.Annotation `path:"@in-forwarded-octets" ygotAnnotation:"true"`
	InForwardedPkts     *uint64           `path:"in-forwarded-pkts" module:"openconfig-if-ip"`
	ΛInForwardedPkts    []ygot.Annotation `path:"@in-forwarded-pkts" ygotAnnotation:"true"`
	InOctets            *uint64           `path:"in-octets" module:"openconfig-if-ip"`
	ΛInOctets           []ygot.Annotation `path:"@in-octets" ygotAnnotation:"true"`
	InPkts              *uint64           `path:"in-pkts" module:"openconfig-if-ip"`
	ΛInPkts             []ygot.Annotation `path:"@in-pkts" ygotAnnotation:"true"`
	OutDiscardedPkts    *uint64           `path:"out-discarded-pkts" module:"openconfig-if-ip"`
	ΛOutDiscardedPkts   []ygot.Annotation `path:"@out-discarded-pkts" ygotAnnotation:"true"`
	OutErrorPkts        *uint64           `path:"out-error-pkts" module:"openconfig-if-ip"`
	ΛOutErrorPkts       []ygot.Annotation `path:"@out-error-pkts" ygotAnnotation:"true"`
	OutForwardedOctets  *uint64           `path:"out-forwarded-octets" module:"openconfig-if-ip"`
	ΛOutForwardedOctets []ygot.Annotation `path:"@out-forwarded-octets" ygotAnnotation:"true"`
	OutForwardedPkts    *uint64           `path:"out-forwarded-pkts" module:"openconfig-if-ip"`
	ΛOutForwardedPkts   []ygot.Annotation `path:"@out-forwarded-pkts" ygotAnnotation:"true"`
	OutOctets           *uint64           `path:"out-octets" module:"openconfig-if-ip"`
	ΛOutOctets          []ygot.Annotation `path:"@out-octets" ygotAnnotation:"true"`
	OutPkts             *uint64           `path:"out-pkts" module:"openconfig-if-ip"`
	ΛOutPkts            []ygot.Annotation `path:"@out-pkts" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Ipv6_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Ipv6_Counters) IsYANGGoStruct() {}

// GetInDiscardedPkts retrieves the value of the leaf InDiscardedPkts from the Interface_Subinterface_Ipv6_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InDiscardedPkts is set, it can safely use t.GetInDiscardedPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InDiscardedPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Counters) GetInDiscardedPkts() uint64 {
	if t == nil || t.InDiscardedPkts == nil {
		return 0
	}
	return *t.InDiscardedPkts
}

// GetInErrorPkts retrieves the value of the leaf InErrorPkts from the Interface_Subinterface_Ipv6_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InErrorPkts is set, it can safely use t.GetInErrorPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InErrorPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Counters) GetInErrorPkts() uint64 {
	if t == nil || t.InErrorPkts == nil {
		return 0
	}
	return *t.InErrorPkts
}

// GetInForwardedOctets retrieves the value of the leaf InForwardedOctets from the Interface_Subinterface_Ipv6_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InForwardedOctets is set, it can safely use t.GetInForwardedOctets()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InForwardedOctets == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Counters) GetInForwardedOctets() uint64 {
	if t == nil || t.InForwardedOctets == nil {
		return 0
	}
	return *t.InForwardedOctets
}

// GetInForwardedPkts retrieves the value of the leaf InForwardedPkts from the Interface_Subinterface_Ipv6_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InForwardedPkts is set, it can safely use t.GetInForwardedPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InForwardedPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Counters) GetInForwardedPkts() uint64 {
	if t == nil || t.InForwardedPkts == nil {
		return 0
	}
	return *t.InForwardedPkts
}

// GetInOctets retrieves the value of the leaf InOctets from the Interface_Subinterface_Ipv6_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InOctets is set, it can safely use t.GetInOctets()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InOctets == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Counters) GetInOctets() uint64 {
	if t == nil || t.InOctets == nil {
		return 0
	}
	return *t.InOctets
}

// GetInPkts retrieves the value of the leaf InPkts from the Interface_Subinterface_Ipv6_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InPkts is set, it can safely use t.GetInPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Counters) GetInPkts() uint64 {
	if t == nil || t.InPkts == nil {
		return 0
	}
	return *t.InPkts
}

// GetOutDiscardedPkts retrieves the value of the leaf OutDiscardedPkts from the Interface_Subinterface_Ipv6_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutDiscardedPkts is set, it can safely use t.GetOutDiscardedPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutDiscardedPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Counters) GetOutDiscardedPkts() uint64 {
	if t == nil || t.OutDiscardedPkts == nil {
		return 0
	}
	return *t.OutDiscardedPkts
}

// GetOutErrorPkts retrieves the value of the leaf OutErrorPkts from the Interface_Subinterface_Ipv6_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutErrorPkts is set, it can safely use t.GetOutErrorPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutErrorPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Counters) GetOutErrorPkts() uint64 {
	if t == nil || t.OutErrorPkts == nil {
		return 0
	}
	return *t.OutErrorPkts
}

// GetOutForwardedOctets retrieves the value of the leaf OutForwardedOctets from the Interface_Subinterface_Ipv6_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutForwardedOctets is set, it can safely use t.GetOutForwardedOctets()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutForwardedOctets == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Counters) GetOutForwardedOctets() uint64 {
	if t == nil || t.OutForwardedOctets == nil {
		return 0
	}
	return *t.OutForwardedOctets
}

// GetOutForwardedPkts retrieves the value of the leaf OutForwardedPkts from the Interface_Subinterface_Ipv6_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutForwardedPkts is set, it can safely use t.GetOutForwardedPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutForwardedPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Counters) GetOutForwardedPkts() uint64 {
	if t == nil || t.OutForwardedPkts == nil {
		return 0
	}
	return *t.OutForwardedPkts
}

// GetOutOctets retrieves the value of the leaf OutOctets from the Interface_Subinterface_Ipv6_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutOctets is set, it can safely use t.GetOutOctets()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutOctets == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Counters) GetOutOctets() uint64 {
	if t == nil || t.OutOctets == nil {
		return 0
	}
	return *t.OutOctets
}

// GetOutPkts retrieves the value of the leaf OutPkts from the Interface_Subinterface_Ipv6_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutPkts is set, it can safely use t.GetOutPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Counters) GetOutPkts() uint64 {
	if t == nil || t.OutPkts == nil {
		return 0
	}
	return *t.OutPkts
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Ipv6_Counters) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Ipv6_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Ipv6_Counters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_Subinterface_Ipv6_Neighbor represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor YANG schema element.
type Interface_Subinterface_Ipv6_Neighbor struct {
	ΛMetadata         []ygot.Annotation                       `path:"@" ygotAnnotation:"true"`
	Ip                *string                                 `path:"config/ip|ip" module:"openconfig-if-ip"`
	ΛIp               []ygot.Annotation                       `path:"config/@ip|@ip" ygotAnnotation:"true"`
	IsRouter          *bool                                   `path:"state/is-router" module:"openconfig-if-ip"`
	ΛIsRouter         []ygot.Annotation                       `path:"state/@is-router" ygotAnnotation:"true"`
	LinkLayerAddress  *string                                 `path:"config/link-layer-address" module:"openconfig-if-ip"`
	ΛLinkLayerAddress []ygot.Annotation                       `path:"config/@link-layer-address" ygotAnnotation:"true"`
	NeighborState     E_OpenconfigIfIp_Neighbor_NeighborState `path:"state/neighbor-state" module:"openconfig-if-ip"`
	ΛNeighborState    []ygot.Annotation                       `path:"state/@neighbor-state" ygotAnnotation:"true"`
	Origin            E_OpenconfigIfIp_NeighborOrigin         `path:"state/origin" module:"openconfig-if-ip"`
	ΛOrigin           []ygot.Annotation                       `path:"state/@origin" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Ipv6_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Ipv6_Neighbor) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the Interface_Subinterface_Ipv6_Neighbor
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Ip is set, it can safely use t.GetIp()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Ip == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Neighbor) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetIsRouter retrieves the value of the leaf IsRouter from the Interface_Subinterface_Ipv6_Neighbor
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if IsRouter is set, it can safely use t.GetIsRouter()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.IsRouter == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Neighbor) GetIsRouter() bool {
	if t == nil || t.IsRouter == nil {
		return false
	}
	return *t.IsRouter
}

// GetLinkLayerAddress retrieves the value of the leaf LinkLayerAddress from the Interface_Subinterface_Ipv6_Neighbor
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LinkLayerAddress is set, it can safely use t.GetLinkLayerAddress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LinkLayerAddress == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Neighbor) GetLinkLayerAddress() string {
	if t == nil || t.LinkLayerAddress == nil {
		return ""
	}
	return *t.LinkLayerAddress
}

// GetNeighborState retrieves the value of the leaf NeighborState from the Interface_Subinterface_Ipv6_Neighbor
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if NeighborState is set, it can safely use t.GetNeighborState()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.NeighborState == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Neighbor) GetNeighborState() E_OpenconfigIfIp_Neighbor_NeighborState {
	if t == nil || t.NeighborState == 0 {
		return 0
	}
	return t.NeighborState
}

// GetOrigin retrieves the value of the leaf Origin from the Interface_Subinterface_Ipv6_Neighbor
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Origin is set, it can safely use t.GetOrigin()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Origin == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Neighbor) GetOrigin() E_OpenconfigIfIp_NeighborOrigin {
	if t == nil || t.Origin == 0 {
		return 0
	}
	return t.Origin
}

// ΛListKeyMap returns the keys of the Interface_Subinterface_Ipv6_Neighbor struct, which is a YANG list entry.
func (t *Interface_Subinterface_Ipv6_Neighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ip == nil {
		return nil, fmt.Errorf("nil value for key Ip")
	}

	return map[string]interface{}{
		"ip": *t.Ip,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Ipv6_Neighbor) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Ipv6_Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Ipv6_Neighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_Subinterface_Ipv6_RouterAdvertisement represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Interval  *uint32           `path:"config/interval" module:"openconfig-if-ip"`
	ΛInterval []ygot.Annotation `path:"config/@interval" ygotAnnotation:"true"`
	Lifetime  *uint32           `path:"config/lifetime" module:"openconfig-if-ip"`
	ΛLifetime []ygot.Annotation `path:"config/@lifetime" ygotAnnotation:"true"`
	Suppress  *bool             `path:"config/suppress" module:"openconfig-if-ip"`
	ΛSuppress []ygot.Annotation `path:"config/@suppress" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Ipv6_RouterAdvertisement implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Ipv6_RouterAdvertisement) IsYANGGoStruct() {}

// GetInterval retrieves the value of the leaf Interval from the Interface_Subinterface_Ipv6_RouterAdvertisement
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Interval is set, it can safely use t.GetInterval()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Interval == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_RouterAdvertisement) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetLifetime retrieves the value of the leaf Lifetime from the Interface_Subinterface_Ipv6_RouterAdvertisement
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Lifetime is set, it can safely use t.GetLifetime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Lifetime == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_RouterAdvertisement) GetLifetime() uint32 {
	if t == nil || t.Lifetime == nil {
		return 0
	}
	return *t.Lifetime
}

// GetSuppress retrieves the value of the leaf Suppress from the Interface_Subinterface_Ipv6_RouterAdvertisement
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Suppress is set, it can safely use t.GetSuppress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Suppress == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_RouterAdvertisement) GetSuppress() bool {
	if t == nil || t.Suppress == nil {
		return false
	}
	return *t.Suppress
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Ipv6_RouterAdvertisement) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Ipv6_RouterAdvertisement"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Ipv6_RouterAdvertisement) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_Subinterface_Ipv6_Unnumbered represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered YANG schema element.
type Interface_Subinterface_Ipv6_Unnumbered struct {
	ΛMetadata     []ygot.Annotation                                    `path:"@" ygotAnnotation:"true"`
	Enabled       *bool                                                `path:"config/enabled" module:"openconfig-if-ip"`
	ΛEnabled      []ygot.Annotation                                    `path:"config/@enabled" ygotAnnotation:"true"`
	InterfaceRef  *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef `path:"interface-ref" module:"openconfig-if-ip"`
	ΛInterfaceRef []ygot.Annotation                                    `path:"@interface-ref" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Ipv6_Unnumbered implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Ipv6_Unnumbered) IsYANGGoStruct() {}

// GetOrCreateInterfaceRef retrieves the value of the InterfaceRef field
// or returns the existing field if it already exists.
func (t *Interface_Subinterface_Ipv6_Unnumbered) GetOrCreateInterfaceRef() *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef {
	if t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	t.InterfaceRef = &Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef{}
	return t.InterfaceRef
}

// GetInterfaceRef returns the value of the InterfaceRef struct pointer
// from Interface_Subinterface_Ipv6_Unnumbered. If the receiver or the field InterfaceRef is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Subinterface_Ipv6_Unnumbered) GetInterfaceRef() *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef {
	if t != nil && t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	return nil
}

// GetEnabled retrieves the value of the leaf Enabled from the Interface_Subinterface_Ipv6_Unnumbered
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Enabled is set, it can safely use t.GetEnabled()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Enabled == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Unnumbered) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Ipv6_Unnumbered) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Ipv6_Unnumbered"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Ipv6_Unnumbered) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/interface-ref YANG schema element.
type Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef struct {
	ΛMetadata     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Interface     *string           `path:"config/interface" module:"openconfig-if-ip"`
	ΛInterface    []ygot.Annotation `path:"config/@interface" ygotAnnotation:"true"`
	Subinterface  *uint32           `path:"config/subinterface" module:"openconfig-if-ip"`
	ΛSubinterface []ygot.Annotation `path:"config/@subinterface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef) IsYANGGoStruct() {}

// GetInterface retrieves the value of the leaf Interface from the Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Interface is set, it can safely use t.GetInterface()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Interface == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// GetSubinterface retrieves the value of the leaf Subinterface from the Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Subinterface is set, it can safely use t.GetSubinterface()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Subinterface == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef) GetSubinterface() uint32 {
	if t == nil || t.Subinterface == nil {
		return 0
	}
	return *t.Subinterface
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_Subinterface_Vlan represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan YANG schema element.
type Interface_Subinterface_Vlan struct {
	ΛMetadata       []ygot.Annotation                           `path:"@" ygotAnnotation:"true"`
	EgressMapping   *Interface_Subinterface_Vlan_EgressMapping  `path:"egress-mapping" module:"openconfig-vlan"`
	ΛEgressMapping  []ygot.Annotation                           `path:"@egress-mapping" ygotAnnotation:"true"`
	IngressMapping  *Interface_Subinterface_Vlan_IngressMapping `path:"ingress-mapping" module:"openconfig-vlan"`
	ΛIngressMapping []ygot.Annotation                           `path:"@ingress-mapping" ygotAnnotation:"true"`
	Match           *Interface_Subinterface_Vlan_Match          `path:"match" module:"openconfig-vlan"`
	ΛMatch          []ygot.Annotation                           `path:"@match" ygotAnnotation:"true"`
	VlanId          Interface_Subinterface_Vlan_VlanId_Union    `path:"config/vlan-id" module:"openconfig-vlan"`
	ΛVlanId         []ygot.Annotation                           `path:"config/@vlan-id" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Vlan implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Vlan) IsYANGGoStruct() {}

// GetOrCreateEgressMapping retrieves the value of the EgressMapping field
// or returns the existing field if it already exists.
func (t *Interface_Subinterface_Vlan) GetOrCreateEgressMapping() *Interface_Subinterface_Vlan_EgressMapping {
	if t.EgressMapping != nil {
		return t.EgressMapping
	}
	t.EgressMapping = &Interface_Subinterface_Vlan_EgressMapping{}
	return t.EgressMapping
}

// GetOrCreateIngressMapping retrieves the value of the IngressMapping field
// or returns the existing field if it already exists.
func (t *Interface_Subinterface_Vlan) GetOrCreateIngressMapping() *Interface_Subinterface_Vlan_IngressMapping {
	if t.IngressMapping != nil {
		return t.IngressMapping
	}
	t.IngressMapping = &Interface_Subinterface_Vlan_IngressMapping{}
	return t.IngressMapping
}

// GetOrCreateMatch retrieves the value of the Match field
// or returns the existing field if it already exists.
func (t *Interface_Subinterface_Vlan) GetOrCreateMatch() *Interface_Subinterface_Vlan_Match {
	if t.Match != nil {
		return t.Match
	}
	t.Match = &Interface_Subinterface_Vlan_Match{}
	return t.Match
}

// GetEgressMapping returns the value of the EgressMapping struct pointer
// from Interface_Subinterface_Vlan. If the receiver or the field EgressMapping is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Subinterface_Vlan) GetEgressMapping() *Interface_Subinterface_Vlan_EgressMapping {
	if t != nil && t.EgressMapping != nil {
		return t.EgressMapping
	}
	return nil
}

// GetIngressMapping returns the value of the IngressMapping struct pointer
// from Interface_Subinterface_Vlan. If the receiver or the field IngressMapping is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Subinterface_Vlan) GetIngressMapping() *Interface_Subinterface_Vlan_IngressMapping {
	if t != nil && t.IngressMapping != nil {
		return t.IngressMapping
	}
	return nil
}

// GetMatch returns the value of the Match struct pointer
// from Interface_Subinterface_Vlan. If the receiver or the field Match is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Subinterface_Vlan) GetMatch() *Interface_Subinterface_Vlan_Match {
	if t != nil && t.Match != nil {
		return t.Match
	}
	return nil
}

// GetVlanId retrieves the value of the leaf VlanId from the Interface_Subinterface_Vlan
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if VlanId is set, it can safely use t.GetVlanId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.VlanId == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Vlan) GetVlanId() Interface_Subinterface_Vlan_VlanId_Union {
	if t == nil || t.VlanId == nil {
		return nil
	}
	return t.VlanId
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Vlan) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Vlan"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Vlan) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Interface_Subinterface_Vlan_VlanId_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/config/vlan-id within the YANG schema.
type Interface_Subinterface_Vlan_VlanId_Union interface {
	Is_Interface_Subinterface_Vlan_VlanId_Union()
}

// Interface_Subinterface_Vlan_VlanId_Union_String is used when /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/config/vlan-id
// is to be set to a string value.
type Interface_Subinterface_Vlan_VlanId_Union_String struct {
	String string
}

// Is_Interface_Subinterface_Vlan_VlanId_Union ensures that Interface_Subinterface_Vlan_VlanId_Union_String
// implements the Interface_Subinterface_Vlan_VlanId_Union interface.
func (*Interface_Subinterface_Vlan_VlanId_Union_String) Is_Interface_Subinterface_Vlan_VlanId_Union() {
}

// Interface_Subinterface_Vlan_VlanId_Union_Uint16 is used when /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/config/vlan-id
// is to be set to a uint16 value.
type Interface_Subinterface_Vlan_VlanId_Union_Uint16 struct {
	Uint16 uint16
}

// Is_Interface_Subinterface_Vlan_VlanId_Union ensures that Interface_Subinterface_Vlan_VlanId_Union_Uint16
// implements the Interface_Subinterface_Vlan_VlanId_Union interface.
func (*Interface_Subinterface_Vlan_VlanId_Union_Uint16) Is_Interface_Subinterface_Vlan_VlanId_Union() {
}

// To_Interface_Subinterface_Vlan_VlanId_Union takes an input interface{} and attempts to convert it to a struct
// which implements the Interface_Subinterface_Vlan_VlanId_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *Interface_Subinterface_Vlan) To_Interface_Subinterface_Vlan_VlanId_Union(i interface{}) (Interface_Subinterface_Vlan_VlanId_Union, error) {
	switch v := i.(type) {
	case string:
		return &Interface_Subinterface_Vlan_VlanId_Union_String{v}, nil
	case uint16:
		return &Interface_Subinterface_Vlan_VlanId_Union_Uint16{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to Interface_Subinterface_Vlan_VlanId_Union, unknown union type, got: %T, want any of [string, uint16]", i, i)
	}
}

// Interface_Subinterface_Vlan_EgressMapping represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping YANG schema element.
type Interface_Subinterface_Vlan_EgressMapping struct {
	ΛMetadata        []ygot.Annotation                `path:"@" ygotAnnotation:"true"`
	Tpid             E_OpenconfigVlanTypes_TPID_TYPES `path:"config/tpid" module:"openconfig-vlan"`
	ΛTpid            []ygot.Annotation                `path:"config/@tpid" ygotAnnotation:"true"`
	VlanId           *uint16                          `path:"config/vlan-id" module:"openconfig-vlan"`
	ΛVlanId          []ygot.Annotation                `path:"config/@vlan-id" ygotAnnotation:"true"`
	VlanStackAction  E_OpenconfigVlan_VlanStackAction `path:"config/vlan-stack-action" module:"openconfig-vlan"`
	ΛVlanStackAction []ygot.Annotation                `path:"config/@vlan-stack-action" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Vlan_EgressMapping implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Vlan_EgressMapping) IsYANGGoStruct() {}

// GetTpid retrieves the value of the leaf Tpid from the Interface_Subinterface_Vlan_EgressMapping
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Tpid is set, it can safely use t.GetTpid()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Tpid == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Vlan_EgressMapping) GetTpid() E_OpenconfigVlanTypes_TPID_TYPES {
	if t == nil || t.Tpid == 0 {
		return 0
	}
	return t.Tpid
}

// GetVlanId retrieves the value of the leaf VlanId from the Interface_Subinterface_Vlan_EgressMapping
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if VlanId is set, it can safely use t.GetVlanId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.VlanId == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Vlan_EgressMapping) GetVlanId() uint16 {
	if t == nil || t.VlanId == nil {
		return 0
	}
	return *t.VlanId
}

// GetVlanStackAction retrieves the value of the leaf VlanStackAction from the Interface_Subinterface_Vlan_EgressMapping
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if VlanStackAction is set, it can safely use t.GetVlanStackAction()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.VlanStackAction == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Vlan_EgressMapping) GetVlanStackAction() E_OpenconfigVlan_VlanStackAction {
	if t == nil || t.VlanStackAction == 0 {
		return 0
	}
	return t.VlanStackAction
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Vlan_EgressMapping) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Vlan_EgressMapping"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Vlan_EgressMapping) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_Subinterface_Vlan_IngressMapping represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping YANG schema element.
type Interface_Subinterface_Vlan_IngressMapping struct {
	ΛMetadata        []ygot.Annotation                `path:"@" ygotAnnotation:"true"`
	Tpid             E_OpenconfigVlanTypes_TPID_TYPES `path:"config/tpid" module:"openconfig-vlan"`
	ΛTpid            []ygot.Annotation                `path:"config/@tpid" ygotAnnotation:"true"`
	VlanId           *uint16                          `path:"config/vlan-id" module:"openconfig-vlan"`
	ΛVlanId          []ygot.Annotation                `path:"config/@vlan-id" ygotAnnotation:"true"`
	VlanStackAction  E_OpenconfigVlan_VlanStackAction `path:"config/vlan-stack-action" module:"openconfig-vlan"`
	ΛVlanStackAction []ygot.Annotation                `path:"config/@vlan-stack-action" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Vlan_IngressMapping implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Vlan_IngressMapping) IsYANGGoStruct() {}

// GetTpid retrieves the value of the leaf Tpid from the Interface_Subinterface_Vlan_IngressMapping
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Tpid is set, it can safely use t.GetTpid()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Tpid == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Vlan_IngressMapping) GetTpid() E_OpenconfigVlanTypes_TPID_TYPES {
	if t == nil || t.Tpid == 0 {
		return 0
	}
	return t.Tpid
}

// GetVlanId retrieves the value of the leaf VlanId from the Interface_Subinterface_Vlan_IngressMapping
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if VlanId is set, it can safely use t.GetVlanId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.VlanId == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Vlan_IngressMapping) GetVlanId() uint16 {
	if t == nil || t.VlanId == nil {
		return 0
	}
	return *t.VlanId
}

// GetVlanStackAction retrieves the value of the leaf VlanStackAction from the Interface_Subinterface_Vlan_IngressMapping
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if VlanStackAction is set, it can safely use t.GetVlanStackAction()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.VlanStackAction == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Vlan_IngressMapping) GetVlanStackAction() E_OpenconfigVlan_VlanStackAction {
	if t == nil || t.VlanStackAction == 0 {
		return 0
	}
	return t.VlanStackAction
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Vlan_IngressMapping) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Vlan_IngressMapping"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Vlan_IngressMapping) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_Subinterface_Vlan_Match represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match YANG schema element.
type Interface_Subinterface_Vlan_Match struct {
	ΛMetadata                    []ygot.Annotation                                              `path:"@" ygotAnnotation:"true"`
	DoubleTagged                 *Interface_Subinterface_Vlan_Match_DoubleTagged                `path:"double-tagged" module:"openconfig-vlan"`
	ΛDoubleTagged                []ygot.Annotation                                              `path:"@double-tagged" ygotAnnotation:"true"`
	DoubleTaggedInnerList        *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList       `path:"double-tagged-inner-list" module:"openconfig-vlan"`
	ΛDoubleTaggedInnerList       []ygot.Annotation                                              `path:"@double-tagged-inner-list" ygotAnnotation:"true"`
	DoubleTaggedInnerOuterRange  *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange `path:"double-tagged-inner-outer-range" module:"openconfig-vlan"`
	ΛDoubleTaggedInnerOuterRange []ygot.Annotation                                              `path:"@double-tagged-inner-outer-range" ygotAnnotation:"true"`
	DoubleTaggedInnerRange       *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange      `path:"double-tagged-inner-range" module:"openconfig-vlan"`
	ΛDoubleTaggedInnerRange      []ygot.Annotation                                              `path:"@double-tagged-inner-range" ygotAnnotation:"true"`
	DoubleTaggedOuterList        *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList       `path:"double-tagged-outer-list" module:"openconfig-vlan"`
	ΛDoubleTaggedOuterList       []ygot.Annotation                                              `path:"@double-tagged-outer-list" ygotAnnotation:"true"`
	DoubleTaggedOuterRange       *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange      `path:"double-tagged-outer-range" module:"openconfig-vlan"`
	ΛDoubleTaggedOuterRange      []ygot.Annotation                                              `path:"@double-tagged-outer-range" ygotAnnotation:"true"`
	SingleTagged                 *Interface_Subinterface_Vlan_Match_SingleTagged                `path:"single-tagged" module:"openconfig-vlan"`
	ΛSingleTagged                []ygot.Annotation                                              `path:"@single-tagged" ygotAnnotation:"true"`
	SingleTaggedList             *Interface_Subinterface_Vlan_Match_SingleTaggedList            `path:"single-tagged-list" module:"openconfig-vlan"`
	ΛSingleTaggedList            []ygot.Annotation                                              `path:"@single-tagged-list" ygotAnnotation:"true"`
	SingleTaggedRange            *Interface_Subinterface_Vlan_Match_SingleTaggedRange           `path:"single-tagged-range" module:"openconfig-vlan"`
	ΛSingleTaggedRange           []ygot.Annotation                                              `path:"@single-tagged-range" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Vlan_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Vlan_Match) IsYANGGoStruct() {}

// GetOrCreateDoubleTagged retrieves the value of the DoubleTagged field
// or returns the existing field if it already exists.
func (t *Interface_Subinterface_Vlan_Match) GetOrCreateDoubleTagged() *Interface_Subinterface_Vlan_Match_DoubleTagged {
	if t.DoubleTagged != nil {
		return t.DoubleTagged
	}
	t.DoubleTagged = &Interface_Subinterface_Vlan_Match_DoubleTagged{}
	return t.DoubleTagged
}

// GetOrCreateDoubleTaggedInnerList retrieves the value of the DoubleTaggedInnerList field
// or returns the existing field if it already exists.
func (t *Interface_Subinterface_Vlan_Match) GetOrCreateDoubleTaggedInnerList() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList {
	if t.DoubleTaggedInnerList != nil {
		return t.DoubleTaggedInnerList
	}
	t.DoubleTaggedInnerList = &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList{}
	return t.DoubleTaggedInnerList
}

// GetOrCreateDoubleTaggedInnerOuterRange retrieves the value of the DoubleTaggedInnerOuterRange field
// or returns the existing field if it already exists.
func (t *Interface_Subinterface_Vlan_Match) GetOrCreateDoubleTaggedInnerOuterRange() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange {
	if t.DoubleTaggedInnerOuterRange != nil {
		return t.DoubleTaggedInnerOuterRange
	}
	t.DoubleTaggedInnerOuterRange = &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange{}
	return t.DoubleTaggedInnerOuterRange
}

// GetOrCreateDoubleTaggedInnerRange retrieves the value of the DoubleTaggedInnerRange field
// or returns the existing field if it already exists.
func (t *Interface_Subinterface_Vlan_Match) GetOrCreateDoubleTaggedInnerRange() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange {
	if t.DoubleTaggedInnerRange != nil {
		return t.DoubleTaggedInnerRange
	}
	t.DoubleTaggedInnerRange = &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange{}
	return t.DoubleTaggedInnerRange
}

// GetOrCreateDoubleTaggedOuterList retrieves the value of the DoubleTaggedOuterList field
// or returns the existing field if it already exists.
func (t *Interface_Subinterface_Vlan_Match) GetOrCreateDoubleTaggedOuterList() *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList {
	if t.DoubleTaggedOuterList != nil {
		return t.DoubleTaggedOuterList
	}
	t.DoubleTaggedOuterList = &Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList{}
	return t.DoubleTaggedOuterList
}

// GetOrCreateDoubleTaggedOuterRange retrieves the value of the DoubleTaggedOuterRange field
// or returns the existing field if it already exists.
func (t *Interface_Subinterface_Vlan_Match) GetOrCreateDoubleTaggedOuterRange() *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange {
	if t.DoubleTaggedOuterRange != nil {
		return t.DoubleTaggedOuterRange
	}
	t.DoubleTaggedOuterRange = &Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange{}
	return t.DoubleTaggedOuterRange
}

// GetOrCreateSingleTagged retrieves the value of the SingleTagged field
// or returns the existing field if it already exists.
func (t *Interface_Subinterface_Vlan_Match) GetOrCreateSingleTagged() *Interface_Subinterface_Vlan_Match_SingleTagged {
	if t.SingleTagged != nil {
		return t.SingleTagged
	}
	t.SingleTagged = &Interface_Subinterface_Vlan_Match_SingleTagged{}
	return t.SingleTagged
}

// GetOrCreateSingleTaggedList retrieves the value of the SingleTaggedList field
// or returns the existing field if it already exists.
func (t *Interface_Subinterface_Vlan_Match) GetOrCreateSingleTaggedList() *Interface_Subinterface_Vlan_Match_SingleTaggedList {
	if t.SingleTaggedList != nil {
		return t.SingleTaggedList
	}
	t.SingleTaggedList = &Interface_Subinterface_Vlan_Match_SingleTaggedList{}
	return t.SingleTaggedList
}

// GetOrCreateSingleTaggedRange retrieves the value of the SingleTaggedRange field
// or returns the existing field if it already exists.
func (t *Interface_Subinterface_Vlan_Match) GetOrCreateSingleTaggedRange() *Interface_Subinterface_Vlan_Match_SingleTaggedRange {
	if t.SingleTaggedRange != nil {
		return t.SingleTaggedRange
	}
	t.SingleTaggedRange = &Interface_Subinterface_Vlan_Match_SingleTaggedRange{}
	return t.SingleTaggedRange
}

// GetDoubleTagged returns the value of the DoubleTagged struct pointer
// from Interface_Subinterface_Vlan_Match. If the receiver or the field DoubleTagged is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Subinterface_Vlan_Match) GetDoubleTagged() *Interface_Subinterface_Vlan_Match_DoubleTagged {
	if t != nil && t.DoubleTagged != nil {
		return t.DoubleTagged
	}
	return nil
}

// GetDoubleTaggedInnerList returns the value of the DoubleTaggedInnerList struct pointer
// from Interface_Subinterface_Vlan_Match. If the receiver or the field DoubleTaggedInnerList is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Subinterface_Vlan_Match) GetDoubleTaggedInnerList() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList {
	if t != nil && t.DoubleTaggedInnerList != nil {
		return t.DoubleTaggedInnerList
	}
	return nil
}

// GetDoubleTaggedInnerOuterRange returns the value of the DoubleTaggedInnerOuterRange struct pointer
// from Interface_Subinterface_Vlan_Match. If the receiver or the field DoubleTaggedInnerOuterRange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Subinterface_Vlan_Match) GetDoubleTaggedInnerOuterRange() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange {
	if t != nil && t.DoubleTaggedInnerOuterRange != nil {
		return t.DoubleTaggedInnerOuterRange
	}
	return nil
}

// GetDoubleTaggedInnerRange returns the value of the DoubleTaggedInnerRange struct pointer
// from Interface_Subinterface_Vlan_Match. If the receiver or the field DoubleTaggedInnerRange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Subinterface_Vlan_Match) GetDoubleTaggedInnerRange() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange {
	if t != nil && t.DoubleTaggedInnerRange != nil {
		return t.DoubleTaggedInnerRange
	}
	return nil
}

// GetDoubleTaggedOuterList returns the value of the DoubleTaggedOuterList struct pointer
// from Interface_Subinterface_Vlan_Match. If the receiver or the field DoubleTaggedOuterList is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Subinterface_Vlan_Match) GetDoubleTaggedOuterList() *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList {
	if t != nil && t.DoubleTaggedOuterList != nil {
		return t.DoubleTaggedOuterList
	}
	return nil
}

// GetDoubleTaggedOuterRange returns the value of the DoubleTaggedOuterRange struct pointer
// from Interface_Subinterface_Vlan_Match. If the receiver or the field DoubleTaggedOuterRange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Subinterface_Vlan_Match) GetDoubleTaggedOuterRange() *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange {
	if t != nil && t.DoubleTaggedOuterRange != nil {
		return t.DoubleTaggedOuterRange
	}
	return nil
}

// GetSingleTagged returns the value of the SingleTagged struct pointer
// from Interface_Subinterface_Vlan_Match. If the receiver or the field SingleTagged is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Subinterface_Vlan_Match) GetSingleTagged() *Interface_Subinterface_Vlan_Match_SingleTagged {
	if t != nil && t.SingleTagged != nil {
		return t.SingleTagged
	}
	return nil
}

// GetSingleTaggedList returns the value of the SingleTaggedList struct pointer
// from Interface_Subinterface_Vlan_Match. If the receiver or the field SingleTaggedList is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Subinterface_Vlan_Match) GetSingleTaggedList() *Interface_Subinterface_Vlan_Match_SingleTaggedList {
	if t != nil && t.SingleTaggedList != nil {
		return t.SingleTaggedList
	}
	return nil
}

// GetSingleTaggedRange returns the value of the SingleTaggedRange struct pointer
// from Interface_Subinterface_Vlan_Match. If the receiver or the field SingleTaggedRange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Subinterface_Vlan_Match) GetSingleTaggedRange() *Interface_Subinterface_Vlan_Match_SingleTaggedRange {
	if t != nil && t.SingleTaggedRange != nil {
		return t.SingleTaggedRange
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Vlan_Match) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Vlan_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Vlan_Match) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_Subinterface_Vlan_Match_DoubleTagged represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTagged struct {
	ΛMetadata    []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	InnerVlanId  *uint16           `path:"config/inner-vlan-id" module:"openconfig-vlan"`
	ΛInnerVlanId []ygot.Annotation `path:"config/@inner-vlan-id" ygotAnnotation:"true"`
	OuterVlanId  *uint16           `path:"config/outer-vlan-id" module:"openconfig-vlan"`
	ΛOuterVlanId []ygot.Annotation `path:"config/@outer-vlan-id" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Vlan_Match_DoubleTagged implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Vlan_Match_DoubleTagged) IsYANGGoStruct() {}

// GetInnerVlanId retrieves the value of the leaf InnerVlanId from the Interface_Subinterface_Vlan_Match_DoubleTagged
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InnerVlanId is set, it can safely use t.GetInnerVlanId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InnerVlanId == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Vlan_Match_DoubleTagged) GetInnerVlanId() uint16 {
	if t == nil || t.InnerVlanId == nil {
		return 0
	}
	return *t.InnerVlanId
}

// GetOuterVlanId retrieves the value of the leaf OuterVlanId from the Interface_Subinterface_Vlan_Match_DoubleTagged
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OuterVlanId is set, it can safely use t.GetOuterVlanId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OuterVlanId == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Vlan_Match_DoubleTagged) GetOuterVlanId() uint16 {
	if t == nil || t.OuterVlanId == nil {
		return 0
	}
	return *t.OuterVlanId
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Vlan_Match_DoubleTagged) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Vlan_Match_DoubleTagged"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Vlan_Match_DoubleTagged) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-list YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList struct {
	ΛMetadata     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	InnerVlanIds  []uint16          `path:"config/inner-vlan-ids" module:"openconfig-vlan"`
	ΛInnerVlanIds []ygot.Annotation `path:"config/@inner-vlan-ids" ygotAnnotation:"true"`
	OuterVlanId   *uint16           `path:"config/outer-vlan-id" module:"openconfig-vlan"`
	ΛOuterVlanId  []ygot.Annotation `path:"config/@outer-vlan-id" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList) IsYANGGoStruct() {}

// GetInnerVlanIds retrieves the value of the leaf InnerVlanIds from the Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InnerVlanIds is set, it can safely use t.GetInnerVlanIds()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InnerVlanIds == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList) GetInnerVlanIds() []uint16 {
	if t == nil || t.InnerVlanIds == nil {
		return nil
	}
	return t.InnerVlanIds
}

// GetOuterVlanId retrieves the value of the leaf OuterVlanId from the Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OuterVlanId is set, it can safely use t.GetOuterVlanId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OuterVlanId == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList) GetOuterVlanId() uint16 {
	if t == nil || t.OuterVlanId == nil {
		return 0
	}
	return *t.OuterVlanId
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange struct {
	ΛMetadata        []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	InnerHighVlanId  *uint16           `path:"config/inner-high-vlan-id" module:"openconfig-vlan"`
	ΛInnerHighVlanId []ygot.Annotation `path:"config/@inner-high-vlan-id" ygotAnnotation:"true"`
	InnerLowVlanId   *uint16           `path:"config/inner-low-vlan-id" module:"openconfig-vlan"`
	ΛInnerLowVlanId  []ygot.Annotation `path:"config/@inner-low-vlan-id" ygotAnnotation:"true"`
	OuterHighVlanId  *uint16           `path:"config/outer-high-vlan-id" module:"openconfig-vlan"`
	ΛOuterHighVlanId []ygot.Annotation `path:"config/@outer-high-vlan-id" ygotAnnotation:"true"`
	OuterLowVlanId   *uint16           `path:"config/outer-low-vlan-id" module:"openconfig-vlan"`
	ΛOuterLowVlanId  []ygot.Annotation `path:"config/@outer-low-vlan-id" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange) IsYANGGoStruct() {}

// GetInnerHighVlanId retrieves the value of the leaf InnerHighVlanId from the Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InnerHighVlanId is set, it can safely use t.GetInnerHighVlanId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InnerHighVlanId == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange) GetInnerHighVlanId() uint16 {
	if t == nil || t.InnerHighVlanId == nil {
		return 0
	}
	return *t.InnerHighVlanId
}

// GetInnerLowVlanId retrieves the value of the leaf InnerLowVlanId from the Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InnerLowVlanId is set, it can safely use t.GetInnerLowVlanId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InnerLowVlanId == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange) GetInnerLowVlanId() uint16 {
	if t == nil || t.InnerLowVlanId == nil {
		return 0
	}
	return *t.InnerLowVlanId
}

// GetOuterHighVlanId retrieves the value of the leaf OuterHighVlanId from the Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OuterHighVlanId is set, it can safely use t.GetOuterHighVlanId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OuterHighVlanId == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange) GetOuterHighVlanId() uint16 {
	if t == nil || t.OuterHighVlanId == nil {
		return 0
	}
	return *t.OuterHighVlanId
}

// GetOuterLowVlanId retrieves the value of the leaf OuterLowVlanId from the Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OuterLowVlanId is set, it can safely use t.GetOuterLowVlanId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OuterLowVlanId == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange) GetOuterLowVlanId() uint16 {
	if t == nil || t.OuterLowVlanId == nil {
		return 0
	}
	return *t.OuterLowVlanId
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange struct {
	ΛMetadata        []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	InnerHighVlanId  *uint16           `path:"config/inner-high-vlan-id" module:"openconfig-vlan"`
	ΛInnerHighVlanId []ygot.Annotation `path:"config/@inner-high-vlan-id" ygotAnnotation:"true"`
	InnerLowVlanId   *uint16           `path:"config/inner-low-vlan-id" module:"openconfig-vlan"`
	ΛInnerLowVlanId  []ygot.Annotation `path:"config/@inner-low-vlan-id" ygotAnnotation:"true"`
	OuterVlanId      []uint16          `path:"config/outer-vlan-id" module:"openconfig-vlan"`
	ΛOuterVlanId     []ygot.Annotation `path:"config/@outer-vlan-id" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange) IsYANGGoStruct() {}

// GetInnerHighVlanId retrieves the value of the leaf InnerHighVlanId from the Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InnerHighVlanId is set, it can safely use t.GetInnerHighVlanId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InnerHighVlanId == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange) GetInnerHighVlanId() uint16 {
	if t == nil || t.InnerHighVlanId == nil {
		return 0
	}
	return *t.InnerHighVlanId
}

// GetInnerLowVlanId retrieves the value of the leaf InnerLowVlanId from the Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InnerLowVlanId is set, it can safely use t.GetInnerLowVlanId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InnerLowVlanId == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange) GetInnerLowVlanId() uint16 {
	if t == nil || t.InnerLowVlanId == nil {
		return 0
	}
	return *t.InnerLowVlanId
}

// GetOuterVlanId retrieves the value of the leaf OuterVlanId from the Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OuterVlanId is set, it can safely use t.GetOuterVlanId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OuterVlanId == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange) GetOuterVlanId() []uint16 {
	if t == nil || t.OuterVlanId == nil {
		return nil
	}
	return t.OuterVlanId
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-list YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList struct {
	ΛMetadata     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	InnerVlanId   *uint16           `path:"config/inner-vlan-id" module:"openconfig-vlan"`
	ΛInnerVlanId  []ygot.Annotation `path:"config/@inner-vlan-id" ygotAnnotation:"true"`
	OuterVlanIds  []uint16          `path:"config/outer-vlan-ids" module:"openconfig-vlan"`
	ΛOuterVlanIds []ygot.Annotation `path:"config/@outer-vlan-ids" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList) IsYANGGoStruct() {}

// GetInnerVlanId retrieves the value of the leaf InnerVlanId from the Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InnerVlanId is set, it can safely use t.GetInnerVlanId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InnerVlanId == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList) GetInnerVlanId() uint16 {
	if t == nil || t.InnerVlanId == nil {
		return 0
	}
	return *t.InnerVlanId
}

// GetOuterVlanIds retrieves the value of the leaf OuterVlanIds from the Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OuterVlanIds is set, it can safely use t.GetOuterVlanIds()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OuterVlanIds == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList) GetOuterVlanIds() []uint16 {
	if t == nil || t.OuterVlanIds == nil {
		return nil
	}
	return t.OuterVlanIds
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange struct {
	ΛMetadata        []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	InnerVlanId      *uint16           `path:"config/inner-vlan-id" module:"openconfig-vlan"`
	ΛInnerVlanId     []ygot.Annotation `path:"config/@inner-vlan-id" ygotAnnotation:"true"`
	OuterHighVlanId  *uint16           `path:"config/outer-high-vlan-id" module:"openconfig-vlan"`
	ΛOuterHighVlanId []ygot.Annotation `path:"config/@outer-high-vlan-id" ygotAnnotation:"true"`
	OuterLowVlanId   *uint16           `path:"config/outer-low-vlan-id" module:"openconfig-vlan"`
	ΛOuterLowVlanId  []ygot.Annotation `path:"config/@outer-low-vlan-id" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange) IsYANGGoStruct() {}

// GetInnerVlanId retrieves the value of the leaf InnerVlanId from the Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InnerVlanId is set, it can safely use t.GetInnerVlanId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InnerVlanId == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange) GetInnerVlanId() uint16 {
	if t == nil || t.InnerVlanId == nil {
		return 0
	}
	return *t.InnerVlanId
}

// GetOuterHighVlanId retrieves the value of the leaf OuterHighVlanId from the Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OuterHighVlanId is set, it can safely use t.GetOuterHighVlanId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OuterHighVlanId == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange) GetOuterHighVlanId() uint16 {
	if t == nil || t.OuterHighVlanId == nil {
		return 0
	}
	return *t.OuterHighVlanId
}

// GetOuterLowVlanId retrieves the value of the leaf OuterLowVlanId from the Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OuterLowVlanId is set, it can safely use t.GetOuterLowVlanId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OuterLowVlanId == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange) GetOuterLowVlanId() uint16 {
	if t == nil || t.OuterLowVlanId == nil {
		return 0
	}
	return *t.OuterLowVlanId
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_Subinterface_Vlan_Match_SingleTagged represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged YANG schema element.
type Interface_Subinterface_Vlan_Match_SingleTagged struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	VlanId    *uint16           `path:"config/vlan-id" module:"openconfig-vlan"`
	ΛVlanId   []ygot.Annotation `path:"config/@vlan-id" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Vlan_Match_SingleTagged implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Vlan_Match_SingleTagged) IsYANGGoStruct() {}

// GetVlanId retrieves the value of the leaf VlanId from the Interface_Subinterface_Vlan_Match_SingleTagged
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if VlanId is set, it can safely use t.GetVlanId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.VlanId == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Vlan_Match_SingleTagged) GetVlanId() uint16 {
	if t == nil || t.VlanId == nil {
		return 0
	}
	return *t.VlanId
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Vlan_Match_SingleTagged) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Vlan_Match_SingleTagged"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Vlan_Match_SingleTagged) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_Subinterface_Vlan_Match_SingleTaggedList represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-list YANG schema element.
type Interface_Subinterface_Vlan_Match_SingleTaggedList struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	VlanIds   []uint16          `path:"config/vlan-ids" module:"openconfig-vlan"`
	ΛVlanIds  []ygot.Annotation `path:"config/@vlan-ids" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Vlan_Match_SingleTaggedList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Vlan_Match_SingleTaggedList) IsYANGGoStruct() {}

// GetVlanIds retrieves the value of the leaf VlanIds from the Interface_Subinterface_Vlan_Match_SingleTaggedList
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if VlanIds is set, it can safely use t.GetVlanIds()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.VlanIds == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Vlan_Match_SingleTaggedList) GetVlanIds() []uint16 {
	if t == nil || t.VlanIds == nil {
		return nil
	}
	return t.VlanIds
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Vlan_Match_SingleTaggedList) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Vlan_Match_SingleTaggedList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Vlan_Match_SingleTaggedList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_Subinterface_Vlan_Match_SingleTaggedRange represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-range YANG schema element.
type Interface_Subinterface_Vlan_Match_SingleTaggedRange struct {
	ΛMetadata   []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	HighVlanId  *uint16           `path:"config/high-vlan-id" module:"openconfig-vlan"`
	ΛHighVlanId []ygot.Annotation `path:"config/@high-vlan-id" ygotAnnotation:"true"`
	LowVlanId   *uint16           `path:"config/low-vlan-id" module:"openconfig-vlan"`
	ΛLowVlanId  []ygot.Annotation `path:"config/@low-vlan-id" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Vlan_Match_SingleTaggedRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Vlan_Match_SingleTaggedRange) IsYANGGoStruct() {}

// GetHighVlanId retrieves the value of the leaf HighVlanId from the Interface_Subinterface_Vlan_Match_SingleTaggedRange
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if HighVlanId is set, it can safely use t.GetHighVlanId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.HighVlanId == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Vlan_Match_SingleTaggedRange) GetHighVlanId() uint16 {
	if t == nil || t.HighVlanId == nil {
		return 0
	}
	return *t.HighVlanId
}

// GetLowVlanId retrieves the value of the leaf LowVlanId from the Interface_Subinterface_Vlan_Match_SingleTaggedRange
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LowVlanId is set, it can safely use t.GetLowVlanId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LowVlanId == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Vlan_Match_SingleTaggedRange) GetLowVlanId() uint16 {
	if t == nil || t.LowVlanId == nil {
		return 0
	}
	return *t.LowVlanId
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Vlan_Match_SingleTaggedRange) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Vlan_Match_SingleTaggedRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Vlan_Match_SingleTaggedRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Lacp represents the /openconfig-lacp/lacp YANG schema element.
type Lacp struct {
	ΛMetadata       []ygot.Annotation          `path:"@" ygotAnnotation:"true"`
	Interface       map[string]*Lacp_Interface `path:"interfaces/interface" module:"openconfig-lacp"`
	ΛInterface      []ygot.Annotation          `path:"interfaces/@interface" ygotAnnotation:"true"`
	SystemPriority  *uint16                    `path:"config/system-priority" module:"openconfig-lacp"`
	ΛSystemPriority []ygot.Annotation          `path:"config/@system-priority" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Lacp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Lacp) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// Lacp struct. The keys of the list are populated from the input
// arguments.
func (t *Lacp) NewInterface(Name string) (*Lacp_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*Lacp_Interface)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &Lacp_Interface{
		Name: &Name,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the Lacp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Lacp) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.Name = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver Lacp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Lacp) GetOrCreateInterface(Name string) *Lacp_Interface {

	key := Name

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of Lacp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Lacp) GetInterface(Name string) *Lacp_Interface {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// AppendInterface appends the supplied Lacp_Interface struct to the
// list Interface of Lacp. If the key value(s) specified in
// the supplied Lacp_Interface already exist in the list, an error is
// returned.
func (t *Lacp) AppendInterface(v *Lacp_Interface) error {
	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*Lacp_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// GetSystemPriority retrieves the value of the leaf SystemPriority from the Lacp
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if SystemPriority is set, it can safely use t.GetSystemPriority()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.SystemPriority == nil'
// before retrieving the leaf's value.
func (t *Lacp) GetSystemPriority() uint16 {
	if t == nil || t.SystemPriority == nil {
		return 0
	}
	return *t.SystemPriority
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Lacp) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Lacp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Lacp) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Lacp_Interface represents the /openconfig-lacp/lacp/interfaces/interface YANG schema element.
type Lacp_Interface struct {
	ΛMetadata       []ygot.Annotation                 `path:"@" ygotAnnotation:"true"`
	Interval        E_OpenconfigLacp_LacpPeriodType   `path:"config/interval" module:"openconfig-lacp"`
	ΛInterval       []ygot.Annotation                 `path:"config/@interval" ygotAnnotation:"true"`
	LacpMode        E_OpenconfigLacp_LacpActivityType `path:"config/lacp-mode" module:"openconfig-lacp"`
	ΛLacpMode       []ygot.Annotation                 `path:"config/@lacp-mode" ygotAnnotation:"true"`
	Member          map[string]*Lacp_Interface_Member `path:"members/member" module:"openconfig-lacp"`
	ΛMember         []ygot.Annotation                 `path:"members/@member" ygotAnnotation:"true"`
	Name            *string                           `path:"config/name|name" module:"openconfig-lacp"`
	ΛName           []ygot.Annotation                 `path:"config/@name|@name" ygotAnnotation:"true"`
	SystemIdMac     *string                           `path:"config/system-id-mac" module:"openconfig-lacp"`
	ΛSystemIdMac    []ygot.Annotation                 `path:"config/@system-id-mac" ygotAnnotation:"true"`
	SystemPriority  *uint16                           `path:"config/system-priority" module:"openconfig-lacp"`
	ΛSystemPriority []ygot.Annotation                 `path:"config/@system-priority" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Lacp_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Lacp_Interface) IsYANGGoStruct() {}

// NewMember creates a new entry in the Member list of the
// Lacp_Interface struct. The keys of the list are populated from the input
// arguments.
func (t *Lacp_Interface) NewMember(Interface string) (*Lacp_Interface_Member, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Member == nil {
		t.Member = make(map[string]*Lacp_Interface_Member)
	}

	key := Interface

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Member[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Member", key)
	}

	t.Member[key] = &Lacp_Interface_Member{
		Interface: &Interface,
	}

	return t.Member[key], nil
}

// RenameMember renames an entry in the list Member within
// the Lacp_Interface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Lacp_Interface) RenameMember(oldK, newK string) error {
	if _, ok := t.Member[newK]; ok {
		return fmt.Errorf("key %v already exists in Member", newK)
	}

	e, ok := t.Member[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Member", oldK)
	}
	e.Interface = &newK

	t.Member[newK] = e
	delete(t.Member, oldK)
	return nil
}

// GetOrCreateMember retrieves the value with the specified keys from
// the receiver Lacp_Interface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Lacp_Interface) GetOrCreateMember(Interface string) *Lacp_Interface_Member {

	key := Interface

	if v, ok := t.Member[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMember(Interface)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMember got unexpected error: %v", err))
	}
	return v
}

// GetMember retrieves the value with the specified key from
// the Member map field of Lacp_Interface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Lacp_Interface) GetMember(Interface string) *Lacp_Interface_Member {

	if t == nil {
		return nil
	}

	key := Interface

	if lm, ok := t.Member[key]; ok {
		return lm
	}
	return nil
}

// AppendMember appends the supplied Lacp_Interface_Member struct to the
// list Member of Lacp_Interface. If the key value(s) specified in
// the supplied Lacp_Interface_Member already exist in the list, an error is
// returned.
func (t *Lacp_Interface) AppendMember(v *Lacp_Interface_Member) error {
	key := *v.Interface

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Member == nil {
		t.Member = make(map[string]*Lacp_Interface_Member)
	}

	if _, ok := t.Member[key]; ok {
		return fmt.Errorf("duplicate key for list Member %v", key)
	}

	t.Member[key] = v
	return nil
}

// GetInterval retrieves the value of the leaf Interval from the Lacp_Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Interval is set, it can safely use t.GetInterval()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Interval == nil'
// before retrieving the leaf's value.
func (t *Lacp_Interface) GetInterval() E_OpenconfigLacp_LacpPeriodType {
	if t == nil || t.Interval == 0 {
		return OpenconfigLacp_LacpPeriodType_SLOW
	}
	return t.Interval
}

// GetLacpMode retrieves the value of the leaf LacpMode from the Lacp_Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LacpMode is set, it can safely use t.GetLacpMode()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LacpMode == nil'
// before retrieving the leaf's value.
func (t *Lacp_Interface) GetLacpMode() E_OpenconfigLacp_LacpActivityType {
	if t == nil || t.LacpMode == 0 {
		return OpenconfigLacp_LacpActivityType_ACTIVE
	}
	return t.LacpMode
}

// GetName retrieves the value of the leaf Name from the Lacp_Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Name is set, it can safely use t.GetName()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Name == nil'
// before retrieving the leaf's value.
func (t *Lacp_Interface) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetSystemIdMac retrieves the value of the leaf SystemIdMac from the Lacp_Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if SystemIdMac is set, it can safely use t.GetSystemIdMac()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.SystemIdMac == nil'
// before retrieving the leaf's value.
func (t *Lacp_Interface) GetSystemIdMac() string {
	if t == nil || t.SystemIdMac == nil {
		return ""
	}
	return *t.SystemIdMac
}

// GetSystemPriority retrieves the value of the leaf SystemPriority from the Lacp_Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if SystemPriority is set, it can safely use t.GetSystemPriority()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.SystemPriority == nil'
// before retrieving the leaf's value.
func (t *Lacp_Interface) GetSystemPriority() uint16 {
	if t == nil || t.SystemPriority == nil {
		return 0
	}
	return *t.SystemPriority
}

// ΛListKeyMap returns the keys of the Lacp_Interface struct, which is a YANG list entry.
func (t *Lacp_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Lacp_Interface) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Lacp_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Lacp_Interface) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Lacp_Interface_Member represents the /openconfig-lacp/lacp/interfaces/interface/members/member YANG schema element.
type Lacp_Interface_Member struct {
	ΛMetadata        []ygot.Annotation                        `path:"@" ygotAnnotation:"true"`
	Activity         E_OpenconfigLacp_LacpActivityType        `path:"state/activity" module:"openconfig-lacp"`
	ΛActivity        []ygot.Annotation                        `path:"state/@activity" ygotAnnotation:"true"`
	Aggregatable     *bool                                    `path:"state/aggregatable" module:"openconfig-lacp"`
	ΛAggregatable    []ygot.Annotation                        `path:"state/@aggregatable" ygotAnnotation:"true"`
	Collecting       *bool                                    `path:"state/collecting" module:"openconfig-lacp"`
	ΛCollecting      []ygot.Annotation                        `path:"state/@collecting" ygotAnnotation:"true"`
	Counters         *Lacp_Interface_Member_Counters          `path:"state/counters" module:"openconfig-lacp"`
	ΛCounters        []ygot.Annotation                        `path:"state/@counters" ygotAnnotation:"true"`
	Distributing     *bool                                    `path:"state/distributing" module:"openconfig-lacp"`
	ΛDistributing    []ygot.Annotation                        `path:"state/@distributing" ygotAnnotation:"true"`
	Interface        *string                                  `path:"state/interface|interface" module:"openconfig-lacp"`
	ΛInterface       []ygot.Annotation                        `path:"state/@interface|@interface" ygotAnnotation:"true"`
	OperKey          *uint16                                  `path:"state/oper-key" module:"openconfig-lacp"`
	ΛOperKey         []ygot.Annotation                        `path:"state/@oper-key" ygotAnnotation:"true"`
	PartnerId        *string                                  `path:"state/partner-id" module:"openconfig-lacp"`
	ΛPartnerId       []ygot.Annotation                        `path:"state/@partner-id" ygotAnnotation:"true"`
	PartnerKey       *uint16                                  `path:"state/partner-key" module:"openconfig-lacp"`
	ΛPartnerKey      []ygot.Annotation                        `path:"state/@partner-key" ygotAnnotation:"true"`
	PartnerPortNum   *uint16                                  `path:"state/partner-port-num" module:"openconfig-lacp"`
	ΛPartnerPortNum  []ygot.Annotation                        `path:"state/@partner-port-num" ygotAnnotation:"true"`
	PortNum          *uint16                                  `path:"state/port-num" module:"openconfig-lacp"`
	ΛPortNum         []ygot.Annotation                        `path:"state/@port-num" ygotAnnotation:"true"`
	Synchronization  E_OpenconfigLacp_LacpSynchronizationType `path:"state/synchronization" module:"openconfig-lacp"`
	ΛSynchronization []ygot.Annotation                        `path:"state/@synchronization" ygotAnnotation:"true"`
	SystemId         *string                                  `path:"state/system-id" module:"openconfig-lacp"`
	ΛSystemId        []ygot.Annotation                        `path:"state/@system-id" ygotAnnotation:"true"`
	Timeout          E_OpenconfigLacp_LacpTimeoutType         `path:"state/timeout" module:"openconfig-lacp"`
	ΛTimeout         []ygot.Annotation                        `path:"state/@timeout" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Lacp_Interface_Member implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Lacp_Interface_Member) IsYANGGoStruct() {}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *Lacp_Interface_Member) GetOrCreateCounters() *Lacp_Interface_Member_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &Lacp_Interface_Member_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from Lacp_Interface_Member. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Lacp_Interface_Member) GetCounters() *Lacp_Interface_Member_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetActivity retrieves the value of the leaf Activity from the Lacp_Interface_Member
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Activity is set, it can safely use t.GetActivity()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Activity == nil'
// before retrieving the leaf's value.
func (t *Lacp_Interface_Member) GetActivity() E_OpenconfigLacp_LacpActivityType {
	if t == nil || t.Activity == 0 {
		return 0
	}
	return t.Activity
}

// GetAggregatable retrieves the value of the leaf Aggregatable from the Lacp_Interface_Member
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Aggregatable is set, it can safely use t.GetAggregatable()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Aggregatable == nil'
// before retrieving the leaf's value.
func (t *Lacp_Interface_Member) GetAggregatable() bool {
	if t == nil || t.Aggregatable == nil {
		return false
	}
	return *t.Aggregatable
}

// GetCollecting retrieves the value of the leaf Collecting from the Lacp_Interface_Member
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Collecting is set, it can safely use t.GetCollecting()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Collecting == nil'
// before retrieving the leaf's value.
func (t *Lacp_Interface_Member) GetCollecting() bool {
	if t == nil || t.Collecting == nil {
		return false
	}
	return *t.Collecting
}

// GetDistributing retrieves the value of the leaf Distributing from the Lacp_Interface_Member
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Distributing is set, it can safely use t.GetDistributing()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Distributing == nil'
// before retrieving the leaf's value.
func (t *Lacp_Interface_Member) GetDistributing() bool {
	if t == nil || t.Distributing == nil {
		return false
	}
	return *t.Distributing
}

// GetInterface retrieves the value of the leaf Interface from the Lacp_Interface_Member
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Interface is set, it can safely use t.GetInterface()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Interface == nil'
// before retrieving the leaf's value.
func (t *Lacp_Interface_Member) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// GetOperKey retrieves the value of the leaf OperKey from the Lacp_Interface_Member
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OperKey is set, it can safely use t.GetOperKey()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OperKey == nil'
// before retrieving the leaf's value.
func (t *Lacp_Interface_Member) GetOperKey() uint16 {
	if t == nil || t.OperKey == nil {
		return 0
	}
	return *t.OperKey
}

// GetPartnerId retrieves the value of the leaf PartnerId from the Lacp_Interface_Member
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PartnerId is set, it can safely use t.GetPartnerId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PartnerId == nil'
// before retrieving the leaf's value.
func (t *Lacp_Interface_Member) GetPartnerId() string {
	if t == nil || t.PartnerId == nil {
		return ""
	}
	return *t.PartnerId
}

// GetPartnerKey retrieves the value of the leaf PartnerKey from the Lacp_Interface_Member
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PartnerKey is set, it can safely use t.GetPartnerKey()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PartnerKey == nil'
// before retrieving the leaf's value.
func (t *Lacp_Interface_Member) GetPartnerKey() uint16 {
	if t == nil || t.PartnerKey == nil {
		return 0
	}
	return *t.PartnerKey
}

// GetPartnerPortNum retrieves the value of the leaf PartnerPortNum from the Lacp_Interface_Member
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PartnerPortNum is set, it can safely use t.GetPartnerPortNum()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PartnerPortNum == nil'
// before retrieving the leaf's value.
func (t *Lacp_Interface_Member) GetPartnerPortNum() uint16 {
	if t == nil || t.PartnerPortNum == nil {
		return 0
	}
	return *t.PartnerPortNum
}

// GetPortNum retrieves the value of the leaf PortNum from the Lacp_Interface_Member
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PortNum is set, it can safely use t.GetPortNum()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PortNum == nil'
// before retrieving the leaf's value.
func (t *Lacp_Interface_Member) GetPortNum() uint16 {
	if t == nil || t.PortNum == nil {
		return 0
	}
	return *t.PortNum
}

// GetSynchronization retrieves the value of the leaf Synchronization from the Lacp_Interface_Member
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Synchronization is set, it can safely use t.GetSynchronization()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Synchronization == nil'
// before retrieving the leaf's value.
func (t *Lacp_Interface_Member) GetSynchronization() E_OpenconfigLacp_LacpSynchronizationType {
	if t == nil || t.Synchronization == 0 {
		return 0
	}
	return t.Synchronization
}

// GetSystemId retrieves the value of the leaf SystemId from the Lacp_Interface_Member
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if SystemId is set, it can safely use t.GetSystemId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.SystemId == nil'
// before retrieving the leaf's value.
func (t *Lacp_Interface_Member) GetSystemId() string {
	if t == nil || t.SystemId == nil {
		return ""
	}
	return *t.SystemId
}

// GetTimeout retrieves the value of the leaf Timeout from the Lacp_Interface_Member
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Timeout is set, it can safely use t.GetTimeout()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Timeout == nil'
// before retrieving the leaf's value.
func (t *Lacp_Interface_Member) GetTimeout() E_OpenconfigLacp_LacpTimeoutType {
	if t == nil || t.Timeout == 0 {
		return 0
	}
	return t.Timeout
}

// ΛListKeyMap returns the keys of the Lacp_Interface_Member struct, which is a YANG list entry.
func (t *Lacp_Interface_Member) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Interface == nil {
		return nil, fmt.Errorf("nil value for key Interface")
	}

	return map[string]interface{}{
		"interface": *t.Interface,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Lacp_Interface_Member) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Lacp_Interface_Member"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Lacp_Interface_Member) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Lacp_Interface_Member_Counters represents the /openconfig-lacp/lacp/interfaces/interface/members/member/state/counters YANG schema element.
type Lacp_Interface_Member_Counters struct {
	ΛMetadata          []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	LacpErrors         *uint64           `path:"lacp-errors" module:"openconfig-lacp"`
	ΛLacpErrors        []ygot.Annotation `path:"@lacp-errors" ygotAnnotation:"true"`
	LacpInPkts         *uint64           `path:"lacp-in-pkts" module:"openconfig-lacp"`
	ΛLacpInPkts        []ygot.Annotation `path:"@lacp-in-pkts" ygotAnnotation:"true"`
	LacpOutPkts        *uint64           `path:"lacp-out-pkts" module:"openconfig-lacp"`
	ΛLacpOutPkts       []ygot.Annotation `path:"@lacp-out-pkts" ygotAnnotation:"true"`
	LacpRxErrors       *uint64           `path:"lacp-rx-errors" module:"openconfig-lacp"`
	ΛLacpRxErrors      []ygot.Annotation `path:"@lacp-rx-errors" ygotAnnotation:"true"`
	LacpTxErrors       *uint64           `path:"lacp-tx-errors" module:"openconfig-lacp"`
	ΛLacpTxErrors      []ygot.Annotation `path:"@lacp-tx-errors" ygotAnnotation:"true"`
	LacpUnknownErrors  *uint64           `path:"lacp-unknown-errors" module:"openconfig-lacp"`
	ΛLacpUnknownErrors []ygot.Annotation `path:"@lacp-unknown-errors" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Lacp_Interface_Member_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Lacp_Interface_Member_Counters) IsYANGGoStruct() {}

// GetLacpErrors retrieves the value of the leaf LacpErrors from the Lacp_Interface_Member_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LacpErrors is set, it can safely use t.GetLacpErrors()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LacpErrors == nil'
// before retrieving the leaf's value.
func (t *Lacp_Interface_Member_Counters) GetLacpErrors() uint64 {
	if t == nil || t.LacpErrors == nil {
		return 0
	}
	return *t.LacpErrors
}

// GetLacpInPkts retrieves the value of the leaf LacpInPkts from the Lacp_Interface_Member_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LacpInPkts is set, it can safely use t.GetLacpInPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LacpInPkts == nil'
// before retrieving the leaf's value.
func (t *Lacp_Interface_Member_Counters) GetLacpInPkts() uint64 {
	if t == nil || t.LacpInPkts == nil {
		return 0
	}
	return *t.LacpInPkts
}

// GetLacpOutPkts retrieves the value of the leaf LacpOutPkts from the Lacp_Interface_Member_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LacpOutPkts is set, it can safely use t.GetLacpOutPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LacpOutPkts == nil'
// before retrieving the leaf's value.
func (t *Lacp_Interface_Member_Counters) GetLacpOutPkts() uint64 {
	if t == nil || t.LacpOutPkts == nil {
		return 0
	}
	return *t.LacpOutPkts
}

// GetLacpRxErrors retrieves the value of the leaf LacpRxErrors from the Lacp_Interface_Member_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LacpRxErrors is set, it can safely use t.GetLacpRxErrors()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LacpRxErrors == nil'
// before retrieving the leaf's value.
func (t *Lacp_Interface_Member_Counters) GetLacpRxErrors() uint64 {
	if t == nil || t.LacpRxErrors == nil {
		return 0
	}
	return *t.LacpRxErrors
}

// GetLacpTxErrors retrieves the value of the leaf LacpTxErrors from the Lacp_Interface_Member_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LacpTxErrors is set, it can safely use t.GetLacpTxErrors()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LacpTxErrors == nil'
// before retrieving the leaf's value.
func (t *Lacp_Interface_Member_Counters) GetLacpTxErrors() uint64 {
	if t == nil || t.LacpTxErrors == nil {
		return 0
	}
	return *t.LacpTxErrors
}

// GetLacpUnknownErrors retrieves the value of the leaf LacpUnknownErrors from the Lacp_Interface_Member_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LacpUnknownErrors is set, it can safely use t.GetLacpUnknownErrors()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LacpUnknownErrors == nil'
// before retrieving the leaf's value.
func (t *Lacp_Interface_Member_Counters) GetLacpUnknownErrors() uint64 {
	if t == nil || t.LacpUnknownErrors == nil {
		return 0
	}
	return *t.LacpUnknownErrors
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Lacp_Interface_Member_Counters) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Lacp_Interface_Member_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Lacp_Interface_Member_Counters) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Lldp represents the /openconfig-lldp/lldp YANG schema element.
type Lldp struct {
	ΛMetadata                 []ygot.Annotation                `path:"@" ygotAnnotation:"true"`
	ChassisId                 *string                          `path:"config/chassis-id" module:"openconfig-lldp"`
	ΛChassisId                []ygot.Annotation                `path:"config/@chassis-id" ygotAnnotation:"true"`
	ChassisIdType             E_OpenconfigLldp_ChassisIdType   `path:"config/chassis-id-type" module:"openconfig-lldp"`
	ΛChassisIdType            []ygot.Annotation                `path:"config/@chassis-id-type" ygotAnnotation:"true"`
	Counters                  *Lldp_Counters                   `path:"state/counters" module:"openconfig-lldp"`
	ΛCounters                 []ygot.Annotation                `path:"state/@counters" ygotAnnotation:"true"`
	Enabled                   *bool                            `path:"config/enabled" module:"openconfig-lldp"`
	ΛEnabled                  []ygot.Annotation                `path:"config/@enabled" ygotAnnotation:"true"`
	HelloTimer                *uint64                          `path:"config/hello-timer" module:"openconfig-lldp"`
	ΛHelloTimer               []ygot.Annotation                `path:"config/@hello-timer" ygotAnnotation:"true"`
	Interface                 map[string]*Lldp_Interface       `path:"interfaces/interface" module:"openconfig-lldp"`
	ΛInterface                []ygot.Annotation                `path:"interfaces/@interface" ygotAnnotation:"true"`
	SuppressTlvAdvertisement  []E_OpenconfigLldpTypes_LLDP_TLV `path:"config/suppress-tlv-advertisement" module:"openconfig-lldp"`
	ΛSuppressTlvAdvertisement []ygot.Annotation                `path:"config/@suppress-tlv-advertisement" ygotAnnotation:"true"`
	SystemDescription         *string                          `path:"config/system-description" module:"openconfig-lldp"`
	ΛSystemDescription        []ygot.Annotation                `path:"config/@system-description" ygotAnnotation:"true"`
	SystemName                *string                          `path:"config/system-name" module:"openconfig-lldp"`
	ΛSystemName               []ygot.Annotation                `path:"config/@system-name" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Lldp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Lldp) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// Lldp struct. The keys of the list are populated from the input
// arguments.
func (t *Lldp) NewInterface(Name string) (*Lldp_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*Lldp_Interface)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &Lldp_Interface{
		Name: &Name,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the Lldp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Lldp) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.Name = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver Lldp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Lldp) GetOrCreateInterface(Name string) *Lldp_Interface {

	key := Name

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of Lldp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Lldp) GetInterface(Name string) *Lldp_Interface {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// AppendInterface appends the supplied Lldp_Interface struct to the
// list Interface of Lldp. If the key value(s) specified in
// the supplied Lldp_Interface already exist in the list, an error is
// returned.
func (t *Lldp) AppendInterface(v *Lldp_Interface) error {
	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*Lldp_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *Lldp) GetOrCreateCounters() *Lldp_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &Lldp_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from Lldp. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Lldp) GetCounters() *Lldp_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetChassisId retrieves the value of the leaf ChassisId from the Lldp
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ChassisId is set, it can safely use t.GetChassisId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ChassisId == nil'
// before retrieving the leaf's value.
func (t *Lldp) GetChassisId() string {
	if t == nil || t.ChassisId == nil {
		return ""
	}
	return *t.ChassisId
}

// GetChassisIdType retrieves the value of the leaf ChassisIdType from the Lldp
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ChassisIdType is set, it can safely use t.GetChassisIdType()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ChassisIdType == nil'
// before retrieving the leaf's value.
func (t *Lldp) GetChassisIdType() E_OpenconfigLldp_ChassisIdType {
	if t == nil || t.ChassisIdType == 0 {
		return 0
	}
	return t.ChassisIdType
}

// GetEnabled retrieves the value of the leaf Enabled from the Lldp
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Enabled is set, it can safely use t.GetEnabled()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Enabled == nil'
// before retrieving the leaf's value.
func (t *Lldp) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return true
	}
	return *t.Enabled
}

// GetHelloTimer retrieves the value of the leaf HelloTimer from the Lldp
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if HelloTimer is set, it can safely use t.GetHelloTimer()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.HelloTimer == nil'
// before retrieving the leaf's value.
func (t *Lldp) GetHelloTimer() uint64 {
	if t == nil || t.HelloTimer == nil {
		return 0
	}
	return *t.HelloTimer
}

// GetSuppressTlvAdvertisement retrieves the value of the leaf SuppressTlvAdvertisement from the Lldp
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if SuppressTlvAdvertisement is set, it can safely use t.GetSuppressTlvAdvertisement()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.SuppressTlvAdvertisement == nil'
// before retrieving the leaf's value.
func (t *Lldp) GetSuppressTlvAdvertisement() []E_OpenconfigLldpTypes_LLDP_TLV {
	if t == nil || t.SuppressTlvAdvertisement == nil {
		return nil
	}
	return t.SuppressTlvAdvertisement
}

// GetSystemDescription retrieves the value of the leaf SystemDescription from the Lldp
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if SystemDescription is set, it can safely use t.GetSystemDescription()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.SystemDescription == nil'
// before retrieving the leaf's value.
func (t *Lldp) GetSystemDescription() string {
	if t == nil || t.SystemDescription == nil {
		return ""
	}
	return *t.SystemDescription
}

// GetSystemName retrieves the value of the leaf SystemName from the Lldp
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if SystemName is set, it can safely use t.GetSystemName()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.SystemName == nil'
// before retrieving the leaf's value.
func (t *Lldp) GetSystemName() string {
	if t == nil || t.SystemName == nil {
		return ""
	}
	return *t.SystemName
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Lldp) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Lldp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Lldp) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Lldp_Counters represents the /openconfig-lldp/lldp/state/counters YANG schema element.
type Lldp_Counters struct {
	ΛMetadata       []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	EntriesAgedOut  *uint64           `path:"entries-aged-out" module:"openconfig-lldp"`
	ΛEntriesAgedOut []ygot.Annotation `path:"@entries-aged-out" ygotAnnotation:"true"`
	FrameDiscard    *uint64           `path:"frame-discard" module:"openconfig-lldp"`
	ΛFrameDiscard   []ygot.Annotation `path:"@frame-discard" ygotAnnotation:"true"`
	FrameErrorIn    *uint64           `path:"frame-error-in" module:"openconfig-lldp"`
	ΛFrameErrorIn   []ygot.Annotation `path:"@frame-error-in" ygotAnnotation:"true"`
	FrameIn         *uint64           `path:"frame-in" module:"openconfig-lldp"`
	ΛFrameIn        []ygot.Annotation `path:"@frame-in" ygotAnnotation:"true"`
	FrameOut        *uint64           `path:"frame-out" module:"openconfig-lldp"`
	ΛFrameOut       []ygot.Annotation `path:"@frame-out" ygotAnnotation:"true"`
	LastClear       *string           `path:"last-clear" module:"openconfig-lldp"`
	ΛLastClear      []ygot.Annotation `path:"@last-clear" ygotAnnotation:"true"`
	TlvAccepted     *uint64           `path:"tlv-accepted" module:"openconfig-lldp"`
	ΛTlvAccepted    []ygot.Annotation `path:"@tlv-accepted" ygotAnnotation:"true"`
	TlvDiscard      *uint64           `path:"tlv-discard" module:"openconfig-lldp"`
	ΛTlvDiscard     []ygot.Annotation `path:"@tlv-discard" ygotAnnotation:"true"`
	TlvUnknown      *uint64           `path:"tlv-unknown" module:"openconfig-lldp"`
	ΛTlvUnknown     []ygot.Annotation `path:"@tlv-unknown" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Lldp_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Lldp_Counters) IsYANGGoStruct() {}

// GetEntriesAgedOut retrieves the value of the leaf EntriesAgedOut from the Lldp_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if EntriesAgedOut is set, it can safely use t.GetEntriesAgedOut()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.EntriesAgedOut == nil'
// before retrieving the leaf's value.
func (t *Lldp_Counters) GetEntriesAgedOut() uint64 {
	if t == nil || t.EntriesAgedOut == nil {
		return 0
	}
	return *t.EntriesAgedOut
}

// GetFrameDiscard retrieves the value of the leaf FrameDiscard from the Lldp_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if FrameDiscard is set, it can safely use t.GetFrameDiscard()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.FrameDiscard == nil'
// before retrieving the leaf's value.
func (t *Lldp_Counters) GetFrameDiscard() uint64 {
	if t == nil || t.FrameDiscard == nil {
		return 0
	}
	return *t.FrameDiscard
}

// GetFrameErrorIn retrieves the value of the leaf FrameErrorIn from the Lldp_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if FrameErrorIn is set, it can safely use t.GetFrameErrorIn()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.FrameErrorIn == nil'
// before retrieving the leaf's value.
func (t *Lldp_Counters) GetFrameErrorIn() uint64 {
	if t == nil || t.FrameErrorIn == nil {
		return 0
	}
	return *t.FrameErrorIn
}

// GetFrameIn retrieves the value of the leaf FrameIn from the Lldp_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if FrameIn is set, it can safely use t.GetFrameIn()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.FrameIn == nil'
// before retrieving the leaf's value.
func (t *Lldp_Counters) GetFrameIn() uint64 {
	if t == nil || t.FrameIn == nil {
		return 0
	}
	return *t.FrameIn
}

// GetFrameOut retrieves the value of the leaf FrameOut from the Lldp_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if FrameOut is set, it can safely use t.GetFrameOut()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.FrameOut == nil'
// before retrieving the leaf's value.
func (t *Lldp_Counters) GetFrameOut() uint64 {
	if t == nil || t.FrameOut == nil {
		return 0
	}
	return *t.FrameOut
}

// GetLastClear retrieves the value of the leaf LastClear from the Lldp_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LastClear is set, it can safely use t.GetLastClear()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LastClear == nil'
// before retrieving the leaf's value.
func (t *Lldp_Counters) GetLastClear() string {
	if t == nil || t.LastClear == nil {
		return ""
	}
	return *t.LastClear
}

// GetTlvAccepted retrieves the value of the leaf TlvAccepted from the Lldp_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if TlvAccepted is set, it can safely use t.GetTlvAccepted()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.TlvAccepted == nil'
// before retrieving the leaf's value.
func (t *Lldp_Counters) GetTlvAccepted() uint64 {
	if t == nil || t.TlvAccepted == nil {
		return 0
	}
	return *t.TlvAccepted
}

// GetTlvDiscard retrieves the value of the leaf TlvDiscard from the Lldp_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if TlvDiscard is set, it can safely use t.GetTlvDiscard()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.TlvDiscard == nil'
// before retrieving the leaf's value.
func (t *Lldp_Counters) GetTlvDiscard() uint64 {
	if t == nil || t.TlvDiscard == nil {
		return 0
	}
	return *t.TlvDiscard
}

// GetTlvUnknown retrieves the value of the leaf TlvUnknown from the Lldp_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if TlvUnknown is set, it can safely use t.GetTlvUnknown()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.TlvUnknown == nil'
// before retrieving the leaf's value.
func (t *Lldp_Counters) GetTlvUnknown() uint64 {
	if t == nil || t.TlvUnknown == nil {
		return 0
	}
	return *t.TlvUnknown
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Lldp_Counters) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Lldp_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Lldp_Counters) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Lldp_Interface represents the /openconfig-lldp/lldp/interfaces/interface YANG schema element.
type Lldp_Interface struct {
	ΛMetadata []ygot.Annotation                   `path:"@" ygotAnnotation:"true"`
	Counters  *Lldp_Interface_Counters            `path:"state/counters" module:"openconfig-lldp"`
	ΛCounters []ygot.Annotation                   `path:"state/@counters" ygotAnnotation:"true"`
	Enabled   *bool                               `path:"config/enabled" module:"openconfig-lldp"`
	ΛEnabled  []ygot.Annotation                   `path:"config/@enabled" ygotAnnotation:"true"`
	Name      *string                             `path:"config/name|name" module:"openconfig-lldp"`
	ΛName     []ygot.Annotation                   `path:"config/@name|@name" ygotAnnotation:"true"`
	Neighbor  map[string]*Lldp_Interface_Neighbor `path:"neighbors/neighbor" module:"openconfig-lldp"`
	ΛNeighbor []ygot.Annotation                   `path:"neighbors/@neighbor" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Lldp_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Lldp_Interface) IsYANGGoStruct() {}

// NewNeighbor creates a new entry in the Neighbor list of the
// Lldp_Interface struct. The keys of the list are populated from the input
// arguments.
func (t *Lldp_Interface) NewNeighbor(Id string) (*Lldp_Interface_Neighbor, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*Lldp_Interface_Neighbor)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Neighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Neighbor", key)
	}

	t.Neighbor[key] = &Lldp_Interface_Neighbor{
		Id: &Id,
	}

	return t.Neighbor[key], nil
}

// RenameNeighbor renames an entry in the list Neighbor within
// the Lldp_Interface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Lldp_Interface) RenameNeighbor(oldK, newK string) error {
	if _, ok := t.Neighbor[newK]; ok {
		return fmt.Errorf("key %v already exists in Neighbor", newK)
	}

	e, ok := t.Neighbor[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Neighbor", oldK)
	}
	e.Id = &newK

	t.Neighbor[newK] = e
	delete(t.Neighbor, oldK)
	return nil
}

// GetOrCreateNeighbor retrieves the value with the specified keys from
// the receiver Lldp_Interface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Lldp_Interface) GetOrCreateNeighbor(Id string) *Lldp_Interface_Neighbor {

	key := Id

	if v, ok := t.Neighbor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNeighbor(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNeighbor got unexpected error: %v", err))
	}
	return v
}

// GetNeighbor retrieves the value with the specified key from
// the Neighbor map field of Lldp_Interface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Lldp_Interface) GetNeighbor(Id string) *Lldp_Interface_Neighbor {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.Neighbor[key]; ok {
		return lm
	}
	return nil
}

// AppendNeighbor appends the supplied Lldp_Interface_Neighbor struct to the
// list Neighbor of Lldp_Interface. If the key value(s) specified in
// the supplied Lldp_Interface_Neighbor already exist in the list, an error is
// returned.
func (t *Lldp_Interface) AppendNeighbor(v *Lldp_Interface_Neighbor) error {
	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*Lldp_Interface_Neighbor)
	}

	if _, ok := t.Neighbor[key]; ok {
		return fmt.Errorf("duplicate key for list Neighbor %v", key)
	}

	t.Neighbor[key] = v
	return nil
}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *Lldp_Interface) GetOrCreateCounters() *Lldp_Interface_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &Lldp_Interface_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from Lldp_Interface. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Lldp_Interface) GetCounters() *Lldp_Interface_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetEnabled retrieves the value of the leaf Enabled from the Lldp_Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Enabled is set, it can safely use t.GetEnabled()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Enabled == nil'
// before retrieving the leaf's value.
func (t *Lldp_Interface) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return true
	}
	return *t.Enabled
}

// GetName retrieves the value of the leaf Name from the Lldp_Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Name is set, it can safely use t.GetName()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Name == nil'
// before retrieving the leaf's value.
func (t *Lldp_Interface) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// ΛListKeyMap returns the keys of the Lldp_Interface struct, which is a YANG list entry.
func (t *Lldp_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Lldp_Interface) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Lldp_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Lldp_Interface) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Lldp_Interface_Counters represents the /openconfig-lldp/lldp/interfaces/interface/state/counters YANG schema element.
type Lldp_Interface_Counters struct {
	ΛMetadata      []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	FrameDiscard   *uint64           `path:"frame-discard" module:"openconfig-lldp"`
	ΛFrameDiscard  []ygot.Annotation `path:"@frame-discard" ygotAnnotation:"true"`
	FrameErrorIn   *uint64           `path:"frame-error-in" module:"openconfig-lldp"`
	ΛFrameErrorIn  []ygot.Annotation `path:"@frame-error-in" ygotAnnotation:"true"`
	FrameErrorOut  *uint64           `path:"frame-error-out" module:"openconfig-lldp"`
	ΛFrameErrorOut []ygot.Annotation `path:"@frame-error-out" ygotAnnotation:"true"`
	FrameIn        *uint64           `path:"frame-in" module:"openconfig-lldp"`
	ΛFrameIn       []ygot.Annotation `path:"@frame-in" ygotAnnotation:"true"`
	FrameOut       *uint64           `path:"frame-out" module:"openconfig-lldp"`
	ΛFrameOut      []ygot.Annotation `path:"@frame-out" ygotAnnotation:"true"`
	LastClear      *string           `path:"last-clear" module:"openconfig-lldp"`
	ΛLastClear     []ygot.Annotation `path:"@last-clear" ygotAnnotation:"true"`
	TlvDiscard     *uint64           `path:"tlv-discard" module:"openconfig-lldp"`
	ΛTlvDiscard    []ygot.Annotation `path:"@tlv-discard" ygotAnnotation:"true"`
	TlvUnknown     *uint64           `path:"tlv-unknown" module:"openconfig-lldp"`
	ΛTlvUnknown    []ygot.Annotation `path:"@tlv-unknown" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Lldp_Interface_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Lldp_Interface_Counters) IsYANGGoStruct() {}

// GetFrameDiscard retrieves the value of the leaf FrameDiscard from the Lldp_Interface_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if FrameDiscard is set, it can safely use t.GetFrameDiscard()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.FrameDiscard == nil'
// before retrieving the leaf's value.
func (t *Lldp_Interface_Counters) GetFrameDiscard() uint64 {
	if t == nil || t.FrameDiscard == nil {
		return 0
	}
	return *t.FrameDiscard
}

// GetFrameErrorIn retrieves the value of the leaf FrameErrorIn from the Lldp_Interface_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if FrameErrorIn is set, it can safely use t.GetFrameErrorIn()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.FrameErrorIn == nil'
// before retrieving the leaf's value.
func (t *Lldp_Interface_Counters) GetFrameErrorIn() uint64 {
	if t == nil || t.FrameErrorIn == nil {
		return 0
	}
	return *t.FrameErrorIn
}

// GetFrameErrorOut retrieves the value of the leaf FrameErrorOut from the Lldp_Interface_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if FrameErrorOut is set, it can safely use t.GetFrameErrorOut()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.FrameErrorOut == nil'
// before retrieving the leaf's value.
func (t *Lldp_Interface_Counters) GetFrameErrorOut() uint64 {
	if t == nil || t.FrameErrorOut == nil {
		return 0
	}
	return *t.FrameErrorOut
}

// GetFrameIn retrieves the value of the leaf FrameIn from the Lldp_Interface_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if FrameIn is set, it can safely use t.GetFrameIn()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.FrameIn == nil'
// before retrieving the leaf's value.
func (t *Lldp_Interface_Counters) GetFrameIn() uint64 {
	if t == nil || t.FrameIn == nil {
		return 0
	}
	return *t.FrameIn
}

// GetFrameOut retrieves the value of the leaf FrameOut from the Lldp_Interface_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if FrameOut is set, it can safely use t.GetFrameOut()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.FrameOut == nil'
// before retrieving the leaf's value.
func (t *Lldp_Interface_Counters) GetFrameOut() uint64 {
	if t == nil || t.FrameOut == nil {
		return 0
	}
	return *t.FrameOut
}

// GetLastClear retrieves the value of the leaf LastClear from the Lldp_Interface_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LastClear is set, it can safely use t.GetLastClear()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LastClear == nil'
// before retrieving the leaf's value.
func (t *Lldp_Interface_Counters) GetLastClear() string {
	if t == nil || t.LastClear == nil {
		return ""
	}
	return *t.LastClear
}

// GetTlvDiscard retrieves the value of the leaf TlvDiscard from the Lldp_Interface_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if TlvDiscard is set, it can safely use t.GetTlvDiscard()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.TlvDiscard == nil'
// before retrieving the leaf's value.
func (t *Lldp_Interface_Counters) GetTlvDiscard() uint64 {
	if t == nil || t.TlvDiscard == nil {
		return 0
	}
	return *t.TlvDiscard
}

// GetTlvUnknown retrieves the value of the leaf TlvUnknown from the Lldp_Interface_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if TlvUnknown is set, it can safely use t.GetTlvUnknown()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.TlvUnknown == nil'
// before retrieving the leaf's value.
func (t *Lldp_Interface_Counters) GetTlvUnknown() uint64 {
	if t == nil || t.TlvUnknown == nil {
		return 0
	}
	return *t.TlvUnknown
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Lldp_Interface_Counters) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Lldp_Interface_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Lldp_Interface_Counters) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Lldp_Interface_Neighbor represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor YANG schema element.
type Lldp_Interface_Neighbor struct {
	ΛMetadata              []ygot.Annotation                                                                    `path:"@" ygotAnnotation:"true"`
	Age                    *uint64                                                                              `path:"state/age" module:"openconfig-lldp"`
	ΛAge                   []ygot.Annotation                                                                    `path:"state/@age" ygotAnnotation:"true"`
	Capability             map[E_OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY]*Lldp_Interface_Neighbor_Capability `path:"capabilities/capability" module:"openconfig-lldp"`
	ΛCapability            []ygot.Annotation                                                                    `path:"capabilities/@capability" ygotAnnotation:"true"`
	ChassisId              *string                                                                              `path:"state/chassis-id" module:"openconfig-lldp"`
	ΛChassisId             []ygot.Annotation                                                                    `path:"state/@chassis-id" ygotAnnotation:"true"`
	ChassisIdType          E_OpenconfigLldp_ChassisIdType                                                       `path:"state/chassis-id-type" module:"openconfig-lldp"`
	ΛChassisIdType         []ygot.Annotation                                                                    `path:"state/@chassis-id-type" ygotAnnotation:"true"`
	Id                     *string                                                                              `path:"state/id|id" module:"openconfig-lldp"`
	ΛId                    []ygot.Annotation                                                                    `path:"state/@id|@id" ygotAnnotation:"true"`
	LastUpdate             *int64                                                                               `path:"state/last-update" module:"openconfig-lldp"`
	ΛLastUpdate            []ygot.Annotation                                                                    `path:"state/@last-update" ygotAnnotation:"true"`
	ManagementAddress      *string                                                                              `path:"state/management-address" module:"openconfig-lldp"`
	ΛManagementAddress     []ygot.Annotation                                                                    `path:"state/@management-address" ygotAnnotation:"true"`
	ManagementAddressType  *string                                                                              `path:"state/management-address-type" module:"openconfig-lldp"`
	ΛManagementAddressType []ygot.Annotation                                                                    `path:"state/@management-address-type" ygotAnnotation:"true"`
	PortDescription        *string                                                                              `path:"state/port-description" module:"openconfig-lldp"`
	ΛPortDescription       []ygot.Annotation                                                                    `path:"state/@port-description" ygotAnnotation:"true"`
	PortId                 *string                                                                              `path:"state/port-id" module:"openconfig-lldp"`
	ΛPortId                []ygot.Annotation                                                                    `path:"state/@port-id" ygotAnnotation:"true"`
	PortIdType             E_OpenconfigLldp_PortIdType                                                          `path:"state/port-id-type" module:"openconfig-lldp"`
	ΛPortIdType            []ygot.Annotation                                                                    `path:"state/@port-id-type" ygotAnnotation:"true"`
	SystemDescription      *string                                                                              `path:"state/system-description" module:"openconfig-lldp"`
	ΛSystemDescription     []ygot.Annotation                                                                    `path:"state/@system-description" ygotAnnotation:"true"`
	SystemName             *string                                                                              `path:"state/system-name" module:"openconfig-lldp"`
	ΛSystemName            []ygot.Annotation                                                                    `path:"state/@system-name" ygotAnnotation:"true"`
	Tlv                    map[Lldp_Interface_Neighbor_Tlv_Key]*Lldp_Interface_Neighbor_Tlv                     `path:"custom-tlvs/tlv" module:"openconfig-lldp"`
	ΛTlv                   []ygot.Annotation                                                                    `path:"custom-tlvs/@tlv" ygotAnnotation:"true"`
	Ttl                    *uint16                                                                              `path:"state/ttl" module:"openconfig-lldp"`
	ΛTtl                   []ygot.Annotation                                                                    `path:"state/@ttl" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Lldp_Interface_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Lldp_Interface_Neighbor) IsYANGGoStruct() {}

// Lldp_Interface_Neighbor_Tlv_Key represents the key for list Tlv of element /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor.
type Lldp_Interface_Neighbor_Tlv_Key struct {
	Type       int32  `path:"type"`
	Oui        string `path:"oui"`
	OuiSubtype string `path:"oui-subtype"`
}

// NewCapability creates a new entry in the Capability list of the
// Lldp_Interface_Neighbor struct. The keys of the list are populated from the input
// arguments.
func (t *Lldp_Interface_Neighbor) NewCapability(Name E_OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY) (*Lldp_Interface_Neighbor_Capability, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Capability == nil {
		t.Capability = make(map[E_OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY]*Lldp_Interface_Neighbor_Capability)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Capability[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Capability", key)
	}

	t.Capability[key] = &Lldp_Interface_Neighbor_Capability{
		Name: Name,
	}

	return t.Capability[key], nil
}

// RenameCapability renames an entry in the list Capability within
// the Lldp_Interface_Neighbor struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Lldp_Interface_Neighbor) RenameCapability(oldK, newK E_OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY) error {
	if _, ok := t.Capability[newK]; ok {
		return fmt.Errorf("key %v already exists in Capability", newK)
	}

	e, ok := t.Capability[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Capability", oldK)
	}
	e.Name = newK

	t.Capability[newK] = e
	delete(t.Capability, oldK)
	return nil
}

// GetOrCreateCapability retrieves the value with the specified keys from
// the receiver Lldp_Interface_Neighbor. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Lldp_Interface_Neighbor) GetOrCreateCapability(Name E_OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY) *Lldp_Interface_Neighbor_Capability {

	key := Name

	if v, ok := t.Capability[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCapability(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCapability got unexpected error: %v", err))
	}
	return v
}

// GetCapability retrieves the value with the specified key from
// the Capability map field of Lldp_Interface_Neighbor. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Lldp_Interface_Neighbor) GetCapability(Name E_OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY) *Lldp_Interface_Neighbor_Capability {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Capability[key]; ok {
		return lm
	}
	return nil
}

// AppendCapability appends the supplied Lldp_Interface_Neighbor_Capability struct to the
// list Capability of Lldp_Interface_Neighbor. If the key value(s) specified in
// the supplied Lldp_Interface_Neighbor_Capability already exist in the list, an error is
// returned.
func (t *Lldp_Interface_Neighbor) AppendCapability(v *Lldp_Interface_Neighbor_Capability) error {
	key := v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Capability == nil {
		t.Capability = make(map[E_OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY]*Lldp_Interface_Neighbor_Capability)
	}

	if _, ok := t.Capability[key]; ok {
		return fmt.Errorf("duplicate key for list Capability %v", key)
	}

	t.Capability[key] = v
	return nil
}

// NewTlv creates a new entry in the Tlv list of the
// Lldp_Interface_Neighbor struct. The keys of the list are populated from the input
// arguments.
func (t *Lldp_Interface_Neighbor) NewTlv(Type int32, Oui string, OuiSubtype string) (*Lldp_Interface_Neighbor_Tlv, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Tlv == nil {
		t.Tlv = make(map[Lldp_Interface_Neighbor_Tlv_Key]*Lldp_Interface_Neighbor_Tlv)
	}

	key := Lldp_Interface_Neighbor_Tlv_Key{
		Type:       Type,
		Oui:        Oui,
		OuiSubtype: OuiSubtype,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Tlv[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Tlv", key)
	}

	t.Tlv[key] = &Lldp_Interface_Neighbor_Tlv{
		Type:       &Type,
		Oui:        &Oui,
		OuiSubtype: &OuiSubtype,
	}

	return t.Tlv[key], nil
}

// RenameTlv renames an entry in the list Tlv within
// the Lldp_Interface_Neighbor struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Lldp_Interface_Neighbor) RenameTlv(oldK, newK Lldp_Interface_Neighbor_Tlv_Key) error {
	if _, ok := t.Tlv[newK]; ok {
		return fmt.Errorf("key %v already exists in Tlv", newK)
	}

	e, ok := t.Tlv[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Tlv", oldK)
	}
	e.Type = &newK.Type
	e.Oui = &newK.Oui
	e.OuiSubtype = &newK.OuiSubtype

	t.Tlv[newK] = e
	delete(t.Tlv, oldK)
	return nil
}

// GetOrCreateTlv retrieves the value with the specified keys from
// the receiver Lldp_Interface_Neighbor. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Lldp_Interface_Neighbor) GetOrCreateTlv(Type int32, Oui string, OuiSubtype string) *Lldp_Interface_Neighbor_Tlv {

	key := Lldp_Interface_Neighbor_Tlv_Key{
		Type:       Type,
		Oui:        Oui,
		OuiSubtype: OuiSubtype,
	}

	if v, ok := t.Tlv[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTlv(Type, Oui, OuiSubtype)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTlv got unexpected error: %v", err))
	}
	return v
}

// GetTlv retrieves the value with the specified key from
// the Tlv map field of Lldp_Interface_Neighbor. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Lldp_Interface_Neighbor) GetTlv(Type int32, Oui string, OuiSubtype string) *Lldp_Interface_Neighbor_Tlv {

	if t == nil {
		return nil
	}

	key := Lldp_Interface_Neighbor_Tlv_Key{
		Type:       Type,
		Oui:        Oui,
		OuiSubtype: OuiSubtype,
	}

	if lm, ok := t.Tlv[key]; ok {
		return lm
	}
	return nil
}

// AppendTlv appends the supplied Lldp_Interface_Neighbor_Tlv struct to the
// list Tlv of Lldp_Interface_Neighbor. If the key value(s) specified in
// the supplied Lldp_Interface_Neighbor_Tlv already exist in the list, an error is
// returned.
func (t *Lldp_Interface_Neighbor) AppendTlv(v *Lldp_Interface_Neighbor_Tlv) error {
	key := Lldp_Interface_Neighbor_Tlv_Key{Type: *v.Type, Oui: *v.Oui, OuiSubtype: *v.OuiSubtype}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Tlv == nil {
		t.Tlv = make(map[Lldp_Interface_Neighbor_Tlv_Key]*Lldp_Interface_Neighbor_Tlv)
	}

	if _, ok := t.Tlv[key]; ok {
		return fmt.Errorf("duplicate key for list Tlv %v", key)
	}

	t.Tlv[key] = v
	return nil
}

// GetAge retrieves the value of the leaf Age from the Lldp_Interface_Neighbor
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Age is set, it can safely use t.GetAge()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Age == nil'
// before retrieving the leaf's value.
func (t *Lldp_Interface_Neighbor) GetAge() uint64 {
	if t == nil || t.Age == nil {
		return 0
	}
	return *t.Age
}

// GetChassisId retrieves the value of the leaf ChassisId from the Lldp_Interface_Neighbor
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ChassisId is set, it can safely use t.GetChassisId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ChassisId == nil'
// before retrieving the leaf's value.
func (t *Lldp_Interface_Neighbor) GetChassisId() string {
	if t == nil || t.ChassisId == nil {
		return ""
	}
	return *t.ChassisId
}

// GetChassisIdType retrieves the value of the leaf ChassisIdType from the Lldp_Interface_Neighbor
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ChassisIdType is set, it can safely use t.GetChassisIdType()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ChassisIdType == nil'
// before retrieving the leaf's value.
func (t *Lldp_Interface_Neighbor) GetChassisIdType() E_OpenconfigLldp_ChassisIdType {
	if t == nil || t.ChassisIdType == 0 {
		return 0
	}
	return t.ChassisIdType
}

// GetId retrieves the value of the leaf Id from the Lldp_Interface_Neighbor
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Id is set, it can safely use t.GetId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Id == nil'
// before retrieving the leaf's value.
func (t *Lldp_Interface_Neighbor) GetId() string {
	if t == nil || t.Id == nil {
		return ""
	}
	return *t.Id
}

// GetLastUpdate retrieves the value of the leaf LastUpdate from the Lldp_Interface_Neighbor
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LastUpdate is set, it can safely use t.GetLastUpdate()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LastUpdate == nil'
// before retrieving the leaf's value.
func (t *Lldp_Interface_Neighbor) GetLastUpdate() int64 {
	if t == nil || t.LastUpdate == nil {
		return 0
	}
	return *t.LastUpdate
}

// GetManagementAddress retrieves the value of the leaf ManagementAddress from the Lldp_Interface_Neighbor
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ManagementAddress is set, it can safely use t.GetManagementAddress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ManagementAddress == nil'
// before retrieving the leaf's value.
func (t *Lldp_Interface_Neighbor) GetManagementAddress() string {
	if t == nil || t.ManagementAddress == nil {
		return ""
	}
	return *t.ManagementAddress
}

// GetManagementAddressType retrieves the value of the leaf ManagementAddressType from the Lldp_Interface_Neighbor
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ManagementAddressType is set, it can safely use t.GetManagementAddressType()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ManagementAddressType == nil'
// before retrieving the leaf's value.
func (t *Lldp_Interface_Neighbor) GetManagementAddressType() string {
	if t == nil || t.ManagementAddressType == nil {
		return ""
	}
	return *t.ManagementAddressType
}

// GetPortDescription retrieves the value of the leaf PortDescription from the Lldp_Interface_Neighbor
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PortDescription is set, it can safely use t.GetPortDescription()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PortDescription == nil'
// before retrieving the leaf's value.
func (t *Lldp_Interface_Neighbor) GetPortDescription() string {
	if t == nil || t.PortDescription == nil {
		return ""
	}
	return *t.PortDescription
}

// GetPortId retrieves the value of the leaf PortId from the Lldp_Interface_Neighbor
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PortId is set, it can safely use t.GetPortId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PortId == nil'
// before retrieving the leaf's value.
func (t *Lldp_Interface_Neighbor) GetPortId() string {
	if t == nil || t.PortId == nil {
		return ""
	}
	return *t.PortId
}

// GetPortIdType retrieves the value of the leaf PortIdType from the Lldp_Interface_Neighbor
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PortIdType is set, it can safely use t.GetPortIdType()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PortIdType == nil'
// before retrieving the leaf's value.
func (t *Lldp_Interface_Neighbor) GetPortIdType() E_OpenconfigLldp_PortIdType {
	if t == nil || t.PortIdType == 0 {
		return 0
	}
	return t.PortIdType
}

// GetSystemDescription retrieves the value of the leaf SystemDescription from the Lldp_Interface_Neighbor
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if SystemDescription is set, it can safely use t.GetSystemDescription()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.SystemDescription == nil'
// before retrieving the leaf's value.
func (t *Lldp_Interface_Neighbor) GetSystemDescription() string {
	if t == nil || t.SystemDescription == nil {
		return ""
	}
	return *t.SystemDescription
}

// GetSystemName retrieves the value of the leaf SystemName from the Lldp_Interface_Neighbor
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if SystemName is set, it can safely use t.GetSystemName()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.SystemName == nil'
// before retrieving the leaf's value.
func (t *Lldp_Interface_Neighbor) GetSystemName() string {
	if t == nil || t.SystemName == nil {
		return ""
	}
	return *t.SystemName
}

// GetTtl retrieves the value of the leaf Ttl from the Lldp_Interface_Neighbor
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Ttl is set, it can safely use t.GetTtl()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Ttl == nil'
// before retrieving the leaf's value.
func (t *Lldp_Interface_Neighbor) GetTtl() uint16 {
	if t == nil || t.Ttl == nil {
		return 0
	}
	return *t.Ttl
}

// ΛListKeyMap returns the keys of the Lldp_Interface_Neighbor struct, which is a YANG list entry.
func (t *Lldp_Interface_Neighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Lldp_Interface_Neighbor) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Lldp_Interface_Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Lldp_Interface_Neighbor) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Lldp_Interface_Neighbor_Capability represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/capabilities/capability YANG schema element.
type Lldp_Interface_Neighbor_Capability struct {
	ΛMetadata []ygot.Annotation                            `path:"@" ygotAnnotation:"true"`
	Enabled   *bool                                        `path:"state/enabled" module:"openconfig-lldp"`
	ΛEnabled  []ygot.Annotation                            `path:"state/@enabled" ygotAnnotation:"true"`
	Name      E_OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY `path:"state/name|name" module:"openconfig-lldp"`
	ΛName     []ygot.Annotation                            `path:"state/@name|@name" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Lldp_Interface_Neighbor_Capability implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Lldp_Interface_Neighbor_Capability) IsYANGGoStruct() {}

// GetEnabled retrieves the value of the leaf Enabled from the Lldp_Interface_Neighbor_Capability
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Enabled is set, it can safely use t.GetEnabled()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Enabled == nil'
// before retrieving the leaf's value.
func (t *Lldp_Interface_Neighbor_Capability) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// GetName retrieves the value of the leaf Name from the Lldp_Interface_Neighbor_Capability
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Name is set, it can safely use t.GetName()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Name == nil'
// before retrieving the leaf's value.
func (t *Lldp_Interface_Neighbor_Capability) GetName() E_OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY {
	if t == nil || t.Name == 0 {
		return 0
	}
	return t.Name
}

// ΛListKeyMap returns the keys of the Lldp_Interface_Neighbor_Capability struct, which is a YANG list entry.
func (t *Lldp_Interface_Neighbor_Capability) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"name": t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Lldp_Interface_Neighbor_Capability) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Lldp_Interface_Neighbor_Capability"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Lldp_Interface_Neighbor_Capability) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Lldp_Interface_Neighbor_Tlv represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv YANG schema element.
type Lldp_Interface_Neighbor_Tlv struct {
	ΛMetadata   []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Oui         *string           `path:"state/oui|oui" module:"openconfig-lldp"`
	ΛOui        []ygot.Annotation `path:"state/@oui|@oui" ygotAnnotation:"true"`
	OuiSubtype  *string           `path:"state/oui-subtype|oui-subtype" module:"openconfig-lldp"`
	ΛOuiSubtype []ygot.Annotation `path:"state/@oui-subtype|@oui-subtype" ygotAnnotation:"true"`
	Type        *int32            `path:"state/type|type" module:"openconfig-lldp"`
	ΛType       []ygot.Annotation `path:"state/@type|@type" ygotAnnotation:"true"`
	Value       Binary            `path:"state/value" module:"openconfig-lldp"`
	ΛValue      []ygot.Annotation `path:"state/@value" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Lldp_Interface_Neighbor_Tlv implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Lldp_Interface_Neighbor_Tlv) IsYANGGoStruct() {}

// GetOui retrieves the value of the leaf Oui from the Lldp_Interface_Neighbor_Tlv
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Oui is set, it can safely use t.GetOui()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Oui == nil'
// before retrieving the leaf's value.
func (t *Lldp_Interface_Neighbor_Tlv) GetOui() string {
	if t == nil || t.Oui == nil {
		return ""
	}
	return *t.Oui
}

// GetOuiSubtype retrieves the value of the leaf OuiSubtype from the Lldp_Interface_Neighbor_Tlv
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OuiSubtype is set, it can safely use t.GetOuiSubtype()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OuiSubtype == nil'
// before retrieving the leaf's value.
func (t *Lldp_Interface_Neighbor_Tlv) GetOuiSubtype() string {
	if t == nil || t.OuiSubtype == nil {
		return ""
	}
	return *t.OuiSubtype
}

// GetType retrieves the value of the leaf Type from the Lldp_Interface_Neighbor_Tlv
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Type is set, it can safely use t.GetType()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Type == nil'
// before retrieving the leaf's value.
func (t *Lldp_Interface_Neighbor_Tlv) GetType() int32 {
	if t == nil || t.Type == nil {
		return 0
	}
	return *t.Type
}

// GetValue retrieves the value of the leaf Value from the Lldp_Interface_Neighbor_Tlv
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Value is set, it can safely use t.GetValue()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Value == nil'
// before retrieving the leaf's value.
func (t *Lldp_Interface_Neighbor_Tlv) GetValue() Binary {
	if t == nil || t.Value == nil {
		return nil
	}
	return t.Value
}

// ΛListKeyMap returns the keys of the Lldp_Interface_Neighbor_Tlv struct, which is a YANG list entry.
func (t *Lldp_Interface_Neighbor_Tlv) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Oui == nil {
		return nil, fmt.Errorf("nil value for key Oui")
	}

	if t.OuiSubtype == nil {
		return nil, fmt.Errorf("nil value for key OuiSubtype")
	}

	if t.Type == nil {
		return nil, fmt.Errorf("nil value for key Type")
	}

	return map[string]interface{}{
		"oui":         *t.Oui,
		"oui-subtype": *t.OuiSubtype,
		"type":        *t.Type,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Lldp_Interface_Neighbor_Tlv) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Lldp_Interface_Neighbor_Tlv"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Lldp_Interface_Neighbor_Tlv) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Stp represents the /openconfig-spanning-tree/stp YANG schema element.
type Stp struct {
	ΛMetadata  []ygot.Annotation         `path:"@" ygotAnnotation:"true"`
	Global     *Stp_Global               `path:"global" module:"openconfig-spanning-tree"`
	ΛGlobal    []ygot.Annotation         `path:"@global" ygotAnnotation:"true"`
	Interface  map[string]*Stp_Interface `path:"interfaces/interface" module:"openconfig-spanning-tree"`
	ΛInterface []ygot.Annotation         `path:"interfaces/@interface" ygotAnnotation:"true"`
	Mstp       *Stp_Mstp                 `path:"mstp" module:"openconfig-spanning-tree"`
	ΛMstp      []ygot.Annotation         `path:"@mstp" ygotAnnotation:"true"`
	Rstp       *Stp_Rstp                 `path:"rstp" module:"openconfig-spanning-tree"`
	ΛRstp      []ygot.Annotation         `path:"@rstp" ygotAnnotation:"true"`
	Vlan       map[uint16]*Stp_Vlan      `path:"rapid-pvst/vlan" module:"openconfig-spanning-tree"`
	ΛVlan      []ygot.Annotation         `path:"rapid-pvst/@vlan" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Stp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Stp) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// Stp struct. The keys of the list are populated from the input
// arguments.
func (t *Stp) NewInterface(Name string) (*Stp_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*Stp_Interface)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &Stp_Interface{
		Name: &Name,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the Stp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Stp) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.Name = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver Stp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Stp) GetOrCreateInterface(Name string) *Stp_Interface {

	key := Name

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of Stp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Stp) GetInterface(Name string) *Stp_Interface {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// AppendInterface appends the supplied Stp_Interface struct to the
// list Interface of Stp. If the key value(s) specified in
// the supplied Stp_Interface already exist in the list, an error is
// returned.
func (t *Stp) AppendInterface(v *Stp_Interface) error {
	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*Stp_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// NewVlan creates a new entry in the Vlan list of the
// Stp struct. The keys of the list are populated from the input
// arguments.
func (t *Stp) NewVlan(VlanId uint16) (*Stp_Vlan, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Vlan == nil {
		t.Vlan = make(map[uint16]*Stp_Vlan)
	}

	key := VlanId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Vlan[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Vlan", key)
	}

	t.Vlan[key] = &Stp_Vlan{
		VlanId: &VlanId,
	}

	return t.Vlan[key], nil
}

// RenameVlan renames an entry in the list Vlan within
// the Stp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Stp) RenameVlan(oldK, newK uint16) error {
	if _, ok := t.Vlan[newK]; ok {
		return fmt.Errorf("key %v already exists in Vlan", newK)
	}

	e, ok := t.Vlan[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Vlan", oldK)
	}
	e.VlanId = &newK

	t.Vlan[newK] = e
	delete(t.Vlan, oldK)
	return nil
}

// GetOrCreateVlan retrieves the value with the specified keys from
// the receiver Stp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Stp) GetOrCreateVlan(VlanId uint16) *Stp_Vlan {

	key := VlanId

	if v, ok := t.Vlan[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewVlan(VlanId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateVlan got unexpected error: %v", err))
	}
	return v
}

// GetVlan retrieves the value with the specified key from
// the Vlan map field of Stp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Stp) GetVlan(VlanId uint16) *Stp_Vlan {

	if t == nil {
		return nil
	}

	key := VlanId

	if lm, ok := t.Vlan[key]; ok {
		return lm
	}
	return nil
}

// AppendVlan appends the supplied Stp_Vlan struct to the
// list Vlan of Stp. If the key value(s) specified in
// the supplied Stp_Vlan already exist in the list, an error is
// returned.
func (t *Stp) AppendVlan(v *Stp_Vlan) error {
	key := *v.VlanId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Vlan == nil {
		t.Vlan = make(map[uint16]*Stp_Vlan)
	}

	if _, ok := t.Vlan[key]; ok {
		return fmt.Errorf("duplicate key for list Vlan %v", key)
	}

	t.Vlan[key] = v
	return nil
}

// GetOrCreateGlobal retrieves the value of the Global field
// or returns the existing field if it already exists.
func (t *Stp) GetOrCreateGlobal() *Stp_Global {
	if t.Global != nil {
		return t.Global
	}
	t.Global = &Stp_Global{}
	return t.Global
}

// GetOrCreateMstp retrieves the value of the Mstp field
// or returns the existing field if it already exists.
func (t *Stp) GetOrCreateMstp() *Stp_Mstp {
	if t.Mstp != nil {
		return t.Mstp
	}
	t.Mstp = &Stp_Mstp{}
	return t.Mstp
}

// GetOrCreateRstp retrieves the value of the Rstp field
// or returns the existing field if it already exists.
func (t *Stp) GetOrCreateRstp() *Stp_Rstp {
	if t.Rstp != nil {
		return t.Rstp
	}
	t.Rstp = &Stp_Rstp{}
	return t.Rstp
}

// GetGlobal returns the value of the Global struct pointer
// from Stp. If the receiver or the field Global is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Stp) GetGlobal() *Stp_Global {
	if t != nil && t.Global != nil {
		return t.Global
	}
	return nil
}

// GetMstp returns the value of the Mstp struct pointer
// from Stp. If the receiver or the field Mstp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Stp) GetMstp() *Stp_Mstp {
	if t != nil && t.Mstp != nil {
		return t.Mstp
	}
	return nil
}

// GetRstp returns the value of the Rstp struct pointer
// from Stp. If the receiver or the field Rstp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Stp) GetRstp() *Stp_Rstp {
	if t != nil && t.Rstp != nil {
		return t.Rstp
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Stp) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Stp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Stp) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Stp_Global represents the /openconfig-spanning-tree/stp/global YANG schema element.
type Stp_Global struct {
	ΛMetadata                   []ygot.Annotation                            `path:"@" ygotAnnotation:"true"`
	BpduFilter                  *bool                                        `path:"config/bpdu-filter" module:"openconfig-spanning-tree"`
	ΛBpduFilter                 []ygot.Annotation                            `path:"config/@bpdu-filter" ygotAnnotation:"true"`
	BpduGuard                   *bool                                        `path:"config/bpdu-guard" module:"openconfig-spanning-tree"`
	ΛBpduGuard                  []ygot.Annotation                            `path:"config/@bpdu-guard" ygotAnnotation:"true"`
	BpduguardTimeoutRecovery    *uint8                                       `path:"config/bpduguard-timeout-recovery" module:"openconfig-spanning-tree"`
	ΛBpduguardTimeoutRecovery   []ygot.Annotation                            `path:"config/@bpduguard-timeout-recovery" ygotAnnotation:"true"`
	BridgeAssurance             *bool                                        `path:"config/bridge-assurance" module:"openconfig-spanning-tree"`
	ΛBridgeAssurance            []ygot.Annotation                            `path:"config/@bridge-assurance" ygotAnnotation:"true"`
	EnabledProtocol             []E_OpenconfigSpanningTreeTypes_STP_PROTOCOL `path:"config/enabled-protocol" module:"openconfig-spanning-tree"`
	ΛEnabledProtocol            []ygot.Annotation                            `path:"config/@enabled-protocol" ygotAnnotation:"true"`
	EtherchannelMisconfigGuard  *bool                                        `path:"config/etherchannel-misconfig-guard" module:"openconfig-spanning-tree"`
	ΛEtherchannelMisconfigGuard []ygot.Annotation                            `path:"config/@etherchannel-misconfig-guard" ygotAnnotation:"true"`
	LoopGuard                   *bool                                        `path:"config/loop-guard" module:"openconfig-spanning-tree"`
	ΛLoopGuard                  []ygot.Annotation                            `path:"config/@loop-guard" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Stp_Global implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Stp_Global) IsYANGGoStruct() {}

// GetBpduFilter retrieves the value of the leaf BpduFilter from the Stp_Global
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if BpduFilter is set, it can safely use t.GetBpduFilter()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.BpduFilter == nil'
// before retrieving the leaf's value.
func (t *Stp_Global) GetBpduFilter() bool {
	if t == nil || t.BpduFilter == nil {
		return false
	}
	return *t.BpduFilter
}

// GetBpduGuard retrieves the value of the leaf BpduGuard from the Stp_Global
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if BpduGuard is set, it can safely use t.GetBpduGuard()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.BpduGuard == nil'
// before retrieving the leaf's value.
func (t *Stp_Global) GetBpduGuard() bool {
	if t == nil || t.BpduGuard == nil {
		return false
	}
	return *t.BpduGuard
}

// GetBpduguardTimeoutRecovery retrieves the value of the leaf BpduguardTimeoutRecovery from the Stp_Global
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if BpduguardTimeoutRecovery is set, it can safely use t.GetBpduguardTimeoutRecovery()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.BpduguardTimeoutRecovery == nil'
// before retrieving the leaf's value.
func (t *Stp_Global) GetBpduguardTimeoutRecovery() uint8 {
	if t == nil || t.BpduguardTimeoutRecovery == nil {
		return 0
	}
	return *t.BpduguardTimeoutRecovery
}

// GetBridgeAssurance retrieves the value of the leaf BridgeAssurance from the Stp_Global
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if BridgeAssurance is set, it can safely use t.GetBridgeAssurance()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.BridgeAssurance == nil'
// before retrieving the leaf's value.
func (t *Stp_Global) GetBridgeAssurance() bool {
	if t == nil || t.BridgeAssurance == nil {
		return false
	}
	return *t.BridgeAssurance
}

// GetEnabledProtocol retrieves the value of the leaf EnabledProtocol from the Stp_Global
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if EnabledProtocol is set, it can safely use t.GetEnabledProtocol()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.EnabledProtocol == nil'
// before retrieving the leaf's value.
func (t *Stp_Global) GetEnabledProtocol() []E_OpenconfigSpanningTreeTypes_STP_PROTOCOL {
	if t == nil || t.EnabledProtocol == nil {
		return nil
	}
	return t.EnabledProtocol
}

// GetEtherchannelMisconfigGuard retrieves the value of the leaf EtherchannelMisconfigGuard from the Stp_Global
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if EtherchannelMisconfigGuard is set, it can safely use t.GetEtherchannelMisconfigGuard()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.EtherchannelMisconfigGuard == nil'
// before retrieving the leaf's value.
func (t *Stp_Global) GetEtherchannelMisconfigGuard() bool {
	if t == nil || t.EtherchannelMisconfigGuard == nil {
		return false
	}
	return *t.EtherchannelMisconfigGuard
}

// GetLoopGuard retrieves the value of the leaf LoopGuard from the Stp_Global
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LoopGuard is set, it can safely use t.GetLoopGuard()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LoopGuard == nil'
// before retrieving the leaf's value.
func (t *Stp_Global) GetLoopGuard() bool {
	if t == nil || t.LoopGuard == nil {
		return false
	}
	return *t.LoopGuard
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Stp_Global) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Stp_Global"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Stp_Global) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Stp_Interface represents the /openconfig-spanning-tree/stp/interfaces/interface YANG schema element.
type Stp_Interface struct {
	ΛMetadata   []ygot.Annotation                           `path:"@" ygotAnnotation:"true"`
	BpduFilter  *bool                                       `path:"config/bpdu-filter" module:"openconfig-spanning-tree"`
	ΛBpduFilter []ygot.Annotation                           `path:"config/@bpdu-filter" ygotAnnotation:"true"`
	BpduGuard   *bool                                       `path:"config/bpdu-guard" module:"openconfig-spanning-tree"`
	ΛBpduGuard  []ygot.Annotation                           `path:"config/@bpdu-guard" ygotAnnotation:"true"`
	EdgePort    E_OpenconfigSpanningTreeTypes_STP_EDGE_PORT `path:"config/edge-port" module:"openconfig-spanning-tree"`
	ΛEdgePort   []ygot.Annotation                           `path:"config/@edge-port" ygotAnnotation:"true"`
	Guard       E_OpenconfigSpanningTree_StpGuardType       `path:"config/guard" module:"openconfig-spanning-tree"`
	ΛGuard      []ygot.Annotation                           `path:"config/@guard" ygotAnnotation:"true"`
	LinkType    E_OpenconfigSpanningTree_StpLinkType        `path:"config/link-type" module:"openconfig-spanning-tree"`
	ΛLinkType   []ygot.Annotation                           `path:"config/@link-type" ygotAnnotation:"true"`
	Name        *string                                     `path:"config/name|name" module:"openconfig-spanning-tree"`
	ΛName       []ygot.Annotation                           `path:"config/@name|@name" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Stp_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Stp_Interface) IsYANGGoStruct() {}

// GetBpduFilter retrieves the value of the leaf BpduFilter from the Stp_Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if BpduFilter is set, it can safely use t.GetBpduFilter()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.BpduFilter == nil'
// before retrieving the leaf's value.
func (t *Stp_Interface) GetBpduFilter() bool {
	if t == nil || t.BpduFilter == nil {
		return false
	}
	return *t.BpduFilter
}

// GetBpduGuard retrieves the value of the leaf BpduGuard from the Stp_Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if BpduGuard is set, it can safely use t.GetBpduGuard()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.BpduGuard == nil'
// before retrieving the leaf's value.
func (t *Stp_Interface) GetBpduGuard() bool {
	if t == nil || t.BpduGuard == nil {
		return false
	}
	return *t.BpduGuard
}

// GetEdgePort retrieves the value of the leaf EdgePort from the Stp_Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if EdgePort is set, it can safely use t.GetEdgePort()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.EdgePort == nil'
// before retrieving the leaf's value.
func (t *Stp_Interface) GetEdgePort() E_OpenconfigSpanningTreeTypes_STP_EDGE_PORT {
	if t == nil || t.EdgePort == 0 {
		return 0
	}
	return t.EdgePort
}

// GetGuard retrieves the value of the leaf Guard from the Stp_Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Guard is set, it can safely use t.GetGuard()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Guard == nil'
// before retrieving the leaf's value.
func (t *Stp_Interface) GetGuard() E_OpenconfigSpanningTree_StpGuardType {
	if t == nil || t.Guard == 0 {
		return 0
	}
	return t.Guard
}

// GetLinkType retrieves the value of the leaf LinkType from the Stp_Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LinkType is set, it can safely use t.GetLinkType()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LinkType == nil'
// before retrieving the leaf's value.
func (t *Stp_Interface) GetLinkType() E_OpenconfigSpanningTree_StpLinkType {
	if t == nil || t.LinkType == 0 {
		return 0
	}
	return t.LinkType
}

// GetName retrieves the value of the leaf Name from the Stp_Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Name is set, it can safely use t.GetName()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Name == nil'
// before retrieving the leaf's value.
func (t *Stp_Interface) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// ΛListKeyMap returns the keys of the Stp_Interface struct, which is a YANG list entry.
func (t *Stp_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Stp_Interface) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Stp_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Stp_Interface) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Stp_Mstp represents the /openconfig-spanning-tree/stp/mstp YANG schema element.
type Stp_Mstp struct {
	ΛMetadata        []ygot.Annotation                `path:"@" ygotAnnotation:"true"`
	ForwardingDelay  *uint8                           `path:"config/forwarding-delay" module:"openconfig-spanning-tree"`
	ΛForwardingDelay []ygot.Annotation                `path:"config/@forwarding-delay" ygotAnnotation:"true"`
	HelloTime        *uint8                           `path:"config/hello-time" module:"openconfig-spanning-tree"`
	ΛHelloTime       []ygot.Annotation                `path:"config/@hello-time" ygotAnnotation:"true"`
	HoldCount        *uint8                           `path:"config/hold-count" module:"openconfig-spanning-tree"`
	ΛHoldCount       []ygot.Annotation                `path:"config/@hold-count" ygotAnnotation:"true"`
	MaxAge           *uint8                           `path:"config/max-age" module:"openconfig-spanning-tree"`
	ΛMaxAge          []ygot.Annotation                `path:"config/@max-age" ygotAnnotation:"true"`
	MaxHop           *uint8                           `path:"config/max-hop" module:"openconfig-spanning-tree"`
	ΛMaxHop          []ygot.Annotation                `path:"config/@max-hop" ygotAnnotation:"true"`
	MstInstance      map[uint16]*Stp_Mstp_MstInstance `path:"mst-instances/mst-instance" module:"openconfig-spanning-tree"`
	ΛMstInstance     []ygot.Annotation                `path:"mst-instances/@mst-instance" ygotAnnotation:"true"`
	Name             *string                          `path:"config/name" module:"openconfig-spanning-tree"`
	ΛName            []ygot.Annotation                `path:"config/@name" ygotAnnotation:"true"`
	Revision         *uint32                          `path:"config/revision" module:"openconfig-spanning-tree"`
	ΛRevision        []ygot.Annotation                `path:"config/@revision" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Stp_Mstp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Stp_Mstp) IsYANGGoStruct() {}

// NewMstInstance creates a new entry in the MstInstance list of the
// Stp_Mstp struct. The keys of the list are populated from the input
// arguments.
func (t *Stp_Mstp) NewMstInstance(MstId uint16) (*Stp_Mstp_MstInstance, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MstInstance == nil {
		t.MstInstance = make(map[uint16]*Stp_Mstp_MstInstance)
	}

	key := MstId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MstInstance[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MstInstance", key)
	}

	t.MstInstance[key] = &Stp_Mstp_MstInstance{
		MstId: &MstId,
	}

	return t.MstInstance[key], nil
}

// RenameMstInstance renames an entry in the list MstInstance within
// the Stp_Mstp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Stp_Mstp) RenameMstInstance(oldK, newK uint16) error {
	if _, ok := t.MstInstance[newK]; ok {
		return fmt.Errorf("key %v already exists in MstInstance", newK)
	}

	e, ok := t.MstInstance[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in MstInstance", oldK)
	}
	e.MstId = &newK

	t.MstInstance[newK] = e
	delete(t.MstInstance, oldK)
	return nil
}

// GetOrCreateMstInstance retrieves the value with the specified keys from
// the receiver Stp_Mstp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Stp_Mstp) GetOrCreateMstInstance(MstId uint16) *Stp_Mstp_MstInstance {

	key := MstId

	if v, ok := t.MstInstance[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMstInstance(MstId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMstInstance got unexpected error: %v", err))
	}
	return v
}

// GetMstInstance retrieves the value with the specified key from
// the MstInstance map field of Stp_Mstp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Stp_Mstp) GetMstInstance(MstId uint16) *Stp_Mstp_MstInstance {

	if t == nil {
		return nil
	}

	key := MstId

	if lm, ok := t.MstInstance[key]; ok {
		return lm
	}
	return nil
}

// AppendMstInstance appends the supplied Stp_Mstp_MstInstance struct to the
// list MstInstance of Stp_Mstp. If the key value(s) specified in
// the supplied Stp_Mstp_MstInstance already exist in the list, an error is
// returned.
func (t *Stp_Mstp) AppendMstInstance(v *Stp_Mstp_MstInstance) error {
	key := *v.MstId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MstInstance == nil {
		t.MstInstance = make(map[uint16]*Stp_Mstp_MstInstance)
	}

	if _, ok := t.MstInstance[key]; ok {
		return fmt.Errorf("duplicate key for list MstInstance %v", key)
	}

	t.MstInstance[key] = v
	return nil
}

// GetForwardingDelay retrieves the value of the leaf ForwardingDelay from the Stp_Mstp
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ForwardingDelay is set, it can safely use t.GetForwardingDelay()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ForwardingDelay == nil'
// before retrieving the leaf's value.
func (t *Stp_Mstp) GetForwardingDelay() uint8 {
	if t == nil || t.ForwardingDelay == nil {
		return 0
	}
	return *t.ForwardingDelay
}

// GetHelloTime retrieves the value of the leaf HelloTime from the Stp_Mstp
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if HelloTime is set, it can safely use t.GetHelloTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.HelloTime == nil'
// before retrieving the leaf's value.
func (t *Stp_Mstp) GetHelloTime() uint8 {
	if t == nil || t.HelloTime == nil {
		return 0
	}
	return *t.HelloTime
}

// GetHoldCount retrieves the value of the leaf HoldCount from the Stp_Mstp
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if HoldCount is set, it can safely use t.GetHoldCount()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.HoldCount == nil'
// before retrieving the leaf's value.
func (t *Stp_Mstp) GetHoldCount() uint8 {
	if t == nil || t.HoldCount == nil {
		return 6
	}
	return *t.HoldCount
}

// GetMaxAge retrieves the value of the leaf MaxAge from the Stp_Mstp
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaxAge is set, it can safely use t.GetMaxAge()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaxAge == nil'
// before retrieving the leaf's value.
func (t *Stp_Mstp) GetMaxAge() uint8 {
	if t == nil || t.MaxAge == nil {
		return 0
	}
	return *t.MaxAge
}

// GetMaxHop retrieves the value of the leaf MaxHop from the Stp_Mstp
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaxHop is set, it can safely use t.GetMaxHop()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaxHop == nil'
// before retrieving the leaf's value.
func (t *Stp_Mstp) GetMaxHop() uint8 {
	if t == nil || t.MaxHop == nil {
		return 0
	}
	return *t.MaxHop
}

// GetName retrieves the value of the leaf Name from the Stp_Mstp
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Name is set, it can safely use t.GetName()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Name == nil'
// before retrieving the leaf's value.
func (t *Stp_Mstp) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetRevision retrieves the value of the leaf Revision from the Stp_Mstp
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Revision is set, it can safely use t.GetRevision()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Revision == nil'
// before retrieving the leaf's value.
func (t *Stp_Mstp) GetRevision() uint32 {
	if t == nil || t.Revision == nil {
		return 0
	}
	return *t.Revision
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Stp_Mstp) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Stp_Mstp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Stp_Mstp) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Stp_Mstp_MstInstance represents the /openconfig-spanning-tree/stp/mstp/mst-instances/mst-instance YANG schema element.
type Stp_Mstp_MstInstance struct {
	ΛMetadata               []ygot.Annotation                          `path:"@" ygotAnnotation:"true"`
	BridgeAddress           *string                                    `path:"state/bridge-address" module:"openconfig-spanning-tree"`
	ΛBridgeAddress          []ygot.Annotation                          `path:"state/@bridge-address" ygotAnnotation:"true"`
	BridgePriority          *uint32                                    `path:"config/bridge-priority" module:"openconfig-spanning-tree"`
	ΛBridgePriority         []ygot.Annotation                          `path:"config/@bridge-priority" ygotAnnotation:"true"`
	DesignatedRootAddress   *string                                    `path:"state/designated-root-address" module:"openconfig-spanning-tree"`
	ΛDesignatedRootAddress  []ygot.Annotation                          `path:"state/@designated-root-address" ygotAnnotation:"true"`
	DesignatedRootPriority  *uint32                                    `path:"state/designated-root-priority" module:"openconfig-spanning-tree"`
	ΛDesignatedRootPriority []ygot.Annotation                          `path:"state/@designated-root-priority" ygotAnnotation:"true"`
	HoldTime                *uint8                                     `path:"state/hold-time" module:"openconfig-spanning-tree"`
	ΛHoldTime               []ygot.Annotation                          `path:"state/@hold-time" ygotAnnotation:"true"`
	Interface               map[string]*Stp_Mstp_MstInstance_Interface `path:"interfaces/interface" module:"openconfig-spanning-tree"`
	ΛInterface              []ygot.Annotation                          `path:"interfaces/@interface" ygotAnnotation:"true"`
	LastTopologyChange      *uint64                                    `path:"state/last-topology-change" module:"openconfig-spanning-tree"`
	ΛLastTopologyChange     []ygot.Annotation                          `path:"state/@last-topology-change" ygotAnnotation:"true"`
	MstId                   *uint16                                    `path:"config/mst-id|mst-id" module:"openconfig-spanning-tree"`
	ΛMstId                  []ygot.Annotation                          `path:"config/@mst-id|@mst-id" ygotAnnotation:"true"`
	RootCost                *uint32                                    `path:"state/root-cost" module:"openconfig-spanning-tree"`
	ΛRootCost               []ygot.Annotation                          `path:"state/@root-cost" ygotAnnotation:"true"`
	RootPort                *uint16                                    `path:"state/root-port" module:"openconfig-spanning-tree"`
	ΛRootPort               []ygot.Annotation                          `path:"state/@root-port" ygotAnnotation:"true"`
	TopologyChanges         *uint64                                    `path:"state/topology-changes" module:"openconfig-spanning-tree"`
	ΛTopologyChanges        []ygot.Annotation                          `path:"state/@topology-changes" ygotAnnotation:"true"`
	Vlan                    []Stp_Mstp_MstInstance_Vlan_Union          `path:"config/vlan" module:"openconfig-spanning-tree"`
	ΛVlan                   []ygot.Annotation                          `path:"config/@vlan" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Stp_Mstp_MstInstance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Stp_Mstp_MstInstance) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// Stp_Mstp_MstInstance struct. The keys of the list are populated from the input
// arguments.
func (t *Stp_Mstp_MstInstance) NewInterface(Name string) (*Stp_Mstp_MstInstance_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*Stp_Mstp_MstInstance_Interface)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &Stp_Mstp_MstInstance_Interface{
		Name: &Name,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the Stp_Mstp_MstInstance struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Stp_Mstp_MstInstance) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.Name = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver Stp_Mstp_MstInstance. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Stp_Mstp_MstInstance) GetOrCreateInterface(Name string) *Stp_Mstp_MstInstance_Interface {

	key := Name

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of Stp_Mstp_MstInstance. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Stp_Mstp_MstInstance) GetInterface(Name string) *Stp_Mstp_MstInstance_Interface {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// AppendInterface appends the supplied Stp_Mstp_MstInstance_Interface struct to the
// list Interface of Stp_Mstp_MstInstance. If the key value(s) specified in
// the supplied Stp_Mstp_MstInstance_Interface already exist in the list, an error is
// returned.
func (t *Stp_Mstp_MstInstance) AppendInterface(v *Stp_Mstp_MstInstance_Interface) error {
	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*Stp_Mstp_MstInstance_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// GetBridgeAddress retrieves the value of the leaf BridgeAddress from the Stp_Mstp_MstInstance
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if BridgeAddress is set, it can safely use t.GetBridgeAddress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.BridgeAddress == nil'
// before retrieving the leaf's value.
func (t *Stp_Mstp_MstInstance) GetBridgeAddress() string {
	if t == nil || t.BridgeAddress == nil {
		return ""
	}
	return *t.BridgeAddress
}

// GetBridgePriority retrieves the value of the leaf BridgePriority from the Stp_Mstp_MstInstance
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if BridgePriority is set, it can safely use t.GetBridgePriority()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.BridgePriority == nil'
// before retrieving the leaf's value.
func (t *Stp_Mstp_MstInstance) GetBridgePriority() uint32 {
	if t == nil || t.BridgePriority == nil {
		return 0
	}
	return *t.BridgePriority
}

// GetDesignatedRootAddress retrieves the value of the leaf DesignatedRootAddress from the Stp_Mstp_MstInstance
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if DesignatedRootAddress is set, it can safely use t.GetDesignatedRootAddress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.DesignatedRootAddress == nil'
// before retrieving the leaf's value.
func (t *Stp_Mstp_MstInstance) GetDesignatedRootAddress() string {
	if t == nil || t.DesignatedRootAddress == nil {
		return ""
	}
	return *t.DesignatedRootAddress
}

// GetDesignatedRootPriority retrieves the value of the leaf DesignatedRootPriority from the Stp_Mstp_MstInstance
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if DesignatedRootPriority is set, it can safely use t.GetDesignatedRootPriority()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.DesignatedRootPriority == nil'
// before retrieving the leaf's value.
func (t *Stp_Mstp_MstInstance) GetDesignatedRootPriority() uint32 {
	if t == nil || t.DesignatedRootPriority == nil {
		return 0
	}
	return *t.DesignatedRootPriority
}

// GetHoldTime retrieves the value of the leaf HoldTime from the Stp_Mstp_MstInstance
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if HoldTime is set, it can safely use t.GetHoldTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.HoldTime == nil'
// before retrieving the leaf's value.
func (t *Stp_Mstp_MstInstance) GetHoldTime() uint8 {
	if t == nil || t.HoldTime == nil {
		return 0
	}
	return *t.HoldTime
}

// GetLastTopologyChange retrieves the value of the leaf LastTopologyChange from the Stp_Mstp_MstInstance
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LastTopologyChange is set, it can safely use t.GetLastTopologyChange()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LastTopologyChange == nil'
// before retrieving the leaf's value.
func (t *Stp_Mstp_MstInstance) GetLastTopologyChange() uint64 {
	if t == nil || t.LastTopologyChange == nil {
		return 0
	}
	return *t.LastTopologyChange
}

// GetMstId retrieves the value of the leaf MstId from the Stp_Mstp_MstInstance
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MstId is set, it can safely use t.GetMstId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MstId == nil'
// before retrieving the leaf's value.
func (t *Stp_Mstp_MstInstance) GetMstId() uint16 {
	if t == nil || t.MstId == nil {
		return 0
	}
	return *t.MstId
}

// GetRootCost retrieves the value of the leaf RootCost from the Stp_Mstp_MstInstance
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RootCost is set, it can safely use t.GetRootCost()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RootCost == nil'
// before retrieving the leaf's value.
func (t *Stp_Mstp_MstInstance) GetRootCost() uint32 {
	if t == nil || t.RootCost == nil {
		return 0
	}
	return *t.RootCost
}

// GetRootPort retrieves the value of the leaf RootPort from the Stp_Mstp_MstInstance
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RootPort is set, it can safely use t.GetRootPort()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RootPort == nil'
// before retrieving the leaf's value.
func (t *Stp_Mstp_MstInstance) GetRootPort() uint16 {
	if t == nil || t.RootPort == nil {
		return 0
	}
	return *t.RootPort
}

// GetTopologyChanges retrieves the value of the leaf TopologyChanges from the Stp_Mstp_MstInstance
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if TopologyChanges is set, it can safely use t.GetTopologyChanges()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.TopologyChanges == nil'
// before retrieving the leaf's value.
func (t *Stp_Mstp_MstInstance) GetTopologyChanges() uint64 {
	if t == nil || t.TopologyChanges == nil {
		return 0
	}
	return *t.TopologyChanges
}

// GetVlan retrieves the value of the leaf Vlan from the Stp_Mstp_MstInstance
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Vlan is set, it can safely use t.GetVlan()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Vlan == nil'
// before retrieving the leaf's value.
func (t *Stp_Mstp_MstInstance) GetVlan() []Stp_Mstp_MstInstance_Vlan_Union {
	if t == nil || t.Vlan == nil {
		return nil
	}
	return t.Vlan
}

// ΛListKeyMap returns the keys of the Stp_Mstp_MstInstance struct, which is a YANG list entry.
func (t *Stp_Mstp_MstInstance) ΛListKeyMap() (map[string]interface{}, error) {
	if t.MstId == nil {
		return nil, fmt.Errorf("nil value for key MstId")
	}

	return map[string]interface{}{
		"mst-id": *t.MstId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Stp_Mstp_MstInstance) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Stp_Mstp_MstInstance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Stp_Mstp_MstInstance) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Stp_Mstp_MstInstance_Vlan_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-spanning-tree/stp/mstp/mst-instances/mst-instance/config/vlan within the YANG schema.
type Stp_Mstp_MstInstance_Vlan_Union interface {
	Is_Stp_Mstp_MstInstance_Vlan_Union()
}

// Stp_Mstp_MstInstance_Vlan_Union_String is used when /openconfig-spanning-tree/stp/mstp/mst-instances/mst-instance/config/vlan
// is to be set to a string value.
type Stp_Mstp_MstInstance_Vlan_Union_String struct {
	String string
}

// Is_Stp_Mstp_MstInstance_Vlan_Union ensures that Stp_Mstp_MstInstance_Vlan_Union_String
// implements the Stp_Mstp_MstInstance_Vlan_Union interface.
func (*Stp_Mstp_MstInstance_Vlan_Union_String) Is_Stp_Mstp_MstInstance_Vlan_Union() {}

// Stp_Mstp_MstInstance_Vlan_Union_Uint16 is used when /openconfig-spanning-tree/stp/mstp/mst-instances/mst-instance/config/vlan
// is to be set to a uint16 value.
type Stp_Mstp_MstInstance_Vlan_Union_Uint16 struct {
	Uint16 uint16
}

// Is_Stp_Mstp_MstInstance_Vlan_Union ensures that Stp_Mstp_MstInstance_Vlan_Union_Uint16
// implements the Stp_Mstp_MstInstance_Vlan_Union interface.
func (*Stp_Mstp_MstInstance_Vlan_Union_Uint16) Is_Stp_Mstp_MstInstance_Vlan_Union() {}

// To_Stp_Mstp_MstInstance_Vlan_Union takes an input interface{} and attempts to convert it to a struct
// which implements the Stp_Mstp_MstInstance_Vlan_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *Stp_Mstp_MstInstance) To_Stp_Mstp_MstInstance_Vlan_Union(i interface{}) (Stp_Mstp_MstInstance_Vlan_Union, error) {
	switch v := i.(type) {
	case string:
		return &Stp_Mstp_MstInstance_Vlan_Union_String{v}, nil
	case uint16:
		return &Stp_Mstp_MstInstance_Vlan_Union_Uint16{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to Stp_Mstp_MstInstance_Vlan_Union, unknown union type, got: %T, want any of [string, uint16]", i, i)
	}
}

// Stp_Mstp_MstInstance_Interface represents the /openconfig-spanning-tree/stp/mstp/mst-instances/mst-instance/interfaces/interface YANG schema element.
type Stp_Mstp_MstInstance_Interface struct {
	ΛMetadata                 []ygot.Annotation                            `path:"@" ygotAnnotation:"true"`
	Cost                      *uint32                                      `path:"config/cost" module:"openconfig-spanning-tree"`
	ΛCost                     []ygot.Annotation                            `path:"config/@cost" ygotAnnotation:"true"`
	Counters                  *Stp_Mstp_MstInstance_Interface_Counters     `path:"state/counters" module:"openconfig-spanning-tree"`
	ΛCounters                 []ygot.Annotation                            `path:"state/@counters" ygotAnnotation:"true"`
	DesignatedBridgeAddress   *string                                      `path:"state/designated-bridge-address" module:"openconfig-spanning-tree"`
	ΛDesignatedBridgeAddress  []ygot.Annotation                            `path:"state/@designated-bridge-address" ygotAnnotation:"true"`
	DesignatedBridgePriority  *uint32                                      `path:"state/designated-bridge-priority" module:"openconfig-spanning-tree"`
	ΛDesignatedBridgePriority []ygot.Annotation                            `path:"state/@designated-bridge-priority" ygotAnnotation:"true"`
	DesignatedCost            *uint32                                      `path:"state/designated-cost" module:"openconfig-spanning-tree"`
	ΛDesignatedCost           []ygot.Annotation                            `path:"state/@designated-cost" ygotAnnotation:"true"`
	DesignatedPortNum         *uint16                                      `path:"state/designated-port-num" module:"openconfig-spanning-tree"`
	ΛDesignatedPortNum        []ygot.Annotation                            `path:"state/@designated-port-num" ygotAnnotation:"true"`
	DesignatedPortPriority    *uint8                                       `path:"state/designated-port-priority" module:"openconfig-spanning-tree"`
	ΛDesignatedPortPriority   []ygot.Annotation                            `path:"state/@designated-port-priority" ygotAnnotation:"true"`
	DesignatedRootAddress     *string                                      `path:"state/designated-root-address" module:"openconfig-spanning-tree"`
	ΛDesignatedRootAddress    []ygot.Annotation                            `path:"state/@designated-root-address" ygotAnnotation:"true"`
	DesignatedRootPriority    *uint32                                      `path:"state/designated-root-priority" module:"openconfig-spanning-tree"`
	ΛDesignatedRootPriority   []ygot.Annotation                            `path:"state/@designated-root-priority" ygotAnnotation:"true"`
	ForwardTransisitions      *uint64                                      `path:"state/forward-transisitions" module:"openconfig-spanning-tree"`
	ΛForwardTransisitions     []ygot.Annotation                            `path:"state/@forward-transisitions" ygotAnnotation:"true"`
	Name                      *string                                      `path:"config/name|name" module:"openconfig-spanning-tree"`
	ΛName                     []ygot.Annotation                            `path:"config/@name|@name" ygotAnnotation:"true"`
	PortNum                   *uint16                                      `path:"state/port-num" module:"openconfig-spanning-tree"`
	ΛPortNum                  []ygot.Annotation                            `path:"state/@port-num" ygotAnnotation:"true"`
	PortPriority              *uint8                                       `path:"config/port-priority" module:"openconfig-spanning-tree"`
	ΛPortPriority             []ygot.Annotation                            `path:"config/@port-priority" ygotAnnotation:"true"`
	PortState                 E_OpenconfigSpanningTreeTypes_STP_PORT_STATE `path:"state/port-state" module:"openconfig-spanning-tree"`
	ΛPortState                []ygot.Annotation                            `path:"state/@port-state" ygotAnnotation:"true"`
	Role                      E_OpenconfigSpanningTreeTypes_STP_PORT_ROLE  `path:"state/role" module:"openconfig-spanning-tree"`
	ΛRole                     []ygot.Annotation                            `path:"state/@role" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Stp_Mstp_MstInstance_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Stp_Mstp_MstInstance_Interface) IsYANGGoStruct() {}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *Stp_Mstp_MstInstance_Interface) GetOrCreateCounters() *Stp_Mstp_MstInstance_Interface_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &Stp_Mstp_MstInstance_Interface_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from Stp_Mstp_MstInstance_Interface. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Stp_Mstp_MstInstance_Interface) GetCounters() *Stp_Mstp_MstInstance_Interface_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetCost retrieves the value of the leaf Cost from the Stp_Mstp_MstInstance_Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Cost is set, it can safely use t.GetCost()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Cost == nil'
// before retrieving the leaf's value.
func (t *Stp_Mstp_MstInstance_Interface) GetCost() uint32 {
	if t == nil || t.Cost == nil {
		return 0
	}
	return *t.Cost
}

// GetDesignatedBridgeAddress retrieves the value of the leaf DesignatedBridgeAddress from the Stp_Mstp_MstInstance_Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if DesignatedBridgeAddress is set, it can safely use t.GetDesignatedBridgeAddress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.DesignatedBridgeAddress == nil'
// before retrieving the leaf's value.
func (t *Stp_Mstp_MstInstance_Interface) GetDesignatedBridgeAddress() string {
	if t == nil || t.DesignatedBridgeAddress == nil {
		return ""
	}
	return *t.DesignatedBridgeAddress
}

// GetDesignatedBridgePriority retrieves the value of the leaf DesignatedBridgePriority from the Stp_Mstp_MstInstance_Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if DesignatedBridgePriority is set, it can safely use t.GetDesignatedBridgePriority()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.DesignatedBridgePriority == nil'
// before retrieving the leaf's value.
func (t *Stp_Mstp_MstInstance_Interface) GetDesignatedBridgePriority() uint32 {
	if t == nil || t.DesignatedBridgePriority == nil {
		return 0
	}
	return *t.DesignatedBridgePriority
}

// GetDesignatedCost retrieves the value of the leaf DesignatedCost from the Stp_Mstp_MstInstance_Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if DesignatedCost is set, it can safely use t.GetDesignatedCost()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.DesignatedCost == nil'
// before retrieving the leaf's value.
func (t *Stp_Mstp_MstInstance_Interface) GetDesignatedCost() uint32 {
	if t == nil || t.DesignatedCost == nil {
		return 0
	}
	return *t.DesignatedCost
}

// GetDesignatedPortNum retrieves the value of the leaf DesignatedPortNum from the Stp_Mstp_MstInstance_Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if DesignatedPortNum is set, it can safely use t.GetDesignatedPortNum()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.DesignatedPortNum == nil'
// before retrieving the leaf's value.
func (t *Stp_Mstp_MstInstance_Interface) GetDesignatedPortNum() uint16 {
	if t == nil || t.DesignatedPortNum == nil {
		return 0
	}
	return *t.DesignatedPortNum
}

// GetDesignatedPortPriority retrieves the value of the leaf DesignatedPortPriority from the Stp_Mstp_MstInstance_Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if DesignatedPortPriority is set, it can safely use t.GetDesignatedPortPriority()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.DesignatedPortPriority == nil'
// before retrieving the leaf's value.
func (t *Stp_Mstp_MstInstance_Interface) GetDesignatedPortPriority() uint8 {
	if t == nil || t.DesignatedPortPriority == nil {
		return 0
	}
	return *t.DesignatedPortPriority
}

// GetDesignatedRootAddress retrieves the value of the leaf DesignatedRootAddress from the Stp_Mstp_MstInstance_Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if DesignatedRootAddress is set, it can safely use t.GetDesignatedRootAddress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.DesignatedRootAddress == nil'
// before retrieving the leaf's value.
func (t *Stp_Mstp_MstInstance_Interface) GetDesignatedRootAddress() string {
	if t == nil || t.DesignatedRootAddress == nil {
		return ""
	}
	return *t.DesignatedRootAddress
}

// GetDesignatedRootPriority retrieves the value of the leaf DesignatedRootPriority from the Stp_Mstp_MstInstance_Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if DesignatedRootPriority is set, it can safely use t.GetDesignatedRootPriority()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.DesignatedRootPriority == nil'
// before retrieving the leaf's value.
func (t *Stp_Mstp_MstInstance_Interface) GetDesignatedRootPriority() uint32 {
	if t == nil || t.DesignatedRootPriority == nil {
		return 0
	}
	return *t.DesignatedRootPriority
}

// GetForwardTransisitions retrieves the value of the leaf ForwardTransisitions from the Stp_Mstp_MstInstance_Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ForwardTransisitions is set, it can safely use t.GetForwardTransisitions()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ForwardTransisitions == nil'
// before retrieving the leaf's value.
func (t *Stp_Mstp_MstInstance_Interface) GetForwardTransisitions() uint64 {
	if t == nil || t.ForwardTransisitions == nil {
		return 0
	}
	return *t.ForwardTransisitions
}

// GetName retrieves the value of the leaf Name from the Stp_Mstp_MstInstance_Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Name is set, it can safely use t.GetName()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Name == nil'
// before retrieving the leaf's value.
func (t *Stp_Mstp_MstInstance_Interface) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPortNum retrieves the value of the leaf PortNum from the Stp_Mstp_MstInstance_Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PortNum is set, it can safely use t.GetPortNum()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PortNum == nil'
// before retrieving the leaf's value.
func (t *Stp_Mstp_MstInstance_Interface) GetPortNum() uint16 {
	if t == nil || t.PortNum == nil {
		return 0
	}
	return *t.PortNum
}

// GetPortPriority retrieves the value of the leaf PortPriority from the Stp_Mstp_MstInstance_Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PortPriority is set, it can safely use t.GetPortPriority()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PortPriority == nil'
// before retrieving the leaf's value.
func (t *Stp_Mstp_MstInstance_Interface) GetPortPriority() uint8 {
	if t == nil || t.PortPriority == nil {
		return 0
	}
	return *t.PortPriority
}

// GetPortState retrieves the value of the leaf PortState from the Stp_Mstp_MstInstance_Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PortState is set, it can safely use t.GetPortState()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PortState == nil'
// before retrieving the leaf's value.
func (t *Stp_Mstp_MstInstance_Interface) GetPortState() E_OpenconfigSpanningTreeTypes_STP_PORT_STATE {
	if t == nil || t.PortState == 0 {
		return 0
	}
	return t.PortState
}

// GetRole retrieves the value of the leaf Role from the Stp_Mstp_MstInstance_Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Role is set, it can safely use t.GetRole()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Role == nil'
// before retrieving the leaf's value.
func (t *Stp_Mstp_MstInstance_Interface) GetRole() E_OpenconfigSpanningTreeTypes_STP_PORT_ROLE {
	if t == nil || t.Role == 0 {
		return 0
	}
	return t.Role
}

// ΛListKeyMap returns the keys of the Stp_Mstp_MstInstance_Interface struct, which is a YANG list entry.
func (t *Stp_Mstp_MstInstance_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Stp_Mstp_MstInstance_Interface) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Stp_Mstp_MstInstance_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Stp_Mstp_MstInstance_Interface) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Stp_Mstp_MstInstance_Interface_Counters represents the /openconfig-spanning-tree/stp/mstp/mst-instances/mst-instance/interfaces/interface/state/counters YANG schema element.
type Stp_Mstp_MstInstance_Interface_Counters struct {
	ΛMetadata     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	BpduReceived  *uint64           `path:"bpdu-received" module:"openconfig-spanning-tree"`
	ΛBpduReceived []ygot.Annotation `path:"@bpdu-received" ygotAnnotation:"true"`
	BpduSent      *uint64           `path:"bpdu-sent" module:"openconfig-spanning-tree"`
	ΛBpduSent     []ygot.Annotation `path:"@bpdu-sent" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Stp_Mstp_MstInstance_Interface_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Stp_Mstp_MstInstance_Interface_Counters) IsYANGGoStruct() {}

// GetBpduReceived retrieves the value of the leaf BpduReceived from the Stp_Mstp_MstInstance_Interface_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if BpduReceived is set, it can safely use t.GetBpduReceived()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.BpduReceived == nil'
// before retrieving the leaf's value.
func (t *Stp_Mstp_MstInstance_Interface_Counters) GetBpduReceived() uint64 {
	if t == nil || t.BpduReceived == nil {
		return 0
	}
	return *t.BpduReceived
}

// GetBpduSent retrieves the value of the leaf BpduSent from the Stp_Mstp_MstInstance_Interface_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if BpduSent is set, it can safely use t.GetBpduSent()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.BpduSent == nil'
// before retrieving the leaf's value.
func (t *Stp_Mstp_MstInstance_Interface_Counters) GetBpduSent() uint64 {
	if t == nil || t.BpduSent == nil {
		return 0
	}
	return *t.BpduSent
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Stp_Mstp_MstInstance_Interface_Counters) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Stp_Mstp_MstInstance_Interface_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Stp_Mstp_MstInstance_Interface_Counters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Stp_Rstp represents the /openconfig-spanning-tree/stp/rstp YANG schema element.
type Stp_Rstp struct {
	ΛMetadata               []ygot.Annotation              `path:"@" ygotAnnotation:"true"`
	BridgeAddress           *string                        `path:"state/bridge-address" module:"openconfig-spanning-tree"`
	ΛBridgeAddress          []ygot.Annotation              `path:"state/@bridge-address" ygotAnnotation:"true"`
	BridgePriority          *uint32                        `path:"config/bridge-priority" module:"openconfig-spanning-tree"`
	ΛBridgePriority         []ygot.Annotation              `path:"config/@bridge-priority" ygotAnnotation:"true"`
	DesignatedRootAddress   *string                        `path:"state/designated-root-address" module:"openconfig-spanning-tree"`
	ΛDesignatedRootAddress  []ygot.Annotation              `path:"state/@designated-root-address" ygotAnnotation:"true"`
	DesignatedRootPriority  *uint32                        `path:"state/designated-root-priority" module:"openconfig-spanning-tree"`
	ΛDesignatedRootPriority []ygot.Annotation              `path:"state/@designated-root-priority" ygotAnnotation:"true"`
	ForwardingDelay         *uint8                         `path:"config/forwarding-delay" module:"openconfig-spanning-tree"`
	ΛForwardingDelay        []ygot.Annotation              `path:"config/@forwarding-delay" ygotAnnotation:"true"`
	HelloTime               *uint8                         `path:"config/hello-time" module:"openconfig-spanning-tree"`
	ΛHelloTime              []ygot.Annotation              `path:"config/@hello-time" ygotAnnotation:"true"`
	HoldCount               *uint8                         `path:"config/hold-count" module:"openconfig-spanning-tree"`
	ΛHoldCount              []ygot.Annotation              `path:"config/@hold-count" ygotAnnotation:"true"`
	HoldTime                *uint8                         `path:"state/hold-time" module:"openconfig-spanning-tree"`
	ΛHoldTime               []ygot.Annotation              `path:"state/@hold-time" ygotAnnotation:"true"`
	Interface               map[string]*Stp_Rstp_Interface `path:"interfaces/interface" module:"openconfig-spanning-tree"`
	ΛInterface              []ygot.Annotation              `path:"interfaces/@interface" ygotAnnotation:"true"`
	LastTopologyChange      *uint64                        `path:"state/last-topology-change" module:"openconfig-spanning-tree"`
	ΛLastTopologyChange     []ygot.Annotation              `path:"state/@last-topology-change" ygotAnnotation:"true"`
	MaxAge                  *uint8                         `path:"config/max-age" module:"openconfig-spanning-tree"`
	ΛMaxAge                 []ygot.Annotation              `path:"config/@max-age" ygotAnnotation:"true"`
	RootCost                *uint32                        `path:"state/root-cost" module:"openconfig-spanning-tree"`
	ΛRootCost               []ygot.Annotation              `path:"state/@root-cost" ygotAnnotation:"true"`
	RootPort                *uint16                        `path:"state/root-port" module:"openconfig-spanning-tree"`
	ΛRootPort               []ygot.Annotation              `path:"state/@root-port" ygotAnnotation:"true"`
	TopologyChanges         *uint64                        `path:"state/topology-changes" module:"openconfig-spanning-tree"`
	ΛTopologyChanges        []ygot.Annotation              `path:"state/@topology-changes" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Stp_Rstp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Stp_Rstp) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// Stp_Rstp struct. The keys of the list are populated from the input
// arguments.
func (t *Stp_Rstp) NewInterface(Name string) (*Stp_Rstp_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*Stp_Rstp_Interface)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &Stp_Rstp_Interface{
		Name: &Name,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the Stp_Rstp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Stp_Rstp) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.Name = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver Stp_Rstp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Stp_Rstp) GetOrCreateInterface(Name string) *Stp_Rstp_Interface {

	key := Name

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of Stp_Rstp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Stp_Rstp) GetInterface(Name string) *Stp_Rstp_Interface {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// AppendInterface appends the supplied Stp_Rstp_Interface struct to the
// list Interface of Stp_Rstp. If the key value(s) specified in
// the supplied Stp_Rstp_Interface already exist in the list, an error is
// returned.
func (t *Stp_Rstp) AppendInterface(v *Stp_Rstp_Interface) error {
	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*Stp_Rstp_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// GetBridgeAddress retrieves the value of the leaf BridgeAddress from the Stp_Rstp
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if BridgeAddress is set, it can safely use t.GetBridgeAddress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.BridgeAddress == nil'
// before retrieving the leaf's value.
func (t *Stp_Rstp) GetBridgeAddress() string {
	if t == nil || t.BridgeAddress == nil {
		return ""
	}
	return *t.BridgeAddress
}

// GetBridgePriority retrieves the value of the leaf BridgePriority from the Stp_Rstp
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if BridgePriority is set, it can safely use t.GetBridgePriority()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.BridgePriority == nil'
// before retrieving the leaf's value.
func (t *Stp_Rstp) GetBridgePriority() uint32 {
	if t == nil || t.BridgePriority == nil {
		return 0
	}
	return *t.BridgePriority
}

// GetDesignatedRootAddress retrieves the value of the leaf DesignatedRootAddress from the Stp_Rstp
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if DesignatedRootAddress is set, it can safely use t.GetDesignatedRootAddress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.DesignatedRootAddress == nil'
// before retrieving the leaf's value.
func (t *Stp_Rstp) GetDesignatedRootAddress() string {
	if t == nil || t.DesignatedRootAddress == nil {
		return ""
	}
	return *t.DesignatedRootAddress
}

// GetDesignatedRootPriority retrieves the value of the leaf DesignatedRootPriority from the Stp_Rstp
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if DesignatedRootPriority is set, it can safely use t.GetDesignatedRootPriority()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.DesignatedRootPriority == nil'
// before retrieving the leaf's value.
func (t *Stp_Rstp) GetDesignatedRootPriority() uint32 {
	if t == nil || t.DesignatedRootPriority == nil {
		return 0
	}
	return *t.DesignatedRootPriority
}

// GetForwardingDelay retrieves the value of the leaf ForwardingDelay from the Stp_Rstp
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ForwardingDelay is set, it can safely use t.GetForwardingDelay()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ForwardingDelay == nil'
// before retrieving the leaf's value.
func (t *Stp_Rstp) GetForwardingDelay() uint8 {
	if t == nil || t.ForwardingDelay == nil {
		return 0
	}
	return *t.ForwardingDelay
}

// GetHelloTime retrieves the value of the leaf HelloTime from the Stp_Rstp
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if HelloTime is set, it can safely use t.GetHelloTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.HelloTime == nil'
// before retrieving the leaf's value.
func (t *Stp_Rstp) GetHelloTime() uint8 {
	if t == nil || t.HelloTime == nil {
		return 0
	}
	return *t.HelloTime
}

// GetHoldCount retrieves the value of the leaf HoldCount from the Stp_Rstp
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if HoldCount is set, it can safely use t.GetHoldCount()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.HoldCount == nil'
// before retrieving the leaf's value.
func (t *Stp_Rstp) GetHoldCount() uint8 {
	if t == nil || t.HoldCount == nil {
		return 6
	}
	return *t.HoldCount
}

// GetHoldTime retrieves the value of the leaf HoldTime from the Stp_Rstp
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if HoldTime is set, it can safely use t.GetHoldTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.HoldTime == nil'
// before retrieving the leaf's value.
func (t *Stp_Rstp) GetHoldTime() uint8 {
	if t == nil || t.HoldTime == nil {
		return 0
	}
	return *t.HoldTime
}

// GetLastTopologyChange retrieves the value of the leaf LastTopologyChange from the Stp_Rstp
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LastTopologyChange is set, it can safely use t.GetLastTopologyChange()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LastTopologyChange == nil'
// before retrieving the leaf's value.
func (t *Stp_Rstp) GetLastTopologyChange() uint64 {
	if t == nil || t.LastTopologyChange == nil {
		return 0
	}
	return *t.LastTopologyChange
}

// GetMaxAge retrieves the value of the leaf MaxAge from the Stp_Rstp
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaxAge is set, it can safely use t.GetMaxAge()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaxAge == nil'
// before retrieving the leaf's value.
func (t *Stp_Rstp) GetMaxAge() uint8 {
	if t == nil || t.MaxAge == nil {
		return 0
	}
	return *t.MaxAge
}

// GetRootCost retrieves the value of the leaf RootCost from the Stp_Rstp
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RootCost is set, it can safely use t.GetRootCost()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RootCost == nil'
// before retrieving the leaf's value.
func (t *Stp_Rstp) GetRootCost() uint32 {
	if t == nil || t.RootCost == nil {
		return 0
	}
	return *t.RootCost
}

// GetRootPort retrieves the value of the leaf RootPort from the Stp_Rstp
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RootPort is set, it can safely use t.GetRootPort()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RootPort == nil'
// before retrieving the leaf's value.
func (t *Stp_Rstp) GetRootPort() uint16 {
	if t == nil || t.RootPort == nil {
		return 0
	}
	return *t.RootPort
}

// GetTopologyChanges retrieves the value of the leaf TopologyChanges from the Stp_Rstp
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if TopologyChanges is set, it can safely use t.GetTopologyChanges()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.TopologyChanges == nil'
// before retrieving the leaf's value.
func (t *Stp_Rstp) GetTopologyChanges() uint64 {
	if t == nil || t.TopologyChanges == nil {
		return 0
	}
	return *t.TopologyChanges
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Stp_Rstp) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Stp_Rstp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Stp_Rstp) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Stp_Rstp_Interface represents the /openconfig-spanning-tree/stp/rstp/interfaces/interface YANG schema element.
type Stp_Rstp_Interface struct {
	ΛMetadata                 []ygot.Annotation                            `path:"@" ygotAnnotation:"true"`
	Cost                      *uint32                                      `path:"config/cost" module:"openconfig-spanning-tree"`
	ΛCost                     []ygot.Annotation                            `path:"config/@cost" ygotAnnotation:"true"`
	Counters                  *Stp_Rstp_Interface_Counters                 `path:"state/counters" module:"openconfig-spanning-tree"`
	ΛCounters                 []ygot.Annotation                            `path:"state/@counters" ygotAnnotation:"true"`
	DesignatedBridgeAddress   *string                                      `path:"state/designated-bridge-address" module:"openconfig-spanning-tree"`
	ΛDesignatedBridgeAddress  []ygot.Annotation                            `path:"state/@designated-bridge-address" ygotAnnotation:"true"`
	DesignatedBridgePriority  *uint32                                      `path:"state/designated-bridge-priority" module:"openconfig-spanning-tree"`
	ΛDesignatedBridgePriority []ygot.Annotation                            `path:"state/@designated-bridge-priority" ygotAnnotation:"true"`
	DesignatedCost            *uint32                                      `path:"state/designated-cost" module:"openconfig-spanning-tree"`
	ΛDesignatedCost           []ygot.Annotation                            `path:"state/@designated-cost" ygotAnnotation:"true"`
	DesignatedPortNum         *uint16                                      `path:"state/designated-port-num" module:"openconfig-spanning-tree"`
	ΛDesignatedPortNum        []ygot.Annotation                            `path:"state/@designated-port-num" ygotAnnotation:"true"`
	DesignatedPortPriority    *uint8                                       `path:"state/designated-port-priority" module:"openconfig-spanning-tree"`
	ΛDesignatedPortPriority   []ygot.Annotation                            `path:"state/@designated-port-priority" ygotAnnotation:"true"`
	DesignatedRootAddress     *string                                      `path:"state/designated-root-address" module:"openconfig-spanning-tree"`
	ΛDesignatedRootAddress    []ygot.Annotation                            `path:"state/@designated-root-address" ygotAnnotation:"true"`
	DesignatedRootPriority    *uint32                                      `path:"state/designated-root-priority" module:"openconfig-spanning-tree"`
	ΛDesignatedRootPriority   []ygot.Annotation                            `path:"state/@designated-root-priority" ygotAnnotation:"true"`
	ForwardTransisitions      *uint64                                      `path:"state/forward-transisitions" module:"openconfig-spanning-tree"`
	ΛForwardTransisitions     []ygot.Annotation                            `path:"state/@forward-transisitions" ygotAnnotation:"true"`
	Name                      *string                                      `path:"config/name|name" module:"openconfig-spanning-tree"`
	ΛName                     []ygot.Annotation                            `path:"config/@name|@name" ygotAnnotation:"true"`
	PortNum                   *uint16                                      `path:"state/port-num" module:"openconfig-spanning-tree"`
	ΛPortNum                  []ygot.Annotation                            `path:"state/@port-num" ygotAnnotation:"true"`
	PortPriority              *uint8                                       `path:"config/port-priority" module:"openconfig-spanning-tree"`
	ΛPortPriority             []ygot.Annotation                            `path:"config/@port-priority" ygotAnnotation:"true"`
	PortState                 E_OpenconfigSpanningTreeTypes_STP_PORT_STATE `path:"state/port-state" module:"openconfig-spanning-tree"`
	ΛPortState                []ygot.Annotation                            `path:"state/@port-state" ygotAnnotation:"true"`
	Role                      E_OpenconfigSpanningTreeTypes_STP_PORT_ROLE  `path:"state/role" module:"openconfig-spanning-tree"`
	ΛRole                     []ygot.Annotation                            `path:"state/@role" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Stp_Rstp_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Stp_Rstp_Interface) IsYANGGoStruct() {}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *Stp_Rstp_Interface) GetOrCreateCounters() *Stp_Rstp_Interface_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &Stp_Rstp_Interface_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from Stp_Rstp_Interface. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Stp_Rstp_Interface) GetCounters() *Stp_Rstp_Interface_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetCost retrieves the value of the leaf Cost from the Stp_Rstp_Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Cost is set, it can safely use t.GetCost()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Cost == nil'
// before retrieving the leaf's value.
func (t *Stp_Rstp_Interface) GetCost() uint32 {
	if t == nil || t.Cost == nil {
		return 0
	}
	return *t.Cost
}

// GetDesignatedBridgeAddress retrieves the value of the leaf DesignatedBridgeAddress from the Stp_Rstp_Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if DesignatedBridgeAddress is set, it can safely use t.GetDesignatedBridgeAddress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.DesignatedBridgeAddress == nil'
// before retrieving the leaf's value.
func (t *Stp_Rstp_Interface) GetDesignatedBridgeAddress() string {
	if t == nil || t.DesignatedBridgeAddress == nil {
		return ""
	}
	return *t.DesignatedBridgeAddress
}

// GetDesignatedBridgePriority retrieves the value of the leaf DesignatedBridgePriority from the Stp_Rstp_Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if DesignatedBridgePriority is set, it can safely use t.GetDesignatedBridgePriority()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.DesignatedBridgePriority == nil'
// before retrieving the leaf's value.
func (t *Stp_Rstp_Interface) GetDesignatedBridgePriority() uint32 {
	if t == nil || t.DesignatedBridgePriority == nil {
		return 0
	}
	return *t.DesignatedBridgePriority
}

// GetDesignatedCost retrieves the value of the leaf DesignatedCost from the Stp_Rstp_Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if DesignatedCost is set, it can safely use t.GetDesignatedCost()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.DesignatedCost == nil'
// before retrieving the leaf's value.
func (t *Stp_Rstp_Interface) GetDesignatedCost() uint32 {
	if t == nil || t.DesignatedCost == nil {
		return 0
	}
	return *t.DesignatedCost
}

// GetDesignatedPortNum retrieves the value of the leaf DesignatedPortNum from the Stp_Rstp_Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if DesignatedPortNum is set, it can safely use t.GetDesignatedPortNum()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.DesignatedPortNum == nil'
// before retrieving the leaf's value.
func (t *Stp_Rstp_Interface) GetDesignatedPortNum() uint16 {
	if t == nil || t.DesignatedPortNum == nil {
		return 0
	}
	return *t.DesignatedPortNum
}

// GetDesignatedPortPriority retrieves the value of the leaf DesignatedPortPriority from the Stp_Rstp_Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if DesignatedPortPriority is set, it can safely use t.GetDesignatedPortPriority()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.DesignatedPortPriority == nil'
// before retrieving the leaf's value.
func (t *Stp_Rstp_Interface) GetDesignatedPortPriority() uint8 {
	if t == nil || t.DesignatedPortPriority == nil {
		return 0
	}
	return *t.DesignatedPortPriority
}

// GetDesignatedRootAddress retrieves the value of the leaf DesignatedRootAddress from the Stp_Rstp_Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if DesignatedRootAddress is set, it can safely use t.GetDesignatedRootAddress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.DesignatedRootAddress == nil'
// before retrieving the leaf's value.
func (t *Stp_Rstp_Interface) GetDesignatedRootAddress() string {
	if t == nil || t.DesignatedRootAddress == nil {
		return ""
	}
	return *t.DesignatedRootAddress
}

// GetDesignatedRootPriority retrieves the value of the leaf DesignatedRootPriority from the Stp_Rstp_Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if DesignatedRootPriority is set, it can safely use t.GetDesignatedRootPriority()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.DesignatedRootPriority == nil'
// before retrieving the leaf's value.
func (t *Stp_Rstp_Interface) GetDesignatedRootPriority() uint32 {
	if t == nil || t.DesignatedRootPriority == nil {
		return 0
	}
	return *t.DesignatedRootPriority
}

// GetForwardTransisitions retrieves the value of the leaf ForwardTransisitions from the Stp_Rstp_Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ForwardTransisitions is set, it can safely use t.GetForwardTransisitions()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ForwardTransisitions == nil'
// before retrieving the leaf's value.
func (t *Stp_Rstp_Interface) GetForwardTransisitions() uint64 {
	if t == nil || t.ForwardTransisitions == nil {
		return 0
	}
	return *t.ForwardTransisitions
}

// GetName retrieves the value of the leaf Name from the Stp_Rstp_Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Name is set, it can safely use t.GetName()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Name == nil'
// before retrieving the leaf's value.
func (t *Stp_Rstp_Interface) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPortNum retrieves the value of the leaf PortNum from the Stp_Rstp_Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PortNum is set, it can safely use t.GetPortNum()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PortNum == nil'
// before retrieving the leaf's value.
func (t *Stp_Rstp_Interface) GetPortNum() uint16 {
	if t == nil || t.PortNum == nil {
		return 0
	}
	return *t.PortNum
}

// GetPortPriority retrieves the value of the leaf PortPriority from the Stp_Rstp_Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PortPriority is set, it can safely use t.GetPortPriority()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PortPriority == nil'
// before retrieving the leaf's value.
func (t *Stp_Rstp_Interface) GetPortPriority() uint8 {
	if t == nil || t.PortPriority == nil {
		return 0
	}
	return *t.PortPriority
}

// GetPortState retrieves the value of the leaf PortState from the Stp_Rstp_Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PortState is set, it can safely use t.GetPortState()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PortState == nil'
// before retrieving the leaf's value.
func (t *Stp_Rstp_Interface) GetPortState() E_OpenconfigSpanningTreeTypes_STP_PORT_STATE {
	if t == nil || t.PortState == 0 {
		return 0
	}
	return t.PortState
}

// GetRole retrieves the value of the leaf Role from the Stp_Rstp_Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Role is set, it can safely use t.GetRole()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Role == nil'
// before retrieving the leaf's value.
func (t *Stp_Rstp_Interface) GetRole() E_OpenconfigSpanningTreeTypes_STP_PORT_ROLE {
	if t == nil || t.Role == 0 {
		return 0
	}
	return t.Role
}

// ΛListKeyMap returns the keys of the Stp_Rstp_Interface struct, which is a YANG list entry.
func (t *Stp_Rstp_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Stp_Rstp_Interface) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Stp_Rstp_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Stp_Rstp_Interface) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Stp_Rstp_Interface_Counters represents the /openconfig-spanning-tree/stp/rstp/interfaces/interface/state/counters YANG schema element.
type Stp_Rstp_Interface_Counters struct {
	ΛMetadata     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	BpduReceived  *uint64           `path:"bpdu-received" module:"openconfig-spanning-tree"`
	ΛBpduReceived []ygot.Annotation `path:"@bpdu-received" ygotAnnotation:"true"`
	BpduSent      *uint64           `path:"bpdu-sent" module:"openconfig-spanning-tree"`
	ΛBpduSent     []ygot.Annotation `path:"@bpdu-sent" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Stp_Rstp_Interface_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Stp_Rstp_Interface_Counters) IsYANGGoStruct() {}

// GetBpduReceived retrieves the value of the leaf BpduReceived from the Stp_Rstp_Interface_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if BpduReceived is set, it can safely use t.GetBpduReceived()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.BpduReceived == nil'
// before retrieving the leaf's value.
func (t *Stp_Rstp_Interface_Counters) GetBpduReceived() uint64 {
	if t == nil || t.BpduReceived == nil {
		return 0
	}
	return *t.BpduReceived
}

// GetBpduSent retrieves the value of the leaf BpduSent from the Stp_Rstp_Interface_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if BpduSent is set, it can safely use t.GetBpduSent()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.BpduSent == nil'
// before retrieving the leaf's value.
func (t *Stp_Rstp_Interface_Counters) GetBpduSent() uint64 {
	if t == nil || t.BpduSent == nil {
		return 0
	}
	return *t.BpduSent
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Stp_Rstp_Interface_Counters) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Stp_Rstp_Interface_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Stp_Rstp_Interface_Counters) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Stp_Vlan represents the /openconfig-spanning-tree/stp/rapid-pvst/vlan YANG schema element.
type Stp_Vlan struct {
	ΛMetadata               []ygot.Annotation              `path:"@" ygotAnnotation:"true"`
	BridgeAddress           *string                        `path:"state/bridge-address" module:"openconfig-spanning-tree"`
	ΛBridgeAddress          []ygot.Annotation              `path:"state/@bridge-address" ygotAnnotation:"true"`
	BridgePriority          *uint32                        `path:"config/bridge-priority" module:"openconfig-spanning-tree"`
	ΛBridgePriority         []ygot.Annotation              `path:"config/@bridge-priority" ygotAnnotation:"true"`
	DesignatedRootAddress   *string                        `path:"state/designated-root-address" module:"openconfig-spanning-tree"`
	ΛDesignatedRootAddress  []ygot.Annotation              `path:"state/@designated-root-address" ygotAnnotation:"true"`
	DesignatedRootPriority  *uint32                        `path:"state/designated-root-priority" module:"openconfig-spanning-tree"`
	ΛDesignatedRootPriority []ygot.Annotation              `path:"state/@designated-root-priority" ygotAnnotation:"true"`
	ForwardingDelay         *uint8                         `path:"config/forwarding-delay" module:"openconfig-spanning-tree"`
	ΛForwardingDelay        []ygot.Annotation              `path:"config/@forwarding-delay" ygotAnnotation:"true"`
	HelloTime               *uint8                         `path:"config/hello-time" module:"openconfig-spanning-tree"`
	ΛHelloTime              []ygot.Annotation              `path:"config/@hello-time" ygotAnnotation:"true"`
	HoldCount               *uint8                         `path:"config/hold-count" module:"openconfig-spanning-tree"`
	ΛHoldCount              []ygot.Annotation              `path:"config/@hold-count" ygotAnnotation:"true"`
	HoldTime                *uint8                         `path:"state/hold-time" module:"openconfig-spanning-tree"`
	ΛHoldTime               []ygot.Annotation              `path:"state/@hold-time" ygotAnnotation:"true"`
	Interface               map[string]*Stp_Vlan_Interface `path:"interfaces/interface" module:"openconfig-spanning-tree"`
	ΛInterface              []ygot.Annotation              `path:"interfaces/@interface" ygotAnnotation:"true"`
	LastTopologyChange      *uint64                        `path:"state/last-topology-change" module:"openconfig-spanning-tree"`
	ΛLastTopologyChange     []ygot.Annotation              `path:"state/@last-topology-change" ygotAnnotation:"true"`
	MaxAge                  *uint8                         `path:"config/max-age" module:"openconfig-spanning-tree"`
	ΛMaxAge                 []ygot.Annotation              `path:"config/@max-age" ygotAnnotation:"true"`
	RootCost                *uint32                        `path:"state/root-cost" module:"openconfig-spanning-tree"`
	ΛRootCost               []ygot.Annotation              `path:"state/@root-cost" ygotAnnotation:"true"`
	RootPort                *uint16                        `path:"state/root-port" module:"openconfig-spanning-tree"`
	ΛRootPort               []ygot.Annotation              `path:"state/@root-port" ygotAnnotation:"true"`
	TopologyChanges         *uint64                        `path:"state/topology-changes" module:"openconfig-spanning-tree"`
	ΛTopologyChanges        []ygot.Annotation              `path:"state/@topology-changes" ygotAnnotation:"true"`
	VlanId                  *uint16                        `path:"config/vlan-id|vlan-id" module:"openconfig-spanning-tree"`
	ΛVlanId                 []ygot.Annotation              `path:"config/@vlan-id|@vlan-id" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Stp_Vlan implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Stp_Vlan) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// Stp_Vlan struct. The keys of the list are populated from the input
// arguments.
func (t *Stp_Vlan) NewInterface(Name string) (*Stp_Vlan_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*Stp_Vlan_Interface)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &Stp_Vlan_Interface{
		Name: &Name,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the Stp_Vlan struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Stp_Vlan) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.Name = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver Stp_Vlan. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Stp_Vlan) GetOrCreateInterface(Name string) *Stp_Vlan_Interface {

	key := Name

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of Stp_Vlan. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Stp_Vlan) GetInterface(Name string) *Stp_Vlan_Interface {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// AppendInterface appends the supplied Stp_Vlan_Interface struct to the
// list Interface of Stp_Vlan. If the key value(s) specified in
// the supplied Stp_Vlan_Interface already exist in the list, an error is
// returned.
func (t *Stp_Vlan) AppendInterface(v *Stp_Vlan_Interface) error {
	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*Stp_Vlan_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// GetBridgeAddress retrieves the value of the leaf BridgeAddress from the Stp_Vlan
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if BridgeAddress is set, it can safely use t.GetBridgeAddress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.BridgeAddress == nil'
// before retrieving the leaf's value.
func (t *Stp_Vlan) GetBridgeAddress() string {
	if t == nil || t.BridgeAddress == nil {
		return ""
	}
	return *t.BridgeAddress
}

// GetBridgePriority retrieves the value of the leaf BridgePriority from the Stp_Vlan
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if BridgePriority is set, it can safely use t.GetBridgePriority()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.BridgePriority == nil'
// before retrieving the leaf's value.
func (t *Stp_Vlan) GetBridgePriority() uint32 {
	if t == nil || t.BridgePriority == nil {
		return 0
	}
	return *t.BridgePriority
}

// GetDesignatedRootAddress retrieves the value of the leaf DesignatedRootAddress from the Stp_Vlan
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if DesignatedRootAddress is set, it can safely use t.GetDesignatedRootAddress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.DesignatedRootAddress == nil'
// before retrieving the leaf's value.
func (t *Stp_Vlan) GetDesignatedRootAddress() string {
	if t == nil || t.DesignatedRootAddress == nil {
		return ""
	}
	return *t.DesignatedRootAddress
}

// GetDesignatedRootPriority retrieves the value of the leaf DesignatedRootPriority from the Stp_Vlan
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if DesignatedRootPriority is set, it can safely use t.GetDesignatedRootPriority()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.DesignatedRootPriority == nil'
// before retrieving the leaf's value.
func (t *Stp_Vlan) GetDesignatedRootPriority() uint32 {
	if t == nil || t.DesignatedRootPriority == nil {
		return 0
	}
	return *t.DesignatedRootPriority
}

// GetForwardingDelay retrieves the value of the leaf ForwardingDelay from the Stp_Vlan
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ForwardingDelay is set, it can safely use t.GetForwardingDelay()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ForwardingDelay == nil'
// before retrieving the leaf's value.
func (t *Stp_Vlan) GetForwardingDelay() uint8 {
	if t == nil || t.ForwardingDelay == nil {
		return 0
	}
	return *t.ForwardingDelay
}

// GetHelloTime retrieves the value of the leaf HelloTime from the Stp_Vlan
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if HelloTime is set, it can safely use t.GetHelloTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.HelloTime == nil'
// before retrieving the leaf's value.
func (t *Stp_Vlan) GetHelloTime() uint8 {
	if t == nil || t.HelloTime == nil {
		return 0
	}
	return *t.HelloTime
}

// GetHoldCount retrieves the value of the leaf HoldCount from the Stp_Vlan
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if HoldCount is set, it can safely use t.GetHoldCount()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.HoldCount == nil'
// before retrieving the leaf's value.
func (t *Stp_Vlan) GetHoldCount() uint8 {
	if t == nil || t.HoldCount == nil {
		return 6
	}
	return *t.HoldCount
}

// GetHoldTime retrieves the value of the leaf HoldTime from the Stp_Vlan
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if HoldTime is set, it can safely use t.GetHoldTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.HoldTime == nil'
// before retrieving the leaf's value.
func (t *Stp_Vlan) GetHoldTime() uint8 {
	if t == nil || t.HoldTime == nil {
		return 0
	}
	return *t.HoldTime
}

// GetLastTopologyChange retrieves the value of the leaf LastTopologyChange from the Stp_Vlan
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LastTopologyChange is set, it can safely use t.GetLastTopologyChange()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LastTopologyChange == nil'
// before retrieving the leaf's value.
func (t *Stp_Vlan) GetLastTopologyChange() uint64 {
	if t == nil || t.LastTopologyChange == nil {
		return 0
	}
	return *t.LastTopologyChange
}

// GetMaxAge retrieves the value of the leaf MaxAge from the Stp_Vlan
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaxAge is set, it can safely use t.GetMaxAge()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaxAge == nil'
// before retrieving the leaf's value.
func (t *Stp_Vlan) GetMaxAge() uint8 {
	if t == nil || t.MaxAge == nil {
		return 0
	}
	return *t.MaxAge
}

// GetRootCost retrieves the value of the leaf RootCost from the Stp_Vlan
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RootCost is set, it can safely use t.GetRootCost()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RootCost == nil'
// before retrieving the leaf's value.
func (t *Stp_Vlan) GetRootCost() uint32 {
	if t == nil || t.RootCost == nil {
		return 0
	}
	return *t.RootCost
}

// GetRootPort retrieves the value of the leaf RootPort from the Stp_Vlan
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RootPort is set, it can safely use t.GetRootPort()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RootPort == nil'
// before retrieving the leaf's value.
func (t *Stp_Vlan) GetRootPort() uint16 {
	if t == nil || t.RootPort == nil {
		return 0
	}
	return *t.RootPort
}

// GetTopologyChanges retrieves the value of the leaf TopologyChanges from the Stp_Vlan
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if TopologyChanges is set, it can safely use t.GetTopologyChanges()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.TopologyChanges == nil'
// before retrieving the leaf's value.
func (t *Stp_Vlan) GetTopologyChanges() uint64 {
	if t == nil || t.TopologyChanges == nil {
		return 0
	}
	return *t.TopologyChanges
}

// GetVlanId retrieves the value of the leaf VlanId from the Stp_Vlan
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if VlanId is set, it can safely use t.GetVlanId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.VlanId == nil'
// before retrieving the leaf's value.
func (t *Stp_Vlan) GetVlanId() uint16 {
	if t == nil || t.VlanId == nil {
		return 0
	}
	return *t.VlanId
}

// ΛListKeyMap returns the keys of the Stp_Vlan struct, which is a YANG list entry.
func (t *Stp_Vlan) ΛListKeyMap() (map[string]interface{}, error) {
	if t.VlanId == nil {
		return nil, fmt.Errorf("nil value for key VlanId")
	}

	return map[string]interface{}{
		"vlan-id": *t.VlanId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Stp_Vlan) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Stp_Vlan"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Stp_Vlan) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Stp_Vlan_Interface represents the /openconfig-spanning-tree/stp/rapid-pvst/vlan/interfaces/interface YANG schema element.
type Stp_Vlan_Interface struct {
	ΛMetadata                 []ygot.Annotation                            `path:"@" ygotAnnotation:"true"`
	Cost                      *uint32                                      `path:"config/cost" module:"openconfig-spanning-tree"`
	ΛCost                     []ygot.Annotation                            `path:"config/@cost" ygotAnnotation:"true"`
	Counters                  *Stp_Vlan_Interface_Counters                 `path:"state/counters" module:"openconfig-spanning-tree"`
	ΛCounters                 []ygot.Annotation                            `path:"state/@counters" ygotAnnotation:"true"`
	DesignatedBridgeAddress   *string                                      `path:"state/designated-bridge-address" module:"openconfig-spanning-tree"`
	ΛDesignatedBridgeAddress  []ygot.Annotation                            `path:"state/@designated-bridge-address" ygotAnnotation:"true"`
	DesignatedBridgePriority  *uint32                                      `path:"state/designated-bridge-priority" module:"openconfig-spanning-tree"`
	ΛDesignatedBridgePriority []ygot.Annotation                            `path:"state/@designated-bridge-priority" ygotAnnotation:"true"`
	DesignatedCost            *uint32                                      `path:"state/designated-cost" module:"openconfig-spanning-tree"`
	ΛDesignatedCost           []ygot.Annotation                            `path:"state/@designated-cost" ygotAnnotation:"true"`
	DesignatedPortNum         *uint16                                      `path:"state/designated-port-num" module:"openconfig-spanning-tree"`
	ΛDesignatedPortNum        []ygot.Annotation                            `path:"state/@designated-port-num" ygotAnnotation:"true"`
	DesignatedPortPriority    *uint8                                       `path:"state/designated-port-priority" module:"openconfig-spanning-tree"`
	ΛDesignatedPortPriority   []ygot.Annotation                            `path:"state/@designated-port-priority" ygotAnnotation:"true"`
	DesignatedRootAddress     *string                                      `path:"state/designated-root-address" module:"openconfig-spanning-tree"`
	ΛDesignatedRootAddress    []ygot.Annotation                            `path:"state/@designated-root-address" ygotAnnotation:"true"`
	DesignatedRootPriority    *uint32                                      `path:"state/designated-root-priority" module:"openconfig-spanning-tree"`
	ΛDesignatedRootPriority   []ygot.Annotation                            `path:"state/@designated-root-priority" ygotAnnotation:"true"`
	ForwardTransisitions      *uint64                                      `path:"state/forward-transisitions" module:"openconfig-spanning-tree"`
	ΛForwardTransisitions     []ygot.Annotation                            `path:"state/@forward-transisitions" ygotAnnotation:"true"`
	Name                      *string                                      `path:"config/name|name" module:"openconfig-spanning-tree"`
	ΛName                     []ygot.Annotation                            `path:"config/@name|@name" ygotAnnotation:"true"`
	PortNum                   *uint16                                      `path:"state/port-num" module:"openconfig-spanning-tree"`
	ΛPortNum                  []ygot.Annotation                            `path:"state/@port-num" ygotAnnotation:"true"`
	PortPriority              *uint8                                       `path:"config/port-priority" module:"openconfig-spanning-tree"`
	ΛPortPriority             []ygot.Annotation                            `path:"config/@port-priority" ygotAnnotation:"true"`
	PortState                 E_OpenconfigSpanningTreeTypes_STP_PORT_STATE `path:"state/port-state" module:"openconfig-spanning-tree"`
	ΛPortState                []ygot.Annotation                            `path:"state/@port-state" ygotAnnotation:"true"`
	Role                      E_OpenconfigSpanningTreeTypes_STP_PORT_ROLE  `path:"state/role" module:"openconfig-spanning-tree"`
	ΛRole                     []ygot.Annotation                            `path:"state/@role" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Stp_Vlan_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Stp_Vlan_Interface) IsYANGGoStruct() {}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *Stp_Vlan_Interface) GetOrCreateCounters() *Stp_Vlan_Interface_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &Stp_Vlan_Interface_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from Stp_Vlan_Interface. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Stp_Vlan_Interface) GetCounters() *Stp_Vlan_Interface_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetCost retrieves the value of the leaf Cost from the Stp_Vlan_Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Cost is set, it can safely use t.GetCost()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Cost == nil'
// before retrieving the leaf's value.
func (t *Stp_Vlan_Interface) GetCost() uint32 {
	if t == nil || t.Cost == nil {
		return 0
	}
	return *t.Cost
}

// GetDesignatedBridgeAddress retrieves the value of the leaf DesignatedBridgeAddress from the Stp_Vlan_Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if DesignatedBridgeAddress is set, it can safely use t.GetDesignatedBridgeAddress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.DesignatedBridgeAddress == nil'
// before retrieving the leaf's value.
func (t *Stp_Vlan_Interface) GetDesignatedBridgeAddress() string {
	if t == nil || t.DesignatedBridgeAddress == nil {
		return ""
	}
	return *t.DesignatedBridgeAddress
}

// GetDesignatedBridgePriority retrieves the value of the leaf DesignatedBridgePriority from the Stp_Vlan_Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if DesignatedBridgePriority is set, it can safely use t.GetDesignatedBridgePriority()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.DesignatedBridgePriority == nil'
// before retrieving the leaf's value.
func (t *Stp_Vlan_Interface) GetDesignatedBridgePriority() uint32 {
	if t == nil || t.DesignatedBridgePriority == nil {
		return 0
	}
	return *t.DesignatedBridgePriority
}

// GetDesignatedCost retrieves the value of the leaf DesignatedCost from the Stp_Vlan_Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if DesignatedCost is set, it can safely use t.GetDesignatedCost()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.DesignatedCost == nil'
// before retrieving the leaf's value.
func (t *Stp_Vlan_Interface) GetDesignatedCost() uint32 {
	if t == nil || t.DesignatedCost == nil {
		return 0
	}
	return *t.DesignatedCost
}

// GetDesignatedPortNum retrieves the value of the leaf DesignatedPortNum from the Stp_Vlan_Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if DesignatedPortNum is set, it can safely use t.GetDesignatedPortNum()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.DesignatedPortNum == nil'
// before retrieving the leaf's value.
func (t *Stp_Vlan_Interface) GetDesignatedPortNum() uint16 {
	if t == nil || t.DesignatedPortNum == nil {
		return 0
	}
	return *t.DesignatedPortNum
}

// GetDesignatedPortPriority retrieves the value of the leaf DesignatedPortPriority from the Stp_Vlan_Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if DesignatedPortPriority is set, it can safely use t.GetDesignatedPortPriority()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.DesignatedPortPriority == nil'
// before retrieving the leaf's value.
func (t *Stp_Vlan_Interface) GetDesignatedPortPriority() uint8 {
	if t == nil || t.DesignatedPortPriority == nil {
		return 0
	}
	return *t.DesignatedPortPriority
}

// GetDesignatedRootAddress retrieves the value of the leaf DesignatedRootAddress from the Stp_Vlan_Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if DesignatedRootAddress is set, it can safely use t.GetDesignatedRootAddress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.DesignatedRootAddress == nil'
// before retrieving the leaf's value.
func (t *Stp_Vlan_Interface) GetDesignatedRootAddress() string {
	if t == nil || t.DesignatedRootAddress == nil {
		return ""
	}
	return *t.DesignatedRootAddress
}

// GetDesignatedRootPriority retrieves the value of the leaf DesignatedRootPriority from the Stp_Vlan_Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if DesignatedRootPriority is set, it can safely use t.GetDesignatedRootPriority()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.DesignatedRootPriority == nil'
// before retrieving the leaf's value.
func (t *Stp_Vlan_Interface) GetDesignatedRootPriority() uint32 {
	if t == nil || t.DesignatedRootPriority == nil {
		return 0
	}
	return *t.DesignatedRootPriority
}

// GetForwardTransisitions retrieves the value of the leaf ForwardTransisitions from the Stp_Vlan_Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ForwardTransisitions is set, it can safely use t.GetForwardTransisitions()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ForwardTransisitions == nil'
// before retrieving the leaf's value.
func (t *Stp_Vlan_Interface) GetForwardTransisitions() uint64 {
	if t == nil || t.ForwardTransisitions == nil {
		return 0
	}
	return *t.ForwardTransisitions
}

// GetName retrieves the value of the leaf Name from the Stp_Vlan_Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Name is set, it can safely use t.GetName()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Name == nil'
// before retrieving the leaf's value.
func (t *Stp_Vlan_Interface) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPortNum retrieves the value of the leaf PortNum from the Stp_Vlan_Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PortNum is set, it can safely use t.GetPortNum()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PortNum == nil'
// before retrieving the leaf's value.
func (t *Stp_Vlan_Interface) GetPortNum() uint16 {
	if t == nil || t.PortNum == nil {
		return 0
	}
	return *t.PortNum
}

// GetPortPriority retrieves the value of the leaf PortPriority from the Stp_Vlan_Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PortPriority is set, it can safely use t.GetPortPriority()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PortPriority == nil'
// before retrieving the leaf's value.
func (t *Stp_Vlan_Interface) GetPortPriority() uint8 {
	if t == nil || t.PortPriority == nil {
		return 0
	}
	return *t.PortPriority
}

// GetPortState retrieves the value of the leaf PortState from the Stp_Vlan_Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PortState is set, it can safely use t.GetPortState()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PortState == nil'
// before retrieving the leaf's value.
func (t *Stp_Vlan_Interface) GetPortState() E_OpenconfigSpanningTreeTypes_STP_PORT_STATE {
	if t == nil || t.PortState == 0 {
		return 0
	}
	return t.PortState
}

// GetRole retrieves the value of the leaf Role from the Stp_Vlan_Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Role is set, it can safely use t.GetRole()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Role == nil'
// before retrieving the leaf's value.
func (t *Stp_Vlan_Interface) GetRole() E_OpenconfigSpanningTreeTypes_STP_PORT_ROLE {
	if t == nil || t.Role == 0 {
		return 0
	}
	return t.Role
}

// ΛListKeyMap returns the keys of the Stp_Vlan_Interface struct, which is a YANG list entry.
func (t *Stp_Vlan_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Stp_Vlan_Interface) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Stp_Vlan_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Stp_Vlan_Interface) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Stp_Vlan_Interface_Counters represents the /openconfig-spanning-tree/stp/rapid-pvst/vlan/interfaces/interface/state/counters YANG schema element.
type Stp_Vlan_Interface_Counters struct {
	ΛMetadata     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	BpduReceived  *uint64           `path:"bpdu-received" module:"openconfig-spanning-tree"`
	ΛBpduReceived []ygot.Annotation `path:"@bpdu-received" ygotAnnotation:"true"`
	BpduSent      *uint64           `path:"bpdu-sent" module:"openconfig-spanning-tree"`
	ΛBpduSent     []ygot.Annotation `path:"@bpdu-sent" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Stp_Vlan_Interface_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Stp_Vlan_Interface_Counters) IsYANGGoStruct() {}

// GetBpduReceived retrieves the value of the leaf BpduReceived from the Stp_Vlan_Interface_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if BpduReceived is set, it can safely use t.GetBpduReceived()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.BpduReceived == nil'
// before retrieving the leaf's value.
func (t *Stp_Vlan_Interface_Counters) GetBpduReceived() uint64 {
	if t == nil || t.BpduReceived == nil {
		return 0
	}
	return *t.BpduReceived
}

// GetBpduSent retrieves the value of the leaf BpduSent from the Stp_Vlan_Interface_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if BpduSent is set, it can safely use t.GetBpduSent()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.BpduSent == nil'
// before retrieving the leaf's value.
func (t *Stp_Vlan_Interface_Counters) GetBpduSent() uint64 {
	if t == nil || t.BpduSent == nil {
		return 0
	}
	return *t.BpduSent
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Stp_Vlan_Interface_Counters) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Stp_Vlan_Interface_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Stp_Vlan_Interface_Counters) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// E_IETFInterfaces_InterfaceType is a derived int64 type which is used to represent
// the enumerated node IETFInterfaces_InterfaceType. An additional value named
// IETFInterfaces_InterfaceType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFInterfaces_InterfaceType int64

// IsYANGGoEnum ensures that IETFInterfaces_InterfaceType implements the yang.GoEnum
// interface. This ensures that IETFInterfaces_InterfaceType can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFInterfaces_InterfaceType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IETFInterfaces_InterfaceType.
func (E_IETFInterfaces_InterfaceType) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum }

const (
	// IETFInterfaces_InterfaceType_UNSET corresponds to the value UNSET of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_UNSET E_IETFInterfaces_InterfaceType = 0
	// IETFInterfaces_InterfaceType_a12MppSwitch corresponds to the value a12MppSwitch of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_a12MppSwitch E_IETFInterfaces_InterfaceType = 1
	// IETFInterfaces_InterfaceType_aal2 corresponds to the value aal2 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_aal2 E_IETFInterfaces_InterfaceType = 2
	// IETFInterfaces_InterfaceType_aal5 corresponds to the value aal5 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_aal5 E_IETFInterfaces_InterfaceType = 3
	// IETFInterfaces_InterfaceType_actelisMetaLOOP corresponds to the value actelisMetaLOOP of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_actelisMetaLOOP E_IETFInterfaces_InterfaceType = 4
	// IETFInterfaces_InterfaceType_adsl corresponds to the value adsl of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_adsl E_IETFInterfaces_InterfaceType = 5
	// IETFInterfaces_InterfaceType_adsl2 corresponds to the value adsl2 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_adsl2 E_IETFInterfaces_InterfaceType = 6
	// IETFInterfaces_InterfaceType_adsl2plus corresponds to the value adsl2plus of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_adsl2plus E_IETFInterfaces_InterfaceType = 7
	// IETFInterfaces_InterfaceType_aflane8023 corresponds to the value aflane8023 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_aflane8023 E_IETFInterfaces_InterfaceType = 8
	// IETFInterfaces_InterfaceType_aflane8025 corresponds to the value aflane8025 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_aflane8025 E_IETFInterfaces_InterfaceType = 9
	// IETFInterfaces_InterfaceType_aluELP corresponds to the value aluELP of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_aluELP E_IETFInterfaces_InterfaceType = 10
	// IETFInterfaces_InterfaceType_aluEpon corresponds to the value aluEpon of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_aluEpon E_IETFInterfaces_InterfaceType = 11
	// IETFInterfaces_InterfaceType_aluEponLogicalLink corresponds to the value aluEponLogicalLink of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_aluEponLogicalLink E_IETFInterfaces_InterfaceType = 12
	// IETFInterfaces_InterfaceType_aluEponOnu corresponds to the value aluEponOnu of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_aluEponOnu E_IETFInterfaces_InterfaceType = 13
	// IETFInterfaces_InterfaceType_aluEponPhysicalUni corresponds to the value aluEponPhysicalUni of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_aluEponPhysicalUni E_IETFInterfaces_InterfaceType = 14
	// IETFInterfaces_InterfaceType_aluGponOnu corresponds to the value aluGponOnu of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_aluGponOnu E_IETFInterfaces_InterfaceType = 15
	// IETFInterfaces_InterfaceType_aluGponPhysicalUni corresponds to the value aluGponPhysicalUni of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_aluGponPhysicalUni E_IETFInterfaces_InterfaceType = 16
	// IETFInterfaces_InterfaceType_arap corresponds to the value arap of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_arap E_IETFInterfaces_InterfaceType = 17
	// IETFInterfaces_InterfaceType_arcnet corresponds to the value arcnet of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_arcnet E_IETFInterfaces_InterfaceType = 18
	// IETFInterfaces_InterfaceType_arcnetPlus corresponds to the value arcnetPlus of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_arcnetPlus E_IETFInterfaces_InterfaceType = 19
	// IETFInterfaces_InterfaceType_async corresponds to the value async of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_async E_IETFInterfaces_InterfaceType = 20
	// IETFInterfaces_InterfaceType_atm corresponds to the value atm of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_atm E_IETFInterfaces_InterfaceType = 21
	// IETFInterfaces_InterfaceType_atmDxi corresponds to the value atmDxi of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_atmDxi E_IETFInterfaces_InterfaceType = 22
	// IETFInterfaces_InterfaceType_atmFuni corresponds to the value atmFuni of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_atmFuni E_IETFInterfaces_InterfaceType = 23
	// IETFInterfaces_InterfaceType_atmIma corresponds to the value atmIma of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_atmIma E_IETFInterfaces_InterfaceType = 24
	// IETFInterfaces_InterfaceType_atmLogical corresponds to the value atmLogical of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_atmLogical E_IETFInterfaces_InterfaceType = 25
	// IETFInterfaces_InterfaceType_atmRadio corresponds to the value atmRadio of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_atmRadio E_IETFInterfaces_InterfaceType = 26
	// IETFInterfaces_InterfaceType_atmSubInterface corresponds to the value atmSubInterface of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_atmSubInterface E_IETFInterfaces_InterfaceType = 27
	// IETFInterfaces_InterfaceType_atmVciEndPt corresponds to the value atmVciEndPt of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_atmVciEndPt E_IETFInterfaces_InterfaceType = 28
	// IETFInterfaces_InterfaceType_atmVirtual corresponds to the value atmVirtual of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_atmVirtual E_IETFInterfaces_InterfaceType = 29
	// IETFInterfaces_InterfaceType_atmbond corresponds to the value atmbond of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_atmbond E_IETFInterfaces_InterfaceType = 30
	// IETFInterfaces_InterfaceType_aviciOpticalEther corresponds to the value aviciOpticalEther of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_aviciOpticalEther E_IETFInterfaces_InterfaceType = 31
	// IETFInterfaces_InterfaceType_basicISDN corresponds to the value basicISDN of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_basicISDN E_IETFInterfaces_InterfaceType = 32
	// IETFInterfaces_InterfaceType_bgppolicyaccounting corresponds to the value bgppolicyaccounting of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_bgppolicyaccounting E_IETFInterfaces_InterfaceType = 33
	// IETFInterfaces_InterfaceType_bits corresponds to the value bits of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_bits E_IETFInterfaces_InterfaceType = 34
	// IETFInterfaces_InterfaceType_bridge corresponds to the value bridge of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_bridge E_IETFInterfaces_InterfaceType = 35
	// IETFInterfaces_InterfaceType_bsc corresponds to the value bsc of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_bsc E_IETFInterfaces_InterfaceType = 36
	// IETFInterfaces_InterfaceType_cableDownstreamRfPort corresponds to the value cableDownstreamRfPort of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_cableDownstreamRfPort E_IETFInterfaces_InterfaceType = 37
	// IETFInterfaces_InterfaceType_capwapDot11Bss corresponds to the value capwapDot11Bss of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_capwapDot11Bss E_IETFInterfaces_InterfaceType = 38
	// IETFInterfaces_InterfaceType_capwapDot11Profile corresponds to the value capwapDot11Profile of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_capwapDot11Profile E_IETFInterfaces_InterfaceType = 39
	// IETFInterfaces_InterfaceType_capwapWtpVirtualRadio corresponds to the value capwapWtpVirtualRadio of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_capwapWtpVirtualRadio E_IETFInterfaces_InterfaceType = 40
	// IETFInterfaces_InterfaceType_cblVectaStar corresponds to the value cblVectaStar of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_cblVectaStar E_IETFInterfaces_InterfaceType = 41
	// IETFInterfaces_InterfaceType_cctEmul corresponds to the value cctEmul of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_cctEmul E_IETFInterfaces_InterfaceType = 42
	// IETFInterfaces_InterfaceType_ces corresponds to the value ces of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ces E_IETFInterfaces_InterfaceType = 43
	// IETFInterfaces_InterfaceType_channel corresponds to the value channel of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_channel E_IETFInterfaces_InterfaceType = 44
	// IETFInterfaces_InterfaceType_ciscoISLvlan corresponds to the value ciscoISLvlan of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ciscoISLvlan E_IETFInterfaces_InterfaceType = 45
	// IETFInterfaces_InterfaceType_cnr corresponds to the value cnr of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_cnr E_IETFInterfaces_InterfaceType = 46
	// IETFInterfaces_InterfaceType_coffee corresponds to the value coffee of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_coffee E_IETFInterfaces_InterfaceType = 47
	// IETFInterfaces_InterfaceType_compositeLink corresponds to the value compositeLink of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_compositeLink E_IETFInterfaces_InterfaceType = 48
	// IETFInterfaces_InterfaceType_dcn corresponds to the value dcn of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_dcn E_IETFInterfaces_InterfaceType = 49
	// IETFInterfaces_InterfaceType_ddnX25 corresponds to the value ddnX25 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ddnX25 E_IETFInterfaces_InterfaceType = 50
	// IETFInterfaces_InterfaceType_digitalPowerline corresponds to the value digitalPowerline of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_digitalPowerline E_IETFInterfaces_InterfaceType = 51
	// IETFInterfaces_InterfaceType_digitalWrapperOverheadChannel corresponds to the value digitalWrapperOverheadChannel of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_digitalWrapperOverheadChannel E_IETFInterfaces_InterfaceType = 52
	// IETFInterfaces_InterfaceType_dlsw corresponds to the value dlsw of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_dlsw E_IETFInterfaces_InterfaceType = 53
	// IETFInterfaces_InterfaceType_docsCableDownstream corresponds to the value docsCableDownstream of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_docsCableDownstream E_IETFInterfaces_InterfaceType = 54
	// IETFInterfaces_InterfaceType_docsCableMCmtsDownstream corresponds to the value docsCableMCmtsDownstream of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_docsCableMCmtsDownstream E_IETFInterfaces_InterfaceType = 55
	// IETFInterfaces_InterfaceType_docsCableMaclayer corresponds to the value docsCableMaclayer of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_docsCableMaclayer E_IETFInterfaces_InterfaceType = 56
	// IETFInterfaces_InterfaceType_docsCableNdf corresponds to the value docsCableNdf of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_docsCableNdf E_IETFInterfaces_InterfaceType = 57
	// IETFInterfaces_InterfaceType_docsCableNdr corresponds to the value docsCableNdr of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_docsCableNdr E_IETFInterfaces_InterfaceType = 58
	// IETFInterfaces_InterfaceType_docsCableScte55d1FwdOob corresponds to the value docsCableScte55d1FwdOob of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_docsCableScte55d1FwdOob E_IETFInterfaces_InterfaceType = 59
	// IETFInterfaces_InterfaceType_docsCableScte55d1RetOob corresponds to the value docsCableScte55d1RetOob of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_docsCableScte55d1RetOob E_IETFInterfaces_InterfaceType = 60
	// IETFInterfaces_InterfaceType_docsCableScte55d2DsOob corresponds to the value docsCableScte55d2DsOob of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_docsCableScte55d2DsOob E_IETFInterfaces_InterfaceType = 61
	// IETFInterfaces_InterfaceType_docsCableScte55d2UsOob corresponds to the value docsCableScte55d2UsOob of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_docsCableScte55d2UsOob E_IETFInterfaces_InterfaceType = 62
	// IETFInterfaces_InterfaceType_docsCableUpstream corresponds to the value docsCableUpstream of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_docsCableUpstream E_IETFInterfaces_InterfaceType = 63
	// IETFInterfaces_InterfaceType_docsCableUpstreamChannel corresponds to the value docsCableUpstreamChannel of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_docsCableUpstreamChannel E_IETFInterfaces_InterfaceType = 64
	// IETFInterfaces_InterfaceType_docsCableUpstreamRfPort corresponds to the value docsCableUpstreamRfPort of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_docsCableUpstreamRfPort E_IETFInterfaces_InterfaceType = 65
	// IETFInterfaces_InterfaceType_docsOfdmDownstream corresponds to the value docsOfdmDownstream of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_docsOfdmDownstream E_IETFInterfaces_InterfaceType = 66
	// IETFInterfaces_InterfaceType_docsOfdmaUpstream corresponds to the value docsOfdmaUpstream of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_docsOfdmaUpstream E_IETFInterfaces_InterfaceType = 67
	// IETFInterfaces_InterfaceType_ds0 corresponds to the value ds0 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ds0 E_IETFInterfaces_InterfaceType = 68
	// IETFInterfaces_InterfaceType_ds0Bundle corresponds to the value ds0Bundle of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ds0Bundle E_IETFInterfaces_InterfaceType = 69
	// IETFInterfaces_InterfaceType_ds1 corresponds to the value ds1 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ds1 E_IETFInterfaces_InterfaceType = 70
	// IETFInterfaces_InterfaceType_ds1FDL corresponds to the value ds1FDL of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ds1FDL E_IETFInterfaces_InterfaceType = 71
	// IETFInterfaces_InterfaceType_ds3 corresponds to the value ds3 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ds3 E_IETFInterfaces_InterfaceType = 72
	// IETFInterfaces_InterfaceType_dtm corresponds to the value dtm of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_dtm E_IETFInterfaces_InterfaceType = 73
	// IETFInterfaces_InterfaceType_dvbAsiIn corresponds to the value dvbAsiIn of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_dvbAsiIn E_IETFInterfaces_InterfaceType = 74
	// IETFInterfaces_InterfaceType_dvbAsiOut corresponds to the value dvbAsiOut of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_dvbAsiOut E_IETFInterfaces_InterfaceType = 75
	// IETFInterfaces_InterfaceType_dvbRccDownstream corresponds to the value dvbRccDownstream of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_dvbRccDownstream E_IETFInterfaces_InterfaceType = 76
	// IETFInterfaces_InterfaceType_dvbRccMacLayer corresponds to the value dvbRccMacLayer of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_dvbRccMacLayer E_IETFInterfaces_InterfaceType = 77
	// IETFInterfaces_InterfaceType_dvbRccUpstream corresponds to the value dvbRccUpstream of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_dvbRccUpstream E_IETFInterfaces_InterfaceType = 78
	// IETFInterfaces_InterfaceType_dvbRcsMacLayer corresponds to the value dvbRcsMacLayer of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_dvbRcsMacLayer E_IETFInterfaces_InterfaceType = 79
	// IETFInterfaces_InterfaceType_dvbRcsTdma corresponds to the value dvbRcsTdma of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_dvbRcsTdma E_IETFInterfaces_InterfaceType = 80
	// IETFInterfaces_InterfaceType_dvbTdm corresponds to the value dvbTdm of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_dvbTdm E_IETFInterfaces_InterfaceType = 81
	// IETFInterfaces_InterfaceType_e1 corresponds to the value e1 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_e1 E_IETFInterfaces_InterfaceType = 82
	// IETFInterfaces_InterfaceType_econet corresponds to the value econet of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_econet E_IETFInterfaces_InterfaceType = 83
	// IETFInterfaces_InterfaceType_eon corresponds to the value eon of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_eon E_IETFInterfaces_InterfaceType = 84
	// IETFInterfaces_InterfaceType_eplrs corresponds to the value eplrs of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_eplrs E_IETFInterfaces_InterfaceType = 85
	// IETFInterfaces_InterfaceType_escon corresponds to the value escon of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_escon E_IETFInterfaces_InterfaceType = 86
	// IETFInterfaces_InterfaceType_ethernet3Mbit corresponds to the value ethernet3Mbit of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ethernet3Mbit E_IETFInterfaces_InterfaceType = 87
	// IETFInterfaces_InterfaceType_ethernetCsmacd corresponds to the value ethernetCsmacd of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ethernetCsmacd E_IETFInterfaces_InterfaceType = 88
	// IETFInterfaces_InterfaceType_fast corresponds to the value fast of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_fast E_IETFInterfaces_InterfaceType = 89
	// IETFInterfaces_InterfaceType_fastEther corresponds to the value fastEther of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_fastEther E_IETFInterfaces_InterfaceType = 90
	// IETFInterfaces_InterfaceType_fastEtherFX corresponds to the value fastEtherFX of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_fastEtherFX E_IETFInterfaces_InterfaceType = 91
	// IETFInterfaces_InterfaceType_fastdsl corresponds to the value fastdsl of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_fastdsl E_IETFInterfaces_InterfaceType = 92
	// IETFInterfaces_InterfaceType_fcipLink corresponds to the value fcipLink of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_fcipLink E_IETFInterfaces_InterfaceType = 93
	// IETFInterfaces_InterfaceType_fddi corresponds to the value fddi of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_fddi E_IETFInterfaces_InterfaceType = 94
	// IETFInterfaces_InterfaceType_fibreChannel corresponds to the value fibreChannel of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_fibreChannel E_IETFInterfaces_InterfaceType = 95
	// IETFInterfaces_InterfaceType_frDlciEndPt corresponds to the value frDlciEndPt of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_frDlciEndPt E_IETFInterfaces_InterfaceType = 96
	// IETFInterfaces_InterfaceType_frForward corresponds to the value frForward of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_frForward E_IETFInterfaces_InterfaceType = 97
	// IETFInterfaces_InterfaceType_frameRelay corresponds to the value frameRelay of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_frameRelay E_IETFInterfaces_InterfaceType = 98
	// IETFInterfaces_InterfaceType_frameRelayInterconnect corresponds to the value frameRelayInterconnect of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_frameRelayInterconnect E_IETFInterfaces_InterfaceType = 99
	// IETFInterfaces_InterfaceType_frameRelayMPI corresponds to the value frameRelayMPI of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_frameRelayMPI E_IETFInterfaces_InterfaceType = 100
	// IETFInterfaces_InterfaceType_frameRelayService corresponds to the value frameRelayService of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_frameRelayService E_IETFInterfaces_InterfaceType = 101
	// IETFInterfaces_InterfaceType_frf16MfrBundle corresponds to the value frf16MfrBundle of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_frf16MfrBundle E_IETFInterfaces_InterfaceType = 102
	// IETFInterfaces_InterfaceType_g703at2mb corresponds to the value g703at2mb of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_g703at2mb E_IETFInterfaces_InterfaceType = 103
	// IETFInterfaces_InterfaceType_g703at64k corresponds to the value g703at64k of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_g703at64k E_IETFInterfaces_InterfaceType = 104
	// IETFInterfaces_InterfaceType_g9981 corresponds to the value g9981 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_g9981 E_IETFInterfaces_InterfaceType = 105
	// IETFInterfaces_InterfaceType_g9982 corresponds to the value g9982 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_g9982 E_IETFInterfaces_InterfaceType = 106
	// IETFInterfaces_InterfaceType_g9983 corresponds to the value g9983 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_g9983 E_IETFInterfaces_InterfaceType = 107
	// IETFInterfaces_InterfaceType_gfast corresponds to the value gfast of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_gfast E_IETFInterfaces_InterfaceType = 108
	// IETFInterfaces_InterfaceType_gfp corresponds to the value gfp of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_gfp E_IETFInterfaces_InterfaceType = 109
	// IETFInterfaces_InterfaceType_gigabitEthernet corresponds to the value gigabitEthernet of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_gigabitEthernet E_IETFInterfaces_InterfaceType = 110
	// IETFInterfaces_InterfaceType_gpon corresponds to the value gpon of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_gpon E_IETFInterfaces_InterfaceType = 111
	// IETFInterfaces_InterfaceType_gr303IDT corresponds to the value gr303IDT of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_gr303IDT E_IETFInterfaces_InterfaceType = 112
	// IETFInterfaces_InterfaceType_gr303RDT corresponds to the value gr303RDT of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_gr303RDT E_IETFInterfaces_InterfaceType = 113
	// IETFInterfaces_InterfaceType_gtp corresponds to the value gtp of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_gtp E_IETFInterfaces_InterfaceType = 114
	// IETFInterfaces_InterfaceType_h323Gatekeeper corresponds to the value h323Gatekeeper of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_h323Gatekeeper E_IETFInterfaces_InterfaceType = 115
	// IETFInterfaces_InterfaceType_h323Proxy corresponds to the value h323Proxy of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_h323Proxy E_IETFInterfaces_InterfaceType = 116
	// IETFInterfaces_InterfaceType_hdh1822 corresponds to the value hdh1822 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_hdh1822 E_IETFInterfaces_InterfaceType = 117
	// IETFInterfaces_InterfaceType_hdlc corresponds to the value hdlc of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_hdlc E_IETFInterfaces_InterfaceType = 118
	// IETFInterfaces_InterfaceType_hdsl2 corresponds to the value hdsl2 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_hdsl2 E_IETFInterfaces_InterfaceType = 119
	// IETFInterfaces_InterfaceType_hiperlan2 corresponds to the value hiperlan2 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_hiperlan2 E_IETFInterfaces_InterfaceType = 120
	// IETFInterfaces_InterfaceType_hippi corresponds to the value hippi of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_hippi E_IETFInterfaces_InterfaceType = 121
	// IETFInterfaces_InterfaceType_hippiInterface corresponds to the value hippiInterface of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_hippiInterface E_IETFInterfaces_InterfaceType = 122
	// IETFInterfaces_InterfaceType_homepna corresponds to the value homepna of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_homepna E_IETFInterfaces_InterfaceType = 123
	// IETFInterfaces_InterfaceType_hostPad corresponds to the value hostPad of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_hostPad E_IETFInterfaces_InterfaceType = 124
	// IETFInterfaces_InterfaceType_hssi corresponds to the value hssi of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_hssi E_IETFInterfaces_InterfaceType = 125
	// IETFInterfaces_InterfaceType_hyperchannel corresponds to the value hyperchannel of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_hyperchannel E_IETFInterfaces_InterfaceType = 126
	// IETFInterfaces_InterfaceType_iana_interface_type corresponds to the value iana_interface_type of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_iana_interface_type E_IETFInterfaces_InterfaceType = 127
	// IETFInterfaces_InterfaceType_ibm370parChan corresponds to the value ibm370parChan of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ibm370parChan E_IETFInterfaces_InterfaceType = 128
	// IETFInterfaces_InterfaceType_idsl corresponds to the value idsl of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_idsl E_IETFInterfaces_InterfaceType = 129
	// IETFInterfaces_InterfaceType_ieee1394 corresponds to the value ieee1394 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ieee1394 E_IETFInterfaces_InterfaceType = 130
	// IETFInterfaces_InterfaceType_ieee80211 corresponds to the value ieee80211 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ieee80211 E_IETFInterfaces_InterfaceType = 131
	// IETFInterfaces_InterfaceType_ieee80212 corresponds to the value ieee80212 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ieee80212 E_IETFInterfaces_InterfaceType = 132
	// IETFInterfaces_InterfaceType_ieee802154 corresponds to the value ieee802154 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ieee802154 E_IETFInterfaces_InterfaceType = 133
	// IETFInterfaces_InterfaceType_ieee80216WMAN corresponds to the value ieee80216WMAN of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ieee80216WMAN E_IETFInterfaces_InterfaceType = 134
	// IETFInterfaces_InterfaceType_ieee8023adLag corresponds to the value ieee8023adLag of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ieee8023adLag E_IETFInterfaces_InterfaceType = 135
	// IETFInterfaces_InterfaceType_if_gsn corresponds to the value if_gsn of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_if_gsn E_IETFInterfaces_InterfaceType = 136
	// IETFInterfaces_InterfaceType_ifPwType corresponds to the value ifPwType of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ifPwType E_IETFInterfaces_InterfaceType = 137
	// IETFInterfaces_InterfaceType_ifVfiType corresponds to the value ifVfiType of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ifVfiType E_IETFInterfaces_InterfaceType = 138
	// IETFInterfaces_InterfaceType_ilan corresponds to the value ilan of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ilan E_IETFInterfaces_InterfaceType = 139
	// IETFInterfaces_InterfaceType_imt corresponds to the value imt of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_imt E_IETFInterfaces_InterfaceType = 140
	// IETFInterfaces_InterfaceType_infiniband corresponds to the value infiniband of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_infiniband E_IETFInterfaces_InterfaceType = 141
	// IETFInterfaces_InterfaceType_interleave corresponds to the value interleave of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_interleave E_IETFInterfaces_InterfaceType = 142
	// IETFInterfaces_InterfaceType_ip corresponds to the value ip of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ip E_IETFInterfaces_InterfaceType = 143
	// IETFInterfaces_InterfaceType_ipForward corresponds to the value ipForward of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ipForward E_IETFInterfaces_InterfaceType = 144
	// IETFInterfaces_InterfaceType_ipOverAtm corresponds to the value ipOverAtm of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ipOverAtm E_IETFInterfaces_InterfaceType = 145
	// IETFInterfaces_InterfaceType_ipOverCdlc corresponds to the value ipOverCdlc of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ipOverCdlc E_IETFInterfaces_InterfaceType = 146
	// IETFInterfaces_InterfaceType_ipOverClaw corresponds to the value ipOverClaw of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ipOverClaw E_IETFInterfaces_InterfaceType = 147
	// IETFInterfaces_InterfaceType_ipSwitch corresponds to the value ipSwitch of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ipSwitch E_IETFInterfaces_InterfaceType = 148
	// IETFInterfaces_InterfaceType_isdn corresponds to the value isdn of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_isdn E_IETFInterfaces_InterfaceType = 149
	// IETFInterfaces_InterfaceType_isdns corresponds to the value isdns of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_isdns E_IETFInterfaces_InterfaceType = 150
	// IETFInterfaces_InterfaceType_isdnu corresponds to the value isdnu of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_isdnu E_IETFInterfaces_InterfaceType = 151
	// IETFInterfaces_InterfaceType_iso88022llc corresponds to the value iso88022llc of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_iso88022llc E_IETFInterfaces_InterfaceType = 152
	// IETFInterfaces_InterfaceType_iso88023Csmacd corresponds to the value iso88023Csmacd of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_iso88023Csmacd E_IETFInterfaces_InterfaceType = 153
	// IETFInterfaces_InterfaceType_iso88024TokenBus corresponds to the value iso88024TokenBus of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_iso88024TokenBus E_IETFInterfaces_InterfaceType = 154
	// IETFInterfaces_InterfaceType_iso88025CRFPInt corresponds to the value iso88025CRFPInt of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_iso88025CRFPInt E_IETFInterfaces_InterfaceType = 155
	// IETFInterfaces_InterfaceType_iso88025Dtr corresponds to the value iso88025Dtr of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_iso88025Dtr E_IETFInterfaces_InterfaceType = 156
	// IETFInterfaces_InterfaceType_iso88025Fiber corresponds to the value iso88025Fiber of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_iso88025Fiber E_IETFInterfaces_InterfaceType = 157
	// IETFInterfaces_InterfaceType_iso88025TokenRing corresponds to the value iso88025TokenRing of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_iso88025TokenRing E_IETFInterfaces_InterfaceType = 158
	// IETFInterfaces_InterfaceType_iso88026Man corresponds to the value iso88026Man of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_iso88026Man E_IETFInterfaces_InterfaceType = 159
	// IETFInterfaces_InterfaceType_isup corresponds to the value isup of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_isup E_IETFInterfaces_InterfaceType = 160
	// IETFInterfaces_InterfaceType_l2vlan corresponds to the value l2vlan of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_l2vlan E_IETFInterfaces_InterfaceType = 161
	// IETFInterfaces_InterfaceType_l3ipvlan corresponds to the value l3ipvlan of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_l3ipvlan E_IETFInterfaces_InterfaceType = 162
	// IETFInterfaces_InterfaceType_l3ipxvlan corresponds to the value l3ipxvlan of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_l3ipxvlan E_IETFInterfaces_InterfaceType = 163
	// IETFInterfaces_InterfaceType_lapb corresponds to the value lapb of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_lapb E_IETFInterfaces_InterfaceType = 164
	// IETFInterfaces_InterfaceType_lapd corresponds to the value lapd of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_lapd E_IETFInterfaces_InterfaceType = 165
	// IETFInterfaces_InterfaceType_lapf corresponds to the value lapf of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_lapf E_IETFInterfaces_InterfaceType = 166
	// IETFInterfaces_InterfaceType_linegroup corresponds to the value linegroup of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_linegroup E_IETFInterfaces_InterfaceType = 167
	// IETFInterfaces_InterfaceType_lmp corresponds to the value lmp of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_lmp E_IETFInterfaces_InterfaceType = 168
	// IETFInterfaces_InterfaceType_localTalk corresponds to the value localTalk of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_localTalk E_IETFInterfaces_InterfaceType = 169
	// IETFInterfaces_InterfaceType_macSecControlledIF corresponds to the value macSecControlledIF of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_macSecControlledIF E_IETFInterfaces_InterfaceType = 170
	// IETFInterfaces_InterfaceType_macSecUncontrolledIF corresponds to the value macSecUncontrolledIF of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_macSecUncontrolledIF E_IETFInterfaces_InterfaceType = 171
	// IETFInterfaces_InterfaceType_mediaMailOverIp corresponds to the value mediaMailOverIp of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_mediaMailOverIp E_IETFInterfaces_InterfaceType = 172
	// IETFInterfaces_InterfaceType_mfSigLink corresponds to the value mfSigLink of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_mfSigLink E_IETFInterfaces_InterfaceType = 173
	// IETFInterfaces_InterfaceType_miox25 corresponds to the value miox25 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_miox25 E_IETFInterfaces_InterfaceType = 174
	// IETFInterfaces_InterfaceType_mocaVersion1 corresponds to the value mocaVersion1 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_mocaVersion1 E_IETFInterfaces_InterfaceType = 175
	// IETFInterfaces_InterfaceType_modem corresponds to the value modem of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_modem E_IETFInterfaces_InterfaceType = 176
	// IETFInterfaces_InterfaceType_mpc corresponds to the value mpc of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_mpc E_IETFInterfaces_InterfaceType = 177
	// IETFInterfaces_InterfaceType_mpegTransport corresponds to the value mpegTransport of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_mpegTransport E_IETFInterfaces_InterfaceType = 178
	// IETFInterfaces_InterfaceType_mpls corresponds to the value mpls of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_mpls E_IETFInterfaces_InterfaceType = 179
	// IETFInterfaces_InterfaceType_mplsTunnel corresponds to the value mplsTunnel of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_mplsTunnel E_IETFInterfaces_InterfaceType = 180
	// IETFInterfaces_InterfaceType_msdsl corresponds to the value msdsl of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_msdsl E_IETFInterfaces_InterfaceType = 181
	// IETFInterfaces_InterfaceType_mvl corresponds to the value mvl of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_mvl E_IETFInterfaces_InterfaceType = 182
	// IETFInterfaces_InterfaceType_myrinet corresponds to the value myrinet of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_myrinet E_IETFInterfaces_InterfaceType = 183
	// IETFInterfaces_InterfaceType_nfas corresponds to the value nfas of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_nfas E_IETFInterfaces_InterfaceType = 184
	// IETFInterfaces_InterfaceType_nsip corresponds to the value nsip of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_nsip E_IETFInterfaces_InterfaceType = 185
	// IETFInterfaces_InterfaceType_opticalChannel corresponds to the value opticalChannel of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_opticalChannel E_IETFInterfaces_InterfaceType = 186
	// IETFInterfaces_InterfaceType_opticalChannelGroup corresponds to the value opticalChannelGroup of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_opticalChannelGroup E_IETFInterfaces_InterfaceType = 187
	// IETFInterfaces_InterfaceType_opticalTransport corresponds to the value opticalTransport of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_opticalTransport E_IETFInterfaces_InterfaceType = 188
	// IETFInterfaces_InterfaceType_other corresponds to the value other of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_other E_IETFInterfaces_InterfaceType = 189
	// IETFInterfaces_InterfaceType_otnOdu corresponds to the value otnOdu of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_otnOdu E_IETFInterfaces_InterfaceType = 190
	// IETFInterfaces_InterfaceType_otnOtu corresponds to the value otnOtu of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_otnOtu E_IETFInterfaces_InterfaceType = 191
	// IETFInterfaces_InterfaceType_para corresponds to the value para of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_para E_IETFInterfaces_InterfaceType = 192
	// IETFInterfaces_InterfaceType_pdnEtherLoop1 corresponds to the value pdnEtherLoop1 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_pdnEtherLoop1 E_IETFInterfaces_InterfaceType = 193
	// IETFInterfaces_InterfaceType_pdnEtherLoop2 corresponds to the value pdnEtherLoop2 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_pdnEtherLoop2 E_IETFInterfaces_InterfaceType = 194
	// IETFInterfaces_InterfaceType_pip corresponds to the value pip of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_pip E_IETFInterfaces_InterfaceType = 195
	// IETFInterfaces_InterfaceType_plc corresponds to the value plc of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_plc E_IETFInterfaces_InterfaceType = 196
	// IETFInterfaces_InterfaceType_pon155 corresponds to the value pon155 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_pon155 E_IETFInterfaces_InterfaceType = 197
	// IETFInterfaces_InterfaceType_pon622 corresponds to the value pon622 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_pon622 E_IETFInterfaces_InterfaceType = 198
	// IETFInterfaces_InterfaceType_pos corresponds to the value pos of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_pos E_IETFInterfaces_InterfaceType = 199
	// IETFInterfaces_InterfaceType_ppp corresponds to the value ppp of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ppp E_IETFInterfaces_InterfaceType = 200
	// IETFInterfaces_InterfaceType_pppMultilinkBundle corresponds to the value pppMultilinkBundle of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_pppMultilinkBundle E_IETFInterfaces_InterfaceType = 201
	// IETFInterfaces_InterfaceType_primaryISDN corresponds to the value primaryISDN of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_primaryISDN E_IETFInterfaces_InterfaceType = 202
	// IETFInterfaces_InterfaceType_propAtm corresponds to the value propAtm of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_propAtm E_IETFInterfaces_InterfaceType = 203
	// IETFInterfaces_InterfaceType_propBWAp2Mp corresponds to the value propBWAp2Mp of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_propBWAp2Mp E_IETFInterfaces_InterfaceType = 204
	// IETFInterfaces_InterfaceType_propCnls corresponds to the value propCnls of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_propCnls E_IETFInterfaces_InterfaceType = 205
	// IETFInterfaces_InterfaceType_propDocsWirelessDownstream corresponds to the value propDocsWirelessDownstream of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_propDocsWirelessDownstream E_IETFInterfaces_InterfaceType = 206
	// IETFInterfaces_InterfaceType_propDocsWirelessMaclayer corresponds to the value propDocsWirelessMaclayer of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_propDocsWirelessMaclayer E_IETFInterfaces_InterfaceType = 207
	// IETFInterfaces_InterfaceType_propDocsWirelessUpstream corresponds to the value propDocsWirelessUpstream of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_propDocsWirelessUpstream E_IETFInterfaces_InterfaceType = 208
	// IETFInterfaces_InterfaceType_propMultiplexor corresponds to the value propMultiplexor of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_propMultiplexor E_IETFInterfaces_InterfaceType = 209
	// IETFInterfaces_InterfaceType_propPointToPointSerial corresponds to the value propPointToPointSerial of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_propPointToPointSerial E_IETFInterfaces_InterfaceType = 210
	// IETFInterfaces_InterfaceType_propVirtual corresponds to the value propVirtual of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_propVirtual E_IETFInterfaces_InterfaceType = 211
	// IETFInterfaces_InterfaceType_propWirelessP2P corresponds to the value propWirelessP2P of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_propWirelessP2P E_IETFInterfaces_InterfaceType = 212
	// IETFInterfaces_InterfaceType_proteon10Mbit corresponds to the value proteon10Mbit of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_proteon10Mbit E_IETFInterfaces_InterfaceType = 213
	// IETFInterfaces_InterfaceType_proteon80Mbit corresponds to the value proteon80Mbit of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_proteon80Mbit E_IETFInterfaces_InterfaceType = 214
	// IETFInterfaces_InterfaceType_ptm corresponds to the value ptm of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ptm E_IETFInterfaces_InterfaceType = 215
	// IETFInterfaces_InterfaceType_q2931 corresponds to the value q2931 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_q2931 E_IETFInterfaces_InterfaceType = 216
	// IETFInterfaces_InterfaceType_qam corresponds to the value qam of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_qam E_IETFInterfaces_InterfaceType = 217
	// IETFInterfaces_InterfaceType_qllc corresponds to the value qllc of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_qllc E_IETFInterfaces_InterfaceType = 218
	// IETFInterfaces_InterfaceType_radioMAC corresponds to the value radioMAC of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_radioMAC E_IETFInterfaces_InterfaceType = 219
	// IETFInterfaces_InterfaceType_radsl corresponds to the value radsl of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_radsl E_IETFInterfaces_InterfaceType = 220
	// IETFInterfaces_InterfaceType_reachDSL corresponds to the value reachDSL of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_reachDSL E_IETFInterfaces_InterfaceType = 221
	// IETFInterfaces_InterfaceType_regular1822 corresponds to the value regular1822 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_regular1822 E_IETFInterfaces_InterfaceType = 222
	// IETFInterfaces_InterfaceType_rfc1483 corresponds to the value rfc1483 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_rfc1483 E_IETFInterfaces_InterfaceType = 223
	// IETFInterfaces_InterfaceType_rfc877x25 corresponds to the value rfc877x25 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_rfc877x25 E_IETFInterfaces_InterfaceType = 224
	// IETFInterfaces_InterfaceType_rpr corresponds to the value rpr of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_rpr E_IETFInterfaces_InterfaceType = 225
	// IETFInterfaces_InterfaceType_rs232 corresponds to the value rs232 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_rs232 E_IETFInterfaces_InterfaceType = 226
	// IETFInterfaces_InterfaceType_rsrb corresponds to the value rsrb of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_rsrb E_IETFInterfaces_InterfaceType = 227
	// IETFInterfaces_InterfaceType_sdci corresponds to the value sdci of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_sdci E_IETFInterfaces_InterfaceType = 228
	// IETFInterfaces_InterfaceType_sdlc corresponds to the value sdlc of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_sdlc E_IETFInterfaces_InterfaceType = 229
	// IETFInterfaces_InterfaceType_sdsl corresponds to the value sdsl of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_sdsl E_IETFInterfaces_InterfaceType = 230
	// IETFInterfaces_InterfaceType_shdsl corresponds to the value shdsl of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_shdsl E_IETFInterfaces_InterfaceType = 231
	// IETFInterfaces_InterfaceType_sip corresponds to the value sip of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_sip E_IETFInterfaces_InterfaceType = 232
	// IETFInterfaces_InterfaceType_sipSig corresponds to the value sipSig of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_sipSig E_IETFInterfaces_InterfaceType = 233
	// IETFInterfaces_InterfaceType_sipTg corresponds to the value sipTg of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_sipTg E_IETFInterfaces_InterfaceType = 234
	// IETFInterfaces_InterfaceType_sixToFour corresponds to the value sixToFour of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_sixToFour E_IETFInterfaces_InterfaceType = 235
	// IETFInterfaces_InterfaceType_slip corresponds to the value slip of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_slip E_IETFInterfaces_InterfaceType = 236
	// IETFInterfaces_InterfaceType_smdsDxi corresponds to the value smdsDxi of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_smdsDxi E_IETFInterfaces_InterfaceType = 237
	// IETFInterfaces_InterfaceType_smdsIcip corresponds to the value smdsIcip of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_smdsIcip E_IETFInterfaces_InterfaceType = 238
	// IETFInterfaces_InterfaceType_softwareLoopback corresponds to the value softwareLoopback of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_softwareLoopback E_IETFInterfaces_InterfaceType = 239
	// IETFInterfaces_InterfaceType_sonet corresponds to the value sonet of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_sonet E_IETFInterfaces_InterfaceType = 240
	// IETFInterfaces_InterfaceType_sonetOverheadChannel corresponds to the value sonetOverheadChannel of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_sonetOverheadChannel E_IETFInterfaces_InterfaceType = 241
	// IETFInterfaces_InterfaceType_sonetPath corresponds to the value sonetPath of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_sonetPath E_IETFInterfaces_InterfaceType = 242
	// IETFInterfaces_InterfaceType_sonetVT corresponds to the value sonetVT of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_sonetVT E_IETFInterfaces_InterfaceType = 243
	// IETFInterfaces_InterfaceType_srp corresponds to the value srp of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_srp E_IETFInterfaces_InterfaceType = 244
	// IETFInterfaces_InterfaceType_ss7SigLink corresponds to the value ss7SigLink of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ss7SigLink E_IETFInterfaces_InterfaceType = 245
	// IETFInterfaces_InterfaceType_stackToStack corresponds to the value stackToStack of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_stackToStack E_IETFInterfaces_InterfaceType = 246
	// IETFInterfaces_InterfaceType_starLan corresponds to the value starLan of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_starLan E_IETFInterfaces_InterfaceType = 247
	// IETFInterfaces_InterfaceType_tdlc corresponds to the value tdlc of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_tdlc E_IETFInterfaces_InterfaceType = 248
	// IETFInterfaces_InterfaceType_teLink corresponds to the value teLink of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_teLink E_IETFInterfaces_InterfaceType = 249
	// IETFInterfaces_InterfaceType_termPad corresponds to the value termPad of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_termPad E_IETFInterfaces_InterfaceType = 250
	// IETFInterfaces_InterfaceType_tr008 corresponds to the value tr008 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_tr008 E_IETFInterfaces_InterfaceType = 251
	// IETFInterfaces_InterfaceType_transpHdlc corresponds to the value transpHdlc of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_transpHdlc E_IETFInterfaces_InterfaceType = 252
	// IETFInterfaces_InterfaceType_tunnel corresponds to the value tunnel of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_tunnel E_IETFInterfaces_InterfaceType = 253
	// IETFInterfaces_InterfaceType_ultra corresponds to the value ultra of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ultra E_IETFInterfaces_InterfaceType = 254
	// IETFInterfaces_InterfaceType_usb corresponds to the value usb of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_usb E_IETFInterfaces_InterfaceType = 255
	// IETFInterfaces_InterfaceType_v11 corresponds to the value v11 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_v11 E_IETFInterfaces_InterfaceType = 256
	// IETFInterfaces_InterfaceType_v35 corresponds to the value v35 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_v35 E_IETFInterfaces_InterfaceType = 257
	// IETFInterfaces_InterfaceType_v36 corresponds to the value v36 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_v36 E_IETFInterfaces_InterfaceType = 258
	// IETFInterfaces_InterfaceType_v37 corresponds to the value v37 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_v37 E_IETFInterfaces_InterfaceType = 259
	// IETFInterfaces_InterfaceType_vdsl corresponds to the value vdsl of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_vdsl E_IETFInterfaces_InterfaceType = 260
	// IETFInterfaces_InterfaceType_vdsl2 corresponds to the value vdsl2 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_vdsl2 E_IETFInterfaces_InterfaceType = 261
	// IETFInterfaces_InterfaceType_virtualIpAddress corresponds to the value virtualIpAddress of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_virtualIpAddress E_IETFInterfaces_InterfaceType = 262
	// IETFInterfaces_InterfaceType_virtualTg corresponds to the value virtualTg of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_virtualTg E_IETFInterfaces_InterfaceType = 263
	// IETFInterfaces_InterfaceType_vmwareNicTeam corresponds to the value vmwareNicTeam of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_vmwareNicTeam E_IETFInterfaces_InterfaceType = 264
	// IETFInterfaces_InterfaceType_vmwareVirtualNic corresponds to the value vmwareVirtualNic of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_vmwareVirtualNic E_IETFInterfaces_InterfaceType = 265
	// IETFInterfaces_InterfaceType_voiceDID corresponds to the value voiceDID of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_voiceDID E_IETFInterfaces_InterfaceType = 266
	// IETFInterfaces_InterfaceType_voiceEBS corresponds to the value voiceEBS of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_voiceEBS E_IETFInterfaces_InterfaceType = 267
	// IETFInterfaces_InterfaceType_voiceEM corresponds to the value voiceEM of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_voiceEM E_IETFInterfaces_InterfaceType = 268
	// IETFInterfaces_InterfaceType_voiceEMFGD corresponds to the value voiceEMFGD of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_voiceEMFGD E_IETFInterfaces_InterfaceType = 269
	// IETFInterfaces_InterfaceType_voiceEncap corresponds to the value voiceEncap of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_voiceEncap E_IETFInterfaces_InterfaceType = 270
	// IETFInterfaces_InterfaceType_voiceFGDEANA corresponds to the value voiceFGDEANA of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_voiceFGDEANA E_IETFInterfaces_InterfaceType = 271
	// IETFInterfaces_InterfaceType_voiceFGDOS corresponds to the value voiceFGDOS of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_voiceFGDOS E_IETFInterfaces_InterfaceType = 272
	// IETFInterfaces_InterfaceType_voiceFXO corresponds to the value voiceFXO of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_voiceFXO E_IETFInterfaces_InterfaceType = 273
	// IETFInterfaces_InterfaceType_voiceFXS corresponds to the value voiceFXS of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_voiceFXS E_IETFInterfaces_InterfaceType = 274
	// IETFInterfaces_InterfaceType_voiceOverAtm corresponds to the value voiceOverAtm of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_voiceOverAtm E_IETFInterfaces_InterfaceType = 275
	// IETFInterfaces_InterfaceType_voiceOverCable corresponds to the value voiceOverCable of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_voiceOverCable E_IETFInterfaces_InterfaceType = 276
	// IETFInterfaces_InterfaceType_voiceOverFrameRelay corresponds to the value voiceOverFrameRelay of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_voiceOverFrameRelay E_IETFInterfaces_InterfaceType = 277
	// IETFInterfaces_InterfaceType_voiceOverIp corresponds to the value voiceOverIp of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_voiceOverIp E_IETFInterfaces_InterfaceType = 278
	// IETFInterfaces_InterfaceType_wwanPP corresponds to the value wwanPP of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_wwanPP E_IETFInterfaces_InterfaceType = 279
	// IETFInterfaces_InterfaceType_wwanPP2 corresponds to the value wwanPP2 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_wwanPP2 E_IETFInterfaces_InterfaceType = 280
	// IETFInterfaces_InterfaceType_x213 corresponds to the value x213 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_x213 E_IETFInterfaces_InterfaceType = 281
	// IETFInterfaces_InterfaceType_x25huntGroup corresponds to the value x25huntGroup of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_x25huntGroup E_IETFInterfaces_InterfaceType = 282
	// IETFInterfaces_InterfaceType_x25mlp corresponds to the value x25mlp of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_x25mlp E_IETFInterfaces_InterfaceType = 283
	// IETFInterfaces_InterfaceType_x25ple corresponds to the value x25ple of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_x25ple E_IETFInterfaces_InterfaceType = 284
	// IETFInterfaces_InterfaceType_x86Laps corresponds to the value x86Laps of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_x86Laps E_IETFInterfaces_InterfaceType = 285
	// IETFInterfaces_InterfaceType_xboxWireless corresponds to the value xboxWireless of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_xboxWireless E_IETFInterfaces_InterfaceType = 286
)

// E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY is a derived int64 type which is used to represent
// the enumerated node OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY. An additional value named
// OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY int64

// IsYANGGoEnum ensures that OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY implements the yang.GoEnum
// interface. This ensures that OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY.
func (E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_UNSET corresponds to the value UNSET of OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY
	OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_UNSET E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY = 0
	// OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_CRITICAL corresponds to the value CRITICAL of OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY
	OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_CRITICAL E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY = 1
	// OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_MAJOR corresponds to the value MAJOR of OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY
	OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_MAJOR E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY = 2
	// OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_MINOR corresponds to the value MINOR of OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY
	OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_MINOR E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY = 3
	// OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_UNKNOWN corresponds to the value UNKNOWN of OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY
	OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_UNKNOWN E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY = 4
	// OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_WARNING corresponds to the value WARNING of OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY
	OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_WARNING E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY = 5
)

// E_OpenconfigIfAggregate_AggregationType is a derived int64 type which is used to represent
// the enumerated node OpenconfigIfAggregate_AggregationType. An additional value named
// OpenconfigIfAggregate_AggregationType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigIfAggregate_AggregationType int64

// IsYANGGoEnum ensures that OpenconfigIfAggregate_AggregationType implements the yang.GoEnum
// interface. This ensures that OpenconfigIfAggregate_AggregationType can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigIfAggregate_AggregationType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigIfAggregate_AggregationType.
func (E_OpenconfigIfAggregate_AggregationType) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigIfAggregate_AggregationType_UNSET corresponds to the value UNSET of OpenconfigIfAggregate_AggregationType
	OpenconfigIfAggregate_AggregationType_UNSET E_OpenconfigIfAggregate_AggregationType = 0
	// OpenconfigIfAggregate_AggregationType_LACP corresponds to the value LACP of OpenconfigIfAggregate_AggregationType
	OpenconfigIfAggregate_AggregationType_LACP E_OpenconfigIfAggregate_AggregationType = 1
	// OpenconfigIfAggregate_AggregationType_STATIC corresponds to the value STATIC of OpenconfigIfAggregate_AggregationType
	OpenconfigIfAggregate_AggregationType_STATIC E_OpenconfigIfAggregate_AggregationType = 2
)

// E_OpenconfigIfEthernet_ETHERNET_SPEED is a derived int64 type which is used to represent
// the enumerated node OpenconfigIfEthernet_ETHERNET_SPEED. An additional value named
// OpenconfigIfEthernet_ETHERNET_SPEED_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigIfEthernet_ETHERNET_SPEED int64

// IsYANGGoEnum ensures that OpenconfigIfEthernet_ETHERNET_SPEED implements the yang.GoEnum
// interface. This ensures that OpenconfigIfEthernet_ETHERNET_SPEED can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigIfEthernet_ETHERNET_SPEED) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigIfEthernet_ETHERNET_SPEED.
func (E_OpenconfigIfEthernet_ETHERNET_SPEED) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigIfEthernet_ETHERNET_SPEED_UNSET corresponds to the value UNSET of OpenconfigIfEthernet_ETHERNET_SPEED
	OpenconfigIfEthernet_ETHERNET_SPEED_UNSET E_OpenconfigIfEthernet_ETHERNET_SPEED = 0
	// OpenconfigIfEthernet_ETHERNET_SPEED_SPEED_100GB corresponds to the value SPEED_100GB of OpenconfigIfEthernet_ETHERNET_SPEED
	OpenconfigIfEthernet_ETHERNET_SPEED_SPEED_100GB E_OpenconfigIfEthernet_ETHERNET_SPEED = 1
	// OpenconfigIfEthernet_ETHERNET_SPEED_SPEED_100MB corresponds to the value SPEED_100MB of OpenconfigIfEthernet_ETHERNET_SPEED
	OpenconfigIfEthernet_ETHERNET_SPEED_SPEED_100MB E_OpenconfigIfEthernet_ETHERNET_SPEED = 2
	// OpenconfigIfEthernet_ETHERNET_SPEED_SPEED_10GB corresponds to the value SPEED_10GB of OpenconfigIfEthernet_ETHERNET_SPEED
	OpenconfigIfEthernet_ETHERNET_SPEED_SPEED_10GB E_OpenconfigIfEthernet_ETHERNET_SPEED = 3
	// OpenconfigIfEthernet_ETHERNET_SPEED_SPEED_10MB corresponds to the value SPEED_10MB of OpenconfigIfEthernet_ETHERNET_SPEED
	OpenconfigIfEthernet_ETHERNET_SPEED_SPEED_10MB E_OpenconfigIfEthernet_ETHERNET_SPEED = 4
	// OpenconfigIfEthernet_ETHERNET_SPEED_SPEED_1GB corresponds to the value SPEED_1GB of OpenconfigIfEthernet_ETHERNET_SPEED
	OpenconfigIfEthernet_ETHERNET_SPEED_SPEED_1GB E_OpenconfigIfEthernet_ETHERNET_SPEED = 5
	// OpenconfigIfEthernet_ETHERNET_SPEED_SPEED_2500MB corresponds to the value SPEED_2500MB of OpenconfigIfEthernet_ETHERNET_SPEED
	OpenconfigIfEthernet_ETHERNET_SPEED_SPEED_2500MB E_OpenconfigIfEthernet_ETHERNET_SPEED = 6
	// OpenconfigIfEthernet_ETHERNET_SPEED_SPEED_25GB corresponds to the value SPEED_25GB of OpenconfigIfEthernet_ETHERNET_SPEED
	OpenconfigIfEthernet_ETHERNET_SPEED_SPEED_25GB E_OpenconfigIfEthernet_ETHERNET_SPEED = 7
	// OpenconfigIfEthernet_ETHERNET_SPEED_SPEED_40GB corresponds to the value SPEED_40GB of OpenconfigIfEthernet_ETHERNET_SPEED
	OpenconfigIfEthernet_ETHERNET_SPEED_SPEED_40GB E_OpenconfigIfEthernet_ETHERNET_SPEED = 8
	// OpenconfigIfEthernet_ETHERNET_SPEED_SPEED_50GB corresponds to the value SPEED_50GB of OpenconfigIfEthernet_ETHERNET_SPEED
	OpenconfigIfEthernet_ETHERNET_SPEED_SPEED_50GB E_OpenconfigIfEthernet_ETHERNET_SPEED = 9
	// OpenconfigIfEthernet_ETHERNET_SPEED_SPEED_5GB corresponds to the value SPEED_5GB of OpenconfigIfEthernet_ETHERNET_SPEED
	OpenconfigIfEthernet_ETHERNET_SPEED_SPEED_5GB E_OpenconfigIfEthernet_ETHERNET_SPEED = 10
	// OpenconfigIfEthernet_ETHERNET_SPEED_SPEED_UNKNOWN corresponds to the value SPEED_UNKNOWN of OpenconfigIfEthernet_ETHERNET_SPEED
	OpenconfigIfEthernet_ETHERNET_SPEED_SPEED_UNKNOWN E_OpenconfigIfEthernet_ETHERNET_SPEED = 11
)

// E_OpenconfigIfEthernet_Ethernet_DuplexMode is a derived int64 type which is used to represent
// the enumerated node OpenconfigIfEthernet_Ethernet_DuplexMode. An additional value named
// OpenconfigIfEthernet_Ethernet_DuplexMode_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigIfEthernet_Ethernet_DuplexMode int64

// IsYANGGoEnum ensures that OpenconfigIfEthernet_Ethernet_DuplexMode implements the yang.GoEnum
// interface. This ensures that OpenconfigIfEthernet_Ethernet_DuplexMode can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigIfEthernet_Ethernet_DuplexMode) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigIfEthernet_Ethernet_DuplexMode.
func (E_OpenconfigIfEthernet_Ethernet_DuplexMode) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigIfEthernet_Ethernet_DuplexMode_UNSET corresponds to the value UNSET of OpenconfigIfEthernet_Ethernet_DuplexMode
	OpenconfigIfEthernet_Ethernet_DuplexMode_UNSET E_OpenconfigIfEthernet_Ethernet_DuplexMode = 0
	// OpenconfigIfEthernet_Ethernet_DuplexMode_FULL corresponds to the value FULL of OpenconfigIfEthernet_Ethernet_DuplexMode
	OpenconfigIfEthernet_Ethernet_DuplexMode_FULL E_OpenconfigIfEthernet_Ethernet_DuplexMode = 1
	// OpenconfigIfEthernet_Ethernet_DuplexMode_HALF corresponds to the value HALF of OpenconfigIfEthernet_Ethernet_DuplexMode
	OpenconfigIfEthernet_Ethernet_DuplexMode_HALF E_OpenconfigIfEthernet_Ethernet_DuplexMode = 2
)

// E_OpenconfigIfEthernet_Ethernet_NegotiatedDuplexMode is a derived int64 type which is used to represent
// the enumerated node OpenconfigIfEthernet_Ethernet_NegotiatedDuplexMode. An additional value named
// OpenconfigIfEthernet_Ethernet_NegotiatedDuplexMode_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigIfEthernet_Ethernet_NegotiatedDuplexMode int64

// IsYANGGoEnum ensures that OpenconfigIfEthernet_Ethernet_NegotiatedDuplexMode implements the yang.GoEnum
// interface. This ensures that OpenconfigIfEthernet_Ethernet_NegotiatedDuplexMode can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigIfEthernet_Ethernet_NegotiatedDuplexMode) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigIfEthernet_Ethernet_NegotiatedDuplexMode.
func (E_OpenconfigIfEthernet_Ethernet_NegotiatedDuplexMode) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigIfEthernet_Ethernet_NegotiatedDuplexMode_UNSET corresponds to the value UNSET of OpenconfigIfEthernet_Ethernet_NegotiatedDuplexMode
	OpenconfigIfEthernet_Ethernet_NegotiatedDuplexMode_UNSET E_OpenconfigIfEthernet_Ethernet_NegotiatedDuplexMode = 0
	// OpenconfigIfEthernet_Ethernet_NegotiatedDuplexMode_FULL corresponds to the value FULL of OpenconfigIfEthernet_Ethernet_NegotiatedDuplexMode
	OpenconfigIfEthernet_Ethernet_NegotiatedDuplexMode_FULL E_OpenconfigIfEthernet_Ethernet_NegotiatedDuplexMode = 1
	// OpenconfigIfEthernet_Ethernet_NegotiatedDuplexMode_HALF corresponds to the value HALF of OpenconfigIfEthernet_Ethernet_NegotiatedDuplexMode
	OpenconfigIfEthernet_Ethernet_NegotiatedDuplexMode_HALF E_OpenconfigIfEthernet_Ethernet_NegotiatedDuplexMode = 2
)

// E_OpenconfigIfIp_Address_Status is a derived int64 type which is used to represent
// the enumerated node OpenconfigIfIp_Address_Status. An additional value named
// OpenconfigIfIp_Address_Status_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigIfIp_Address_Status int64

// IsYANGGoEnum ensures that OpenconfigIfIp_Address_Status implements the yang.GoEnum
// interface. This ensures that OpenconfigIfIp_Address_Status can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigIfIp_Address_Status) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigIfIp_Address_Status.
func (E_OpenconfigIfIp_Address_Status) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum }

const (
	// OpenconfigIfIp_Address_Status_UNSET corresponds to the value UNSET of OpenconfigIfIp_Address_Status
	OpenconfigIfIp_Address_Status_UNSET E_OpenconfigIfIp_Address_Status = 0
	// OpenconfigIfIp_Address_Status_PREFERRED corresponds to the value PREFERRED of OpenconfigIfIp_Address_Status
	OpenconfigIfIp_Address_Status_PREFERRED E_OpenconfigIfIp_Address_Status = 1
	// OpenconfigIfIp_Address_Status_DEPRECATED corresponds to the value DEPRECATED of OpenconfigIfIp_Address_Status
	OpenconfigIfIp_Address_Status_DEPRECATED E_OpenconfigIfIp_Address_Status = 2
	// OpenconfigIfIp_Address_Status_INVALID corresponds to the value INVALID of OpenconfigIfIp_Address_Status
	OpenconfigIfIp_Address_Status_INVALID E_OpenconfigIfIp_Address_Status = 3
	// OpenconfigIfIp_Address_Status_INACCESSIBLE corresponds to the value INACCESSIBLE of OpenconfigIfIp_Address_Status
	OpenconfigIfIp_Address_Status_INACCESSIBLE E_OpenconfigIfIp_Address_Status = 4
	// OpenconfigIfIp_Address_Status_UNKNOWN corresponds to the value UNKNOWN of OpenconfigIfIp_Address_Status
	OpenconfigIfIp_Address_Status_UNKNOWN E_OpenconfigIfIp_Address_Status = 5
	// OpenconfigIfIp_Address_Status_TENTATIVE corresponds to the value TENTATIVE of OpenconfigIfIp_Address_Status
	OpenconfigIfIp_Address_Status_TENTATIVE E_OpenconfigIfIp_Address_Status = 6
	// OpenconfigIfIp_Address_Status_DUPLICATE corresponds to the value DUPLICATE of OpenconfigIfIp_Address_Status
	OpenconfigIfIp_Address_Status_DUPLICATE E_OpenconfigIfIp_Address_Status = 7
	// OpenconfigIfIp_Address_Status_OPTIMISTIC corresponds to the value OPTIMISTIC of OpenconfigIfIp_Address_Status
	OpenconfigIfIp_Address_Status_OPTIMISTIC E_OpenconfigIfIp_Address_Status = 8
)

// E_OpenconfigIfIp_IpAddressOrigin is a derived int64 type which is used to represent
// the enumerated node OpenconfigIfIp_IpAddressOrigin. An additional value named
// OpenconfigIfIp_IpAddressOrigin_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigIfIp_IpAddressOrigin int64

// IsYANGGoEnum ensures that OpenconfigIfIp_IpAddressOrigin implements the yang.GoEnum
// interface. This ensures that OpenconfigIfIp_IpAddressOrigin can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigIfIp_IpAddressOrigin) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigIfIp_IpAddressOrigin.
func (E_OpenconfigIfIp_IpAddressOrigin) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigIfIp_IpAddressOrigin_UNSET corresponds to the value UNSET of OpenconfigIfIp_IpAddressOrigin
	OpenconfigIfIp_IpAddressOrigin_UNSET E_OpenconfigIfIp_IpAddressOrigin = 0
	// OpenconfigIfIp_IpAddressOrigin_OTHER corresponds to the value OTHER of OpenconfigIfIp_IpAddressOrigin
	OpenconfigIfIp_IpAddressOrigin_OTHER E_OpenconfigIfIp_IpAddressOrigin = 1
	// OpenconfigIfIp_IpAddressOrigin_STATIC corresponds to the value STATIC of OpenconfigIfIp_IpAddressOrigin
	OpenconfigIfIp_IpAddressOrigin_STATIC E_OpenconfigIfIp_IpAddressOrigin = 2
	// OpenconfigIfIp_IpAddressOrigin_DHCP corresponds to the value DHCP of OpenconfigIfIp_IpAddressOrigin
	OpenconfigIfIp_IpAddressOrigin_DHCP E_OpenconfigIfIp_IpAddressOrigin = 3
	// OpenconfigIfIp_IpAddressOrigin_LINK_LAYER corresponds to the value LINK_LAYER of OpenconfigIfIp_IpAddressOrigin
	OpenconfigIfIp_IpAddressOrigin_LINK_LAYER E_OpenconfigIfIp_IpAddressOrigin = 4
	// OpenconfigIfIp_IpAddressOrigin_RANDOM corresponds to the value RANDOM of OpenconfigIfIp_IpAddressOrigin
	OpenconfigIfIp_IpAddressOrigin_RANDOM E_OpenconfigIfIp_IpAddressOrigin = 5
)

// E_OpenconfigIfIp_NeighborOrigin is a derived int64 type which is used to represent
// the enumerated node OpenconfigIfIp_NeighborOrigin. An additional value named
// OpenconfigIfIp_NeighborOrigin_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigIfIp_NeighborOrigin int64

// IsYANGGoEnum ensures that OpenconfigIfIp_NeighborOrigin implements the yang.GoEnum
// interface. This ensures that OpenconfigIfIp_NeighborOrigin can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigIfIp_NeighborOrigin) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigIfIp_NeighborOrigin.
func (E_OpenconfigIfIp_NeighborOrigin) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum }

const (
	// OpenconfigIfIp_NeighborOrigin_UNSET corresponds to the value UNSET of OpenconfigIfIp_NeighborOrigin
	OpenconfigIfIp_NeighborOrigin_UNSET E_OpenconfigIfIp_NeighborOrigin = 0
	// OpenconfigIfIp_NeighborOrigin_OTHER corresponds to the value OTHER of OpenconfigIfIp_NeighborOrigin
	OpenconfigIfIp_NeighborOrigin_OTHER E_OpenconfigIfIp_NeighborOrigin = 1
	// OpenconfigIfIp_NeighborOrigin_STATIC corresponds to the value STATIC of OpenconfigIfIp_NeighborOrigin
	OpenconfigIfIp_NeighborOrigin_STATIC E_OpenconfigIfIp_NeighborOrigin = 2
	// OpenconfigIfIp_NeighborOrigin_DYNAMIC corresponds to the value DYNAMIC of OpenconfigIfIp_NeighborOrigin
	OpenconfigIfIp_NeighborOrigin_DYNAMIC E_OpenconfigIfIp_NeighborOrigin = 3
)

// E_OpenconfigIfIp_Neighbor_NeighborState is a derived int64 type which is used to represent
// the enumerated node OpenconfigIfIp_Neighbor_NeighborState. An additional value named
// OpenconfigIfIp_Neighbor_NeighborState_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigIfIp_Neighbor_NeighborState int64

// IsYANGGoEnum ensures that OpenconfigIfIp_Neighbor_NeighborState implements the yang.GoEnum
// interface. This ensures that OpenconfigIfIp_Neighbor_NeighborState can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigIfIp_Neighbor_NeighborState) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigIfIp_Neighbor_NeighborState.
func (E_OpenconfigIfIp_Neighbor_NeighborState) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigIfIp_Neighbor_NeighborState_UNSET corresponds to the value UNSET of OpenconfigIfIp_Neighbor_NeighborState
	OpenconfigIfIp_Neighbor_NeighborState_UNSET E_OpenconfigIfIp_Neighbor_NeighborState = 0
	// OpenconfigIfIp_Neighbor_NeighborState_INCOMPLETE corresponds to the value INCOMPLETE of OpenconfigIfIp_Neighbor_NeighborState
	OpenconfigIfIp_Neighbor_NeighborState_INCOMPLETE E_OpenconfigIfIp_Neighbor_NeighborState = 1
	// OpenconfigIfIp_Neighbor_NeighborState_REACHABLE corresponds to the value REACHABLE of OpenconfigIfIp_Neighbor_NeighborState
	OpenconfigIfIp_Neighbor_NeighborState_REACHABLE E_OpenconfigIfIp_Neighbor_NeighborState = 2
	// OpenconfigIfIp_Neighbor_NeighborState_STALE corresponds to the value STALE of OpenconfigIfIp_Neighbor_NeighborState
	OpenconfigIfIp_Neighbor_NeighborState_STALE E_OpenconfigIfIp_Neighbor_NeighborState = 3
	// OpenconfigIfIp_Neighbor_NeighborState_DELAY corresponds to the value DELAY of OpenconfigIfIp_Neighbor_NeighborState
	OpenconfigIfIp_Neighbor_NeighborState_DELAY E_OpenconfigIfIp_Neighbor_NeighborState = 4
	// OpenconfigIfIp_Neighbor_NeighborState_PROBE corresponds to the value PROBE of OpenconfigIfIp_Neighbor_NeighborState
	OpenconfigIfIp_Neighbor_NeighborState_PROBE E_OpenconfigIfIp_Neighbor_NeighborState = 5
)

// E_OpenconfigIfIp_ProxyArp_Mode is a derived int64 type which is used to represent
// the enumerated node OpenconfigIfIp_ProxyArp_Mode. An additional value named
// OpenconfigIfIp_ProxyArp_Mode_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigIfIp_ProxyArp_Mode int64

// IsYANGGoEnum ensures that OpenconfigIfIp_ProxyArp_Mode implements the yang.GoEnum
// interface. This ensures that OpenconfigIfIp_ProxyArp_Mode can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigIfIp_ProxyArp_Mode) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigIfIp_ProxyArp_Mode.
func (E_OpenconfigIfIp_ProxyArp_Mode) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum }

const (
	// OpenconfigIfIp_ProxyArp_Mode_UNSET corresponds to the value UNSET of OpenconfigIfIp_ProxyArp_Mode
	OpenconfigIfIp_ProxyArp_Mode_UNSET E_OpenconfigIfIp_ProxyArp_Mode = 0
	// OpenconfigIfIp_ProxyArp_Mode_DISABLE corresponds to the value DISABLE of OpenconfigIfIp_ProxyArp_Mode
	OpenconfigIfIp_ProxyArp_Mode_DISABLE E_OpenconfigIfIp_ProxyArp_Mode = 1
	// OpenconfigIfIp_ProxyArp_Mode_REMOTE_ONLY corresponds to the value REMOTE_ONLY of OpenconfigIfIp_ProxyArp_Mode
	OpenconfigIfIp_ProxyArp_Mode_REMOTE_ONLY E_OpenconfigIfIp_ProxyArp_Mode = 2
	// OpenconfigIfIp_ProxyArp_Mode_ALL corresponds to the value ALL of OpenconfigIfIp_ProxyArp_Mode
	OpenconfigIfIp_ProxyArp_Mode_ALL E_OpenconfigIfIp_ProxyArp_Mode = 3
)

// E_OpenconfigInterfaces_Interface_AdminStatus is a derived int64 type which is used to represent
// the enumerated node OpenconfigInterfaces_Interface_AdminStatus. An additional value named
// OpenconfigInterfaces_Interface_AdminStatus_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigInterfaces_Interface_AdminStatus int64

// IsYANGGoEnum ensures that OpenconfigInterfaces_Interface_AdminStatus implements the yang.GoEnum
// interface. This ensures that OpenconfigInterfaces_Interface_AdminStatus can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigInterfaces_Interface_AdminStatus) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigInterfaces_Interface_AdminStatus.
func (E_OpenconfigInterfaces_Interface_AdminStatus) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigInterfaces_Interface_AdminStatus_UNSET corresponds to the value UNSET of OpenconfigInterfaces_Interface_AdminStatus
	OpenconfigInterfaces_Interface_AdminStatus_UNSET E_OpenconfigInterfaces_Interface_AdminStatus = 0
	// OpenconfigInterfaces_Interface_AdminStatus_UP corresponds to the value UP of OpenconfigInterfaces_Interface_AdminStatus
	OpenconfigInterfaces_Interface_AdminStatus_UP E_OpenconfigInterfaces_Interface_AdminStatus = 1
	// OpenconfigInterfaces_Interface_AdminStatus_DOWN corresponds to the value DOWN of OpenconfigInterfaces_Interface_AdminStatus
	OpenconfigInterfaces_Interface_AdminStatus_DOWN E_OpenconfigInterfaces_Interface_AdminStatus = 2
	// OpenconfigInterfaces_Interface_AdminStatus_TESTING corresponds to the value TESTING of OpenconfigInterfaces_Interface_AdminStatus
	OpenconfigInterfaces_Interface_AdminStatus_TESTING E_OpenconfigInterfaces_Interface_AdminStatus = 3
)

// E_OpenconfigInterfaces_Interface_OperStatus is a derived int64 type which is used to represent
// the enumerated node OpenconfigInterfaces_Interface_OperStatus. An additional value named
// OpenconfigInterfaces_Interface_OperStatus_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigInterfaces_Interface_OperStatus int64

// IsYANGGoEnum ensures that OpenconfigInterfaces_Interface_OperStatus implements the yang.GoEnum
// interface. This ensures that OpenconfigInterfaces_Interface_OperStatus can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigInterfaces_Interface_OperStatus) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigInterfaces_Interface_OperStatus.
func (E_OpenconfigInterfaces_Interface_OperStatus) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigInterfaces_Interface_OperStatus_UNSET corresponds to the value UNSET of OpenconfigInterfaces_Interface_OperStatus
	OpenconfigInterfaces_Interface_OperStatus_UNSET E_OpenconfigInterfaces_Interface_OperStatus = 0
	// OpenconfigInterfaces_Interface_OperStatus_UP corresponds to the value UP of OpenconfigInterfaces_Interface_OperStatus
	OpenconfigInterfaces_Interface_OperStatus_UP E_OpenconfigInterfaces_Interface_OperStatus = 2
	// OpenconfigInterfaces_Interface_OperStatus_DOWN corresponds to the value DOWN of OpenconfigInterfaces_Interface_OperStatus
	OpenconfigInterfaces_Interface_OperStatus_DOWN E_OpenconfigInterfaces_Interface_OperStatus = 3
	// OpenconfigInterfaces_Interface_OperStatus_TESTING corresponds to the value TESTING of OpenconfigInterfaces_Interface_OperStatus
	OpenconfigInterfaces_Interface_OperStatus_TESTING E_OpenconfigInterfaces_Interface_OperStatus = 4
	// OpenconfigInterfaces_Interface_OperStatus_UNKNOWN corresponds to the value UNKNOWN of OpenconfigInterfaces_Interface_OperStatus
	OpenconfigInterfaces_Interface_OperStatus_UNKNOWN E_OpenconfigInterfaces_Interface_OperStatus = 5
	// OpenconfigInterfaces_Interface_OperStatus_DORMANT corresponds to the value DORMANT of OpenconfigInterfaces_Interface_OperStatus
	OpenconfigInterfaces_Interface_OperStatus_DORMANT E_OpenconfigInterfaces_Interface_OperStatus = 6
	// OpenconfigInterfaces_Interface_OperStatus_NOT_PRESENT corresponds to the value NOT_PRESENT of OpenconfigInterfaces_Interface_OperStatus
	OpenconfigInterfaces_Interface_OperStatus_NOT_PRESENT E_OpenconfigInterfaces_Interface_OperStatus = 7
	// OpenconfigInterfaces_Interface_OperStatus_LOWER_LAYER_DOWN corresponds to the value LOWER_LAYER_DOWN of OpenconfigInterfaces_Interface_OperStatus
	OpenconfigInterfaces_Interface_OperStatus_LOWER_LAYER_DOWN E_OpenconfigInterfaces_Interface_OperStatus = 8
)

// E_OpenconfigLacp_LacpActivityType is a derived int64 type which is used to represent
// the enumerated node OpenconfigLacp_LacpActivityType. An additional value named
// OpenconfigLacp_LacpActivityType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigLacp_LacpActivityType int64

// IsYANGGoEnum ensures that OpenconfigLacp_LacpActivityType implements the yang.GoEnum
// interface. This ensures that OpenconfigLacp_LacpActivityType can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigLacp_LacpActivityType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigLacp_LacpActivityType.
func (E_OpenconfigLacp_LacpActivityType) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigLacp_LacpActivityType_UNSET corresponds to the value UNSET of OpenconfigLacp_LacpActivityType
	OpenconfigLacp_LacpActivityType_UNSET E_OpenconfigLacp_LacpActivityType = 0
	// OpenconfigLacp_LacpActivityType_ACTIVE corresponds to the value ACTIVE of OpenconfigLacp_LacpActivityType
	OpenconfigLacp_LacpActivityType_ACTIVE E_OpenconfigLacp_LacpActivityType = 1
	// OpenconfigLacp_LacpActivityType_PASSIVE corresponds to the value PASSIVE of OpenconfigLacp_LacpActivityType
	OpenconfigLacp_LacpActivityType_PASSIVE E_OpenconfigLacp_LacpActivityType = 2
)

// E_OpenconfigLacp_LacpPeriodType is a derived int64 type which is used to represent
// the enumerated node OpenconfigLacp_LacpPeriodType. An additional value named
// OpenconfigLacp_LacpPeriodType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigLacp_LacpPeriodType int64

// IsYANGGoEnum ensures that OpenconfigLacp_LacpPeriodType implements the yang.GoEnum
// interface. This ensures that OpenconfigLacp_LacpPeriodType can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigLacp_LacpPeriodType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigLacp_LacpPeriodType.
func (E_OpenconfigLacp_LacpPeriodType) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum }

const (
	// OpenconfigLacp_LacpPeriodType_UNSET corresponds to the value UNSET of OpenconfigLacp_LacpPeriodType
	OpenconfigLacp_LacpPeriodType_UNSET E_OpenconfigLacp_LacpPeriodType = 0
	// OpenconfigLacp_LacpPeriodType_FAST corresponds to the value FAST of OpenconfigLacp_LacpPeriodType
	OpenconfigLacp_LacpPeriodType_FAST E_OpenconfigLacp_LacpPeriodType = 1
	// OpenconfigLacp_LacpPeriodType_SLOW corresponds to the value SLOW of OpenconfigLacp_LacpPeriodType
	OpenconfigLacp_LacpPeriodType_SLOW E_OpenconfigLacp_LacpPeriodType = 2
)

// E_OpenconfigLacp_LacpSynchronizationType is a derived int64 type which is used to represent
// the enumerated node OpenconfigLacp_LacpSynchronizationType. An additional value named
// OpenconfigLacp_LacpSynchronizationType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigLacp_LacpSynchronizationType int64

// IsYANGGoEnum ensures that OpenconfigLacp_LacpSynchronizationType implements the yang.GoEnum
// interface. This ensures that OpenconfigLacp_LacpSynchronizationType can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigLacp_LacpSynchronizationType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigLacp_LacpSynchronizationType.
func (E_OpenconfigLacp_LacpSynchronizationType) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigLacp_LacpSynchronizationType_UNSET corresponds to the value UNSET of OpenconfigLacp_LacpSynchronizationType
	OpenconfigLacp_LacpSynchronizationType_UNSET E_OpenconfigLacp_LacpSynchronizationType = 0
	// OpenconfigLacp_LacpSynchronizationType_IN_SYNC corresponds to the value IN_SYNC of OpenconfigLacp_LacpSynchronizationType
	OpenconfigLacp_LacpSynchronizationType_IN_SYNC E_OpenconfigLacp_LacpSynchronizationType = 1
	// OpenconfigLacp_LacpSynchronizationType_OUT_SYNC corresponds to the value OUT_SYNC of OpenconfigLacp_LacpSynchronizationType
	OpenconfigLacp_LacpSynchronizationType_OUT_SYNC E_OpenconfigLacp_LacpSynchronizationType = 2
)

// E_OpenconfigLacp_LacpTimeoutType is a derived int64 type which is used to represent
// the enumerated node OpenconfigLacp_LacpTimeoutType. An additional value named
// OpenconfigLacp_LacpTimeoutType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigLacp_LacpTimeoutType int64

// IsYANGGoEnum ensures that OpenconfigLacp_LacpTimeoutType implements the yang.GoEnum
// interface. This ensures that OpenconfigLacp_LacpTimeoutType can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigLacp_LacpTimeoutType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigLacp_LacpTimeoutType.
func (E_OpenconfigLacp_LacpTimeoutType) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigLacp_LacpTimeoutType_UNSET corresponds to the value UNSET of OpenconfigLacp_LacpTimeoutType
	OpenconfigLacp_LacpTimeoutType_UNSET E_OpenconfigLacp_LacpTimeoutType = 0
	// OpenconfigLacp_LacpTimeoutType_LONG corresponds to the value LONG of OpenconfigLacp_LacpTimeoutType
	OpenconfigLacp_LacpTimeoutType_LONG E_OpenconfigLacp_LacpTimeoutType = 1
	// OpenconfigLacp_LacpTimeoutType_SHORT corresponds to the value SHORT of OpenconfigLacp_LacpTimeoutType
	OpenconfigLacp_LacpTimeoutType_SHORT E_OpenconfigLacp_LacpTimeoutType = 2
)

// E_OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY is a derived int64 type which is used to represent
// the enumerated node OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY. An additional value named
// OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY int64

// IsYANGGoEnum ensures that OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY implements the yang.GoEnum
// interface. This ensures that OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY.
func (E_OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY_UNSET corresponds to the value UNSET of OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY
	OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY_UNSET E_OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY = 0
	// OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY_C_VLAN corresponds to the value C_VLAN of OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY
	OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY_C_VLAN E_OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY = 1
	// OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY_DOCSIS_CABLE_DEVICE corresponds to the value DOCSIS_CABLE_DEVICE of OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY
	OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY_DOCSIS_CABLE_DEVICE E_OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY = 2
	// OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY_MAC_BRIDGE corresponds to the value MAC_BRIDGE of OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY
	OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY_MAC_BRIDGE E_OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY = 3
	// OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY_OTHER corresponds to the value OTHER of OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY
	OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY_OTHER E_OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY = 4
	// OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY_REPEATER corresponds to the value REPEATER of OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY
	OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY_REPEATER E_OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY = 5
	// OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY_ROUTER corresponds to the value ROUTER of OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY
	OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY_ROUTER E_OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY = 6
	// OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY_STATION_ONLY corresponds to the value STATION_ONLY of OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY
	OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY_STATION_ONLY E_OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY = 7
	// OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY_S_VLAN corresponds to the value S_VLAN of OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY
	OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY_S_VLAN E_OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY = 8
	// OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY_TELEPHONE corresponds to the value TELEPHONE of OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY
	OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY_TELEPHONE E_OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY = 9
	// OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY_TWO_PORT_MAC_RELAY corresponds to the value TWO_PORT_MAC_RELAY of OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY
	OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY_TWO_PORT_MAC_RELAY E_OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY = 10
	// OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY_WLAN_ACCESS_POINT corresponds to the value WLAN_ACCESS_POINT of OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY
	OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY_WLAN_ACCESS_POINT E_OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY = 11
)

// E_OpenconfigLldpTypes_LLDP_TLV is a derived int64 type which is used to represent
// the enumerated node OpenconfigLldpTypes_LLDP_TLV. An additional value named
// OpenconfigLldpTypes_LLDP_TLV_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigLldpTypes_LLDP_TLV int64

// IsYANGGoEnum ensures that OpenconfigLldpTypes_LLDP_TLV implements the yang.GoEnum
// interface. This ensures that OpenconfigLldpTypes_LLDP_TLV can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigLldpTypes_LLDP_TLV) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigLldpTypes_LLDP_TLV.
func (E_OpenconfigLldpTypes_LLDP_TLV) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum }

const (
	// OpenconfigLldpTypes_LLDP_TLV_UNSET corresponds to the value UNSET of OpenconfigLldpTypes_LLDP_TLV
	OpenconfigLldpTypes_LLDP_TLV_UNSET E_OpenconfigLldpTypes_LLDP_TLV = 0
	// OpenconfigLldpTypes_LLDP_TLV_CHASSIS_ID corresponds to the value CHASSIS_ID of OpenconfigLldpTypes_LLDP_TLV
	OpenconfigLldpTypes_LLDP_TLV_CHASSIS_ID E_OpenconfigLldpTypes_LLDP_TLV = 1
	// OpenconfigLldpTypes_LLDP_TLV_MANAGEMENT_ADDRESS corresponds to the value MANAGEMENT_ADDRESS of OpenconfigLldpTypes_LLDP_TLV
	OpenconfigLldpTypes_LLDP_TLV_MANAGEMENT_ADDRESS E_OpenconfigLldpTypes_LLDP_TLV = 2
	// OpenconfigLldpTypes_LLDP_TLV_PORT_DESCRIPTION corresponds to the value PORT_DESCRIPTION of OpenconfigLldpTypes_LLDP_TLV
	OpenconfigLldpTypes_LLDP_TLV_PORT_DESCRIPTION E_OpenconfigLldpTypes_LLDP_TLV = 3
	// OpenconfigLldpTypes_LLDP_TLV_PORT_ID corresponds to the value PORT_ID of OpenconfigLldpTypes_LLDP_TLV
	OpenconfigLldpTypes_LLDP_TLV_PORT_ID E_OpenconfigLldpTypes_LLDP_TLV = 4
	// OpenconfigLldpTypes_LLDP_TLV_SYSTEM_CAPABILITIES corresponds to the value SYSTEM_CAPABILITIES of OpenconfigLldpTypes_LLDP_TLV
	OpenconfigLldpTypes_LLDP_TLV_SYSTEM_CAPABILITIES E_OpenconfigLldpTypes_LLDP_TLV = 5
	// OpenconfigLldpTypes_LLDP_TLV_SYSTEM_DESCRIPTION corresponds to the value SYSTEM_DESCRIPTION of OpenconfigLldpTypes_LLDP_TLV
	OpenconfigLldpTypes_LLDP_TLV_SYSTEM_DESCRIPTION E_OpenconfigLldpTypes_LLDP_TLV = 6
	// OpenconfigLldpTypes_LLDP_TLV_SYSTEM_NAME corresponds to the value SYSTEM_NAME of OpenconfigLldpTypes_LLDP_TLV
	OpenconfigLldpTypes_LLDP_TLV_SYSTEM_NAME E_OpenconfigLldpTypes_LLDP_TLV = 7
)

// E_OpenconfigLldp_ChassisIdType is a derived int64 type which is used to represent
// the enumerated node OpenconfigLldp_ChassisIdType. An additional value named
// OpenconfigLldp_ChassisIdType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigLldp_ChassisIdType int64

// IsYANGGoEnum ensures that OpenconfigLldp_ChassisIdType implements the yang.GoEnum
// interface. This ensures that OpenconfigLldp_ChassisIdType can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigLldp_ChassisIdType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigLldp_ChassisIdType.
func (E_OpenconfigLldp_ChassisIdType) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum }

const (
	// OpenconfigLldp_ChassisIdType_UNSET corresponds to the value UNSET of OpenconfigLldp_ChassisIdType
	OpenconfigLldp_ChassisIdType_UNSET E_OpenconfigLldp_ChassisIdType = 0
	// OpenconfigLldp_ChassisIdType_CHASSIS_COMPONENT corresponds to the value CHASSIS_COMPONENT of OpenconfigLldp_ChassisIdType
	OpenconfigLldp_ChassisIdType_CHASSIS_COMPONENT E_OpenconfigLldp_ChassisIdType = 1
	// OpenconfigLldp_ChassisIdType_INTERFACE_ALIAS corresponds to the value INTERFACE_ALIAS of OpenconfigLldp_ChassisIdType
	OpenconfigLldp_ChassisIdType_INTERFACE_ALIAS E_OpenconfigLldp_ChassisIdType = 2
	// OpenconfigLldp_ChassisIdType_PORT_COMPONENT corresponds to the value PORT_COMPONENT of OpenconfigLldp_ChassisIdType
	OpenconfigLldp_ChassisIdType_PORT_COMPONENT E_OpenconfigLldp_ChassisIdType = 3
	// OpenconfigLldp_ChassisIdType_MAC_ADDRESS corresponds to the value MAC_ADDRESS of OpenconfigLldp_ChassisIdType
	OpenconfigLldp_ChassisIdType_MAC_ADDRESS E_OpenconfigLldp_ChassisIdType = 4
	// OpenconfigLldp_ChassisIdType_NETWORK_ADDRESS corresponds to the value NETWORK_ADDRESS of OpenconfigLldp_ChassisIdType
	OpenconfigLldp_ChassisIdType_NETWORK_ADDRESS E_OpenconfigLldp_ChassisIdType = 5
	// OpenconfigLldp_ChassisIdType_INTERFACE_NAME corresponds to the value INTERFACE_NAME of OpenconfigLldp_ChassisIdType
	OpenconfigLldp_ChassisIdType_INTERFACE_NAME E_OpenconfigLldp_ChassisIdType = 6
	// OpenconfigLldp_ChassisIdType_LOCAL corresponds to the value LOCAL of OpenconfigLldp_ChassisIdType
	OpenconfigLldp_ChassisIdType_LOCAL E_OpenconfigLldp_ChassisIdType = 7
)

// E_OpenconfigLldp_PortIdType is a derived int64 type which is used to represent
// the enumerated node OpenconfigLldp_PortIdType. An additional value named
// OpenconfigLldp_PortIdType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigLldp_PortIdType int64

// IsYANGGoEnum ensures that OpenconfigLldp_PortIdType implements the yang.GoEnum
// interface. This ensures that OpenconfigLldp_PortIdType can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigLldp_PortIdType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigLldp_PortIdType.
func (E_OpenconfigLldp_PortIdType) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum }

const (
	// OpenconfigLldp_PortIdType_UNSET corresponds to the value UNSET of OpenconfigLldp_PortIdType
	OpenconfigLldp_PortIdType_UNSET E_OpenconfigLldp_PortIdType = 0
	// OpenconfigLldp_PortIdType_INTERFACE_ALIAS corresponds to the value INTERFACE_ALIAS of OpenconfigLldp_PortIdType
	OpenconfigLldp_PortIdType_INTERFACE_ALIAS E_OpenconfigLldp_PortIdType = 1
	// OpenconfigLldp_PortIdType_PORT_COMPONENT corresponds to the value PORT_COMPONENT of OpenconfigLldp_PortIdType
	OpenconfigLldp_PortIdType_PORT_COMPONENT E_OpenconfigLldp_PortIdType = 2
	// OpenconfigLldp_PortIdType_MAC_ADDRESS corresponds to the value MAC_ADDRESS of OpenconfigLldp_PortIdType
	OpenconfigLldp_PortIdType_MAC_ADDRESS E_OpenconfigLldp_PortIdType = 3
	// OpenconfigLldp_PortIdType_NETWORK_ADDRESS corresponds to the value NETWORK_ADDRESS of OpenconfigLldp_PortIdType
	OpenconfigLldp_PortIdType_NETWORK_ADDRESS E_OpenconfigLldp_PortIdType = 4
	// OpenconfigLldp_PortIdType_INTERFACE_NAME corresponds to the value INTERFACE_NAME of OpenconfigLldp_PortIdType
	OpenconfigLldp_PortIdType_INTERFACE_NAME E_OpenconfigLldp_PortIdType = 5
	// OpenconfigLldp_PortIdType_AGENT_CIRCUIT_ID corresponds to the value AGENT_CIRCUIT_ID of OpenconfigLldp_PortIdType
	OpenconfigLldp_PortIdType_AGENT_CIRCUIT_ID E_OpenconfigLldp_PortIdType = 6
	// OpenconfigLldp_PortIdType_LOCAL corresponds to the value LOCAL of OpenconfigLldp_PortIdType
	OpenconfigLldp_PortIdType_LOCAL E_OpenconfigLldp_PortIdType = 7
)

// E_OpenconfigPlatformTransceiver_Transceiver_Present is a derived int64 type which is used to represent
// the enumerated node OpenconfigPlatformTransceiver_Transceiver_Present. An additional value named
// OpenconfigPlatformTransceiver_Transceiver_Present_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigPlatformTransceiver_Transceiver_Present int64

// IsYANGGoEnum ensures that OpenconfigPlatformTransceiver_Transceiver_Present implements the yang.GoEnum
// interface. This ensures that OpenconfigPlatformTransceiver_Transceiver_Present can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigPlatformTransceiver_Transceiver_Present) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigPlatformTransceiver_Transceiver_Present.
func (E_OpenconfigPlatformTransceiver_Transceiver_Present) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigPlatformTransceiver_Transceiver_Present_UNSET corresponds to the value UNSET of OpenconfigPlatformTransceiver_Transceiver_Present
	OpenconfigPlatformTransceiver_Transceiver_Present_UNSET E_OpenconfigPlatformTransceiver_Transceiver_Present = 0
	// OpenconfigPlatformTransceiver_Transceiver_Present_PRESENT corresponds to the value PRESENT of OpenconfigPlatformTransceiver_Transceiver_Present
	OpenconfigPlatformTransceiver_Transceiver_Present_PRESENT E_OpenconfigPlatformTransceiver_Transceiver_Present = 1
	// OpenconfigPlatformTransceiver_Transceiver_Present_NOT_PRESENT corresponds to the value NOT_PRESENT of OpenconfigPlatformTransceiver_Transceiver_Present
	OpenconfigPlatformTransceiver_Transceiver_Present_NOT_PRESENT E_OpenconfigPlatformTransceiver_Transceiver_Present = 2
)

// E_OpenconfigPlatformTypes_COMPONENT_OPER_STATUS is a derived int64 type which is used to represent
// the enumerated node OpenconfigPlatformTypes_COMPONENT_OPER_STATUS. An additional value named
// OpenconfigPlatformTypes_COMPONENT_OPER_STATUS_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigPlatformTypes_COMPONENT_OPER_STATUS int64

// IsYANGGoEnum ensures that OpenconfigPlatformTypes_COMPONENT_OPER_STATUS implements the yang.GoEnum
// interface. This ensures that OpenconfigPlatformTypes_COMPONENT_OPER_STATUS can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigPlatformTypes_COMPONENT_OPER_STATUS) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigPlatformTypes_COMPONENT_OPER_STATUS.
func (E_OpenconfigPlatformTypes_COMPONENT_OPER_STATUS) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigPlatformTypes_COMPONENT_OPER_STATUS_UNSET corresponds to the value UNSET of OpenconfigPlatformTypes_COMPONENT_OPER_STATUS
	OpenconfigPlatformTypes_COMPONENT_OPER_STATUS_UNSET E_OpenconfigPlatformTypes_COMPONENT_OPER_STATUS = 0
	// OpenconfigPlatformTypes_COMPONENT_OPER_STATUS_ACTIVE corresponds to the value ACTIVE of OpenconfigPlatformTypes_COMPONENT_OPER_STATUS
	OpenconfigPlatformTypes_COMPONENT_OPER_STATUS_ACTIVE E_OpenconfigPlatformTypes_COMPONENT_OPER_STATUS = 1
	// OpenconfigPlatformTypes_COMPONENT_OPER_STATUS_DISABLED corresponds to the value DISABLED of OpenconfigPlatformTypes_COMPONENT_OPER_STATUS
	OpenconfigPlatformTypes_COMPONENT_OPER_STATUS_DISABLED E_OpenconfigPlatformTypes_COMPONENT_OPER_STATUS = 2
	// OpenconfigPlatformTypes_COMPONENT_OPER_STATUS_INACTIVE corresponds to the value INACTIVE of OpenconfigPlatformTypes_COMPONENT_OPER_STATUS
	OpenconfigPlatformTypes_COMPONENT_OPER_STATUS_INACTIVE E_OpenconfigPlatformTypes_COMPONENT_OPER_STATUS = 3
)

// E_OpenconfigPlatformTypes_FEC_MODE_TYPE is a derived int64 type which is used to represent
// the enumerated node OpenconfigPlatformTypes_FEC_MODE_TYPE. An additional value named
// OpenconfigPlatformTypes_FEC_MODE_TYPE_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigPlatformTypes_FEC_MODE_TYPE int64

// IsYANGGoEnum ensures that OpenconfigPlatformTypes_FEC_MODE_TYPE implements the yang.GoEnum
// interface. This ensures that OpenconfigPlatformTypes_FEC_MODE_TYPE can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigPlatformTypes_FEC_MODE_TYPE) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigPlatformTypes_FEC_MODE_TYPE.
func (E_OpenconfigPlatformTypes_FEC_MODE_TYPE) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigPlatformTypes_FEC_MODE_TYPE_UNSET corresponds to the value UNSET of OpenconfigPlatformTypes_FEC_MODE_TYPE
	OpenconfigPlatformTypes_FEC_MODE_TYPE_UNSET E_OpenconfigPlatformTypes_FEC_MODE_TYPE = 0
	// OpenconfigPlatformTypes_FEC_MODE_TYPE_FEC_AUTO corresponds to the value FEC_AUTO of OpenconfigPlatformTypes_FEC_MODE_TYPE
	OpenconfigPlatformTypes_FEC_MODE_TYPE_FEC_AUTO E_OpenconfigPlatformTypes_FEC_MODE_TYPE = 1
	// OpenconfigPlatformTypes_FEC_MODE_TYPE_FEC_DISABLED corresponds to the value FEC_DISABLED of OpenconfigPlatformTypes_FEC_MODE_TYPE
	OpenconfigPlatformTypes_FEC_MODE_TYPE_FEC_DISABLED E_OpenconfigPlatformTypes_FEC_MODE_TYPE = 2
	// OpenconfigPlatformTypes_FEC_MODE_TYPE_FEC_ENABLED corresponds to the value FEC_ENABLED of OpenconfigPlatformTypes_FEC_MODE_TYPE
	OpenconfigPlatformTypes_FEC_MODE_TYPE_FEC_ENABLED E_OpenconfigPlatformTypes_FEC_MODE_TYPE = 3
)

// E_OpenconfigPlatformTypes_FEC_STATUS_TYPE is a derived int64 type which is used to represent
// the enumerated node OpenconfigPlatformTypes_FEC_STATUS_TYPE. An additional value named
// OpenconfigPlatformTypes_FEC_STATUS_TYPE_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigPlatformTypes_FEC_STATUS_TYPE int64

// IsYANGGoEnum ensures that OpenconfigPlatformTypes_FEC_STATUS_TYPE implements the yang.GoEnum
// interface. This ensures that OpenconfigPlatformTypes_FEC_STATUS_TYPE can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigPlatformTypes_FEC_STATUS_TYPE) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigPlatformTypes_FEC_STATUS_TYPE.
func (E_OpenconfigPlatformTypes_FEC_STATUS_TYPE) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigPlatformTypes_FEC_STATUS_TYPE_UNSET corresponds to the value UNSET of OpenconfigPlatformTypes_FEC_STATUS_TYPE
	OpenconfigPlatformTypes_FEC_STATUS_TYPE_UNSET E_OpenconfigPlatformTypes_FEC_STATUS_TYPE = 0
	// OpenconfigPlatformTypes_FEC_STATUS_TYPE_FEC_STATUS_LOCKED corresponds to the value FEC_STATUS_LOCKED of OpenconfigPlatformTypes_FEC_STATUS_TYPE
	OpenconfigPlatformTypes_FEC_STATUS_TYPE_FEC_STATUS_LOCKED E_OpenconfigPlatformTypes_FEC_STATUS_TYPE = 1
	// OpenconfigPlatformTypes_FEC_STATUS_TYPE_FEC_STATUS_UNLOCKED corresponds to the value FEC_STATUS_UNLOCKED of OpenconfigPlatformTypes_FEC_STATUS_TYPE
	OpenconfigPlatformTypes_FEC_STATUS_TYPE_FEC_STATUS_UNLOCKED E_OpenconfigPlatformTypes_FEC_STATUS_TYPE = 2
)

// E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT is a derived int64 type which is used to represent
// the enumerated node OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT. An additional value named
// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT int64

// IsYANGGoEnum ensures that OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT implements the yang.GoEnum
// interface. This ensures that OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT.
func (E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_UNSET corresponds to the value UNSET of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_UNSET E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 0
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_BACKPLANE corresponds to the value BACKPLANE of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_BACKPLANE E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 1
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_CHASSIS corresponds to the value CHASSIS of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_CHASSIS E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 2
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_CONTROLLER_CARD corresponds to the value CONTROLLER_CARD of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_CONTROLLER_CARD E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 3
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_CPU corresponds to the value CPU of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_CPU E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 4
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_FABRIC corresponds to the value FABRIC of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_FABRIC E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 5
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_FAN corresponds to the value FAN of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_FAN E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 6
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_FRU corresponds to the value FRU of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_FRU E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 7
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_INTEGRATED_CIRCUIT corresponds to the value INTEGRATED_CIRCUIT of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_INTEGRATED_CIRCUIT E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 8
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_LINECARD corresponds to the value LINECARD of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_LINECARD E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 9
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_OPTICAL_CHANNEL corresponds to the value OPTICAL_CHANNEL of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_OPTICAL_CHANNEL E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 10
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_PORT corresponds to the value PORT of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_PORT E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 11
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_POWER_SUPPLY corresponds to the value POWER_SUPPLY of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_POWER_SUPPLY E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 12
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_SENSOR corresponds to the value SENSOR of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_SENSOR E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 13
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_STORAGE corresponds to the value STORAGE of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_STORAGE E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 14
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_TRANSCEIVER corresponds to the value TRANSCEIVER of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_TRANSCEIVER E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 15
)

// E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT is a derived int64 type which is used to represent
// the enumerated node OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT. An additional value named
// OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT int64

// IsYANGGoEnum ensures that OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT implements the yang.GoEnum
// interface. This ensures that OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT.
func (E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT_UNSET corresponds to the value UNSET of OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT_UNSET E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT = 0
	// OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT_OPERATING_SYSTEM corresponds to the value OPERATING_SYSTEM of OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT_OPERATING_SYSTEM E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT = 1
	// OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT_OPERATING_SYSTEM_UPDATE corresponds to the value OPERATING_SYSTEM_UPDATE of OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT_OPERATING_SYSTEM_UPDATE E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT = 2
)

// E_OpenconfigSpanningTreeTypes_STP_EDGE_PORT is a derived int64 type which is used to represent
// the enumerated node OpenconfigSpanningTreeTypes_STP_EDGE_PORT. An additional value named
// OpenconfigSpanningTreeTypes_STP_EDGE_PORT_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigSpanningTreeTypes_STP_EDGE_PORT int64

// IsYANGGoEnum ensures that OpenconfigSpanningTreeTypes_STP_EDGE_PORT implements the yang.GoEnum
// interface. This ensures that OpenconfigSpanningTreeTypes_STP_EDGE_PORT can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigSpanningTreeTypes_STP_EDGE_PORT) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigSpanningTreeTypes_STP_EDGE_PORT.
func (E_OpenconfigSpanningTreeTypes_STP_EDGE_PORT) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigSpanningTreeTypes_STP_EDGE_PORT_UNSET corresponds to the value UNSET of OpenconfigSpanningTreeTypes_STP_EDGE_PORT
	OpenconfigSpanningTreeTypes_STP_EDGE_PORT_UNSET E_OpenconfigSpanningTreeTypes_STP_EDGE_PORT = 0
	// OpenconfigSpanningTreeTypes_STP_EDGE_PORT_EDGE_AUTO corresponds to the value EDGE_AUTO of OpenconfigSpanningTreeTypes_STP_EDGE_PORT
	OpenconfigSpanningTreeTypes_STP_EDGE_PORT_EDGE_AUTO E_OpenconfigSpanningTreeTypes_STP_EDGE_PORT = 1
	// OpenconfigSpanningTreeTypes_STP_EDGE_PORT_EDGE_DISABLE corresponds to the value EDGE_DISABLE of OpenconfigSpanningTreeTypes_STP_EDGE_PORT
	OpenconfigSpanningTreeTypes_STP_EDGE_PORT_EDGE_DISABLE E_OpenconfigSpanningTreeTypes_STP_EDGE_PORT = 2
	// OpenconfigSpanningTreeTypes_STP_EDGE_PORT_EDGE_ENABLE corresponds to the value EDGE_ENABLE of OpenconfigSpanningTreeTypes_STP_EDGE_PORT
	OpenconfigSpanningTreeTypes_STP_EDGE_PORT_EDGE_ENABLE E_OpenconfigSpanningTreeTypes_STP_EDGE_PORT = 3
)

// E_OpenconfigSpanningTreeTypes_STP_PORT_ROLE is a derived int64 type which is used to represent
// the enumerated node OpenconfigSpanningTreeTypes_STP_PORT_ROLE. An additional value named
// OpenconfigSpanningTreeTypes_STP_PORT_ROLE_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigSpanningTreeTypes_STP_PORT_ROLE int64

// IsYANGGoEnum ensures that OpenconfigSpanningTreeTypes_STP_PORT_ROLE implements the yang.GoEnum
// interface. This ensures that OpenconfigSpanningTreeTypes_STP_PORT_ROLE can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigSpanningTreeTypes_STP_PORT_ROLE) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigSpanningTreeTypes_STP_PORT_ROLE.
func (E_OpenconfigSpanningTreeTypes_STP_PORT_ROLE) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigSpanningTreeTypes_STP_PORT_ROLE_UNSET corresponds to the value UNSET of OpenconfigSpanningTreeTypes_STP_PORT_ROLE
	OpenconfigSpanningTreeTypes_STP_PORT_ROLE_UNSET E_OpenconfigSpanningTreeTypes_STP_PORT_ROLE = 0
	// OpenconfigSpanningTreeTypes_STP_PORT_ROLE_ALTERNATE corresponds to the value ALTERNATE of OpenconfigSpanningTreeTypes_STP_PORT_ROLE
	OpenconfigSpanningTreeTypes_STP_PORT_ROLE_ALTERNATE E_OpenconfigSpanningTreeTypes_STP_PORT_ROLE = 1
	// OpenconfigSpanningTreeTypes_STP_PORT_ROLE_BACKUP corresponds to the value BACKUP of OpenconfigSpanningTreeTypes_STP_PORT_ROLE
	OpenconfigSpanningTreeTypes_STP_PORT_ROLE_BACKUP E_OpenconfigSpanningTreeTypes_STP_PORT_ROLE = 2
	// OpenconfigSpanningTreeTypes_STP_PORT_ROLE_DESIGNATED corresponds to the value DESIGNATED of OpenconfigSpanningTreeTypes_STP_PORT_ROLE
	OpenconfigSpanningTreeTypes_STP_PORT_ROLE_DESIGNATED E_OpenconfigSpanningTreeTypes_STP_PORT_ROLE = 3
	// OpenconfigSpanningTreeTypes_STP_PORT_ROLE_ROOT corresponds to the value ROOT of OpenconfigSpanningTreeTypes_STP_PORT_ROLE
	OpenconfigSpanningTreeTypes_STP_PORT_ROLE_ROOT E_OpenconfigSpanningTreeTypes_STP_PORT_ROLE = 4
)

// E_OpenconfigSpanningTreeTypes_STP_PORT_STATE is a derived int64 type which is used to represent
// the enumerated node OpenconfigSpanningTreeTypes_STP_PORT_STATE. An additional value named
// OpenconfigSpanningTreeTypes_STP_PORT_STATE_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigSpanningTreeTypes_STP_PORT_STATE int64

// IsYANGGoEnum ensures that OpenconfigSpanningTreeTypes_STP_PORT_STATE implements the yang.GoEnum
// interface. This ensures that OpenconfigSpanningTreeTypes_STP_PORT_STATE can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigSpanningTreeTypes_STP_PORT_STATE) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigSpanningTreeTypes_STP_PORT_STATE.
func (E_OpenconfigSpanningTreeTypes_STP_PORT_STATE) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigSpanningTreeTypes_STP_PORT_STATE_UNSET corresponds to the value UNSET of OpenconfigSpanningTreeTypes_STP_PORT_STATE
	OpenconfigSpanningTreeTypes_STP_PORT_STATE_UNSET E_OpenconfigSpanningTreeTypes_STP_PORT_STATE = 0
	// OpenconfigSpanningTreeTypes_STP_PORT_STATE_BLOCKING corresponds to the value BLOCKING of OpenconfigSpanningTreeTypes_STP_PORT_STATE
	OpenconfigSpanningTreeTypes_STP_PORT_STATE_BLOCKING E_OpenconfigSpanningTreeTypes_STP_PORT_STATE = 1
	// OpenconfigSpanningTreeTypes_STP_PORT_STATE_DISABLED corresponds to the value DISABLED of OpenconfigSpanningTreeTypes_STP_PORT_STATE
	OpenconfigSpanningTreeTypes_STP_PORT_STATE_DISABLED E_OpenconfigSpanningTreeTypes_STP_PORT_STATE = 2
	// OpenconfigSpanningTreeTypes_STP_PORT_STATE_FORWARDING corresponds to the value FORWARDING of OpenconfigSpanningTreeTypes_STP_PORT_STATE
	OpenconfigSpanningTreeTypes_STP_PORT_STATE_FORWARDING E_OpenconfigSpanningTreeTypes_STP_PORT_STATE = 3
	// OpenconfigSpanningTreeTypes_STP_PORT_STATE_LEARNING corresponds to the value LEARNING of OpenconfigSpanningTreeTypes_STP_PORT_STATE
	OpenconfigSpanningTreeTypes_STP_PORT_STATE_LEARNING E_OpenconfigSpanningTreeTypes_STP_PORT_STATE = 4
	// OpenconfigSpanningTreeTypes_STP_PORT_STATE_LISTENING corresponds to the value LISTENING of OpenconfigSpanningTreeTypes_STP_PORT_STATE
	OpenconfigSpanningTreeTypes_STP_PORT_STATE_LISTENING E_OpenconfigSpanningTreeTypes_STP_PORT_STATE = 5
)

// E_OpenconfigSpanningTreeTypes_STP_PROTOCOL is a derived int64 type which is used to represent
// the enumerated node OpenconfigSpanningTreeTypes_STP_PROTOCOL. An additional value named
// OpenconfigSpanningTreeTypes_STP_PROTOCOL_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigSpanningTreeTypes_STP_PROTOCOL int64

// IsYANGGoEnum ensures that OpenconfigSpanningTreeTypes_STP_PROTOCOL implements the yang.GoEnum
// interface. This ensures that OpenconfigSpanningTreeTypes_STP_PROTOCOL can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigSpanningTreeTypes_STP_PROTOCOL) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigSpanningTreeTypes_STP_PROTOCOL.
func (E_OpenconfigSpanningTreeTypes_STP_PROTOCOL) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigSpanningTreeTypes_STP_PROTOCOL_UNSET corresponds to the value UNSET of OpenconfigSpanningTreeTypes_STP_PROTOCOL
	OpenconfigSpanningTreeTypes_STP_PROTOCOL_UNSET E_OpenconfigSpanningTreeTypes_STP_PROTOCOL = 0
	// OpenconfigSpanningTreeTypes_STP_PROTOCOL_MSTP corresponds to the value MSTP of OpenconfigSpanningTreeTypes_STP_PROTOCOL
	OpenconfigSpanningTreeTypes_STP_PROTOCOL_MSTP E_OpenconfigSpanningTreeTypes_STP_PROTOCOL = 1
	// OpenconfigSpanningTreeTypes_STP_PROTOCOL_RAPID_PVST corresponds to the value RAPID_PVST of OpenconfigSpanningTreeTypes_STP_PROTOCOL
	OpenconfigSpanningTreeTypes_STP_PROTOCOL_RAPID_PVST E_OpenconfigSpanningTreeTypes_STP_PROTOCOL = 2
	// OpenconfigSpanningTreeTypes_STP_PROTOCOL_RSTP corresponds to the value RSTP of OpenconfigSpanningTreeTypes_STP_PROTOCOL
	OpenconfigSpanningTreeTypes_STP_PROTOCOL_RSTP E_OpenconfigSpanningTreeTypes_STP_PROTOCOL = 3
)

// E_OpenconfigSpanningTree_StpGuardType is a derived int64 type which is used to represent
// the enumerated node OpenconfigSpanningTree_StpGuardType. An additional value named
// OpenconfigSpanningTree_StpGuardType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigSpanningTree_StpGuardType int64

// IsYANGGoEnum ensures that OpenconfigSpanningTree_StpGuardType implements the yang.GoEnum
// interface. This ensures that OpenconfigSpanningTree_StpGuardType can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigSpanningTree_StpGuardType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigSpanningTree_StpGuardType.
func (E_OpenconfigSpanningTree_StpGuardType) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigSpanningTree_StpGuardType_UNSET corresponds to the value UNSET of OpenconfigSpanningTree_StpGuardType
	OpenconfigSpanningTree_StpGuardType_UNSET E_OpenconfigSpanningTree_StpGuardType = 0
	// OpenconfigSpanningTree_StpGuardType_ROOT corresponds to the value ROOT of OpenconfigSpanningTree_StpGuardType
	OpenconfigSpanningTree_StpGuardType_ROOT E_OpenconfigSpanningTree_StpGuardType = 1
	// OpenconfigSpanningTree_StpGuardType_LOOP corresponds to the value LOOP of OpenconfigSpanningTree_StpGuardType
	OpenconfigSpanningTree_StpGuardType_LOOP E_OpenconfigSpanningTree_StpGuardType = 2
	// OpenconfigSpanningTree_StpGuardType_NONE corresponds to the value NONE of OpenconfigSpanningTree_StpGuardType
	OpenconfigSpanningTree_StpGuardType_NONE E_OpenconfigSpanningTree_StpGuardType = 3
)

// E_OpenconfigSpanningTree_StpLinkType is a derived int64 type which is used to represent
// the enumerated node OpenconfigSpanningTree_StpLinkType. An additional value named
// OpenconfigSpanningTree_StpLinkType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigSpanningTree_StpLinkType int64

// IsYANGGoEnum ensures that OpenconfigSpanningTree_StpLinkType implements the yang.GoEnum
// interface. This ensures that OpenconfigSpanningTree_StpLinkType can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigSpanningTree_StpLinkType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigSpanningTree_StpLinkType.
func (E_OpenconfigSpanningTree_StpLinkType) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigSpanningTree_StpLinkType_UNSET corresponds to the value UNSET of OpenconfigSpanningTree_StpLinkType
	OpenconfigSpanningTree_StpLinkType_UNSET E_OpenconfigSpanningTree_StpLinkType = 0
	// OpenconfigSpanningTree_StpLinkType_P2P corresponds to the value P2P of OpenconfigSpanningTree_StpLinkType
	OpenconfigSpanningTree_StpLinkType_P2P E_OpenconfigSpanningTree_StpLinkType = 1
	// OpenconfigSpanningTree_StpLinkType_SHARED corresponds to the value SHARED of OpenconfigSpanningTree_StpLinkType
	OpenconfigSpanningTree_StpLinkType_SHARED E_OpenconfigSpanningTree_StpLinkType = 2
)

// E_OpenconfigTransportTypes_ETHERNET_PMD_TYPE is a derived int64 type which is used to represent
// the enumerated node OpenconfigTransportTypes_ETHERNET_PMD_TYPE. An additional value named
// OpenconfigTransportTypes_ETHERNET_PMD_TYPE_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigTransportTypes_ETHERNET_PMD_TYPE int64

// IsYANGGoEnum ensures that OpenconfigTransportTypes_ETHERNET_PMD_TYPE implements the yang.GoEnum
// interface. This ensures that OpenconfigTransportTypes_ETHERNET_PMD_TYPE can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigTransportTypes_ETHERNET_PMD_TYPE) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigTransportTypes_ETHERNET_PMD_TYPE.
func (E_OpenconfigTransportTypes_ETHERNET_PMD_TYPE) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigTransportTypes_ETHERNET_PMD_TYPE_UNSET corresponds to the value UNSET of OpenconfigTransportTypes_ETHERNET_PMD_TYPE
	OpenconfigTransportTypes_ETHERNET_PMD_TYPE_UNSET E_OpenconfigTransportTypes_ETHERNET_PMD_TYPE = 0
	// OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_100GBASE_CLR4 corresponds to the value ETH_100GBASE_CLR4 of OpenconfigTransportTypes_ETHERNET_PMD_TYPE
	OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_100GBASE_CLR4 E_OpenconfigTransportTypes_ETHERNET_PMD_TYPE = 1
	// OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_100GBASE_CR4 corresponds to the value ETH_100GBASE_CR4 of OpenconfigTransportTypes_ETHERNET_PMD_TYPE
	OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_100GBASE_CR4 E_OpenconfigTransportTypes_ETHERNET_PMD_TYPE = 2
	// OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_100GBASE_CWDM4 corresponds to the value ETH_100GBASE_CWDM4 of OpenconfigTransportTypes_ETHERNET_PMD_TYPE
	OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_100GBASE_CWDM4 E_OpenconfigTransportTypes_ETHERNET_PMD_TYPE = 3
	// OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_100GBASE_ER4 corresponds to the value ETH_100GBASE_ER4 of OpenconfigTransportTypes_ETHERNET_PMD_TYPE
	OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_100GBASE_ER4 E_OpenconfigTransportTypes_ETHERNET_PMD_TYPE = 4
	// OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_100GBASE_LR4 corresponds to the value ETH_100GBASE_LR4 of OpenconfigTransportTypes_ETHERNET_PMD_TYPE
	OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_100GBASE_LR4 E_OpenconfigTransportTypes_ETHERNET_PMD_TYPE = 5
	// OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_100GBASE_PSM4 corresponds to the value ETH_100GBASE_PSM4 of OpenconfigTransportTypes_ETHERNET_PMD_TYPE
	OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_100GBASE_PSM4 E_OpenconfigTransportTypes_ETHERNET_PMD_TYPE = 6
	// OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_100GBASE_SR10 corresponds to the value ETH_100GBASE_SR10 of OpenconfigTransportTypes_ETHERNET_PMD_TYPE
	OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_100GBASE_SR10 E_OpenconfigTransportTypes_ETHERNET_PMD_TYPE = 7
	// OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_100GBASE_SR4 corresponds to the value ETH_100GBASE_SR4 of OpenconfigTransportTypes_ETHERNET_PMD_TYPE
	OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_100GBASE_SR4 E_OpenconfigTransportTypes_ETHERNET_PMD_TYPE = 8
	// OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_100G_ACC corresponds to the value ETH_100G_ACC of OpenconfigTransportTypes_ETHERNET_PMD_TYPE
	OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_100G_ACC E_OpenconfigTransportTypes_ETHERNET_PMD_TYPE = 9
	// OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_100G_AOC corresponds to the value ETH_100G_AOC of OpenconfigTransportTypes_ETHERNET_PMD_TYPE
	OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_100G_AOC E_OpenconfigTransportTypes_ETHERNET_PMD_TYPE = 10
	// OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_10GBASE_ER corresponds to the value ETH_10GBASE_ER of OpenconfigTransportTypes_ETHERNET_PMD_TYPE
	OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_10GBASE_ER E_OpenconfigTransportTypes_ETHERNET_PMD_TYPE = 11
	// OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_10GBASE_LR corresponds to the value ETH_10GBASE_LR of OpenconfigTransportTypes_ETHERNET_PMD_TYPE
	OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_10GBASE_LR E_OpenconfigTransportTypes_ETHERNET_PMD_TYPE = 12
	// OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_10GBASE_LRM corresponds to the value ETH_10GBASE_LRM of OpenconfigTransportTypes_ETHERNET_PMD_TYPE
	OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_10GBASE_LRM E_OpenconfigTransportTypes_ETHERNET_PMD_TYPE = 13
	// OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_10GBASE_SR corresponds to the value ETH_10GBASE_SR of OpenconfigTransportTypes_ETHERNET_PMD_TYPE
	OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_10GBASE_SR E_OpenconfigTransportTypes_ETHERNET_PMD_TYPE = 14
	// OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_10GBASE_ZR corresponds to the value ETH_10GBASE_ZR of OpenconfigTransportTypes_ETHERNET_PMD_TYPE
	OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_10GBASE_ZR E_OpenconfigTransportTypes_ETHERNET_PMD_TYPE = 15
	// OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_40GBASE_CR4 corresponds to the value ETH_40GBASE_CR4 of OpenconfigTransportTypes_ETHERNET_PMD_TYPE
	OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_40GBASE_CR4 E_OpenconfigTransportTypes_ETHERNET_PMD_TYPE = 16
	// OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_40GBASE_ER4 corresponds to the value ETH_40GBASE_ER4 of OpenconfigTransportTypes_ETHERNET_PMD_TYPE
	OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_40GBASE_ER4 E_OpenconfigTransportTypes_ETHERNET_PMD_TYPE = 17
	// OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_40GBASE_LR4 corresponds to the value ETH_40GBASE_LR4 of OpenconfigTransportTypes_ETHERNET_PMD_TYPE
	OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_40GBASE_LR4 E_OpenconfigTransportTypes_ETHERNET_PMD_TYPE = 18
	// OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_40GBASE_PSM4 corresponds to the value ETH_40GBASE_PSM4 of OpenconfigTransportTypes_ETHERNET_PMD_TYPE
	OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_40GBASE_PSM4 E_OpenconfigTransportTypes_ETHERNET_PMD_TYPE = 19
	// OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_40GBASE_SR4 corresponds to the value ETH_40GBASE_SR4 of OpenconfigTransportTypes_ETHERNET_PMD_TYPE
	OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_40GBASE_SR4 E_OpenconfigTransportTypes_ETHERNET_PMD_TYPE = 20
	// OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_4X10GBASE_LR corresponds to the value ETH_4X10GBASE_LR of OpenconfigTransportTypes_ETHERNET_PMD_TYPE
	OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_4X10GBASE_LR E_OpenconfigTransportTypes_ETHERNET_PMD_TYPE = 21
	// OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_4X10GBASE_SR corresponds to the value ETH_4X10GBASE_SR of OpenconfigTransportTypes_ETHERNET_PMD_TYPE
	OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_4X10GBASE_SR E_OpenconfigTransportTypes_ETHERNET_PMD_TYPE = 22
	// OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_UNDEFINED corresponds to the value ETH_UNDEFINED of OpenconfigTransportTypes_ETHERNET_PMD_TYPE
	OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_UNDEFINED E_OpenconfigTransportTypes_ETHERNET_PMD_TYPE = 23
)

// E_OpenconfigTransportTypes_FIBER_CONNECTOR_TYPE is a derived int64 type which is used to represent
// the enumerated node OpenconfigTransportTypes_FIBER_CONNECTOR_TYPE. An additional value named
// OpenconfigTransportTypes_FIBER_CONNECTOR_TYPE_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigTransportTypes_FIBER_CONNECTOR_TYPE int64

// IsYANGGoEnum ensures that OpenconfigTransportTypes_FIBER_CONNECTOR_TYPE implements the yang.GoEnum
// interface. This ensures that OpenconfigTransportTypes_FIBER_CONNECTOR_TYPE can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigTransportTypes_FIBER_CONNECTOR_TYPE) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigTransportTypes_FIBER_CONNECTOR_TYPE.
func (E_OpenconfigTransportTypes_FIBER_CONNECTOR_TYPE) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigTransportTypes_FIBER_CONNECTOR_TYPE_UNSET corresponds to the value UNSET of OpenconfigTransportTypes_FIBER_CONNECTOR_TYPE
	OpenconfigTransportTypes_FIBER_CONNECTOR_TYPE_UNSET E_OpenconfigTransportTypes_FIBER_CONNECTOR_TYPE = 0
	// OpenconfigTransportTypes_FIBER_CONNECTOR_TYPE_LC_CONNECTOR corresponds to the value LC_CONNECTOR of OpenconfigTransportTypes_FIBER_CONNECTOR_TYPE
	OpenconfigTransportTypes_FIBER_CONNECTOR_TYPE_LC_CONNECTOR E_OpenconfigTransportTypes_FIBER_CONNECTOR_TYPE = 1
	// OpenconfigTransportTypes_FIBER_CONNECTOR_TYPE_MPO_CONNECTOR corresponds to the value MPO_CONNECTOR of OpenconfigTransportTypes_FIBER_CONNECTOR_TYPE
	OpenconfigTransportTypes_FIBER_CONNECTOR_TYPE_MPO_CONNECTOR E_OpenconfigTransportTypes_FIBER_CONNECTOR_TYPE = 2
	// OpenconfigTransportTypes_FIBER_CONNECTOR_TYPE_SC_CONNECTOR corresponds to the value SC_CONNECTOR of OpenconfigTransportTypes_FIBER_CONNECTOR_TYPE
	OpenconfigTransportTypes_FIBER_CONNECTOR_TYPE_SC_CONNECTOR E_OpenconfigTransportTypes_FIBER_CONNECTOR_TYPE = 3
)

// E_OpenconfigTransportTypes_OTN_APPLICATION_CODE is a derived int64 type which is used to represent
// the enumerated node OpenconfigTransportTypes_OTN_APPLICATION_CODE. An additional value named
// OpenconfigTransportTypes_OTN_APPLICATION_CODE_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigTransportTypes_OTN_APPLICATION_CODE int64

// IsYANGGoEnum ensures that OpenconfigTransportTypes_OTN_APPLICATION_CODE implements the yang.GoEnum
// interface. This ensures that OpenconfigTransportTypes_OTN_APPLICATION_CODE can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigTransportTypes_OTN_APPLICATION_CODE) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigTransportTypes_OTN_APPLICATION_CODE.
func (E_OpenconfigTransportTypes_OTN_APPLICATION_CODE) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigTransportTypes_OTN_APPLICATION_CODE_UNSET corresponds to the value UNSET of OpenconfigTransportTypes_OTN_APPLICATION_CODE
	OpenconfigTransportTypes_OTN_APPLICATION_CODE_UNSET E_OpenconfigTransportTypes_OTN_APPLICATION_CODE = 0
	// OpenconfigTransportTypes_OTN_APPLICATION_CODE_OTN_UNDEFINED corresponds to the value OTN_UNDEFINED of OpenconfigTransportTypes_OTN_APPLICATION_CODE
	OpenconfigTransportTypes_OTN_APPLICATION_CODE_OTN_UNDEFINED E_OpenconfigTransportTypes_OTN_APPLICATION_CODE = 1
	// OpenconfigTransportTypes_OTN_APPLICATION_CODE_P1L1_2D1 corresponds to the value P1L1_2D1 of OpenconfigTransportTypes_OTN_APPLICATION_CODE
	OpenconfigTransportTypes_OTN_APPLICATION_CODE_P1L1_2D1 E_OpenconfigTransportTypes_OTN_APPLICATION_CODE = 2
	// OpenconfigTransportTypes_OTN_APPLICATION_CODE_P1L1_2D2 corresponds to the value P1L1_2D2 of OpenconfigTransportTypes_OTN_APPLICATION_CODE
	OpenconfigTransportTypes_OTN_APPLICATION_CODE_P1L1_2D2 E_OpenconfigTransportTypes_OTN_APPLICATION_CODE = 3
	// OpenconfigTransportTypes_OTN_APPLICATION_CODE_P1S1_2D2 corresponds to the value P1S1_2D2 of OpenconfigTransportTypes_OTN_APPLICATION_CODE
	OpenconfigTransportTypes_OTN_APPLICATION_CODE_P1S1_2D2 E_OpenconfigTransportTypes_OTN_APPLICATION_CODE = 4
)

// E_OpenconfigTransportTypes_SONET_APPLICATION_CODE is a derived int64 type which is used to represent
// the enumerated node OpenconfigTransportTypes_SONET_APPLICATION_CODE. An additional value named
// OpenconfigTransportTypes_SONET_APPLICATION_CODE_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigTransportTypes_SONET_APPLICATION_CODE int64

// IsYANGGoEnum ensures that OpenconfigTransportTypes_SONET_APPLICATION_CODE implements the yang.GoEnum
// interface. This ensures that OpenconfigTransportTypes_SONET_APPLICATION_CODE can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigTransportTypes_SONET_APPLICATION_CODE) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigTransportTypes_SONET_APPLICATION_CODE.
func (E_OpenconfigTransportTypes_SONET_APPLICATION_CODE) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigTransportTypes_SONET_APPLICATION_CODE_UNSET corresponds to the value UNSET of OpenconfigTransportTypes_SONET_APPLICATION_CODE
	OpenconfigTransportTypes_SONET_APPLICATION_CODE_UNSET E_OpenconfigTransportTypes_SONET_APPLICATION_CODE = 0
	// OpenconfigTransportTypes_SONET_APPLICATION_CODE_SONET_UNDEFINED corresponds to the value SONET_UNDEFINED of OpenconfigTransportTypes_SONET_APPLICATION_CODE
	OpenconfigTransportTypes_SONET_APPLICATION_CODE_SONET_UNDEFINED E_OpenconfigTransportTypes_SONET_APPLICATION_CODE = 1
	// OpenconfigTransportTypes_SONET_APPLICATION_CODE_VSR2000_3R2 corresponds to the value VSR2000_3R2 of OpenconfigTransportTypes_SONET_APPLICATION_CODE
	OpenconfigTransportTypes_SONET_APPLICATION_CODE_VSR2000_3R2 E_OpenconfigTransportTypes_SONET_APPLICATION_CODE = 2
	// OpenconfigTransportTypes_SONET_APPLICATION_CODE_VSR2000_3R3 corresponds to the value VSR2000_3R3 of OpenconfigTransportTypes_SONET_APPLICATION_CODE
	OpenconfigTransportTypes_SONET_APPLICATION_CODE_VSR2000_3R3 E_OpenconfigTransportTypes_SONET_APPLICATION_CODE = 3
	// OpenconfigTransportTypes_SONET_APPLICATION_CODE_VSR2000_3R5 corresponds to the value VSR2000_3R5 of OpenconfigTransportTypes_SONET_APPLICATION_CODE
	OpenconfigTransportTypes_SONET_APPLICATION_CODE_VSR2000_3R5 E_OpenconfigTransportTypes_SONET_APPLICATION_CODE = 4
)

// E_OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE is a derived int64 type which is used to represent
// the enumerated node OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE. An additional value named
// OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE int64

// IsYANGGoEnum ensures that OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE implements the yang.GoEnum
// interface. This ensures that OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE.
func (E_OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE_UNSET corresponds to the value UNSET of OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE
	OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE_UNSET E_OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE = 0
	// OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE_CFP corresponds to the value CFP of OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE
	OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE_CFP E_OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE = 1
	// OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE_CFP2 corresponds to the value CFP2 of OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE
	OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE_CFP2 E_OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE = 2
	// OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE_CFP2_ACO corresponds to the value CFP2_ACO of OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE
	OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE_CFP2_ACO E_OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE = 3
	// OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE_CFP4 corresponds to the value CFP4 of OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE
	OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE_CFP4 E_OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE = 4
	// OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE_CPAK corresponds to the value CPAK of OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE
	OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE_CPAK E_OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE = 5
	// OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE_NON_PLUGGABLE corresponds to the value NON_PLUGGABLE of OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE
	OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE_NON_PLUGGABLE E_OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE = 6
	// OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE_OTHER corresponds to the value OTHER of OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE
	OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE_OTHER E_OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE = 7
	// OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE_QSFP corresponds to the value QSFP of OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE
	OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE_QSFP E_OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE = 8
	// OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE_QSFP28 corresponds to the value QSFP28 of OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE
	OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE_QSFP28 E_OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE = 9
	// OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE_QSFP_PLUS corresponds to the value QSFP_PLUS of OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE
	OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE_QSFP_PLUS E_OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE = 10
	// OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE_SFP corresponds to the value SFP of OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE
	OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE_SFP E_OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE = 11
	// OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE_SFP_PLUS corresponds to the value SFP_PLUS of OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE
	OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE_SFP_PLUS E_OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE = 12
	// OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE_X2 corresponds to the value X2 of OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE
	OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE_X2 E_OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE = 13
	// OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE_XFP corresponds to the value XFP of OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE
	OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE_XFP E_OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE = 14
)

// E_OpenconfigVlanTypes_TPID_TYPES is a derived int64 type which is used to represent
// the enumerated node OpenconfigVlanTypes_TPID_TYPES. An additional value named
// OpenconfigVlanTypes_TPID_TYPES_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigVlanTypes_TPID_TYPES int64

// IsYANGGoEnum ensures that OpenconfigVlanTypes_TPID_TYPES implements the yang.GoEnum
// interface. This ensures that OpenconfigVlanTypes_TPID_TYPES can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigVlanTypes_TPID_TYPES) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigVlanTypes_TPID_TYPES.
func (E_OpenconfigVlanTypes_TPID_TYPES) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigVlanTypes_TPID_TYPES_UNSET corresponds to the value UNSET of OpenconfigVlanTypes_TPID_TYPES
	OpenconfigVlanTypes_TPID_TYPES_UNSET E_OpenconfigVlanTypes_TPID_TYPES = 0
	// OpenconfigVlanTypes_TPID_TYPES_TPID_0X8100 corresponds to the value TPID_0X8100 of OpenconfigVlanTypes_TPID_TYPES
	OpenconfigVlanTypes_TPID_TYPES_TPID_0X8100 E_OpenconfigVlanTypes_TPID_TYPES = 1
	// OpenconfigVlanTypes_TPID_TYPES_TPID_0X88A8 corresponds to the value TPID_0X88A8 of OpenconfigVlanTypes_TPID_TYPES
	OpenconfigVlanTypes_TPID_TYPES_TPID_0X88A8 E_OpenconfigVlanTypes_TPID_TYPES = 2
	// OpenconfigVlanTypes_TPID_TYPES_TPID_0X9100 corresponds to the value TPID_0X9100 of OpenconfigVlanTypes_TPID_TYPES
	OpenconfigVlanTypes_TPID_TYPES_TPID_0X9100 E_OpenconfigVlanTypes_TPID_TYPES = 3
	// OpenconfigVlanTypes_TPID_TYPES_TPID_0X9200 corresponds to the value TPID_0X9200 of OpenconfigVlanTypes_TPID_TYPES
	OpenconfigVlanTypes_TPID_TYPES_TPID_0X9200 E_OpenconfigVlanTypes_TPID_TYPES = 4
	// OpenconfigVlanTypes_TPID_TYPES_TPID_ANY corresponds to the value TPID_ANY of OpenconfigVlanTypes_TPID_TYPES
	OpenconfigVlanTypes_TPID_TYPES_TPID_ANY E_OpenconfigVlanTypes_TPID_TYPES = 5
)

// E_OpenconfigVlan_VlanModeType is a derived int64 type which is used to represent
// the enumerated node OpenconfigVlan_VlanModeType. An additional value named
// OpenconfigVlan_VlanModeType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigVlan_VlanModeType int64

// IsYANGGoEnum ensures that OpenconfigVlan_VlanModeType implements the yang.GoEnum
// interface. This ensures that OpenconfigVlan_VlanModeType can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigVlan_VlanModeType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigVlan_VlanModeType.
func (E_OpenconfigVlan_VlanModeType) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum }

const (
	// OpenconfigVlan_VlanModeType_UNSET corresponds to the value UNSET of OpenconfigVlan_VlanModeType
	OpenconfigVlan_VlanModeType_UNSET E_OpenconfigVlan_VlanModeType = 0
	// OpenconfigVlan_VlanModeType_ACCESS corresponds to the value ACCESS of OpenconfigVlan_VlanModeType
	OpenconfigVlan_VlanModeType_ACCESS E_OpenconfigVlan_VlanModeType = 1
	// OpenconfigVlan_VlanModeType_TRUNK corresponds to the value TRUNK of OpenconfigVlan_VlanModeType
	OpenconfigVlan_VlanModeType_TRUNK E_OpenconfigVlan_VlanModeType = 2
)

// E_OpenconfigVlan_VlanStackAction is a derived int64 type which is used to represent
// the enumerated node OpenconfigVlan_VlanStackAction. An additional value named
// OpenconfigVlan_VlanStackAction_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigVlan_VlanStackAction int64

// IsYANGGoEnum ensures that OpenconfigVlan_VlanStackAction implements the yang.GoEnum
// interface. This ensures that OpenconfigVlan_VlanStackAction can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigVlan_VlanStackAction) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigVlan_VlanStackAction.
func (E_OpenconfigVlan_VlanStackAction) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigVlan_VlanStackAction_UNSET corresponds to the value UNSET of OpenconfigVlan_VlanStackAction
	OpenconfigVlan_VlanStackAction_UNSET E_OpenconfigVlan_VlanStackAction = 0
	// OpenconfigVlan_VlanStackAction_PUSH corresponds to the value PUSH of OpenconfigVlan_VlanStackAction
	OpenconfigVlan_VlanStackAction_PUSH E_OpenconfigVlan_VlanStackAction = 1
	// OpenconfigVlan_VlanStackAction_POP corresponds to the value POP of OpenconfigVlan_VlanStackAction
	OpenconfigVlan_VlanStackAction_POP E_OpenconfigVlan_VlanStackAction = 2
	// OpenconfigVlan_VlanStackAction_SWAP corresponds to the value SWAP of OpenconfigVlan_VlanStackAction
	OpenconfigVlan_VlanStackAction_SWAP E_OpenconfigVlan_VlanStackAction = 3
)

// ΛEnum is a map, keyed by the name of the type defined for each enum in the
// generated Go code, which provides a mapping between the constant int64 value
// of each value of the enumeration, and the string that is used to represent it
// in the YANG schema. The map is named ΛEnum in order to avoid clash with any
// valid YANG identifier.
var ΛEnum = map[string]map[int64]ygot.EnumDefinition{
	"E_IETFInterfaces_InterfaceType": {
		1:   {Name: "a12MppSwitch", DefiningModule: "iana-if-type"},
		2:   {Name: "aal2", DefiningModule: "iana-if-type"},
		3:   {Name: "aal5", DefiningModule: "iana-if-type"},
		4:   {Name: "actelisMetaLOOP", DefiningModule: "iana-if-type"},
		5:   {Name: "adsl", DefiningModule: "iana-if-type"},
		6:   {Name: "adsl2", DefiningModule: "iana-if-type"},
		7:   {Name: "adsl2plus", DefiningModule: "iana-if-type"},
		8:   {Name: "aflane8023", DefiningModule: "iana-if-type"},
		9:   {Name: "aflane8025", DefiningModule: "iana-if-type"},
		10:  {Name: "aluELP", DefiningModule: "iana-if-type"},
		11:  {Name: "aluEpon", DefiningModule: "iana-if-type"},
		12:  {Name: "aluEponLogicalLink", DefiningModule: "iana-if-type"},
		13:  {Name: "aluEponOnu", DefiningModule: "iana-if-type"},
		14:  {Name: "aluEponPhysicalUni", DefiningModule: "iana-if-type"},
		15:  {Name: "aluGponOnu", DefiningModule: "iana-if-type"},
		16:  {Name: "aluGponPhysicalUni", DefiningModule: "iana-if-type"},
		17:  {Name: "arap", DefiningModule: "iana-if-type"},
		18:  {Name: "arcnet", DefiningModule: "iana-if-type"},
		19:  {Name: "arcnetPlus", DefiningModule: "iana-if-type"},
		20:  {Name: "async", DefiningModule: "iana-if-type"},
		21:  {Name: "atm", DefiningModule: "iana-if-type"},
		22:  {Name: "atmDxi", DefiningModule: "iana-if-type"},
		23:  {Name: "atmFuni", DefiningModule: "iana-if-type"},
		24:  {Name: "atmIma", DefiningModule: "iana-if-type"},
		25:  {Name: "atmLogical", DefiningModule: "iana-if-type"},
		26:  {Name: "atmRadio", DefiningModule: "iana-if-type"},
		27:  {Name: "atmSubInterface", DefiningModule: "iana-if-type"},
		28:  {Name: "atmVciEndPt", DefiningModule: "iana-if-type"},
		29:  {Name: "atmVirtual", DefiningModule: "iana-if-type"},
		30:  {Name: "atmbond", DefiningModule: "iana-if-type"},
		31:  {Name: "aviciOpticalEther", DefiningModule: "iana-if-type"},
		32:  {Name: "basicISDN", DefiningModule: "iana-if-type"},
		33:  {Name: "bgppolicyaccounting", DefiningModule: "iana-if-type"},
		34:  {Name: "bits", DefiningModule: "iana-if-type"},
		35:  {Name: "bridge", DefiningModule: "iana-if-type"},
		36:  {Name: "bsc", DefiningModule: "iana-if-type"},
		37:  {Name: "cableDownstreamRfPort", DefiningModule: "iana-if-type"},
		38:  {Name: "capwapDot11Bss", DefiningModule: "iana-if-type"},
		39:  {Name: "capwapDot11Profile", DefiningModule: "iana-if-type"},
		40:  {Name: "capwapWtpVirtualRadio", DefiningModule: "iana-if-type"},
		41:  {Name: "cblVectaStar", DefiningModule: "iana-if-type"},
		42:  {Name: "cctEmul", DefiningModule: "iana-if-type"},
		43:  {Name: "ces", DefiningModule: "iana-if-type"},
		44:  {Name: "channel", DefiningModule: "iana-if-type"},
		45:  {Name: "ciscoISLvlan", DefiningModule: "iana-if-type"},
		46:  {Name: "cnr", DefiningModule: "iana-if-type"},
		47:  {Name: "coffee", DefiningModule: "iana-if-type"},
		48:  {Name: "compositeLink", DefiningModule: "iana-if-type"},
		49:  {Name: "dcn", DefiningModule: "iana-if-type"},
		50:  {Name: "ddnX25", DefiningModule: "iana-if-type"},
		51:  {Name: "digitalPowerline", DefiningModule: "iana-if-type"},
		52:  {Name: "digitalWrapperOverheadChannel", DefiningModule: "iana-if-type"},
		53:  {Name: "dlsw", DefiningModule: "iana-if-type"},
		54:  {Name: "docsCableDownstream", DefiningModule: "iana-if-type"},
		55:  {Name: "docsCableMCmtsDownstream", DefiningModule: "iana-if-type"},
		56:  {Name: "docsCableMaclayer", DefiningModule: "iana-if-type"},
		57:  {Name: "docsCableNdf", DefiningModule: "iana-if-type"},
		58:  {Name: "docsCableNdr", DefiningModule: "iana-if-type"},
		59:  {Name: "docsCableScte55d1FwdOob", DefiningModule: "iana-if-type"},
		60:  {Name: "docsCableScte55d1RetOob", DefiningModule: "iana-if-type"},
		61:  {Name: "docsCableScte55d2DsOob", DefiningModule: "iana-if-type"},
		62:  {Name: "docsCableScte55d2UsOob", DefiningModule: "iana-if-type"},
		63:  {Name: "docsCableUpstream", DefiningModule: "iana-if-type"},
		64:  {Name: "docsCableUpstreamChannel", DefiningModule: "iana-if-type"},
		65:  {Name: "docsCableUpstreamRfPort", DefiningModule: "iana-if-type"},
		66:  {Name: "docsOfdmDownstream", DefiningModule: "iana-if-type"},
		67:  {Name: "docsOfdmaUpstream", DefiningModule: "iana-if-type"},
		68:  {Name: "ds0", DefiningModule: "iana-if-type"},
		69:  {Name: "ds0Bundle", DefiningModule: "iana-if-type"},
		70:  {Name: "ds1", DefiningModule: "iana-if-type"},
		71:  {Name: "ds1FDL", DefiningModule: "iana-if-type"},
		72:  {Name: "ds3", DefiningModule: "iana-if-type"},
		73:  {Name: "dtm", DefiningModule: "iana-if-type"},
		74:  {Name: "dvbAsiIn", DefiningModule: "iana-if-type"},
		75:  {Name: "dvbAsiOut", DefiningModule: "iana-if-type"},
		76:  {Name: "dvbRccDownstream", DefiningModule: "iana-if-type"},
		77:  {Name: "dvbRccMacLayer", DefiningModule: "iana-if-type"},
		78:  {Name: "dvbRccUpstream", DefiningModule: "iana-if-type"},
		79:  {Name: "dvbRcsMacLayer", DefiningModule: "iana-if-type"},
		80:  {Name: "dvbRcsTdma", DefiningModule: "iana-if-type"},
		81:  {Name: "dvbTdm", DefiningModule: "iana-if-type"},
		82:  {Name: "e1", DefiningModule: "iana-if-type"},
		83:  {Name: "econet", DefiningModule: "iana-if-type"},
		84:  {Name: "eon", DefiningModule: "iana-if-type"},
		85:  {Name: "eplrs", DefiningModule: "iana-if-type"},
		86:  {Name: "escon", DefiningModule: "iana-if-type"},
		87:  {Name: "ethernet3Mbit", DefiningModule: "iana-if-type"},
		88:  {Name: "ethernetCsmacd", DefiningModule: "iana-if-type"},
		89:  {Name: "fast", DefiningModule: "iana-if-type"},
		90:  {Name: "fastEther", DefiningModule: "iana-if-type"},
		91:  {Name: "fastEtherFX", DefiningModule: "iana-if-type"},
		92:  {Name: "fastdsl", DefiningModule: "iana-if-type"},
		93:  {Name: "fcipLink", DefiningModule: "iana-if-type"},
		94:  {Name: "fddi", DefiningModule: "iana-if-type"},
		95:  {Name: "fibreChannel", DefiningModule: "iana-if-type"},
		96:  {Name: "frDlciEndPt", DefiningModule: "iana-if-type"},
		97:  {Name: "frForward", DefiningModule: "iana-if-type"},
		98:  {Name: "frameRelay", DefiningModule: "iana-if-type"},
		99:  {Name: "frameRelayInterconnect", DefiningModule: "iana-if-type"},
		100: {Name: "frameRelayMPI", DefiningModule: "iana-if-type"},
		101: {Name: "frameRelayService", DefiningModule: "iana-if-type"},
		102: {Name: "frf16MfrBundle", DefiningModule: "iana-if-type"},
		103: {Name: "g703at2mb", DefiningModule: "iana-if-type"},
		104: {Name: "g703at64k", DefiningModule: "iana-if-type"},
		105: {Name: "g9981", DefiningModule: "iana-if-type"},
		106: {Name: "g9982", DefiningModule: "iana-if-type"},
		107: {Name: "g9983", DefiningModule: "iana-if-type"},
		108: {Name: "gfast", DefiningModule: "iana-if-type"},
		109: {Name: "gfp", DefiningModule: "iana-if-type"},
		110: {Name: "gigabitEthernet", DefiningModule: "iana-if-type"},
		111: {Name: "gpon", DefiningModule: "iana-if-type"},
		112: {Name: "gr303IDT", DefiningModule: "iana-if-type"},
		113: {Name: "gr303RDT", DefiningModule: "iana-if-type"},
		114: {Name: "gtp", DefiningModule: "iana-if-type"},
		115: {Name: "h323Gatekeeper", DefiningModule: "iana-if-type"},
		116: {Name: "h323Proxy", DefiningModule: "iana-if-type"},
		117: {Name: "hdh1822", DefiningModule: "iana-if-type"},
		118: {Name: "hdlc", DefiningModule: "iana-if-type"},
		119: {Name: "hdsl2", DefiningModule: "iana-if-type"},
		120: {Name: "hiperlan2", DefiningModule: "iana-if-type"},
		121: {Name: "hippi", DefiningModule: "iana-if-type"},
		122: {Name: "hippiInterface", DefiningModule: "iana-if-type"},
		123: {Name: "homepna", DefiningModule: "iana-if-type"},
		124: {Name: "hostPad", DefiningModule: "iana-if-type"},
		125: {Name: "hssi", DefiningModule: "iana-if-type"},
		126: {Name: "hyperchannel", DefiningModule: "iana-if-type"},
		127: {Name: "iana-interface-type", DefiningModule: "iana-if-type"},
		128: {Name: "ibm370parChan", DefiningModule: "iana-if-type"},
		129: {Name: "idsl", DefiningModule: "iana-if-type"},
		130: {Name: "ieee1394", DefiningModule: "iana-if-type"},
		131: {Name: "ieee80211", DefiningModule: "iana-if-type"},
		132: {Name: "ieee80212", DefiningModule: "iana-if-type"},
		133: {Name: "ieee802154", DefiningModule: "iana-if-type"},
		134: {Name: "ieee80216WMAN", DefiningModule: "iana-if-type"},
		135: {Name: "ieee8023adLag", DefiningModule: "iana-if-type"},
		136: {Name: "if-gsn", DefiningModule: "iana-if-type"},
		137: {Name: "ifPwType", DefiningModule: "iana-if-type"},
		138: {Name: "ifVfiType", DefiningModule: "iana-if-type"},
		139: {Name: "ilan", DefiningModule: "iana-if-type"},
		140: {Name: "imt", DefiningModule: "iana-if-type"},
		141: {Name: "infiniband", DefiningModule: "iana-if-type"},
		142: {Name: "interleave", DefiningModule: "iana-if-type"},
		143: {Name: "ip", DefiningModule: "iana-if-type"},
		144: {Name: "ipForward", DefiningModule: "iana-if-type"},
		145: {Name: "ipOverAtm", DefiningModule: "iana-if-type"},
		146: {Name: "ipOverCdlc", DefiningModule: "iana-if-type"},
		147: {Name: "ipOverClaw", DefiningModule: "iana-if-type"},
		148: {Name: "ipSwitch", DefiningModule: "iana-if-type"},
		149: {Name: "isdn", DefiningModule: "iana-if-type"},
		150: {Name: "isdns", DefiningModule: "iana-if-type"},
		151: {Name: "isdnu", DefiningModule: "iana-if-type"},
		152: {Name: "iso88022llc", DefiningModule: "iana-if-type"},
		153: {Name: "iso88023Csmacd", DefiningModule: "iana-if-type"},
		154: {Name: "iso88024TokenBus", DefiningModule: "iana-if-type"},
		155: {Name: "iso88025CRFPInt", DefiningModule: "iana-if-type"},
		156: {Name: "iso88025Dtr", DefiningModule: "iana-if-type"},
		157: {Name: "iso88025Fiber", DefiningModule: "iana-if-type"},
		158: {Name: "iso88025TokenRing", DefiningModule: "iana-if-type"},
		159: {Name: "iso88026Man", DefiningModule: "iana-if-type"},
		160: {Name: "isup", DefiningModule: "iana-if-type"},
		161: {Name: "l2vlan", DefiningModule: "iana-if-type"},
		162: {Name: "l3ipvlan", DefiningModule: "iana-if-type"},
		163: {Name: "l3ipxvlan", DefiningModule: "iana-if-type"},
		164: {Name: "lapb", DefiningModule: "iana-if-type"},
		165: {Name: "lapd", DefiningModule: "iana-if-type"},
		166: {Name: "lapf", DefiningModule: "iana-if-type"},
		167: {Name: "linegroup", DefiningModule: "iana-if-type"},
		168: {Name: "lmp", DefiningModule: "iana-if-type"},
		169: {Name: "localTalk", DefiningModule: "iana-if-type"},
		170: {Name: "macSecControlledIF", DefiningModule: "iana-if-type"},
		171: {Name: "macSecUncontrolledIF", DefiningModule: "iana-if-type"},
		172: {Name: "mediaMailOverIp", DefiningModule: "iana-if-type"},
		173: {Name: "mfSigLink", DefiningModule: "iana-if-type"},
		174: {Name: "miox25", DefiningModule: "iana-if-type"},
		175: {Name: "mocaVersion1", DefiningModule: "iana-if-type"},
		176: {Name: "modem", DefiningModule: "iana-if-type"},
		177: {Name: "mpc", DefiningModule: "iana-if-type"},
		178: {Name: "mpegTransport", DefiningModule: "iana-if-type"},
		179: {Name: "mpls", DefiningModule: "iana-if-type"},
		180: {Name: "mplsTunnel", DefiningModule: "iana-if-type"},
		181: {Name: "msdsl", DefiningModule: "iana-if-type"},
		182: {Name: "mvl", DefiningModule: "iana-if-type"},
		183: {Name: "myrinet", DefiningModule: "iana-if-type"},
		184: {Name: "nfas", DefiningModule: "iana-if-type"},
		185: {Name: "nsip", DefiningModule: "iana-if-type"},
		186: {Name: "opticalChannel", DefiningModule: "iana-if-type"},
		187: {Name: "opticalChannelGroup", DefiningModule: "iana-if-type"},
		188: {Name: "opticalTransport", DefiningModule: "iana-if-type"},
		189: {Name: "other", DefiningModule: "iana-if-type"},
		190: {Name: "otnOdu", DefiningModule: "iana-if-type"},
		191: {Name: "otnOtu", DefiningModule: "iana-if-type"},
		192: {Name: "para", DefiningModule: "iana-if-type"},
		193: {Name: "pdnEtherLoop1", DefiningModule: "iana-if-type"},
		194: {Name: "pdnEtherLoop2", DefiningModule: "iana-if-type"},
		195: {Name: "pip", DefiningModule: "iana-if-type"},
		196: {Name: "plc", DefiningModule: "iana-if-type"},
		197: {Name: "pon155", DefiningModule: "iana-if-type"},
		198: {Name: "pon622", DefiningModule: "iana-if-type"},
		199: {Name: "pos", DefiningModule: "iana-if-type"},
		200: {Name: "ppp", DefiningModule: "iana-if-type"},
		201: {Name: "pppMultilinkBundle", DefiningModule: "iana-if-type"},
		202: {Name: "primaryISDN", DefiningModule: "iana-if-type"},
		203: {Name: "propAtm", DefiningModule: "iana-if-type"},
		204: {Name: "propBWAp2Mp", DefiningModule: "iana-if-type"},
		205: {Name: "propCnls", DefiningModule: "iana-if-type"},
		206: {Name: "propDocsWirelessDownstream", DefiningModule: "iana-if-type"},
		207: {Name: "propDocsWirelessMaclayer", DefiningModule: "iana-if-type"},
		208: {Name: "propDocsWirelessUpstream", DefiningModule: "iana-if-type"},
		209: {Name: "propMultiplexor", DefiningModule: "iana-if-type"},
		210: {Name: "propPointToPointSerial", DefiningModule: "iana-if-type"},
		211: {Name: "propVirtual", DefiningModule: "iana-if-type"},
		212: {Name: "propWirelessP2P", DefiningModule: "iana-if-type"},
		213: {Name: "proteon10Mbit", DefiningModule: "iana-if-type"},
		214: {Name: "proteon80Mbit", DefiningModule: "iana-if-type"},
		215: {Name: "ptm", DefiningModule: "iana-if-type"},
		216: {Name: "q2931", DefiningModule: "iana-if-type"},
		217: {Name: "qam", DefiningModule: "iana-if-type"},
		218: {Name: "qllc", DefiningModule: "iana-if-type"},
		219: {Name: "radioMAC", DefiningModule: "iana-if-type"},
		220: {Name: "radsl", DefiningModule: "iana-if-type"},
		221: {Name: "reachDSL", DefiningModule: "iana-if-type"},
		222: {Name: "regular1822", DefiningModule: "iana-if-type"},
		223: {Name: "rfc1483", DefiningModule: "iana-if-type"},
		224: {Name: "rfc877x25", DefiningModule: "iana-if-type"},
		225: {Name: "rpr", DefiningModule: "iana-if-type"},
		226: {Name: "rs232", DefiningModule: "iana-if-type"},
		227: {Name: "rsrb", DefiningModule: "iana-if-type"},
		228: {Name: "sdci", DefiningModule: "iana-if-type"},
		229: {Name: "sdlc", DefiningModule: "iana-if-type"},
		230: {Name: "sdsl", DefiningModule: "iana-if-type"},
		231: {Name: "shdsl", DefiningModule: "iana-if-type"},
		232: {Name: "sip", DefiningModule: "iana-if-type"},
		233: {Name: "sipSig", DefiningModule: "iana-if-type"},
		234: {Name: "sipTg", DefiningModule: "iana-if-type"},
		235: {Name: "sixToFour", DefiningModule: "iana-if-type"},
		236: {Name: "slip", DefiningModule: "iana-if-type"},
		237: {Name: "smdsDxi", DefiningModule: "iana-if-type"},
		238: {Name: "smdsIcip", DefiningModule: "iana-if-type"},
		239: {Name: "softwareLoopback", DefiningModule: "iana-if-type"},
		240: {Name: "sonet", DefiningModule: "iana-if-type"},
		241: {Name: "sonetOverheadChannel", DefiningModule: "iana-if-type"},
		242: {Name: "sonetPath", DefiningModule: "iana-if-type"},
		243: {Name: "sonetVT", DefiningModule: "iana-if-type"},
		244: {Name: "srp", DefiningModule: "iana-if-type"},
		245: {Name: "ss7SigLink", DefiningModule: "iana-if-type"},
		246: {Name: "stackToStack", DefiningModule: "iana-if-type"},
		247: {Name: "starLan", DefiningModule: "iana-if-type"},
		248: {Name: "tdlc", DefiningModule: "iana-if-type"},
		249: {Name: "teLink", DefiningModule: "iana-if-type"},
		250: {Name: "termPad", DefiningModule: "iana-if-type"},
		251: {Name: "tr008", DefiningModule: "iana-if-type"},
		252: {Name: "transpHdlc", DefiningModule: "iana-if-type"},
		253: {Name: "tunnel", DefiningModule: "iana-if-type"},
		254: {Name: "ultra", DefiningModule: "iana-if-type"},
		255: {Name: "usb", DefiningModule: "iana-if-type"},
		256: {Name: "v11", DefiningModule: "iana-if-type"},
		257: {Name: "v35", DefiningModule: "iana-if-type"},
		258: {Name: "v36", DefiningModule: "iana-if-type"},
		259: {Name: "v37", DefiningModule: "iana-if-type"},
		260: {Name: "vdsl", DefiningModule: "iana-if-type"},
		261: {Name: "vdsl2", DefiningModule: "iana-if-type"},
		262: {Name: "virtualIpAddress", DefiningModule: "iana-if-type"},
		263: {Name: "virtualTg", DefiningModule: "iana-if-type"},
		264: {Name: "vmwareNicTeam", DefiningModule: "iana-if-type"},
		265: {Name: "vmwareVirtualNic", DefiningModule: "iana-if-type"},
		266: {Name: "voiceDID", DefiningModule: "iana-if-type"},
		267: {Name: "voiceEBS", DefiningModule: "iana-if-type"},
		268: {Name: "voiceEM", DefiningModule: "iana-if-type"},
		269: {Name: "voiceEMFGD", DefiningModule: "iana-if-type"},
		270: {Name: "voiceEncap", DefiningModule: "iana-if-type"},
		271: {Name: "voiceFGDEANA", DefiningModule: "iana-if-type"},
		272: {Name: "voiceFGDOS", DefiningModule: "iana-if-type"},
		273: {Name: "voiceFXO", DefiningModule: "iana-if-type"},
		274: {Name: "voiceFXS", DefiningModule: "iana-if-type"},
		275: {Name: "voiceOverAtm", DefiningModule: "iana-if-type"},
		276: {Name: "voiceOverCable", DefiningModule: "iana-if-type"},
		277: {Name: "voiceOverFrameRelay", DefiningModule: "iana-if-type"},
		278: {Name: "voiceOverIp", DefiningModule: "iana-if-type"},
		279: {Name: "wwanPP", DefiningModule: "iana-if-type"},
		280: {Name: "wwanPP2", DefiningModule: "iana-if-type"},
		281: {Name: "x213", DefiningModule: "iana-if-type"},
		282: {Name: "x25huntGroup", DefiningModule: "iana-if-type"},
		283: {Name: "x25mlp", DefiningModule: "iana-if-type"},
		284: {Name: "x25ple", DefiningModule: "iana-if-type"},
		285: {Name: "x86Laps", DefiningModule: "iana-if-type"},
		286: {Name: "xboxWireless", DefiningModule: "iana-if-type"},
	},
	"E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY": {
		1: {Name: "CRITICAL", DefiningModule: "openconfig-alarm-types"},
		2: {Name: "MAJOR", DefiningModule: "openconfig-alarm-types"},
		3: {Name: "MINOR", DefiningModule: "openconfig-alarm-types"},
		4: {Name: "UNKNOWN", DefiningModule: "openconfig-alarm-types"},
		5: {Name: "WARNING", DefiningModule: "openconfig-alarm-types"},
	},
	"E_OpenconfigIfAggregate_AggregationType": {
		1: {Name: "LACP"},
		2: {Name: "STATIC"},
	},
	"E_OpenconfigIfEthernet_ETHERNET_SPEED": {
		1:  {Name: "SPEED_100GB", DefiningModule: "openconfig-if-ethernet"},
		2:  {Name: "SPEED_100MB", DefiningModule: "openconfig-if-ethernet"},
		3:  {Name: "SPEED_10GB", DefiningModule: "openconfig-if-ethernet"},
		4:  {Name: "SPEED_10MB", DefiningModule: "openconfig-if-ethernet"},
		5:  {Name: "SPEED_1GB", DefiningModule: "openconfig-if-ethernet"},
		6:  {Name: "SPEED_2500MB", DefiningModule: "openconfig-if-ethernet"},
		7:  {Name: "SPEED_25GB", DefiningModule: "openconfig-if-ethernet"},
		8:  {Name: "SPEED_40GB", DefiningModule: "openconfig-if-ethernet"},
		9:  {Name: "SPEED_50GB", DefiningModule: "openconfig-if-ethernet"},
		10: {Name: "SPEED_5GB", DefiningModule: "openconfig-if-ethernet"},
		11: {Name: "SPEED_UNKNOWN", DefiningModule: "openconfig-if-ethernet"},
	},
	"E_OpenconfigIfEthernet_Ethernet_DuplexMode": {
		1: {Name: "FULL"},
		2: {Name: "HALF"},
	},
	"E_OpenconfigIfEthernet_Ethernet_NegotiatedDuplexMode": {
		1: {Name: "FULL"},
		2: {Name: "HALF"},
	},
	"E_OpenconfigIfIp_Address_Status": {
		1: {Name: "PREFERRED"},
		2: {Name: "DEPRECATED"},
		3: {Name: "INVALID"},
		4: {Name: "INACCESSIBLE"},
		5: {Name: "UNKNOWN"},
		6: {Name: "TENTATIVE"},
		7: {Name: "DUPLICATE"},
		8: {Name: "OPTIMISTIC"},
	},
	"E_OpenconfigIfIp_IpAddressOrigin": {
		1: {Name: "OTHER"},
		2: {Name: "STATIC"},
		3: {Name: "DHCP"},
		4: {Name: "LINK_LAYER"},
		5: {Name: "RANDOM"},
	},
	"E_OpenconfigIfIp_NeighborOrigin": {
		1: {Name: "OTHER"},
		2: {Name: "STATIC"},
		3: {Name: "DYNAMIC"},
	},
	"E_OpenconfigIfIp_Neighbor_NeighborState": {
		1: {Name: "INCOMPLETE"},
		2: {Name: "REACHABLE"},
		3: {Name: "STALE"},
		4: {Name: "DELAY"},
		5: {Name: "PROBE"},
	},
	"E_OpenconfigIfIp_ProxyArp_Mode": {
		1: {Name: "DISABLE"},
		2: {Name: "REMOTE_ONLY"},
		3: {Name: "ALL"},
	},
	"E_OpenconfigInterfaces_Interface_AdminStatus": {
		1: {Name: "UP"},
		2: {Name: "DOWN"},
		3: {Name: "TESTING"},
	},
	"E_OpenconfigInterfaces_Interface_OperStatus": {
		2: {Name: "UP"},
		3: {Name: "DOWN"},
		4: {Name: "TESTING"},
		5: {Name: "UNKNOWN"},
		6: {Name: "DORMANT"},
		7: {Name: "NOT_PRESENT"},
		8: {Name: "LOWER_LAYER_DOWN"},
	},
	"E_OpenconfigLacp_LacpActivityType": {
		1: {Name: "ACTIVE"},
		2: {Name: "PASSIVE"},
	},
	"E_OpenconfigLacp_LacpPeriodType": {
		1: {Name: "FAST"},
		2: {Name: "SLOW"},
	},
	"E_OpenconfigLacp_LacpSynchronizationType": {
		1: {Name: "IN_SYNC"},
		2: {Name: "OUT_SYNC"},
	},
	"E_OpenconfigLacp_LacpTimeoutType": {
		1: {Name: "LONG"},
		2: {Name: "SHORT"},
	},
	"E_OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY": {
		1:  {Name: "C_VLAN", DefiningModule: "openconfig-lldp-types"},
		2:  {Name: "DOCSIS_CABLE_DEVICE", DefiningModule: "openconfig-lldp-types"},
		3:  {Name: "MAC_BRIDGE", DefiningModule: "openconfig-lldp-types"},
		4:  {Name: "OTHER", DefiningModule: "openconfig-lldp-types"},
		5:  {Name: "REPEATER", DefiningModule: "openconfig-lldp-types"},
		6:  {Name: "ROUTER", DefiningModule: "openconfig-lldp-types"},
		7:  {Name: "STATION_ONLY", DefiningModule: "openconfig-lldp-types"},
		8:  {Name: "S_VLAN", DefiningModule: "openconfig-lldp-types"},
		9:  {Name: "TELEPHONE", DefiningModule: "openconfig-lldp-types"},
		10: {Name: "TWO_PORT_MAC_RELAY", DefiningModule: "openconfig-lldp-types"},
		11: {Name: "WLAN_ACCESS_POINT", DefiningModule: "openconfig-lldp-types"},
	},
	"E_OpenconfigLldpTypes_LLDP_TLV": {
		1: {Name: "CHASSIS_ID", DefiningModule: "openconfig-lldp-types"},
		2: {Name: "MANAGEMENT_ADDRESS", DefiningModule: "openconfig-lldp-types"},
		3: {Name: "PORT_DESCRIPTION", DefiningModule: "openconfig-lldp-types"},
		4: {Name: "PORT_ID", DefiningModule: "openconfig-lldp-types"},
		5: {Name: "SYSTEM_CAPABILITIES", DefiningModule: "openconfig-lldp-types"},
		6: {Name: "SYSTEM_DESCRIPTION", DefiningModule: "openconfig-lldp-types"},
		7: {Name: "SYSTEM_NAME", DefiningModule: "openconfig-lldp-types"},
	},
	"E_OpenconfigLldp_ChassisIdType": {
		1: {Name: "CHASSIS_COMPONENT"},
		2: {Name: "INTERFACE_ALIAS"},
		3: {Name: "PORT_COMPONENT"},
		4: {Name: "MAC_ADDRESS"},
		5: {Name: "NETWORK_ADDRESS"},
		6: {Name: "INTERFACE_NAME"},
		7: {Name: "LOCAL"},
	},
	"E_OpenconfigLldp_PortIdType": {
		1: {Name: "INTERFACE_ALIAS"},
		2: {Name: "PORT_COMPONENT"},
		3: {Name: "MAC_ADDRESS"},
		4: {Name: "NETWORK_ADDRESS"},
		5: {Name: "INTERFACE_NAME"},
		6: {Name: "AGENT_CIRCUIT_ID"},
		7: {Name: "LOCAL"},
	},
	"E_OpenconfigPlatformTransceiver_Transceiver_Present": {
		1: {Name: "PRESENT"},
		2: {Name: "NOT_PRESENT"},
	},
	"E_OpenconfigPlatformTypes_COMPONENT_OPER_STATUS": {
		1: {Name: "ACTIVE", DefiningModule: "openconfig-platform-types"},
		2: {Name: "DISABLED", DefiningModule: "openconfig-platform-types"},
		3: {Name: "INACTIVE", DefiningModule: "openconfig-platform-types"},
	},
	"E_OpenconfigPlatformTypes_FEC_MODE_TYPE": {
		1: {Name: "FEC_AUTO", DefiningModule: "openconfig-platform-types"},
		2: {Name: "FEC_DISABLED", DefiningModule: "openconfig-platform-types"},
		3: {Name: "FEC_ENABLED", DefiningModule: "openconfig-platform-types"},
	},
	"E_OpenconfigPlatformTypes_FEC_STATUS_TYPE": {
		1: {Name: "FEC_STATUS_LOCKED", DefiningModule: "openconfig-platform-types"},
		2: {Name: "FEC_STATUS_UNLOCKED", DefiningModule: "openconfig-platform-types"},
	},
	"E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT": {
		1:  {Name: "BACKPLANE", DefiningModule: "openconfig-platform-types"},
		2:  {Name: "CHASSIS", DefiningModule: "openconfig-platform-types"},
		3:  {Name: "CONTROLLER_CARD", DefiningModule: "openconfig-platform-types"},
		4:  {Name: "CPU", DefiningModule: "openconfig-platform-types"},
		5:  {Name: "FABRIC", DefiningModule: "openconfig-platform-types"},
		6:  {Name: "FAN", DefiningModule: "openconfig-platform-types"},
		7:  {Name: "FRU", DefiningModule: "openconfig-platform-types"},
		8:  {Name: "INTEGRATED_CIRCUIT", DefiningModule: "openconfig-platform-types"},
		9:  {Name: "LINECARD", DefiningModule: "openconfig-platform-types"},
		10: {Name: "OPTICAL_CHANNEL", DefiningModule: "openconfig-transport-types"},
		11: {Name: "PORT", DefiningModule: "openconfig-platform-types"},
		12: {Name: "POWER_SUPPLY", DefiningModule: "openconfig-platform-types"},
		13: {Name: "SENSOR", DefiningModule: "openconfig-platform-types"},
		14: {Name: "STORAGE", DefiningModule: "openconfig-platform-types"},
		15: {Name: "TRANSCEIVER", DefiningModule: "openconfig-platform-types"},
	},
	"E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT": {
		1: {Name: "OPERATING_SYSTEM", DefiningModule: "openconfig-platform-types"},
		2: {Name: "OPERATING_SYSTEM_UPDATE", DefiningModule: "openconfig-platform-types"},
	},
	"E_OpenconfigSpanningTreeTypes_STP_EDGE_PORT": {
		1: {Name: "EDGE_AUTO", DefiningModule: "openconfig-spanning-tree-types"},
		2: {Name: "EDGE_DISABLE", DefiningModule: "openconfig-spanning-tree-types"},
		3: {Name: "EDGE_ENABLE", DefiningModule: "openconfig-spanning-tree-types"},
	},
	"E_OpenconfigSpanningTreeTypes_STP_PORT_ROLE": {
		1: {Name: "ALTERNATE", DefiningModule: "openconfig-spanning-tree-types"},
		2: {Name: "BACKUP", DefiningModule: "openconfig-spanning-tree-types"},
		3: {Name: "DESIGNATED", DefiningModule: "openconfig-spanning-tree-types"},
		4: {Name: "ROOT", DefiningModule: "openconfig-spanning-tree-types"},
	},
	"E_OpenconfigSpanningTreeTypes_STP_PORT_STATE": {
		1: {Name: "BLOCKING", DefiningModule: "openconfig-spanning-tree-types"},
		2: {Name: "DISABLED", DefiningModule: "openconfig-spanning-tree-types"},
		3: {Name: "FORWARDING", DefiningModule: "openconfig-spanning-tree-types"},
		4: {Name: "LEARNING", DefiningModule: "openconfig-spanning-tree-types"},
		5: {Name: "LISTENING", DefiningModule: "openconfig-spanning-tree-types"},
	},
	"E_OpenconfigSpanningTreeTypes_STP_PROTOCOL": {
		1: {Name: "MSTP", DefiningModule: "openconfig-spanning-tree-types"},
		2: {Name: "RAPID_PVST", DefiningModule: "openconfig-spanning-tree-types"},
		3: {Name: "RSTP", DefiningModule: "openconfig-spanning-tree-types"},
	},
	"E_OpenconfigSpanningTree_StpGuardType": {
		1: {Name: "ROOT"},
		2: {Name: "LOOP"},
		3: {Name: "NONE"},
	},
	"E_OpenconfigSpanningTree_StpLinkType": {
		1: {Name: "P2P"},
		2: {Name: "SHARED"},
	},
	"E_OpenconfigTransportTypes_ETHERNET_PMD_TYPE": {
		1:  {Name: "ETH_100GBASE_CLR4", DefiningModule: "openconfig-transport-types"},
		2:  {Name: "ETH_100GBASE_CR4", DefiningModule: "openconfig-transport-types"},
		3:  {Name: "ETH_100GBASE_CWDM4", DefiningModule: "openconfig-transport-types"},
		4:  {Name: "ETH_100GBASE_ER4", DefiningModule: "openconfig-transport-types"},
		5:  {Name: "ETH_100GBASE_LR4", DefiningModule: "openconfig-transport-types"},
		6:  {Name: "ETH_100GBASE_PSM4", DefiningModule: "openconfig-transport-types"},
		7:  {Name: "ETH_100GBASE_SR10", DefiningModule: "openconfig-transport-types"},
		8:  {Name: "ETH_100GBASE_SR4", DefiningModule: "openconfig-transport-types"},
		9:  {Name: "ETH_100G_ACC", DefiningModule: "openconfig-transport-types"},
		10: {Name: "ETH_100G_AOC", DefiningModule: "openconfig-transport-types"},
		11: {Name: "ETH_10GBASE_ER", DefiningModule: "openconfig-transport-types"},
		12: {Name: "ETH_10GBASE_LR", DefiningModule: "openconfig-transport-types"},
		13: {Name: "ETH_10GBASE_LRM", DefiningModule: "openconfig-transport-types"},
		14: {Name: "ETH_10GBASE_SR", DefiningModule: "openconfig-transport-types"},
		15: {Name: "ETH_10GBASE_ZR", DefiningModule: "openconfig-transport-types"},
		16: {Name: "ETH_40GBASE_CR4", DefiningModule: "openconfig-transport-types"},
		17: {Name: "ETH_40GBASE_ER4", DefiningModule: "openconfig-transport-types"},
		18: {Name: "ETH_40GBASE_LR4", DefiningModule: "openconfig-transport-types"},
		19: {Name: "ETH_40GBASE_PSM4", DefiningModule: "openconfig-transport-types"},
		20: {Name: "ETH_40GBASE_SR4", DefiningModule: "openconfig-transport-types"},
		21: {Name: "ETH_4X10GBASE_LR", DefiningModule: "openconfig-transport-types"},
		22: {Name: "ETH_4X10GBASE_SR", DefiningModule: "openconfig-transport-types"},
		23: {Name: "ETH_UNDEFINED", DefiningModule: "openconfig-transport-types"},
	},
	"E_OpenconfigTransportTypes_FIBER_CONNECTOR_TYPE": {
		1: {Name: "LC_CONNECTOR", DefiningModule: "openconfig-transport-types"},
		2: {Name: "MPO_CONNECTOR", DefiningModule: "openconfig-transport-types"},
		3: {Name: "SC_CONNECTOR", DefiningModule: "openconfig-transport-types"},
	},
	"E_OpenconfigTransportTypes_OTN_APPLICATION_CODE": {
		1: {Name: "OTN_UNDEFINED", DefiningModule: "openconfig-transport-types"},
		2: {Name: "P1L1_2D1", DefiningModule: "openconfig-transport-types"},
		3: {Name: "P1L1_2D2", DefiningModule: "openconfig-transport-types"},
		4: {Name: "P1S1_2D2", DefiningModule: "openconfig-transport-types"},
	},
	"E_OpenconfigTransportTypes_SONET_APPLICATION_CODE": {
		1: {Name: "SONET_UNDEFINED", DefiningModule: "openconfig-transport-types"},
		2: {Name: "VSR2000_3R2", DefiningModule: "openconfig-transport-types"},
		3: {Name: "VSR2000_3R3", DefiningModule: "openconfig-transport-types"},
		4: {Name: "VSR2000_3R5", DefiningModule: "openconfig-transport-types"},
	},
	"E_OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE": {
		1:  {Name: "CFP", DefiningModule: "openconfig-transport-types"},
		2:  {Name: "CFP2", DefiningModule: "openconfig-transport-types"},
		3:  {Name: "CFP2_ACO", DefiningModule: "openconfig-transport-types"},
		4:  {Name: "CFP4", DefiningModule: "openconfig-transport-types"},
		5:  {Name: "CPAK", DefiningModule: "openconfig-transport-types"},
		6:  {Name: "NON_PLUGGABLE", DefiningModule: "openconfig-transport-types"},
		7:  {Name: "OTHER", DefiningModule: "openconfig-transport-types"},
		8:  {Name: "QSFP", DefiningModule: "openconfig-transport-types"},
		9:  {Name: "QSFP28", DefiningModule: "openconfig-transport-types"},
		10: {Name: "QSFP_PLUS", DefiningModule: "openconfig-transport-types"},
		11: {Name: "SFP", DefiningModule: "openconfig-transport-types"},
		12: {Name: "SFP_PLUS", DefiningModule: "openconfig-transport-types"},
		13: {Name: "X2", DefiningModule: "openconfig-transport-types"},
		14: {Name: "XFP", DefiningModule: "openconfig-transport-types"},
	},
	"E_OpenconfigVlanTypes_TPID_TYPES": {
		1: {Name: "TPID_0X8100", DefiningModule: "openconfig-vlan-types"},
		2: {Name: "TPID_0X88A8", DefiningModule: "openconfig-vlan-types"},
		3: {Name: "TPID_0X9100", DefiningModule: "openconfig-vlan-types"},
		4: {Name: "TPID_0X9200", DefiningModule: "openconfig-vlan-types"},
		5: {Name: "TPID_ANY", DefiningModule: "openconfig-vlan-types"},
	},
	"E_OpenconfigVlan_VlanModeType": {
		1: {Name: "ACCESS"},
		2: {Name: "TRUNK"},
	},
	"E_OpenconfigVlan_VlanStackAction": {
		1: {Name: "PUSH"},
		2: {Name: "POP"},
		3: {Name: "SWAP"},
	},
}

var (
	// ySchema is a byte slice contain a gzip compressed representation of the
	// YANG schema from which the Go code was generated. When uncompressed the
	// contents of the byte slice is a JSON document containing an object, keyed
	// on the name of the generated struct, and containing the JSON marshalled
	// contents of a goyang yang.Entry struct, which defines the schema for the
	// fields within the struct.
	ySchema = []byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0xbd, 0x6b, 0x53, 0xdb, 0xca,
		0x16, 0x2d, 0xfa, 0x3d, 0xbf, 0xc2, 0xe5, 0xda, 0x1f, 0x92, 0x73, 0xa2, 0x60, 0x1b, 0xf3, 0xac,
		0xba, 0x75, 0xca, 0x01, 0x93, 0xc5, 0x5d, 0x3c, 0x7c, 0x80, 0x64, 0xad, 0x7d, 0x12, 0x36, 0xd5,
		0x48, 0x6d, 0xd3, 0x37, 0xb2, 0xa4, 0xdd, 0x6a, 0x13, 0x38, 0x2b, 0xfc, 0xf7, 0x5b, 0x7e, 0x1b,
		0x6c, 0x83, 0xd4, 0x0f, 0x59, 0x2d, 0x8f, 0xd4, 0xae, 0xda, 0x24, 0x0b, 0xb5, 0x1e, 0xdd, 0x73,
		0xce, 0x31, 0xc6, 0x9c, 0x3d, 0xfb, 0x9f, 0x77, 0xa5, 0x52, 0xa9, 0x54, 0x3e, 0x23, 0x5d, 0x5a,
		0xde, 0x2f, 0x95, 0x3d, 0x7a, 0xcf, 0x5c, 0x5a, 0xfe, 0x38, 0xfc, 0xd7, 0x3f, 0x59, 0xe0, 0x95,
		0xf7, 0x4b, 0xd5, 0xd1, 0x5f, 0x0f, 0xc2, 0xa0, 0xcd, 0x3a, 0xe5, 0xfd, 0x52, 0x65, 0xf4, 0x0f,
		0x87, 0x8c, 0x97, 0xf7, 0x4b, 0xc3, 0x21, 0x06, 0xff, 0xe0, 0x86, 0xdd, 0x28, 0x0c, 0x68, 0x20,
		0xe2, 0x67, 0xff, 0xfe, 0xec, 0x16, 0x33, 0xbf, 0xf3, 0xf1, 0xf9, 0x6f, 0x3c, 0xbf, 0xdd, 0xe4,
		0x9f, 0x5f, 0xde, 0x76, 0xf2, 0x1f, 0x5a, 0x9c, 0xb6, 0xd9, 0xc3, 0xdc, 0x9d, 0x9e, 0xdd, 0x2d,
		0x74, 0x9d, 0xc8, 0x27, 0xa2, 0x1d, 0xf2, 0xee, 0x8b, 0xdb, 0x0d, 0x7e, 0xed, 0x32, 0xec, 0x71,
		0x97, 0x2e, 0x1c, 0x62, 0xf8, 0x48, 0xf4, 0xf1, 0x57, 0xc8, 0xfb, 0x4f, 0x55, 0x8e, 0x86, 0x77,
		0xfb, 0xb8, 0xf8, 0x17, 0xff, 0x20, 0x71, 0x83, 0x77, 0x7a, 0x5d, 0x1a, 0x88, 0xf2, 0x7e, 0x49,
		0xf0, 0x1e, 0x5d, 0xf2, 0x8b, 0x33, 0xbf, 0xf5, 0xec, 0xe1, 0xe6, 0x7e, 0xfb, 0xe9, 0xd9, 0xbf,
		0x3c, 0xbd, 0x78, 0xf7, 0x97, 0x9f, 0x7e, 0x7e, 0x0a, 0x96, 0xbf, 0xd4, 0xdc, 0x4c, 0x2c, 0x7b,
		0xa9, 0xc5, 0x13, 0xf2, 0xe6, 0xc4, 0x24, 0x99, 0xa0, 0x94, 0x13, 0x95, 0x74, 0xc2, 0x52, 0x4f,
		0x5c, 0xea, 0x09, 0x4c, 0x3f, 0x91, 0x8b, 0x27, 0x74, 0xc9, 0xc4, 0xbe, 0x39, 0xc1, 0x93, 0x5f,
		0xb8, 0x25, 0xee, 0xcf, 0xc8, 0x27, 0x41, 0x82, 0x8f, 0x31, 0xfe, 0xc6, 0xd3, 0x4b, 0xde, 0x78,
		0xb7, 0xd7, 0x27, 0x3e, 0xf1, 0x02, 0x48, 0xb3, 0x10, 0x24, 0x17, 0x44, 0xda, 0x85, 0x21, 0xbd,
		0x40, 0xa4, 0x17, 0x8a, 0xfc, 0x82, 0x79, 0x7d, 0xe1, 0xbc, 0xb1, 0x80, 0x12, 0x2f, 0xa4, 0x19,
		0xcf, 0x31, 0x9a, 0xcd, 0x84, 0x5f, 0x70, 0xea, 0x46, 0x06, 0xd7, 0x25, 0xfc, 0x0a, 0xc9, 0x96,
		0x56, 0xea, 0x25, 0x26, 0xb3, 0xd4, 0x14, 0x97, 0x9c, 0xec, 0xd2, 0x53, 0x5e, 0x82, 0xca, 0x4b,
		0x51, 0x7d, 0x49, 0x26, 0x5b, 0x9a, 0x09, 0x97, 0xe8, 0xf4, 0x71, 0x82, 0x20, 0x14, 0x44, 0xb0,
		0x30, 0x48, 0x37, 0x7f, 0xb1, 0x7b, 0x47, 0xbb, 0x24, 0x22, 0xe2, 0xae, 0xff, 0x22, 0x1b, 0x61,
		0x44, 0x83, 0xe1, 0xa2, 0x9c, 0xbc, 0xd1, 0xc6, 0x14, 0x75, 0x4c, 0x7f, 0xdc, 0x98, 0xf8, 0xc3,
		0x8d, 0xd1, 0x1a, 0x7e, 0xa7, 0xe7, 0x9d, 0x13, 0xbc, 0x6f, 0x39, 0x16, 0x44, 0xd0, 0xf4, 0xc6,
		0x36, 0xbc, 0xcc, 0xb0, 0xad, 0xd5, 0x60, 0x6b, 0xb0, 0x35, 0x63, 0xb6, 0x36, 0x5c, 0xc2, 0xba,
		0x4c, 0x4d, 0x29, 0x36, 0xa6, 0xfc, 0x08, 0xea, 0x2f, 0x5f, 0x4e, 0xe4, 0x19, 0x78, 0xcf, 0x15,
		0xc1, 0xc8, 0x4e, 0x0e, 0xc6, 0x83, 0xdc, 0x7c, 0x9e, 0x0c, 0xf2, 0x4e, 0xee, 0x8b, 0xbc, 0xf2,
		0x35, 0xca, 0xee, 0x1d, 0x89, 0x63, 0x16, 0x27, 0xc7, 0x92, 0xe3, 0x0b, 0x80, 0x24, 0x81, 0x24,
		0x81, 0x24, 0x11, 0xdd, 0xd6, 0x3b, 0xba, 0x8d, 0xbc, 0x21, 0x70, 0x24, 0x70, 0x24, 0x2c, 0x2d,
		0x13, 0x4b, 0x5b, 0x43, 0x14, 0x99, 0x0c, 0x72, 0xbd, 0x8a, 0x21, 0x0f, 0x46, 0x43, 0x98, 0x40,
		0x90, 0xc9, 0x82, 0x7e, 0xba, 0x60, 0x0f, 0xfc, 0xb8, 0x8e, 0xf8, 0x71, 0xb4, 0x6e, 0x53, 0x86,
		0xb4, 0xc1, 0x55, 0xe9, 0x22, 0x5a, 0x05, 0xd8, 0x11, 0x11, 0xed, 0xe5, 0xe3, 0x5c, 0x3d, 0x46,
		0x54, 0x6e, 0xe6, 0x62, 0xc1, 0x59, 0xd0, 0x49, 0x33, 0x69, 0x63, 0xf7, 0xb6, 0xbb, 0x5e, 0x81,
		0x2c, 0x01, 0x4a, 0x96, 0x0c, 0x42, 0x51, 0x2f, 0x45, 0x04, 0x8a, 0x7a, 0x08, 0x3f, 0x08, 0x3f,
		0x90, 0x2f, 0x10, 0x82, 0xd6, 0x9d, 0x54, 0x45, 0x3d, 0x48, 0x17, 0x90, 0x2e, 0x60, 0x65, 0xc6,
		0xad, 0x6c, 0x1d, 0x65, 0x8b, 0x37, 0x61, 0xd6, 0xeb, 0x92, 0x45, 0xd4, 0x33, 0x81, 0x14, 0xdb,
		0xe4, 0x96, 0x33, 0x37, 0x39, 0x58, 0x1c, 0xfd, 0x3e, 0xf0, 0x22, 0xf0, 0x22, 0xf0, 0x22, 0x22,
		0xd9, 0x7a, 0x47, 0xb2, 0xa1, 0x33, 0x04, 0x64, 0x04, 0x64, 0x84, 0xa1, 0x65, 0x61, 0x68, 0x6b,
		0x88, 0x1a, 0x13, 0xe1, 0xad, 0x57, 0x81, 0xe3, 0xd1, 0x70, 0x04, 0x23, 0xd8, 0x31, 0x48, 0x03,
		0x1c, 0x03, 0xa0, 0x46, 0xa0, 0x46, 0xa0, 0x46, 0x04, 0xb3, 0xb5, 0x0f, 0x66, 0x01, 0x20, 0x23,
		0x20, 0x23, 0xac, 0xcc, 0xb8, 0x95, 0xad, 0x25, 0x5e, 0x0c, 0xd4, 0xc0, 0x62, 0x60, 0x02, 0x29,
		0xb2, 0x40, 0xd0, 0x0e, 0x27, 0x82, 0x7a, 0x8e, 0xcb, 0xb8, 0xdb, 0x63, 0x22, 0x39, 0x70, 0x5c,
		0x70, 0x2d, 0x70, 0x24, 0x70, 0x24, 0x70, 0x24, 0x22, 0xdc, 0x7a, 0x47, 0xb8, 0x79, 0xc7, 0x08,
		0x58, 0x09, 0x58, 0x09, 0xa3, 0xcb, 0xda, 0xe8, 0xd6, 0x10, 0x65, 0xa6, 0xc6, 0x64, 0xaf, 0x82,
		0xce, 0xe3, 0xc9, 0x68, 0x07, 0xa3, 0xc1, 0x0c, 0x40, 0xd0, 0x44, 0xc5, 0xd4, 0x69, 0x8a, 0xa8,
		0x13, 0x16, 0x4f, 0x03, 0x66, 0xda, 0x00, 0x33, 0x13, 0x17, 0x3b, 0x4f, 0xbe, 0xbc, 0x4f, 0x49,
		0x9b, 0xd3, 0x76, 0x92, 0xaf, 0x3e, 0x8e, 0x5f, 0x3b, 0x09, 0x7e, 0xb7, 0x35, 0xb2, 0xc5, 0x4f,
		0x9f, 0x46, 0xc1, 0x7c, 0x63, 0xb0, 0x14, 0x0d, 0x18, 0x44, 0x14, 0xf2, 0x14, 0x2c, 0x6c, 0xf0,
		0xdb, 0xe0, 0x5d, 0xe0, 0x5d, 0x2f, 0x7f, 0xf1, 0x96, 0x53, 0xf2, 0x33, 0xec, 0x09, 0xa7, 0x1b,
		0x7a, 0x12, 0x40, 0xf0, 0xf9, 0xe5, 0x05, 0x61, 0x61, 0x6f, 0xdb, 0x4a, 0x41, 0xc1, 0x60, 0xff,
		0xc5, 0x57, 0x04, 0x04, 0x93, 0x2e, 0x58, 0x59, 0xc1, 0x40, 0x4d, 0x38, 0x90, 0x5c, 0xba, 0xd2,
		0x4b, 0x58, 0x65, 0x29, 0x6b, 0x58, 0xd2, 0xaa, 0x4b, 0x5b, 0xdb, 0x12, 0xd7, 0xb6, 0xd4, 0xf5,
		0x2c, 0xf9, 0x74, 0x4b, 0x3f, 0xa5, 0x09, 0x48, 0x9b, 0xc2, 0xd4, 0x24, 0xee, 0x48, 0x10, 0x50,
		0xdf, 0x89, 0x23, 0x4a, 0x3d, 0xf9, 0x49, 0x9b, 0xe9, 0x8d, 0x32, 0x33, 0x9c, 0xe4, 0xf7, 0x4e,
		0xb7, 0x45, 0x51, 0x9b, 0xe1, 0xe8, 0x30, 0x20, 0x8d, 0x86, 0xa4, 0xcb, 0xa0, 0xb4, 0x1b, 0x96,
		0x76, 0x03, 0xd3, 0x6b, 0x68, 0x72, 0x06, 0x27, 0x69, 0x78, 0xe9, 0xd9, 0xc4, 0x9b, 0x2b, 0x86,
		0x79, 0x34, 0x10, 0x4c, 0x3c, 0x26, 0x63, 0x1a, 0x6f, 0x46, 0x9d, 0x2d, 0x85, 0x31, 0x8e, 0x47,
		0x8f, 0xf2, 0x99, 0xc4, 0x1a, 0xd6, 0xdf, 0xf8, 0x05, 0x9b, 0x57, 0x7f, 0x34, 0x2f, 0xce, 0x9a,
		0x57, 0x37, 0x97, 0xad, 0x66, 0xf3, 0x50, 0x75, 0x11, 0x7e, 0x23, 0x7e, 0x8f, 0xc6, 0xe5, 0xfd,
		0xd2, 0x77, 0xa5, 0x71, 0xfa, 0x7f, 0xfe, 0x51, 0x1e, 0xe1, 0xd9, 0x7b, 0x0e, 0x5e, 0xef, 0xe6,
		0xeb, 0xd9, 0x9f, 0x67, 0xe7, 0x7f, 0x9d, 0x95, 0x95, 0xc7, 0x7e, 0xfa, 0x98, 0xcf, 0x17, 0xdc,
		0xaa, 0x7c, 0xf9, 0x5c, 0xdc, 0xb7, 0xab, 0x17, 0xfa, 0xed, 0xb6, 0x8a, 0xfc, 0x72, 0xd5, 0x4a,
		0xa5, 0xd8, 0xaf, 0x57, 0xe4, 0xb7, 0xab, 0x6d, 0x55, 0x2a, 0xa7, 0x85, 0x7e, 0xbf, 0x62, 0xaf,
		0xcd, 0xd3, 0x62, 0x3b, 0x96, 0x42, 0xbf, 0x9e, 0x96, 0x95, 0xa9, 0x34, 0xc2, 0x75, 0xd6, 0xa8,
		0xff, 0x5d, 0x06, 0x93, 0x57, 0x0e, 0x7a, 0x5d, 0x67, 0x44, 0x90, 0x63, 0x75, 0xaa, 0xfd, 0x6c,
		0x34, 0x30, 0x6d, 0x30, 0x6d, 0x30, 0xed, 0x94, 0x2b, 0xa6, 0xc7, 0x02, 0xb1, 0xab, 0x81, 0x63,
		0xab, 0x50, 0xec, 0x0b, 0x12, 0x74, 0xa8, 0x32, 0x7b, 0x55, 0x8f, 0x03, 0xe5, 0x53, 0x16, 0x28,
		0x2f, 0x7c, 0x4d, 0x7e, 0x65, 0x31, 0xc7, 0xd7, 0x38, 0xde, 0x11, 0x27, 0xae, 0x60, 0x61, 0x70,
		0xc8, 0x3a, 0x6c, 0x70, 0x60, 0x4f, 0x25, 0x0f, 0xc1, 0xbc, 0x7c, 0x4a, 0x1e, 0x72, 0x3f, 0x05,
		0xb5, 0xad, 0xad, 0x1c, 0x4f, 0xc2, 0xbb, 0xd5, 0x5c, 0x7d, 0x9d, 0x15, 0xe8, 0x30, 0x9a, 0x43,
		0x90, 0xac, 0xab, 0x9a, 0x5c, 0x2f, 0x5b, 0x59, 0xd4, 0x0f, 0x3e, 0x1b, 0xcf, 0x92, 0xc2, 0xa9,
		0x8a, 0x1a, 0xd3, 0x7f, 0x9c, 0x14, 0x1f, 0x26, 0x65, 0xb1, 0xe3, 0x5c, 0x88, 0x49, 0x53, 0xf4,
		0xf8, 0xd2, 0x74, 0xa5, 0x13, 0x86, 0x35, 0x24, 0x0c, 0x57, 0x8a, 0xb2, 0x90, 0x30, 0x4c, 0xbe,
		0x6e, 0x90, 0x30, 0x04, 0x8d, 0x01, 0x8d, 0x51, 0x5a, 0x31, 0x48, 0x18, 0xa6, 0x47, 0xb2, 0x48,
		0x18, 0xae, 0xee, 0x05, 0x91, 0x30, 0xb4, 0x78, 0xee, 0x90, 0x30, 0xb4, 0xf8, 0xf5, 0x90, 0x30,
		0xb4, 0xf9, 0xfd, 0x90, 0x30, 0xb4, 0xd8, 0xb1, 0x20, 0x61, 0x68, 0x54, 0xbb, 0x43, 0xc2, 0xf0,
		0xed, 0xc9, 0x42, 0xc2, 0x10, 0x4c, 0x1b, 0x4c, 0x5b, 0x65, 0xc5, 0x20, 0x61, 0x38, 0xf3, 0x20,
		0x48, 0x18, 0xae, 0x3a, 0x98, 0x23, 0x61, 0xb8, 0x5a, 0xd0, 0x81, 0x84, 0x61, 0x6e, 0x12, 0x86,
		0x29, 0x1a, 0x32, 0xa4, 0xff, 0x36, 0x76, 0xb7, 0xaf, 0x98, 0xff, 0x5a, 0xe5, 0x54, 0xf9, 0xcf,
		0xc5, 0x0d, 0x1c, 0x5a, 0x21, 0x17, 0x37, 0x9f, 0x47, 0xa3, 0x9e, 0xf6, 0x07, 0xcd, 0xb0, 0x03,
		0x0d, 0x1a, 0x3f, 0xa1, 0x07, 0xcd, 0x7a, 0xf5, 0xa0, 0x19, 0x18, 0x31, 0x5a, 0x3d, 0xa1, 0xd5,
		0x13, 0xcc, 0xcc, 0xb8, 0x99, 0xe5, 0xa9, 0xb9, 0x53, 0xaf, 0xd3, 0x9f, 0x8d, 0x41, 0xa1, 0xc5,
		0xdb, 0x84, 0x2f, 0xa5, 0x95, 0x6e, 0xcc, 0x4c, 0xf0, 0xfe, 0xcc, 0xe7, 0x58, 0xf8, 0xcf, 0xcf,
		0xfe, 0x35, 0x85, 0x6c, 0x52, 0x3e, 0xa4, 0xb1, 0xcb, 0x59, 0x34, 0x9a, 0xc3, 0x72, 0xc3, 0xf3,
		0x58, 0xd0, 0x29, 0xf5, 0x47, 0x28, 0x8d, 0x41, 0x49, 0xc9, 0x23, 0x82, 0x94, 0x44, 0x58, 0x8a,
		0xee, 0x1e, 0x63, 0xe6, 0x12, 0xbf, 0x34, 0xbe, 0xd3, 0xe0, 0xbf, 0xa0, 0x45, 0x88, 0xe5, 0x4e,
		0xc4, 0xa6, 0x16, 0x21, 0x72, 0xbd, 0x6d, 0xe6, 0xe6, 0x5b, 0x16, 0x6f, 0x2f, 0x32, 0x99, 0xab,
		0x30, 0x72, 0x7c, 0x7a, 0x4f, 0xfd, 0x92, 0x1b, 0x06, 0x82, 0xb0, 0x80, 0xf2, 0x52, 0x3b, 0xe4,
		0x0b, 0x6c, 0x08, 0x9d, 0x49, 0x4c, 0xaa, 0xb5, 0x28, 0x34, 0x34, 0x42, 0x9b, 0x15, 0x43, 0xe8,
		0x75, 0x4e, 0xfa, 0x23, 0x26, 0x5c, 0x94, 0xaf, 0x12, 0x6a, 0x33, 0x3d, 0xdf, 0x7e, 0x51, 0xee,
		0xc4, 0xbd, 0x28, 0xf2, 0x1f, 0xd3, 0xf4, 0x7e, 0x9b, 0xb9, 0x0a, 0x3d, 0xe0, 0xd0, 0x03, 0x0e,
		0x12, 0x0c, 0xb8, 0xe1, 0xba, 0x73, 0xc3, 0xa9, 0x4b, 0x84, 0x14, 0x03, 0x29, 0x06, 0xe6, 0x96,
		0x9d, 0xb9, 0xad, 0x61, 0xbf, 0xed, 0x14, 0x08, 0xec, 0x0d, 0x5c, 0xf9, 0x8b, 0xf2, 0xcb, 0xe1,
		0x30, 0x26, 0xe0, 0x25, 0x0f, 0x23, 0xca, 0x05, 0xa3, 0x71, 0x0a, 0x70, 0x39, 0xbd, 0x06, 0xd0,
		0x12, 0xd0, 0x72, 0xc9, 0x92, 0x7a, 0x4c, 0x1f, 0xec, 0x26, 0x57, 0x02, 0x5e, 0x22, 0xde, 0x65,
		0xad, 0x1c, 0xa2, 0xb9, 0xb0, 0xd9, 0xa5, 0xbd, 0x46, 0x32, 0x5e, 0xea, 0xa5, 0x2f, 0x29, 0xe5,
		0x65, 0xb5, 0x67, 0x38, 0xd1, 0x41, 0x1c, 0x6f, 0x2e, 0x9b, 0x04, 0x07, 0x74, 0xbc, 0x65, 0x26,
		0x85, 0xa9, 0x5b, 0x96, 0x37, 0x1f, 0x5d, 0x66, 0xa4, 0xdd, 0x9c, 0xb4, 0x9b, 0x95, 0x7e, 0xf3,
		0x92, 0x33, 0x33, 0x49, 0x73, 0x9b, 0x3c, 0xbe, 0xbe, 0xfa, 0xe5, 0x58, 0x70, 0x16, 0x74, 0x74,
		0x6c, 0x12, 0xde, 0xcd, 0xf1, 0xae, 0x89, 0xfb, 0x51, 0xe5, 0xa9, 0xa2, 0xbb, 0x19, 0x0e, 0x03,
		0x7f, 0x03, 0x7f, 0x03, 0x7f, 0x23, 0xb9, 0x72, 0x7a, 0x01, 0x0b, 0x03, 0x1d, 0xee, 0x66, 0x4f,
		0x61, 0x8c, 0xd1, 0xeb, 0xac, 0x7c, 0xbf, 0x84, 0x36, 0x27, 0xac, 0xc9, 0x19, 0x2b, 0x2e, 0x13,
		0x03, 0x5f, 0xe6, 0x36, 0x0c, 0x7d, 0x4a, 0x02, 0x9d, 0x9f, 0xa6, 0x5a, 0x90, 0x4f, 0xc3, 0x02,
		0xb1, 0x5d, 0xd7, 0xf8, 0x61, 0xea, 0x1a, 0x86, 0xd2, 0xb3, 0x13, 0x49, 0xdf, 0xc7, 0x9a, 0x3c,
		0x98, 0xce, 0x9d, 0x49, 0x8a, 0x44, 0xfb, 0xcd, 0x61, 0xc7, 0xdb, 0x64, 0xf6, 0x6a, 0xb5, 0xcd,
		0xcd, 0x9d, 0x5a, 0x65, 0x73, 0x7b, 0x77, 0xab, 0xbe, 0xb3, 0xb3, 0xb5, 0x5b, 0xd9, 0xd5, 0x7c,
		0x27, 0x03, 0xdb, 0x67, 0x34, 0xd9, 0xc9, 0xf3, 0xc9, 0xd3, 0xb8, 0xa7, 0x49, 0x13, 0x1c, 0x93,
		0x98, 0xbc, 0x1d, 0x8b, 0x26, 0xef, 0x5d, 0x3e, 0x46, 0xb9, 0x2e, 0x88, 0xab, 0xee, 0xe9, 0xf6,
		0xd5, 0xbb, 0xf0, 0xd5, 0xf9, 0x32, 0xf7, 0x0a, 0x3c, 0xb3, 0x2d, 0x53, 0x55, 0xdd, 0xad, 0xd7,
		0xb7, 0x77, 0xea, 0xf5, 0xca, 0xce, 0xe6, 0x4e, 0x65, 0x6f, 0x6b, 0xab, 0xba, 0x5d, 0xdd, 0x82,
		0x6b, 0x5e, 0x57, 0xd7, 0xec, 0x51, 0x97, 0x75, 0x89, 0xaf, 0xd5, 0x3b, 0x57, 0x6b, 0x1a, 0xc6,
		0x9a, 0x5b, 0x43, 0x35, 0xf8, 0x7c, 0xb9, 0xe9, 0xa8, 0xc1, 0xe7, 0xdb, 0xe2, 0xf3, 0x37, 0x31,
		0x55, 0x05, 0x71, 0xf0, 0xe8, 0x83, 0xb0, 0x9a, 0x3e, 0x08, 0x93, 0x3a, 0xaa, 0xf1, 0x8f, 0x8f,
		0x39, 0xea, 0x9c, 0x2e, 0x95, 0xf4, 0x55, 0x49, 0xf6, 0x4a, 0x62, 0x49, 0xd4, 0x42, 0xa0, 0x16,
		0x22, 0xbd, 0xcd, 0x4b, 0x27, 0x49, 0x26, 0x33, 0xef, 0x53, 0xd2, 0x96, 0x6b, 0xd9, 0x3c, 0x81,
		0x9e, 0x12, 0x2a, 0x53, 0xb9, 0x35, 0x72, 0x33, 0x9f, 0x3e, 0x8d, 0x7c, 0xc5, 0xc6, 0xc0, 0xd4,
		0x70, 0xd4, 0x82, 0x94, 0xcb, 0xa8, 0xc1, 0x65, 0xc0, 0x65, 0x24, 0x7c, 0x4c, 0xf9, 0x23, 0x17,
		0x06, 0xab, 0xad, 0xc7, 0xc9, 0xad, 0xaf, 0xa1, 0xae, 0xe1, 0xd9, 0x68, 0x28, 0x6f, 0x40, 0x79,
		0xc3, 0xca, 0xcc, 0x4d, 0x8d, 0x3f, 0xac, 0xbe, 0xbc, 0x41, 0x3d, 0x5f, 0xad, 0x98, 0xa7, 0xce,
		0xa8, 0x0b, 0x2d, 0xaa, 0x37, 0xe1, 0x6e, 0xe0, 0x6e, 0x50, 0xbd, 0x89, 0xea, 0x4d, 0xf8, 0x1b,
		0xf8, 0x9b, 0xb5, 0xf1, 0x37, 0xa8, 0xde, 0x34, 0xe1, 0x84, 0x35, 0x39, 0x63, 0xc5, 0x65, 0x62,
		0xe0, 0xcb, 0xa0, 0x7a, 0x73, 0xe9, 0xa7, 0x41, 0xf5, 0x66, 0x8a, 0x07, 0x43, 0xf5, 0xe6, 0xa2,
		0x3b, 0x21, 0x5f, 0x8c, 0xea, 0x4d, 0x7d, 0xe0, 0x42, 0xff, 0x28, 0xa8, 0xde, 0x5c, 0xb2, 0x6a,
		0x51, 0xbd, 0x99, 0x33, 0x73, 0x47, 0x25, 0x8f, 0x35, 0x53, 0x85, 0xea, 0x4d, 0xb8, 0x66, 0x54,
		0x6f, 0xae, 0x91, 0xcf, 0x47, 0xf5, 0x26, 0xaa, 0x37, 0xe1, 0xe0, 0x33, 0x76, 0xf0, 0xa8, 0xde,
		0xcc, 0x4d, 0xf5, 0xa6, 0x45, 0xc7, 0x58, 0xfd, 0x49, 0x1f, 0x53, 0xa6, 0x75, 0xcb, 0x27, 0x2c,
		0x16, 0x0d, 0x21, 0x52, 0xf6, 0xd5, 0x3a, 0x65, 0x41, 0xd3, 0xa7, 0xdd, 0xfe, 0xd7, 0x2b, 0xef,
		0x97, 0x82, 0x9e, 0xef, 0xa7, 0xa8, 0x29, 0x3b, 0x25, 0x0f, 0xf2, 0x17, 0x9f, 0x73, 0x8f, 0x72,
		0xea, 0x7d, 0x7e, 0x1c, 0x5d, 0x6a, 0x77, 0x3f, 0xcd, 0xf9, 0xe5, 0xa6, 0xe5, 0x1c, 0xb0, 0xf1,
		0x58, 0xeb, 0xd5, 0x9c, 0x73, 0xda, 0xc1, 0xd2, 0x40, 0x4f, 0xcd, 0x64, 0x85, 0x90, 0xa9, 0x0a,
		0x1f, 0x53, 0x77, 0xd2, 0xac, 0xa1, 0x93, 0x66, 0x02, 0x1b, 0xce, 0x79, 0x27, 0x4d, 0xe2, 0xfb,
		0xa1, 0x4b, 0x04, 0xf5, 0x9c, 0x41, 0x37, 0xd9, 0xf4, 0x0d, 0x35, 0x5f, 0x0e, 0x90, 0xae, 0xaf,
		0x66, 0x05, 0x7d, 0x35, 0xd1, 0x57, 0xf3, 0xe5, 0xe3, 0xa4, 0xce, 0x4f, 0x3f, 0x93, 0x66, 0x37,
		0x6b, 0x69, 0x26, 0x6d, 0xb4, 0x0e, 0x53, 0xc8, 0xf9, 0x92, 0xb4, 0x5b, 0x02, 0x36, 0xaa, 0xd0,
		0x68, 0xd5, 0x02, 0x15, 0x45, 0xae, 0xa5, 0x83, 0x53, 0xc9, 0x94, 0x06, 0xa9, 0xd0, 0x59, 0x5d,
		0x9f, 0xac, 0x5e, 0xdb, 0xab, 0xef, 0x6d, 0xef, 0xd4, 0xf6, 0xb6, 0x56, 0xf8, 0xed, 0x0c, 0x11,
		0x84, 0xeb, 0x0c, 0x8f, 0x33, 0xf0, 0x9e, 0x9d, 0x71, 0x95, 0x32, 0x2c, 0xcd, 0x5e, 0x8c, 0x90,
		0x84, 0x90, 0xb4, 0xb2, 0x90, 0x94, 0xba, 0x1a, 0x28, 0x65, 0xd5, 0x8f, 0x1e, 0x5b, 0xa3, 0xdd,
		0x48, 0xa6, 0x9b, 0xfa, 0xf0, 0xb2, 0xc4, 0xc7, 0x3c, 0xb6, 0x49, 0xcf, 0x1f, 0xcc, 0x68, 0x9b,
		0xf8, 0x31, 0x85, 0x5d, 0xc2, 0x2e, 0x57, 0x67, 0x97, 0xe9, 0x6b, 0xd1, 0x52, 0xd6, 0x9c, 0xe9,
		0x31, 0xcc, 0x36, 0xe3, 0xdd, 0x5f, 0x84, 0x53, 0xe7, 0x9e, 0xf2, 0x58, 0x2a, 0x12, 0xce, 0x8d,
		0x00, 0xb3, 0x83, 0xd9, 0x21, 0x1c, 0xbe, 0x7a, 0xcf, 0x3b, 0xc2, 0x3d, 0x35, 0xab, 0x9b, 0x1b,
		0x01, 0x56, 0x07, 0xab, 0x83, 0xd5, 0xbd, 0x7a, 0x4f, 0xe6, 0xa5, 0xb7, 0x33, 0xe6, 0xc1, 0xb2,
		0x60, 0x59, 0xb0, 0xac, 0xd7, 0xef, 0x39, 0x90, 0xe8, 0xa5, 0xe2, 0xd8, 0xe4, 0x4a, 0x58, 0x19,
		0xac, 0x0c, 0x56, 0xf6, 0xea, 0x3d, 0xbb, 0xb4, 0x1b, 0x72, 0x09, 0x15, 0x65, 0x74, 0x1d, 0x4e,
		0xa4, 0x83, 0x85, 0x29, 0x5a, 0x58, 0xea, 0x13, 0xe9, 0xc8, 0x3d, 0x61, 0xbe, 0x54, 0xd3, 0x98,
		0x69, 0x02, 0x78, 0x32, 0x04, 0x7a, 0xb1, 0x19, 0x5a, 0xe8, 0xda, 0x16, 0xbc, 0xb6, 0x85, 0xaf,
		0xcf, 0x00, 0xd2, 0x19, 0x42, 0x4a, 0x83, 0x90, 0x0f, 0x3d, 0x73, 0x33, 0x2f, 0xbd, 0xeb, 0x47,
		0x61, 0x97, 0x8f, 0x62, 0x85, 0xb7, 0xc2, 0x06, 0x6f, 0x1d, 0x15, 0xdc, 0x9a, 0xb6, 0x7e, 0xe8,
		0x2a, 0xfb, 0xd5, 0x59, 0xe6, 0xab, 0x50, 0x81, 0xad, 0xa5, 0xe2, 0x5a, 0xf7, 0xa7, 0xd5, 0xbf,
		0x8b, 0x46, 0xeb, 0xd7, 0xce, 0xa8, 0x88, 0xf8, 0x3a, 0x07, 0x1d, 0x0e, 0x7b, 0x82, 0xf9, 0xec,
		0xff, 0x52, 0x4f, 0x3e, 0x1e, 0x4f, 0x46, 0x40, 0x38, 0x46, 0x38, 0x46, 0x38, 0x46, 0x38, 0x46,
		0x38, 0x46, 0x38, 0x46, 0x38, 0x36, 0x45, 0xb9, 0xb3, 0xde, 0xa4, 0x31, 0x28, 0xe5, 0xdf, 0x48,
		0x25, 0x19, 0x95, 0x5e, 0xdb, 0x9d, 0x71, 0x3a, 0x1c, 0x29, 0x4b, 0x99, 0xac, 0xdd, 0x71, 0xbc,
		0x34, 0x7d, 0x9c, 0xa7, 0x42, 0xd9, 0xf8, 0x4a, 0x88, 0xd1, 0x90, 0xca, 0x14, 0xed, 0x56, 0x5e,
		0x8c, 0xf6, 0xd2, 0x35, 0x11, 0x9f, 0x4a, 0xd1, 0x29, 0xae, 0x69, 0x11, 0x21, 0x28, 0x0f, 0x52,
		0x63, 0x8d, 0xf2, 0x7f, 0xbe, 0x57, 0x9c, 0xbd, 0xeb, 0x7f, 0xea, 0x4f, 0x3f, 0x7e, 0x38, 0xc3,
		0x1f, 0x6b, 0xb3, 0x3f, 0xfe, 0xab, 0x9c, 0xcb, 0x52, 0xdf, 0xbe, 0x61, 0xa7, 0xea, 0x21, 0xfb,
		0xcc, 0x25, 0xa4, 0xd9, 0x60, 0x08, 0x97, 0x00, 0x97, 0xa0, 0xdf, 0x25, 0xd8, 0x91, 0x9f, 0x92,
		0xb3, 0x30, 0x58, 0x17, 0xac, 0x0b, 0xd6, 0xf5, 0xb6, 0x75, 0x85, 0x11, 0xe5, 0x4e, 0x1f, 0x9d,
		0xf7, 0xe2, 0xf4, 0x46, 0x36, 0x7b, 0x31, 0x6c, 0x0d, 0xb6, 0xb6, 0x32, 0x5b, 0x63, 0x1e, 0x0d,
		0x04, 0x13, 0x8f, 0xe9, 0x8e, 0x1d, 0x9a, 0x18, 0x5c, 0x0a, 0x99, 0xa2, 0x7c, 0x3c, 0xba, 0xd5,
		0x67, 0x12, 0x2b, 0xa4, 0x9f, 0x0f, 0xce, 0x4f, 0x5b, 0xe7, 0x67, 0xcd, 0xb3, 0xab, 0x9b, 0xf3,
		0x56, 0xf3, 0xe2, 0xe6, 0xf2, 0xaa, 0x71, 0xf5, 0xf5, 0x32, 0xed, 0xfc, 0x0f, 0x84, 0x97, 0x58,
		0x4a, 0xd9, 0x53, 0x6c, 0x42, 0xde, 0x38, 0xb8, 0x3a, 0xfe, 0xd6, 0x2c, 0x67, 0xb1, 0x39, 0x52,
		0xf1, 0x49, 0x8f, 0xcf, 0xec, 0x79, 0xd6, 0xc3, 0xe3, 0xcb, 0xc6, 0xe7, 0x93, 0xe6, 0xa1, 0x69,
		0xdd, 0xfb, 0x5a, 0xb7, 0x7d, 0x6b, 0x89, 0x44, 0x11, 0xe1, 0x43, 0x57, 0x94, 0x32, 0x08, 0x8d,
		0xae, 0x43, 0xfc, 0x41, 0xfc, 0x59, 0x59, 0xfc, 0x49, 0x7f, 0xe4, 0x9d, 0xcc, 0x51, 0x77, 0xb3,
		0x47, 0xdc, 0x0d, 0xff, 0x37, 0x15, 0x58, 0x53, 0x1f, 0x79, 0xa7, 0xcd, 0x68, 0x85, 0x13, 0x84,
		0x52, 0x56, 0x3b, 0xb8, 0x10, 0x66, 0x0b, 0xb3, 0x05, 0x45, 0x7b, 0xf5, 0x9e, 0x9c, 0x76, 0xc3,
		0xfb, 0x54, 0xd5, 0x8e, 0x93, 0x17, 0x9c, 0x5e, 0x0a, 0x3b, 0x83, 0x9d, 0xad, 0xcc, 0xce, 0x2c,
		0xd9, 0xb5, 0x1c, 0x53, 0xce, 0x88, 0x2f, 0x15, 0xce, 0xa6, 0x97, 0xc2, 0xd0, 0x60, 0x68, 0x08,
		0x68, 0xaf, 0xdb, 0x59, 0xd8, 0x16, 0x6a, 0xfb, 0x94, 0xe7, 0x46, 0x80, 0xd5, 0xc1, 0xea, 0x60,
		0x75, 0xaf, 0xde, 0x53, 0xd0, 0x6e, 0x44, 0x39, 0x11, 0x3d, 0x2e, 0x01, 0x24, 0x67, 0x2f, 0xc6,
		0x8e, 0x2f, 0xd8, 0x9a, 0xa2, 0xad, 0xa5, 0xdf, 0xf1, 0xe5, 0x13, 0xde, 0x75, 0x62, 0x7a, 0x4f,
		0x39, 0x4b, 0xd1, 0xf2, 0x69, 0x6e, 0xe2, 0x5f, 0x8c, 0x83, 0x62, 0x73, 0x43, 0x4b, 0x5e, 0xdb,
		0xd2, 0xd7, 0x66, 0x02, 0xfa, 0x4c, 0x21, 0x9d, 0x49, 0xa4, 0x34, 0x0d, 0xf9, 0x70, 0x34, 0x37,
		0xf3, 0x72, 0x49, 0xb1, 0x39, 0xff, 0x2d, 0x51, 0xc3, 0xab, 0x96, 0x24, 0x9b, 0x7b, 0x91, 0xf3,
		0x56, 0xf3, 0xec, 0xe0, 0xfc, 0xec, 0xe8, 0xf8, 0xcb, 0x4d, 0xe3, 0xa4, 0x71, 0x71, 0x7a, 0x73,
		0xd9, 0xfc, 0xd6, 0xbc, 0x38, 0xbe, 0xfa, 0x77, 0x59, 0xa5, 0xe7, 0x65, 0xac, 0x74, 0x06, 0x89,
		0x62, 0xe9, 0xf5, 0xf8, 0xd5, 0x4e, 0x8f, 0xcf, 0xce, 0x2f, 0xca, 0xab, 0x28, 0x21, 0xd7, 0xf5,
		0x02, 0x8d, 0xff, 0xd7, 0xee, 0x17, 0xf8, 0x7a, 0xf6, 0xe7, 0xd9, 0xf9, 0x5f, 0x67, 0x36, 0xbf,
		0xc2, 0x5f, 0x8d, 0x8b, 0xb3, 0xe3, 0xb3, 0x2f, 0x36, 0xbf, 0xc2, 0xc1, 0xc5, 0xf1, 0xd5, 0xf1,
		0x41, 0xe3, 0x24, 0xeb, 0xc3, 0x88, 0xaf, 0x73, 0xd3, 0xa3, 0x36, 0xcd, 0x76, 0xbb, 0x11, 0x8a,
		0x49, 0x57, 0xb5, 0xb3, 0x0c, 0x0b, 0xa5, 0x29, 0xdf, 0x01, 0x12, 0x02, 0x12, 0xb2, 0x10, 0x09,
		0xc9, 0x9f, 0xe0, 0x2c, 0x79, 0x62, 0xb3, 0x49, 0xb3, 0x17, 0x77, 0x9c, 0xc6, 0x77, 0xa1, 0xef,
		0xa9, 0x5a, 0xfe, 0x74, 0x20, 0x18, 0x3f, 0x8c, 0xbf, 0xd0, 0x7b, 0x6e, 0x53, 0x9d, 0xae, 0xf0,
		0x72, 0x9d, 0xef, 0x60, 0xcf, 0x6d, 0x49, 0x9e, 0x66, 0x61, 0xcf, 0xad, 0xc9, 0x4f, 0xab, 0x7a,
		0x6a, 0x83, 0x91, 0x6f, 0xbc, 0x46, 0x8d, 0x2f, 0xc8, 0x7d, 0x47, 0xa5, 0x07, 0x55, 0x67, 0xcd,
		0x42, 0xaf, 0x23, 0x1e, 0x23, 0x1a, 0x23, 0x00, 0xbf, 0x12, 0x80, 0x47, 0x9f, 0xa8, 0x70, 0x61,
		0x58, 0xe5, 0x90, 0x63, 0x95, 0x43, 0x8d, 0xe7, 0x3d, 0x5b, 0x75, 0x5d, 0xe3, 0x79, 0x0d, 0xf1,
		0xdc, 0x54, 0x3c, 0xdf, 0x2c, 0xe0, 0xa7, 0x5d, 0xa3, 0x30, 0xce, 0x82, 0x58, 0x90, 0x14, 0x9b,
		0x0f, 0xe6, 0xbc, 0xdb, 0x78, 0x00, 0x84, 0x73, 0x84, 0x73, 0x84, 0x73, 0x84, 0x73, 0x84, 0x73,
		0x84, 0x73, 0x84, 0xf3, 0xd5, 0x85, 0x73, 0x41, 0xf9, 0x3d, 0xf1, 0x55, 0xe2, 0xf9, 0x68, 0x84,
		0xf5, 0x08, 0xe8, 0x88, 0xe3, 0xcb, 0xe2, 0x78, 0x41, 0xc3, 0x77, 0x2c, 0x88, 0x70, 0x24, 0x17,
		0x79, 0x49, 0xb1, 0x1f, 0xe5, 0xd7, 0x60, 0xe8, 0xcb, 0xca, 0x01, 0x09, 0xc2, 0x98, 0xba, 0x61,
		0xe0, 0x49, 0xad, 0x3d, 0x68, 0xec, 0x08, 0xe2, 0x59, 0x7c, 0x5a, 0xf4, 0xb5, 0xcc, 0x4b, 0x5c,
		0xef, 0x4a, 0xac, 0x8e, 0x69, 0xcf, 0x35, 0xf2, 0x00, 0x7a, 0x8e, 0xb0, 0x0e, 0x7a, 0x0e, 0x7a,
		0x0e, 0x7a, 0x0e, 0x7a, 0x0e, 0x7a, 0xbe, 0xca, 0x30, 0xee, 0x08, 0xd6, 0xa5, 0x4a, 0xb1, 0x7c,
		0x38, 0x02, 0xe8, 0x39, 0xe8, 0x79, 0x01, 0xc3, 0x77, 0x7f, 0x6d, 0x0b, 0xe6, 0xfe, 0x8c, 0x33,
		0x3f, 0x2c, 0x02, 0xe4, 0x1c, 0xe4, 0x1c, 0xe4, 0x1c, 0x51, 0x5d, 0x22, 0xaa, 0x4b, 0x18, 0xde,
		0x34, 0xa0, 0xb3, 0x00, 0xe4, 0x1c, 0x41, 0x1d, 0xe4, 0x1c, 0xe4, 0x1c, 0xe4, 0x1c, 0xe4, 0x1c,
		0xe4, 0x7c, 0x95, 0x61, 0x5c, 0x95, 0x9c, 0x8f, 0x47, 0x00, 0x39, 0x07, 0x39, 0x07, 0x39, 0x07,
		0x39, 0x07, 0x39, 0x07, 0x39, 0x07, 0x39, 0xd7, 0x1f, 0xd5, 0x0b, 0x70, 0x22, 0x64, 0xfa, 0xbe,
		0x72, 0xa5, 0xd7, 0x8e, 0x85, 0xbc, 0x9a, 0x19, 0x2e, 0xcb, 0xd6, 0x7a, 0x69, 0x62, 0xca, 0x34,
		0x8e, 0xf4, 0xaf, 0x42, 0xe3, 0x4a, 0x34, 0xd3, 0x53, 0xb4, 0x5c, 0xf9, 0xc6, 0x95, 0xbd, 0x20,
		0x79, 0xef, 0xd4, 0x67, 0xe2, 0xc3, 0x5e, 0x8a, 0x6b, 0x46, 0x8f, 0x97, 0x0e, 0x6b, 0xa0, 0xed,
		0xd9, 0xb3, 0xb6, 0x67, 0x7f, 0x34, 0x2e, 0x0e, 0xff, 0x6a, 0x5c, 0x34, 0x6f, 0x26, 0xe7, 0x06,
		0xd9, 0xdf, 0xfa, 0xec, 0xe4, 0xf8, 0xac, 0x79, 0xd0, 0xb8, 0x38, 0xb4, 0xb9, 0x6d, 0xd5, 0xd1,
		0xc5, 0x57, 0xab, 0xbb, 0x6e, 0xb5, 0xac, 0x7e, 0xfc, 0xcb, 0xe6, 0xd9, 0xa5, 0xdd, 0xcd, 0xe7,
		0x8e, 0xcf, 0xae, 0x9a, 0x5f, 0x2e, 0x1a, 0x57, 0xcd, 0xc3, 0x9b, 0x83, 0xe3, 0x8b, 0x83, 0xaf,
		0xc7, 0x57, 0x56, 0x5b, 0x43, 0xc3, 0xea, 0x36, 0x7a, 0x9f, 0x1b, 0x07, 0x7f, 0xb6, 0x4e, 0x1a,
		0x67, 0x4d, 0x9b, 0x5f, 0xe2, 0xea, 0xa2, 0x71, 0x76, 0x79, 0xd0, 0x3c, 0xfe, 0xd6, 0xbc, 0xb0,
		0x7b, 0x29, 0x7d, 0xbe, 0x38, 0x3e, 0xb0, 0xda, 0x39, 0x5d, 0x9d, 0x5f, 0x34, 0xbe, 0x58, 0xbd,
		0x96, 0x0e, 0xce, 0xcf, 0xae, 0x2e, 0xce, 0x4f, 0x4e, 0x9a, 0x17, 0x37, 0xb6, 0x07, 0xea, 0xf3,
		0xd6, 0xa0, 0xbd, 0xe4, 0xcd, 0xc1, 0x1f, 0x8d, 0xb3, 0xb3, 0xe6, 0x89, 0xcd, 0xaf, 0xd2, 0x3a,
		0xff, 0xab, 0x79, 0x71, 0x73, 0xf9, 0xb5, 0xd5, 0x3a, 0xf9, 0xb7, 0xdd, 0xef, 0x71, 0x61, 0x75,
		0xb4, 0x3b, 0xf8, 0xa3, 0x71, 0x79, 0x79, 0x7c, 0x59, 0xb8, 0x8e, 0xa5, 0x1f, 0x41, 0xd4, 0xe4,
		0x89, 0xda, 0xe5, 0xf9, 0xd1, 0x55, 0xd1, 0x88, 0xda, 0x79, 0xab, 0x79, 0xd1, 0xb8, 0x3a, 0x3e,
		0xfb, 0x72, 0x73, 0xf9, 0xef, 0xcb, 0xab, 0xe6, 0xe9, 0xcd, 0xd7, 0xd6, 0x61, 0xe3, 0xaa, 0x69,
		0x77, 0x38, 0x78, 0xfe, 0x4a, 0xeb, 0xdb, 0x76, 0xf8, 0x3a, 0x43, 0x99, 0xb4, 0x17, 0x53, 0xcf,
		0x89, 0xc2, 0x5f, 0x94, 0xa7, 0x17, 0x4b, 0x67, 0xae, 0x85, 0x64, 0x0a, 0xc9, 0x54, 0xcd, 0xb3,
		0xa8, 0x48, 0xa6, 0x69, 0xbb, 0x89, 0x4a, 0x74, 0x11, 0x95, 0xcc, 0xcf, 0x4a, 0x84, 0x62, 0x95,
		0x7c, 0xac, 0x62, 0xb2, 0x50, 0x35, 0xff, 0xaa, 0x23, 0x13, 0x28, 0x11, 0x88, 0x94, 0xf2, 0xac,
		0xba, 0x3e, 0x99, 0x6a, 0xd7, 0x4f, 0x2d, 0xdf, 0x2e, 0xef, 0x01, 0xe9, 0x9d, 0xc2, 0xcc, 0xa7,
		0xcd, 0x86, 0xaa, 0x65, 0x41, 0x5f, 0xf7, 0x82, 0xcb, 0x5f, 0xe4, 0x95, 0x97, 0x28, 0xc7, 0x22,
		0xe4, 0xa4, 0xf3, 0xb6, 0x93, 0x9b, 0xe9, 0x08, 0x31, 0xbc, 0xe0, 0x8d, 0x0f, 0x93, 0xec, 0x54,
		0xaf, 0xc4, 0xd1, 0x34, 0x4d, 0x14, 0x95, 0x8c, 0x9e, 0x69, 0xa3, 0xa6, 0x74, 0xb4, 0x94, 0x8e,
		0x92, 0xf2, 0xd1, 0x51, 0x6d, 0x91, 0x27, 0x3d, 0x85, 0xab, 0xec, 0x8e, 0x67, 0x33, 0x25, 0x68,
		0x1b, 0x5d, 0x87, 0x03, 0xe3, 0x00, 0xd8, 0x14, 0x01, 0x5b, 0xf6, 0xd5, 0x29, 0x03, 0x6f, 0x38,
		0x3a, 0x56, 0x3f, 0xcb, 0x5a, 0x92, 0x61, 0x44, 0x48, 0x7f, 0x22, 0xea, 0xe0, 0x32, 0xc3, 0x96,
		0x56, 0x83, 0xa5, 0xc1, 0xd2, 0x0c, 0x59, 0x5a, 0x02, 0x24, 0x54, 0x3c, 0xf0, 0x97, 0x04, 0x72,
		0x95, 0x5e, 0x2b, 0x78, 0xbb, 0x1c, 0x0d, 0x61, 0x02, 0x41, 0xf6, 0x6e, 0xa7, 0x4f, 0x9d, 0x02,
		0x47, 0x3e, 0xbb, 0x0c, 0x68, 0x12, 0x68, 0xf2, 0xb5, 0x85, 0x25, 0x11, 0xe8, 0x66, 0xaf, 0x06,
		0xb2, 0x44, 0xbc, 0x53, 0x8c, 0x77, 0xa9, 0x8f, 0x22, 0x4e, 0x49, 0x86, 0xd4, 0x48, 0x91, 0xe4,
		0x12, 0x96, 0x5e, 0xca, 0x2a, 0x4b, 0x5a, 0xd3, 0xd2, 0x56, 0x5d, 0xe2, 0xda, 0x96, 0xba, 0xb6,
		0x25, 0xaf, 0x6f, 0xe9, 0x4b, 0x8a, 0x6f, 0x29, 0xe7, 0x3e, 0xad, 0x49, 0x4c, 0x2e, 0x1c, 0xe1,
		0x13, 0xc5, 0x74, 0xea, 0x60, 0x94, 0x8f, 0x2b, 0x11, 0x58, 0x65, 0xcd, 0x45, 0x87, 0xd9, 0x68,
		0x36, 0x1f, 0x5d, 0x66, 0xa4, 0xdd, 0x9c, 0xb4, 0x9b, 0x95, 0x7e, 0xf3, 0x92, 0x33, 0x33, 0x49,
		0x73, 0x9b, 0x3c, 0xbe, 0xf4, 0xce, 0xc4, 0xb9, 0x95, 0xe3, 0x53, 0xd2, 0x96, 0xab, 0xaa, 0x98,
		0x8b, 0x37, 0x3b, 0x0a, 0x63, 0xb4, 0x46, 0x8c, 0xe8, 0xd3, 0xa7, 0x8d, 0xd9, 0xff, 0x4d, 0x09,
		0xd0, 0x30, 0x14, 0x6e, 0x0c, 0x0c, 0x3e, 0xa3, 0xcd, 0x58, 0x66, 0x3d, 0xa7, 0x24, 0x79, 0x56,
		0x67, 0x92, 0xb3, 0xa4, 0xeb, 0xd9, 0xdf, 0x52, 0x29, 0x58, 0xe9, 0x3f, 0x52, 0x9a, 0x9d, 0xe5,
		0x52, 0xd1, 0x41, 0x25, 0x2a, 0xe0, 0xa0, 0x52, 0x80, 0xa6, 0xcc, 0x4c, 0x5f, 0x7d, 0x5f, 0xb9,
		0xbc, 0xd7, 0x56, 0xf1, 0xd6, 0xb3, 0x5e, 0x5a, 0xda, 0x1f, 0x9b, 0x71, 0x18, 0xe9, 0xa4, 0x70,
		0x25, 0x49, 0x5c, 0x1b, 0xcf, 0xaa, 0xc1, 0x65, 0xc0, 0x65, 0x80, 0x67, 0x81, 0x67, 0x81, 0x67,
		0x81, 0x67, 0x81, 0x67, 0xad, 0x0f, 0xcf, 0x4a, 0x91, 0xbf, 0x94, 0x40, 0x4d, 0x5a, 0x25, 0xef,
		0x3f, 0xe9, 0x63, 0x4a, 0xff, 0x5f, 0x3e, 0x61, 0xb1, 0x68, 0x08, 0x91, 0x52, 0x2a, 0x3f, 0x65,
		0x41, 0xd3, 0xa7, 0xdd, 0x51, 0x02, 0x31, 0xe8, 0xf9, 0x7e, 0x0a, 0xf4, 0x77, 0x4a, 0x1e, 0xe4,
		0x2f, 0x3e, 0xe7, 0x1e, 0xe5, 0xd4, 0xfb, 0xfc, 0x38, 0xba, 0xd4, 0xee, 0x14, 0xf9, 0xd2, 0x55,
		0xa7, 0xa3, 0x67, 0xca, 0xe5, 0xec, 0x78, 0xeb, 0x95, 0x7f, 0x7f, 0x96, 0xaa, 0x36, 0x90, 0x42,
		0x17, 0x9c, 0x04, 0xb1, 0x4b, 0xd9, 0x7d, 0x82, 0x1d, 0x0f, 0xd3, 0xb6, 0x30, 0x33, 0x17, 0xd9,
		0x91, 0x3e, 0x4f, 0xfe, 0xc4, 0x25, 0x2b, 0x33, 0xe8, 0xb3, 0xef, 0x87, 0x92, 0x4c, 0x8d, 0xb0,
		0x5e, 0x35, 0x71, 0x9e, 0x6e, 0xe1, 0xa9, 0x22, 0xf5, 0xfc, 0xe5, 0xce, 0x53, 0x2d, 0x4c, 0x33,
		0x58, 0x22, 0x75, 0xfa, 0x9c, 0x06, 0xe4, 0xd6, 0xa7, 0x9e, 0xbc, 0xac, 0x33, 0x1e, 0x60, 0x4d,
		0xba, 0x8b, 0x4a, 0x2d, 0xf1, 0xf5, 0xd1, 0x76, 0xa4, 0x4c, 0xc0, 0x16, 0x45, 0xf8, 0x36, 0x0c,
		0x7d, 0x4a, 0x02, 0x15, 0x45, 0xb8, 0x9a, 0x03, 0x1d, 0x97, 0x8a, 0x3b, 0xca, 0x03, 0x2a, 0x9c,
		0xa8, 0xeb, 0x39, 0x11, 0xa7, 0xfd, 0x18, 0xa4, 0x60, 0xff, 0x8b, 0x46, 0x83, 0x33, 0x80, 0x33,
		0x28, 0xb8, 0x33, 0x28, 0x4c, 0xbb, 0x84, 0xe6, 0xd5, 0x1f, 0xcd, 0x8b, 0xb3, 0xe6, 0xd5, 0x4d,
		0xeb, 0xf4, 0xf0, 0xe6, 0xea, 0xdf, 0xad, 0xa6, 0xfd, 0x2d, 0x12, 0x9a, 0x57, 0x7f, 0xdc, 0x54,
		0x2b, 0x95, 0x2f, 0x9f, 0x1b, 0x97, 0xcd, 0x9b, 0x83, 0x8b, 0xba, 0xcd, 0xbd, 0x11, 0x9e, 0xbf,
		0xcb, 0x89, 0xfd, 0x2f, 0x53, 0x1f, 0xbd, 0xcb, 0x65, 0x11, 0xe6, 0x65, 0xf8, 0x2a, 0x76, 0x37,
		0xf7, 0x9a, 0x7d, 0x93, 0xcb, 0x8b, 0x22, 0xd8, 0xca, 0x4d, 0xe3, 0xe0, 0xa0, 0x28, 0x66, 0xd2,
		0xba, 0x3c, 0x2d, 0x8c, 0xc9, 0x37, 0x0b, 0xe4, 0x8a, 0x2f, 0x2f, 0xaa, 0x15, 0xdb, 0x5f, 0xe6,
		0xeb, 0xd9, 0x61, 0xf3, 0xe8, 0xf8, 0xac, 0x79, 0x58, 0x94, 0x05, 0x76, 0x52, 0x9c, 0x98, 0xf2,
		0x7f, 0x0a, 0x13, 0x53, 0x4e, 0x2e, 0x4e, 0x8b, 0xb2, 0xbe, 0x0a, 0x80, 0x25, 0xeb, 0x7f, 0x4f,
		0xe7, 0xa5, 0x38, 0xb8, 0xf8, 0xaf, 0xc3, 0xd3, 0x02, 0xcd, 0xcc, 0x65, 0x71, 0x66, 0xa6, 0x08,
		0xf0, 0x65, 0x08, 0x29, 0xcf, 0x0f, 0x8a, 0xe3, 0x90, 0x0b, 0xb3, 0xbc, 0x4e, 0x0a, 0x84, 0x28,
		0x8b, 0x85, 0x8e, 0xeb, 0xeb, 0xdb, 0xc4, 0x31, 0x8d, 0x18, 0xdf, 0xa6, 0xae, 0xd3, 0x0d, 0x3d,
		0x85, 0xba, 0xea, 0xc9, 0x08, 0x10, 0xdd, 0x13, 0x8c, 0x04, 0xd1, 0x5d, 0xa3, 0x45, 0x40, 0x74,
		0x97, 0x7d, 0x91, 0xa3, 0xe6, 0xc1, 0xcd, 0xe9, 0xf9, 0x61, 0xb3, 0x20, 0x82, 0x7b, 0xff, 0x75,
		0x0e, 0x8f, 0x2f, 0x1b, 0x9f, 0x4f, 0xec, 0xd6, 0x12, 0xfa, 0xef, 0xd1, 0x3c, 0x2b, 0xc4, 0x6b,
		0x34, 0xbe, 0x5e, 0x9d, 0x23, 0x04, 0x27, 0x0a, 0xc1, 0x21, 0xef, 0x3a, 0x6d, 0xe2, 0x8a, 0x90,
		0xab, 0xa7, 0xc3, 0x17, 0x0d, 0x86, 0xc0, 0x8c, 0xc0, 0x8c, 0xc0, 0x6c, 0x47, 0x60, 0x9e, 0x39,
		0xb0, 0xe7, 0xe6, 0xe8, 0xfc, 0xe2, 0xf4, 0xe6, 0xa8, 0x71, 0x70, 0x75, 0x7e, 0x51, 0x90, 0x38,
		0x7d, 0xd0, 0x6a, 0xfc, 0x69, 0xf5, 0x21, 0x1f, 0x47, 0x2d, 0xab, 0x0f, 0x21, 0xb2, 0xfe, 0xf1,
		0x6f, 0x5a, 0x27, 0x5f, 0x2f, 0x6d, 0x7e, 0x87, 0xff, 0x7d, 0x79, 0xd4, 0xaa, 0xed, 0xda, 0xfe,
		0x06, 0x85, 0x98, 0x06, 0x9b, 0x9f, 0xff, 0xec, 0xfc, 0xac, 0x3f, 0x07, 0x5f, 0xbe, 0xf4, 0xb9,
		0x82, 0xe5, 0x1e, 0xb5, 0x76, 0xd3, 0x38, 0x38, 0xb7, 0xf9, 0x1d, 0xfe, 0xb6, 0x7b, 0x2d, 0xf5,
		0xa7, 0xc0, 0xf2, 0xe7, 0xb7, 0x5a, 0xb8, 0xfe, 0xdb, 0xea, 0xaf, 0x7f, 0x7e, 0xf5, 0x87, 0x52,
		0xf9, 0x99, 0xed, 0x44, 0xdf, 0xea, 0xad, 0xa4, 0x33, 0x9c, 0x70, 0x05, 0xbd, 0xcd, 0xa3, 0xbb,
		0xc7, 0x98, 0xb9, 0xc4, 0x77, 0xdc, 0x3b, 0x12, 0x04, 0xd4, 0x8f, 0xd3, 0xef, 0x5f, 0x9b, 0x1f,
		0x02, 0x5b, 0xd9, 0xb0, 0x95, 0x4d, 0x8b, 0x2d, 0xa6, 0xef, 0x04, 0x3b, 0x5c, 0x82, 0x0a, 0xad,
		0x60, 0x47, 0x03, 0xac, 0x47, 0x2f, 0x58, 0xe8, 0x75, 0xd6, 0xea, 0x75, 0xd2, 0x9d, 0x8a, 0x24,
		0x9b, 0x25, 0xcf, 0x5b, 0x8a, 0x4c, 0xd3, 0x64, 0x45, 0x83, 0x51, 0x36, 0x1c, 0x1d, 0x06, 0xa4,
		0xdf, 0x90, 0x74, 0x19, 0x94, 0x76, 0xc3, 0xd2, 0x6e, 0x60, 0x46, 0x0c, 0x4d, 0x0d, 0xc7, 0xca,
		0xf6, 0x2c, 0x92, 0x35, 0xc0, 0xc9, 0x00, 0x1e, 0x8d, 0x5d, 0xce, 0x22, 0xe9, 0x96, 0x39, 0x0b,
		0xd7, 0xe2, 0xec, 0xa0, 0x8a, 0x53, 0xa4, 0xd6, 0x50, 0x4c, 0x9b, 0xa9, 0xea, 0x34, 0x59, 0x73,
		0xa6, 0xab, 0xdb, 0x84, 0x8d, 0x99, 0xb2, 0x31, 0x93, 0x36, 0x6a, 0xda, 0x6a, 0x26, 0xae, 0x81,
		0xa9, 0x97, 0xb4, 0xb4, 0x29, 0x9b, 0x5b, 0x7f, 0xb1, 0xe0, 0x2c, 0xe8, 0xe8, 0x58, 0x77, 0xe3,
		0x80, 0xba, 0xfb, 0x6e, 0x35, 0xdf, 0x57, 0xe1, 0xdb, 0x96, 0x59, 0xe0, 0xd1, 0x07, 0x7d, 0x3e,
		0x70, 0x38, 0x1c, 0xbc, 0x1f, 0xbc, 0x1f, 0xbc, 0x5f, 0xae, 0xbd, 0x5f, 0x8f, 0x05, 0xa2, 0xba,
		0xad, 0xd1, 0xfb, 0x6d, 0x6b, 0x18, 0x4a, 0xee, 0xa4, 0xe7, 0x65, 0x7f, 0xf4, 0xd8, 0x41, 0x49,
		0xf5, 0x64, 0x68, 0xc3, 0x6e, 0x6e, 0x6e, 0x58, 0xc5, 0x93, 0xa4, 0x97, 0x8e, 0xab, 0xe1, 0x94,
		0x64, 0x43, 0xe6, 0xf1, 0x7c, 0xaa, 0xc8, 0x83, 0xb1, 0xa9, 0xda, 0xc4, 0x54, 0x3d, 0xbd, 0xcb,
		0xc7, 0x28, 0xd7, 0x16, 0x62, 0x2d, 0x41, 0x78, 0x87, 0x0a, 0x27, 0xec, 0x89, 0xa8, 0x27, 0x9c,
		0x28, 0xfc, 0x45, 0xb9, 0x3e, 0xe4, 0xb5, 0x68, 0x70, 0xe0, 0x30, 0xe0, 0x30, 0xe0, 0xb0, 0x5c,
		0xe3, 0x30, 0x8f, 0xba, 0xac, 0x4b, 0xfc, 0xed, 0xba, 0x4e, 0x22, 0x5a, 0xd3, 0x30, 0xd6, 0x5c,
		0x0c, 0xa9, 0x01, 0xe0, 0xc9, 0x4d, 0x47, 0x0d, 0xa8, 0x01, 0x00, 0x0f, 0x00, 0x6f, 0x1d, 0x00,
		0xde, 0x83, 0xe3, 0x93, 0x58, 0x2b, 0xaa, 0x1b, 0x8f, 0x08, 0x28, 0x07, 0x28, 0x07, 0x28, 0x97,
		0x6b, 0x28, 0x27, 0xdf, 0x9f, 0x76, 0x29, 0x90, 0xab, 0xae, 0xca, 0x09, 0x66, 0x9a, 0xce, 0x55,
		0x3c, 0xbf, 0x64, 0x32, 0x8e, 0x8e, 0x32, 0xc0, 0xb9, 0x8a, 0xba, 0x8d, 0xd1, 0x0f, 0x52, 0x47,
		0x47, 0xca, 0x7f, 0x4f, 0x89, 0x6f, 0xa9, 0x98, 0xcb, 0xd1, 0x92, 0xc3, 0x29, 0xda, 0x51, 0x58,
		0x28, 0x2e, 0xc9, 0x41, 0xc0, 0xc0, 0x81, 0x58, 0xba, 0x0e, 0xc4, 0x1a, 0x1d, 0x7d, 0x35, 0xb4,
		0xf0, 0x1c, 0x7b, 0x32, 0xb9, 0xb3, 0x2e, 0xe7, 0x26, 0x40, 0xe6, 0xcc, 0xcb, 0xb9, 0x4f, 0xaf,
		0xea, 0xc9, 0x6a, 0xf0, 0x64, 0xf0, 0x64, 0x2b, 0xf1, 0x64, 0x28, 0x93, 0x03, 0xab, 0x05, 0xab,
		0x05, 0xab, 0x55, 0x8c, 0xa1, 0x28, 0x93, 0x43, 0x99, 0x1c, 0xbc, 0x1f, 0xbc, 0xdf, 0x3a, 0x7a,
		0x3f, 0x94, 0xc9, 0xa5, 0x79, 0x30, 0x94, 0xc9, 0x21, 0x8b, 0x8a, 0x2c, 0x6a, 0x09, 0x59, 0x54,
		0x45, 0xac, 0x65, 0xa0, 0x3c, 0x6e, 0x76, 0x50, 0x3d, 0xb8, 0xab, 0x0a, 0xdc, 0x05, 0xdc, 0x05,
		0xdc, 0xa5, 0x43, 0x68, 0x9a, 0x0c, 0x44, 0xee, 0x3b, 0xfa, 0x56, 0xc8, 0x78, 0x2d, 0xf7, 0x07,
		0xd5, 0x34, 0x85, 0x7a, 0xb1, 0x88, 0x36, 0x17, 0x60, 0xc2, 0x15, 0x2c, 0x74, 0x09, 0x8f, 0x11,
		0x8d, 0xcb, 0x1a, 0x51, 0x88, 0x66, 0xa7, 0x60, 0xdc, 0x39, 0x18, 0x77, 0x12, 0x4b, 0x9d, 0xc5,
		0xe0, 0xcb, 0xe7, 0x0d, 0x9e, 0x68, 0x5a, 0xb5, 0xda, 0x68, 0xdb, 0xdc, 0x9a, 0xd5, 0x59, 0x5d,
		0x3b, 0x17, 0xff, 0x35, 0xd6, 0x75, 0x1a, 0xa9, 0xb6, 0x35, 0xc4, 0x17, 0xf5, 0xf3, 0x46, 0xa3,
		0xfc, 0xf1, 0xe5, 0xb4, 0x69, 0xae, 0xc6, 0x35, 0x4d, 0x52, 0xb2, 0x20, 0x2b, 0x06, 0xf8, 0xa5,
		0x51, 0x9e, 0x69, 0x98, 0x6f, 0x16, 0x6a, 0x4a, 0xdf, 0xe5, 0x73, 0xb4, 0xeb, 0x9c, 0xf0, 0x63,
		0x0d, 0x4b, 0xbe, 0xcc, 0x82, 0x58, 0x90, 0x41, 0xa4, 0xd6, 0x0c, 0x5c, 0xc7, 0x03, 0x03, 0xbc,
		0x02, 0xbc, 0x02, 0xbc, 0x02, 0xbc, 0x02, 0xbc, 0x02, 0xbc, 0x02, 0xe9, 0x00, 0xbc, 0x02, 0xbc,
		0x02, 0xbc, 0xea, 0x03, 0xaf, 0x82, 0xf2, 0x7b, 0xe2, 0x9b, 0x40, 0xaf, 0xa3, 0x91, 0x01, 0x5f,
		0x01, 0x5f, 0x01, 0x5f, 0xd7, 0x0e, 0xbe, 0xc6, 0x82, 0x08, 0x47, 0xb3, 0x13, 0x98, 0x75, 0x04,
		0xbb, 0x1a, 0x87, 0xfc, 0x1a, 0x0c, 0x63, 0x58, 0x39, 0x20, 0x41, 0x18, 0x53, 0x37, 0x0c, 0x3c,
		0xad, 0xb6, 0x06, 0x10, 0x6b, 0xae, 0x92, 0x07, 0x20, 0x76, 0xf5, 0x20, 0xd6, 0xf4, 0x94, 0x56,
		0x77, 0xeb, 0xf5, 0xed, 0x9d, 0x7a, 0xbd, 0xb2, 0xb3, 0xb9, 0x53, 0xd9, 0xdb, 0xda, 0xaa, 0x6e,
		0xcb, 0x9c, 0x55, 0x07, 0x5c, 0xbb, 0x3e, 0xb8, 0xb6, 0xab, 0x71, 0xd5, 0x4f, 0x42, 0x5a, 0x7f,
		0x50, 0xa0, 0x59, 0xa0, 0x59, 0xa0, 0xd9, 0xb5, 0x43, 0xb3, 0x10, 0x63, 0x81, 0x63, 0x5f, 0x4c,
		0x1b, 0xc4, 0xd8, 0xc2, 0xe1, 0x58, 0x88, 0xb1, 0x00, 0xad, 0xab, 0x05, 0xad, 0x8e, 0x60, 0x5d,
		0x6a, 0x04, 0xb9, 0x0e, 0x47, 0x06, 0x7c, 0x05, 0x7c, 0x05, 0x7c, 0x5d, 0x3b, 0xf8, 0xda, 0xb7,
		0x7d, 0xc1, 0xdc, 0x9f, 0xb1, 0x11, 0x00, 0x0b, 0x29, 0x16, 0x52, 0x2c, 0x20, 0x6c, 0x3e, 0x20,
		0x2c, 0xa4, 0x58, 0xa0, 0xda, 0x9c, 0xa1, 0x5a, 0x8d, 0x8e, 0x6c, 0x0a, 0x68, 0x59, 0x00, 0x2c,
		0x0b, 0x2c, 0x0b, 0x2c, 0xbb, 0x7e, 0x58, 0x16, 0x52, 0x2c, 0x70, 0xec, 0x8b, 0x69, 0x83, 0x14,
		0x5b, 0x38, 0x1c, 0x0b, 0x29, 0x16, 0xa0, 0x75, 0xb5, 0xa0, 0xd5, 0x94, 0x14, 0x3b, 0x1e, 0x19,
		0xf0, 0x15, 0xf0, 0x15, 0xf0, 0x75, 0xed, 0xe0, 0x2b, 0xa4, 0x58, 0x40, 0x58, 0x73, 0xfe, 0x1b,
		0x10, 0x36, 0x3f, 0x10, 0x16, 0x52, 0x2c, 0x50, 0xad, 0x46, 0x54, 0xbb, 0xd2, 0x16, 0x5f, 0x9a,
		0xce, 0xe8, 0x99, 0x8c, 0x67, 0xf6, 0xac, 0x9e, 0xc1, 0xc1, 0x0f, 0x1b, 0xfa, 0x7a, 0xfe, 0x0d,
		0x1f, 0x59, 0xf0, 0x9e, 0x2b, 0x82, 0x51, 0x18, 0x3f, 0x18, 0x3f, 0xd2, 0xcd, 0xd5, 0xf4, 0x91,
		0x6e, 0x0e, 0x86, 0x0f, 0x70, 0x73, 0xdc, 0xbf, 0x75, 0x6b, 0x70, 0x67, 0x0b, 0x3b, 0x30, 0x0e,
		0x8e, 0x9c, 0x73, 0x6e, 0x19, 0x89, 0x1d, 0xb7, 0xc7, 0x39, 0xd5, 0xd0, 0xdc, 0x62, 0x7a, 0x28,
		0xca, 0xfc, 0xd8, 0xe8, 0xc7, 0x98, 0x88, 0xe8, 0xa0, 0x1f, 0x23, 0xfa, 0x31, 0x26, 0x7b, 0x33,
		0xf4, 0x63, 0x84, 0xf6, 0x01, 0xed, 0x03, 0xda, 0x47, 0xee, 0xb4, 0x0f, 0xa4, 0xee, 0xa0, 0x7b,
		0xbc, 0x98, 0x36, 0xa4, 0xee, 0x0a, 0xa7, 0x7b, 0x20, 0x75, 0x07, 0x91, 0x63, 0x75, 0x4b, 0x1e,
		0xfd, 0x18, 0x01, 0x5e, 0x01, 0x5e, 0x01, 0x5e, 0x01, 0x5e, 0x01, 0x5e, 0x01, 0x5e, 0x01, 0x5e,
		0x01, 0x5e, 0x01, 0x5e, 0x6d, 0x02, 0xaf, 0xe8, 0xc7, 0x08, 0xf8, 0x0a, 0xf8, 0x0a, 0xf8, 0xaa,
		0x7b, 0xcd, 0xa2, 0x1f, 0x23, 0x40, 0xac, 0x49, 0x0f, 0x0e, 0x10, 0x9b, 0x1f, 0x10, 0x8b, 0xca,
		0x33, 0xe0, 0xda, 0x7c, 0xe1, 0x5a, 0xf4, 0x63, 0x04, 0x9a, 0x05, 0x9a, 0x05, 0x9a, 0xd5, 0xb5,
		0x66, 0x21, 0xc6, 0x02, 0xc7, 0xbe, 0x98, 0x36, 0x88, 0xb1, 0x85, 0xc3, 0xb1, 0x10, 0x63, 0x01,
		0x5a, 0x57, 0x0b, 0x5a, 0xd1, 0x8f, 0x11, 0xf0, 0x15, 0xf0, 0x15, 0xf0, 0x55, 0xf3, 0x9a, 0xc5,
		0x26, 0x60, 0x40, 0x58, 0x73, 0xfe, 0x1b, 0x10, 0x36, 0x3f, 0x10, 0x16, 0x52, 0x2c, 0x50, 0x6d,
		0xce, 0x50, 0x2d, 0xfa, 0x31, 0x02, 0xcb, 0x02, 0xcb, 0x02, 0xcb, 0x6a, 0x5a, 0xb3, 0x90, 0x62,
		0x81, 0x63, 0x5f, 0x4c, 0x1b, 0xa4, 0xd8, 0xc2, 0xe1, 0x58, 0x48, 0xb1, 0x00, 0xad, 0xab, 0x05,
		0xad, 0xe8, 0xc7, 0x08, 0xf8, 0x0a, 0xf8, 0x0a, 0xf8, 0xaa, 0x79, 0xcd, 0x42, 0x8a, 0x05, 0x84,
		0x35, 0xe7, 0xbf, 0x01, 0x61, 0xf3, 0x03, 0x61, 0x21, 0xc5, 0x02, 0xd5, 0x6a, 0x44, 0xb5, 0xe8,
		0xc7, 0x98, 0xb2, 0x1f, 0xa3, 0xf6, 0xd6, 0x7f, 0xa5, 0xb4, 0x6d, 0x19, 0x4f, 0xfa, 0x4f, 0xf0,
		0x99, 0x91, 0xf8, 0x60, 0x74, 0x7f, 0x0b, 0x9b, 0x33, 0x86, 0x3d, 0x11, 0xf5, 0x84, 0xd3, 0xe6,
		0xf4, 0xbf, 0x3d, 0x1a, 0xb8, 0x8f, 0xfa, 0x5a, 0x33, 0xce, 0x8d, 0xac, 0xa7, 0x31, 0x63, 0x05,
		0x8d, 0x19, 0x57, 0xc8, 0x77, 0xd0, 0x98, 0x31, 0x47, 0x5e, 0x5b, 0x1b, 0x8b, 0x99, 0xac, 0xbf,
		0x89, 0xb1, 0x0e, 0xe8, 0x9f, 0x8e, 0xf5, 0xa7, 0x8f, 0xb8, 0x4c, 0x09, 0xcb, 0xe9, 0x1f, 0xff,
		0x57, 0xc7, 0xa3, 0xe9, 0x25, 0x28, 0x1a, 0xb9, 0xa4, 0x09, 0x42, 0x62, 0x08, 0xb5, 0x9a, 0x22,
		0x20, 0x26, 0x21, 0xa9, 0x46, 0xc2, 0x61, 0x84, 0x68, 0x98, 0x9e, 0x2a, 0xf3, 0xc4, 0xc2, 0xe8,
		0xec, 0xe5, 0x04, 0xb0, 0x5f, 0xdb, 0x0b, 0xf6, 0x86, 0x3d, 0xcc, 0x75, 0x03, 0x3d, 0x1d, 0x9d,
		0xd1, 0xd1, 0x7d, 0x1b, 0x20, 0x0f, 0x20, 0xef, 0xd9, 0x9b, 0xa1, 0xfb, 0xf6, 0x6a, 0x5d, 0x80,
		0x09, 0x57, 0xb0, 0xd0, 0x25, 0x20, 0xd3, 0x65, 0xd8, 0x49, 0x2c, 0x75, 0x16, 0xc8, 0x74, 0xc9,
		0xac, 0x59, 0x14, 0x6a, 0x21, 0xcb, 0xf5, 0x62, 0xda, 0x50, 0xa8, 0x95, 0x05, 0xe9, 0x34, 0x4a,
		0x3e, 0x5f, 0x4e, 0x29, 0x0a, 0xb5, 0x0c, 0x3b, 0x7a, 0xfd, 0xa3, 0xa1, 0xfb, 0x76, 0x82, 0xe8,
		0x85, 0xee, 0xdb, 0x00, 0xaf, 0x00, 0xaf, 0x00, 0xaf, 0x00, 0xaf, 0x00, 0xaf, 0x00, 0xaf, 0x00,
		0xaf, 0x00, 0xaf, 0x00, 0xaf, 0xfa, 0xc1, 0x2b, 0xba, 0x6f, 0x03, 0xbe, 0x02, 0xbe, 0x02, 0xbe,
		0xea, 0x5e, 0xb3, 0xe8, 0xbe, 0x0d, 0x10, 0x6b, 0xd2, 0x83, 0x03, 0xc4, 0xe6, 0x07, 0xc4, 0x62,
		0x9f, 0x01, 0x70, 0x6d, 0xbe, 0x70, 0x2d, 0xba, 0x6f, 0x03, 0xcd, 0x02, 0xcd, 0x02, 0xcd, 0xea,
		0x5a, 0xb3, 0x10, 0x63, 0x81, 0x63, 0x5f, 0x4c, 0x1b, 0xc4, 0xd8, 0xc2, 0xe1, 0x58, 0x88, 0xb1,
		0x00, 0xad, 0xab, 0x05, 0xad, 0xe8, 0xbe, 0x0d, 0xf8, 0x0a, 0xf8, 0x0a, 0xf8, 0xaa, 0x79, 0xcd,
		0xa2, 0xe5, 0x0b, 0x20, 0xac, 0x39, 0xff, 0x0d, 0x08, 0x9b, 0x1f, 0x08, 0x0b, 0x29, 0x16, 0xa8,
		0x36, 0x67, 0xa8, 0x16, 0xdd, 0xb7, 0x81, 0x65, 0x81, 0x65, 0x81, 0x65, 0x35, 0xad, 0x59, 0x48,
		0xb1, 0xc0, 0xb1, 0x2f, 0xa6, 0x0d, 0x52, 0x6c, 0xe1, 0x70, 0x2c, 0xa4, 0x58, 0x80, 0xd6, 0xd5,
		0x82, 0x56, 0x74, 0xdf, 0x06, 0x7c, 0x05, 0x7c, 0x05, 0x7c, 0xd5, 0xbc, 0x66, 0x21, 0xc5, 0x02,
		0xc2, 0x9a, 0xf3, 0xdf, 0x80, 0xb0, 0xf9, 0x81, 0xb0, 0x90, 0x62, 0x81, 0x6a, 0x35, 0xa2, 0x5a,
		0x74, 0xdf, 0x4e, 0xd9, 0x7d, 0x5b, 0x63, 0xd3, 0xbf, 0x52, 0xda, 0xbe, 0xdb, 0xe7, 0x83, 0x7b,
		0xb7, 0x06, 0xb7, 0xb6, 0xb0, 0x0b, 0xa3, 0x20, 0xbc, 0x43, 0x85, 0x63, 0xa6, 0x19, 0xe3, 0xa2,
		0xc1, 0xd1, 0x78, 0x3b, 0x11, 0xd9, 0x41, 0x4f, 0x46, 0xf4, 0x64, 0xcc, 0x98, 0xc0, 0x18, 0xd1,
		0xdd, 0x75, 0xea, 0xed, 0x46, 0x74, 0xf6, 0xf5, 0xec, 0xbc, 0x5d, 0x43, 0xe7, 0x6d, 0x5b, 0x3a,
		0x6f, 0x6f, 0x62, 0xaa, 0xd0, 0x66, 0x5b, 0x01, 0xe0, 0x3d, 0x38, 0x83, 0xc3, 0x69, 0x34, 0xa2,
		0xba, 0xf1, 0x88, 0x80, 0x72, 0x80, 0x72, 0x80, 0x72, 0xb9, 0x86, 0x72, 0xb7, 0x61, 0xe8, 0x53,
		0x12, 0xe8, 0x04, 0x72, 0xd5, 0x55, 0x39, 0xc1, 0x77, 0x19, 0x4e, 0x89, 0x2e, 0x19, 0x24, 0x0b,
		0xf9, 0x43, 0x6e, 0xd5, 0xa7, 0xff, 0x9c, 0xe9, 0xae, 0x48, 0xf9, 0xe1, 0xfb, 0x7e, 0x68, 0xd8,
		0x4c, 0xc8, 0xa3, 0x69, 0x5d, 0x50, 0xf9, 0x84, 0xc5, 0xa2, 0x21, 0x84, 0x5c, 0x8c, 0xeb, 0xe3,
		0xec, 0xa6, 0x4f, 0xfb, 0x1e, 0xa5, 0x8f, 0x5a, 0x82, 0x9e, 0xef, 0x7f, 0x7c, 0x27, 0x83, 0x00,
		0xd5, 0x07, 0x39, 0xe7, 0x1e, 0xe5, 0xd4, 0xfb, 0xfc, 0x38, 0x1a, 0xc2, 0xe8, 0x07, 0x57, 0x5c,
		0xe1, 0x66, 0x57, 0xb6, 0x84, 0xc3, 0x4a, 0xa3, 0xda, 0xa5, 0x33, 0x99, 0xe4, 0x0b, 0x3f, 0xd9,
		0x6f, 0x26, 0x9c, 0x29, 0xd9, 0x19, 0x32, 0x33, 0x33, 0xc9, 0x3e, 0xd9, 0xdb, 0x1f, 0x20, 0xc1,
		0xcb, 0x97, 0x87, 0x6e, 0x2d, 0xe9, 0x3b, 0x3f, 0x6b, 0x44, 0x94, 0xb4, 0xda, 0x22, 0xe5, 0xe1,
		0x2e, 0x53, 0x94, 0x99, 0x90, 0x39, 0xcb, 0xa0, 0x49, 0x75, 0xd4, 0x28, 0x8b, 0x0e, 0x95, 0x51,
		0xa0, 0x32, 0xda, 0xd3, 0x82, 0xea, 0xf4, 0x9a, 0x5f, 0xda, 0xc3, 0x4e, 0xca, 0x6e, 0x18, 0x04,
		0xd4, 0x15, 0x21, 0x1f, 0x1e, 0x58, 0x97, 0x7a, 0x12, 0xc6, 0xd3, 0xff, 0x62, 0x9c, 0xb4, 0x81,
		0x54, 0x8a, 0x56, 0x49, 0xd3, 0x28, 0x15, 0xda, 0xa4, 0x8f, 0x26, 0xa9, 0xd2, 0x22, 0x6d, 0x34,
		0x48, 0x1b, 0xed, 0xd1, 0x4a, 0x73, 0xcc, 0x42, 0x37, 0x69, 0xda, 0x32, 0x6d, 0x21, 0xe9, 0xd1,
		0x40, 0x30, 0xf1, 0xc8, 0x69, 0x5b, 0x66, 0xf2, 0xc7, 0xbe, 0x5c, 0x22, 0x29, 0x5e, 0x3e, 0x1e,
		0xdd, 0xfa, 0x33, 0x89, 0x15, 0x96, 0xcf, 0xf8, 0x45, 0x8e, 0x8e, 0x3f, 0x37, 0x2f, 0x6e, 0x0e,
		0xce, 0xcf, 0xce, 0x9a, 0x07, 0x57, 0xe7, 0x17, 0x37, 0x57, 0xff, 0x6e, 0x35, 0x65, 0x57, 0xd2,
		0x40, 0xa8, 0x8b, 0x95, 0x94, 0x69, 0x4d, 0x8a, 0xcf, 0x69, 0xeb, 0x7c, 0xfa, 0x4e, 0xe5, 0x55,
		0xc8, 0x58, 0x9a, 0x5e, 0xe4, 0xe4, 0xa0, 0x18, 0xef, 0x71, 0xa9, 0xe7, 0x3d, 0xde, 0x65, 0x23,
		0x82, 0x3e, 0x99, 0x42, 0xdb, 0x29, 0x80, 0x91, 0x47, 0x04, 0x75, 0xdc, 0xd0, 0x53, 0x08, 0xcb,
		0xd3, 0x21, 0x10, 0x91, 0x11, 0x91, 0x0b, 0x1e, 0x91, 0x07, 0x8b, 0x9d, 0x04, 0x9e, 0x6c, 0x05,
		0xfb, 0x24, 0x26, 0x4b, 0xd4, 0xa9, 0x96, 0x5b, 0x44, 0x08, 0xca, 0x03, 0xe9, 0xd0, 0x57, 0xfe,
		0xcf, 0xf7, 0x8a, 0xb3, 0x77, 0xfd, 0x4f, 0xfd, 0xe9, 0xc7, 0x0f, 0x67, 0xf8, 0x63, 0x6d, 0xf6,
		0xc7, 0xab, 0xf1, 0x0f, 0xfb, 0x73, 0x3f, 0xbc, 0xff, 0xf1, 0xe3, 0xd3, 0xe0, 0xe7, 0xff, 0xf9,
		0xe1, 0x7f, 0xfd, 0x9f, 0xef, 0xff, 0xd3, 0xb9, 0x9e, 0xfb, 0x8d, 0x7f, 0xa5, 0x9f, 0xec, 0xeb,
		0x1c, 0x38, 0x40, 0x1a, 0x90, 0x5b, 0x9f, 0x7a, 0xf2, 0xee, 0x6f, 0x3c, 0x00, 0x9c, 0x1f, 0x9c,
		0x5f, 0xc1, 0x9d, 0x9f, 0x7c, 0xd6, 0x44, 0x32, 0x4b, 0x62, 0xc8, 0xe4, 0xc5, 0x1d, 0xe5, 0x01,
		0x15, 0x4e, 0xd4, 0x55, 0xb1, 0xfb, 0xd9, 0x51, 0x60, 0xfc, 0x30, 0x7e, 0x68, 0x11, 0x76, 0x68,
		0x11, 0xcd, 0xab, 0x3f, 0x9a, 0x17, 0x67, 0xcd, 0xab, 0x9b, 0xd6, 0xe9, 0x61, 0x41, 0x84, 0x88,
		0xe6, 0xd5, 0x1f, 0x37, 0xd5, 0x4a, 0xe5, 0xcb, 0xe7, 0xc6, 0x65, 0xf3, 0xe6, 0xe0, 0xa2, 0x6e,
		0x33, 0x87, 0x7f, 0xfe, 0x2e, 0x27, 0xf6, 0xbf, 0x4c, 0x7d, 0xf4, 0x2e, 0x97, 0x45, 0x98, 0x97,
		0xe1, 0xab, 0x34, 0x2f, 0x8a, 0xf2, 0x26, 0x97, 0x17, 0x45, 0xb0, 0x95, 0x9b, 0xc6, 0xc1, 0x41,
		0x51, 0xcc, 0xa4, 0x75, 0x79, 0x5a, 0x18, 0x93, 0x6f, 0x16, 0xc8, 0x15, 0x5f, 0x5e, 0x54, 0x2b,
		0xb6, 0xbf, 0xcc, 0xd7, 0xb3, 0xc3, 0xe6, 0xd1, 0xf1, 0x59, 0xf3, 0xb0, 0x28, 0x0b, 0xec, 0xa4,
		0x38, 0x31, 0xe5, 0xff, 0x14, 0x26, 0xa6, 0x9c, 0x5c, 0x9c, 0x16, 0x65, 0x7d, 0x15, 0x00, 0x4b,
		0xd6, 0xff, 0x9e, 0xce, 0x4b, 0x71, 0x70, 0xf1, 0x5f, 0x87, 0xa7, 0x05, 0x9a, 0x99, 0xcb, 0xe2,
		0xcc, 0x4c, 0x11, 0xe0, 0xcb, 0x10, 0x52, 0x9e, 0x1f, 0x14, 0xc7, 0x21, 0x17, 0x66, 0x79, 0x9d,
		0x14, 0x08, 0x51, 0x16, 0x0b, 0x1d, 0xd7, 0x51, 0x70, 0x90, 0xe4, 0xeb, 0xcd, 0xca, 0xe6, 0x4e,
		0xc4, 0xa9, 0x1b, 0x06, 0x6d, 0x3d, 0x22, 0xfc, 0x64, 0x34, 0x88, 0xf1, 0x09, 0x46, 0x82, 0x18,
		0xaf, 0xd1, 0x52, 0x20, 0xc6, 0x2b, 0x38, 0x51, 0x88, 0xf1, 0xb6, 0x90, 0x0e, 0x88, 0xf1, 0x79,
		0x44, 0xb7, 0x10, 0xe3, 0x4b, 0x10, 0xe3, 0x4b, 0x10, 0xe3, 0xdf, 0x7a, 0x17, 0x88, 0xf1, 0xf9,
		0x7a, 0x19, 0x88, 0xf1, 0xf9, 0xf5, 0xc4, 0x10, 0xe3, 0x73, 0xb8, 0xbe, 0x20, 0xc6, 0xe7, 0x14,
		0x17, 0x43, 0x8c, 0xcf, 0xe9, 0xcc, 0x40, 0x8c, 0x2f, 0x41, 0x8c, 0x37, 0xb7, 0xbc, 0x20, 0xc6,
		0xe7, 0x15, 0x1d, 0x43, 0x8c, 0x4f, 0xf4, 0xf5, 0xda, 0xa4, 0xe7, 0x0b, 0xc7, 0x0d, 0x03, 0x8f,
		0x49, 0x35, 0x3c, 0x99, 0x7c, 0xfe, 0x97, 0x03, 0x41, 0x82, 0x4f, 0x30, 0x12, 0x24, 0x78, 0x8d,
		0xf6, 0x81, 0xcd, 0x30, 0x92, 0x2e, 0x80, 0xba, 0x8e, 0x1b, 0x72, 0x4e, 0x5d, 0x41, 0x3d, 0xe7,
		0x76, 0xd8, 0xa2, 0x52, 0xd6, 0x0b, 0xcc, 0x8f, 0x05, 0x47, 0x00, 0x47, 0x50, 0x70, 0x47, 0xe0,
		0x86, 0xbd, 0x40, 0x50, 0x2e, 0xd5, 0x16, 0x5a, 0xe1, 0xd4, 0x1a, 0xc5, 0x06, 0xcd, 0x0a, 0xbd,
		0xfb, 0x74, 0x34, 0x60, 0xd6, 0xd5, 0xe5, 0x54, 0x53, 0xd7, 0x5e, 0x9d, 0x5d, 0x7a, 0x55, 0xba,
		0xd2, 0xea, 0x68, 0x98, 0xac, 0xfb, 0xd3, 0xea, 0x3f, 0x65, 0x45, 0xeb, 0xd7, 0xce, 0xa8, 0xcb,
		0xe3, 0x75, 0xfe, 0x62, 0xf5, 0xa3, 0xa0, 0xfa, 0x82, 0xf5, 0x60, 0x30, 0x44, 0x6b, 0x44, 0x6b,
		0x44, 0x6b, 0x44, 0x6b, 0x44, 0x6b, 0x44, 0x6b, 0x44, 0x6b, 0x0d, 0xd1, 0xba, 0xab, 0xd4, 0x59,
		0x6b, 0x32, 0x02, 0xe2, 0x32, 0xe2, 0x32, 0x2a, 0x5a, 0x93, 0x48, 0x6a, 0x39, 0x68, 0x75, 0xd9,
		0x3c, 0xb8, 0x39, 0x3d, 0x3f, 0x6c, 0x16, 0xa4, 0x9a, 0xb5, 0xff, 0x3a, 0x87, 0xc7, 0x97, 0x8d,
		0xcf, 0x27, 0x76, 0x17, 0xea, 0xf4, 0xdf, 0xa3, 0x79, 0x56, 0x88, 0xd7, 0x68, 0x7c, 0xbd, 0x3a,
		0x47, 0x7e, 0x2b, 0x69, 0x08, 0x8e, 0x05, 0x11, 0x3d, 0x45, 0x9e, 0x3c, 0x1a, 0x03, 0x61, 0x18,
		0x61, 0x18, 0x61, 0xd8, 0x9e, 0x30, 0x7c, 0x79, 0xd5, 0xb8, 0xfa, 0x7a, 0x59, 0xa0, 0x40, 0x3c,
		0x7a, 0xa1, 0xaf, 0x67, 0x27, 0xe7, 0x07, 0x7f, 0xda, 0x1f, 0xc8, 0x46, 0xaf, 0xa3, 0xfc, 0x32,
		0x6b, 0x16, 0xd1, 0x7a, 0xc1, 0x48, 0xb7, 0x25, 0xb7, 0x3e, 0x75, 0x6e, 0xfd, 0xd0, 0xfd, 0xa9,
		0x18, 0xdf, 0x16, 0x8e, 0x88, 0x68, 0x87, 0x68, 0x07, 0x31, 0xf8, 0xcd, 0x05, 0x0f, 0x31, 0x58,
		0x51, 0xb1, 0x84, 0x18, 0x6c, 0xec, 0xd3, 0x42, 0x0c, 0x2e, 0xe5, 0x48, 0x0c, 0x7e, 0x1e, 0x65,
		0xfb, 0x6e, 0x5f, 0x6b, 0xd8, 0x1e, 0x0e, 0x88, 0xa8, 0x8d, 0xa8, 0x8d, 0xa8, 0x8d, 0xa8, 0x8d,
		0xa8, 0x8d, 0xa8, 0x8d, 0xa8, 0xad, 0x1a, 0xb5, 0x43, 0xde, 0x75, 0xda, 0xc4, 0x15, 0x21, 0x57,
		0x88, 0xd4, 0x33, 0x83, 0x20, 0x3a, 0x23, 0x3a, 0x43, 0x41, 0x4e, 0xb0, 0xe4, 0x73, 0xa0, 0x20,
		0x5f, 0x5d, 0x34, 0xce, 0x2e, 0x0f, 0x9a, 0xc7, 0xdf, 0x9a, 0x17, 0x37, 0x47, 0xe7, 0x17, 0xa7,
		0x37, 0x47, 0x8d, 0x02, 0x9d, 0x5d, 0x78, 0xd0, 0x6a, 0xfc, 0x69, 0xb3, 0x7e, 0x7c, 0x70, 0xd4,
		0xb2, 0xfa, 0xa4, 0x42, 0xeb, 0x1f, 0xff, 0xa6, 0x75, 0xf2, 0xf5, 0xd2, 0xe6, 0x77, 0xf8, 0xdf,
		0x97, 0x47, 0xad, 0xda, 0xae, 0xed, 0x6f, 0x50, 0x88, 0x69, 0xb0, 0xf9, 0xf9, 0xcf, 0xce, 0xcf,
		0xfa, 0x73, 0xf0, 0xe5, 0x4b, 0xe3, 0xf3, 0x49, 0xd3, 0x72, 0x8f, 0x5a, 0xbb, 0x69, 0x1c, 0x9c,
		0xdb, 0xfc, 0x0e, 0x7f, 0xdb, 0xbd, 0x96, 0xfa, 0x53, 0x60, 0xf9, 0xf3, 0x5b, 0xdd, 0x45, 0xe0,
		0x6f, 0xab, 0xbf, 0xfe, 0xf9, 0xd5, 0x1f, 0x4d, 0x1c, 0x7b, 0x9c, 0x96, 0xd8, 0xab, 0x37, 0x21,
		0x5e, 0x34, 0x18, 0x88, 0x3e, 0x88, 0x3e, 0x88, 0x3e, 0x88, 0x3e, 0x88, 0x3e, 0x88, 0x3e, 0x88,
		0x3e, 0x88, 0x3e, 0x88, 0x3e, 0x88, 0x3e, 0x88, 0x3e, 0x88, 0x3e, 0x88, 0x3e, 0x88, 0x3e, 0x88,
		0x7e, 0x76, 0x44, 0x9f, 0x05, 0x51, 0x4f, 0x38, 0x51, 0xf8, 0x8b, 0x2a, 0x64, 0xf0, 0x67, 0x07,
		0x91, 0x23, 0xf6, 0x55, 0x10, 0x7b, 0x10, 0xfb, 0x6c, 0x88, 0xfd, 0x21, 0xe3, 0x72, 0xd3, 0x4f,
		0xee, 0x3b, 0xea, 0x5c, 0xba, 0x3f, 0x88, 0xe4, 0x27, 0x56, 0xab, 0xa2, 0x92, 0x36, 0x19, 0x1d,
		0xa6, 0xb3, 0xd0, 0x84, 0x1e, 0xa3, 0xd4, 0x1d, 0x95, 0x74, 0x1a, 0x91, 0x76, 0x63, 0xd2, 0x6e,
		0x54, 0x4b, 0x8d, 0x6b, 0xf0, 0xe5, 0xb2, 0x2e, 0x50, 0x93, 0x5c, 0x35, 0xd2, 0x3a, 0xda, 0xdc,
		0x9a, 0xf1, 0xa8, 0xcb, 0xba, 0xc4, 0x97, 0x2a, 0x6b, 0x9d, 0x8b, 0x37, 0x35, 0x85, 0x31, 0xe6,
		0x8a, 0x05, 0x55, 0x06, 0x53, 0x2b, 0x9a, 0xd5, 0x03, 0x9c, 0x4a, 0xba, 0x8a, 0x68, 0x5f, 0x7e,
		0xe6, 0xda, 0x47, 0x3d, 0xc3, 0x69, 0x2a, 0xaa, 0x5d, 0x3e, 0x83, 0x15, 0xe5, 0x71, 0x9f, 0x3e,
		0x6a, 0x98, 0x02, 0x0d, 0xc5, 0xb6, 0x2f, 0xa7, 0x60, 0x73, 0x8d, 0xa6, 0xe0, 0xdd, 0x6a, 0xae,
		0xbe, 0xce, 0xa8, 0xe2, 0x57, 0x62, 0x89, 0x95, 0x59, 0x10, 0x0b, 0x32, 0x88, 0x1c, 0x8a, 0xc0,
		0x65, 0x3c, 0x10, 0xc0, 0x0b, 0xc0, 0x0b, 0xc0, 0x0b, 0xc0, 0x0b, 0xc0, 0x0b, 0xc0, 0x0b, 0xc0,
		0x0b, 0xc0, 0x8b, 0x59, 0xf0, 0x22, 0x28, 0xbf, 0x27, 0xbe, 0x0e, 0xf4, 0x32, 0x1a, 0x09, 0xf0,
		0x05, 0xf0, 0x05, 0xf0, 0x25, 0xf5, 0x9a, 0x89, 0x05, 0x11, 0x8e, 0xa2, 0x11, 0x95, 0xd4, 0xb6,
		0x17, 0x4f, 0x86, 0xf8, 0x1a, 0x0c, 0x7d, 0x6e, 0x39, 0x20, 0x41, 0x18, 0x53, 0x37, 0x0c, 0x3c,
		0xa5, 0xb5, 0x5c, 0x68, 0x10, 0x53, 0x01, 0x88, 0x59, 0x35, 0x88, 0xd1, 0x3d, 0x05, 0xfa, 0xb7,
		0x3f, 0x03, 0xd7, 0x64, 0x8b, 0x6b, 0xba, 0x0a, 0xab, 0x6c, 0xe2, 0x92, 0xfb, 0x83, 0x00, 0xcd,
		0x00, 0xcd, 0x00, 0xcd, 0x40, 0x8c, 0x81, 0x18, 0x03, 0x1c, 0x03, 0x31, 0x06, 0xa0, 0xc5, 0x30,
		0x68, 0x71, 0x04, 0xeb, 0x52, 0x2d, 0xc8, 0x65, 0x38, 0x12, 0xe0, 0x0b, 0xe0, 0x0b, 0xe0, 0x4b,
		0xea, 0x35, 0xd3, 0xb7, 0x1d, 0xc1, 0xdc, 0x9f, 0xb1, 0x16, 0x00, 0x03, 0x29, 0x06, 0x52, 0x0c,
		0xa4, 0x18, 0x48, 0x31, 0x6b, 0x8a, 0x6a, 0x14, 0x0c, 0x7d, 0x0a, 0x68, 0x58, 0x00, 0x2c, 0x03,
		0x2c, 0x03, 0x2c, 0x03, 0x29, 0x06, 0x52, 0x0c, 0x70, 0x0c, 0xa4, 0x18, 0x80, 0x16, 0xd3, 0xa0,
		0x45, 0x97, 0x14, 0x33, 0x1e, 0x09, 0xf0, 0x05, 0xf0, 0x05, 0xf0, 0x05, 0x52, 0x0c, 0xa4, 0x18,
		0x40, 0x18, 0x48, 0x31, 0x40, 0x35, 0xaa, 0xa8, 0xc6, 0xe8, 0x16, 0xee, 0x46, 0x10, 0x84, 0x82,
		0xf4, 0xa7, 0x44, 0x6e, 0x27, 0x77, 0xec, 0xde, 0xd1, 0x2e, 0x89, 0x88, 0xb8, 0xeb, 0x3b, 0xcc,
		0x8d, 0x30, 0xa2, 0x81, 0x3b, 0x40, 0x22, 0x4e, 0xe4, 0x13, 0xd1, 0x0e, 0x79, 0x77, 0xc3, 0x0d,
		0xbb, 0x51, 0x18, 0xd0, 0x40, 0xc4, 0xd3, 0x1f, 0x37, 0x66, 0x76, 0xb5, 0x6f, 0xc4, 0x82, 0x08,
		0xba, 0x21, 0xdf, 0xf9, 0x60, 0xf8, 0x20, 0x82, 0xf7, 0x5c, 0x11, 0x8c, 0x9b, 0x86, 0x8c, 0x6f,
		0x74, 0x73, 0x35, 0xbd, 0xd1, 0xcd, 0x71, 0xff, 0x16, 0xad, 0xc1, 0x1d, 0x72, 0xd0, 0x2f, 0xc2,
		0x27, 0x31, 0xe5, 0xce, 0x2d, 0x23, 0xb1, 0xe3, 0xf6, 0x38, 0xa7, 0x12, 0x5b, 0xcb, 0x26, 0xc1,
		0x73, 0xc1, 0x58, 0xe8, 0x1e, 0x61, 0x1e, 0x64, 0xa2, 0x7b, 0x84, 0x82, 0xeb, 0x41, 0xf7, 0x08,
		0x30, 0x35, 0x30, 0x35, 0x0b, 0x99, 0x1a, 0x84, 0x66, 0xeb, 0x58, 0x1a, 0x84, 0xe6, 0x95, 0xb3,
		0x34, 0x08, 0xcd, 0xc5, 0xa1, 0x64, 0xe8, 0x1e, 0x01, 0xf0, 0x02, 0xf0, 0x02, 0xf0, 0x02, 0xf0,
		0x02, 0xf0, 0x02, 0xf0, 0x02, 0xf0, 0x52, 0x7c, 0xf0, 0x82, 0xee, 0x11, 0x80, 0x2f, 0x80, 0x2f,
		0xe8, 0x1e, 0x31, 0x3b, 0x04, 0xf2, 0xe4, 0xe6, 0x3d, 0x16, 0x40, 0x4c, 0x7e, 0xa7, 0x00, 0x79,
		0x72, 0xdb, 0x71, 0x0d, 0xba, 0x47, 0x00, 0xcd, 0x00, 0xcd, 0x40, 0x8c, 0x81, 0x18, 0x03, 0x31,
		0x06, 0x62, 0x0c, 0x40, 0x8b, 0x2d, 0xa0, 0x05, 0xdd, 0x23, 0x00, 0x5f, 0x00, 0x5f, 0xb0, 0x65,
		0x01, 0x52, 0x0c, 0xa4, 0x18, 0x48, 0x31, 0x90, 0x62, 0x8a, 0x80, 0x6a, 0xd0, 0x3d, 0x02, 0x58,
		0x06, 0x58, 0x06, 0x52, 0x0c, 0xa4, 0x18, 0x48, 0x31, 0x90, 0x62, 0x00, 0x5a, 0x2c, 0x01, 0x2d,
		0xe8, 0x1e, 0x01, 0xf8, 0x02, 0xf8, 0x02, 0x29, 0x06, 0x52, 0x0c, 0xa4, 0x18, 0x48, 0x31, 0x90,
		0x62, 0xf2, 0x86, 0x6a, 0xd6, 0xa4, 0x7b, 0x84, 0x72, 0x03, 0x84, 0x52, 0xd2, 0x26, 0x12, 0x27,
		0xfd, 0x3b, 0x7d, 0x66, 0x24, 0x3e, 0x18, 0xdd, 0x27, 0x07, 0xad, 0x24, 0x42, 0x11, 0x38, 0xfd,
		0xaf, 0xe3, 0x33, 0x12, 0xb8, 0xd4, 0x71, 0x43, 0x8f, 0xca, 0xf7, 0x92, 0x58, 0x34, 0x98, 0x5c,
		0x33, 0x89, 0x0a, 0x9a, 0x49, 0xac, 0x02, 0x6b, 0xae, 0x63, 0x33, 0x09, 0x69, 0x24, 0x39, 0xdd,
		0x99, 0xe0, 0xd1, 0x40, 0x30, 0xf1, 0xc8, 0x69, 0x5b, 0x66, 0xf2, 0xc7, 0xd2, 0x97, 0x44, 0xac,
		0x2b, 0x1f, 0x8f, 0x6e, 0xfd, 0x99, 0xc4, 0x1a, 0xa8, 0xe4, 0xf9, 0xd5, 0xd9, 0x4d, 0xa3, 0xd5,
		0x3a, 0x39, 0x3e, 0x68, 0x5c, 0x1d, 0x9f, 0x9f, 0xdd, 0x1c, 0x9c, 0x1f, 0x36, 0x65, 0x57, 0xd2,
		0x20, 0xa8, 0xc7, 0x4a, 0xe8, 0x53, 0x91, 0x80, 0x8d, 0xdf, 0xaa, 0x55, 0x3d, 0xa9, 0xde, 0xd4,
		0x0e, 0x6b, 0x0a, 0xd4, 0xe6, 0xe3, 0xaa, 0xdf, 0xa1, 0x3f, 0x33, 0x5f, 0xcf, 0x0e, 0x9b, 0x47,
		0xc7, 0x67, 0xcd, 0x43, 0x9b, 0x5f, 0x64, 0x34, 0x19, 0x55, 0xbb, 0xdf, 0xe1, 0x52, 0x75, 0x41,
		0xbd, 0xcb, 0x06, 0xf9, 0x3d, 0xe5, 0x01, 0x61, 0xf4, 0xc4, 0xb4, 0x3d, 0x97, 0x3c, 0xb4, 0x98,
		0x1d, 0x05, 0x0d, 0xaa, 0x80, 0x29, 0xd0, 0xa0, 0x6a, 0xe9, 0xda, 0x41, 0x83, 0x2a, 0x88, 0xc1,
		0xca, 0xc6, 0x85, 0x5c, 0xb6, 0xaa, 0x3c, 0x86, 0x5c, 0xf6, 0xbc, 0x0a, 0x89, 0x5c, 0xb6, 0x92,
		0x68, 0x88, 0x5c, 0xf6, 0xca, 0xa7, 0x00, 0xb9, 0xec, 0xb9, 0xcf, 0x8c, 0x06, 0x55, 0x00, 0x2f,
		0x00, 0x2f, 0x00, 0x2f, 0x00, 0x2f, 0x00, 0x2f, 0x00, 0x2f, 0x00, 0x2f, 0x96, 0x81, 0x17, 0x34,
		0xa8, 0x02, 0x7c, 0x01, 0x7c, 0x41, 0x83, 0xaa, 0xd9, 0x21, 0x50, 0x8a, 0x67, 0xde, 0x63, 0x01,
		0xc4, 0xe4, 0x77, 0x0a, 0x50, 0x8a, 0x67, 0x3b, 0xae, 0x41, 0x83, 0x2a, 0xa0, 0x19, 0xa0, 0x19,
		0x88, 0x31, 0x10, 0x63, 0x20, 0xc6, 0x40, 0x8c, 0x01, 0x68, 0xb1, 0x05, 0xb4, 0xa0, 0x41, 0x15,
		0xe0, 0x0b, 0xe0, 0x0b, 0x76, 0x45, 0x42, 0x8a, 0x81, 0x14, 0x03, 0x29, 0x06, 0x52, 0x4c, 0x11,
		0x50, 0x0d, 0x1a, 0x54, 0x01, 0xcb, 0x00, 0xcb, 0x40, 0x8a, 0x81, 0x14, 0x03, 0x29, 0x06, 0x52,
		0x0c, 0x40, 0x8b, 0x25, 0xa0, 0x05, 0x0d, 0xaa, 0x00, 0x5f, 0x00, 0x5f, 0x20, 0xc5, 0x40, 0x8a,
		0x81, 0x14, 0x03, 0x29, 0x06, 0x52, 0x4c, 0xde, 0x50, 0xcd, 0x9a, 0x34, 0xa8, 0x52, 0x68, 0x7d,
		0x50, 0x4a, 0xda, 0x9a, 0xea, 0x7c, 0x70, 0x8f, 0xd6, 0xe0, 0x16, 0x39, 0xe8, 0x19, 0x11, 0x85,
		0xb1, 0x70, 0xda, 0xd4, 0x75, 0x6e, 0x55, 0x7a, 0x46, 0x3c, 0x1b, 0x05, 0x3d, 0x23, 0xcc, 0x43,
		0x4b, 0xf4, 0x8c, 0x50, 0x70, 0x38, 0xe8, 0x19, 0x91, 0x0f, 0x7e, 0x16, 0x46, 0x02, 0x1c, 0x4d,
		0xda, 0xc0, 0xa6, 0x5f, 0x0f, 0x32, 0xb3, 0x82, 0x31, 0xe9, 0x95, 0x99, 0xab, 0xbb, 0x20, 0x69,
		0x8b, 0xbf, 0x33, 0x74, 0xe6, 0x95, 0x93, 0x34, 0xe8, 0xcc, 0xc5, 0x61, 0x64, 0x68, 0x1e, 0x01,
		0x14, 0x03, 0x14, 0x03, 0x14, 0x03, 0x14, 0x03, 0x14, 0x03, 0x14, 0x03, 0x14, 0xb3, 0x46, 0x28,
		0x06, 0x5d, 0x24, 0x8c, 0xe0, 0x18, 0x60, 0x18, 0x59, 0x0c, 0x83, 0x2e, 0x12, 0xe8, 0x22, 0x61,
		0x13, 0x88, 0x41, 0xbe, 0x7c, 0xe5, 0x20, 0x06, 0xf9, 0x72, 0xe0, 0x9a, 0xe7, 0x9f, 0x19, 0x5d,
		0x24, 0xa0, 0xca, 0x40, 0x95, 0x81, 0x2a, 0x03, 0x55, 0x06, 0xaa, 0x0c, 0x54, 0x19, 0xa8, 0x32,
		0xd6, 0xa1, 0x17, 0xb4, 0x93, 0x80, 0x2a, 0x03, 0x55, 0x06, 0x7b, 0x18, 0xa0, 0xc9, 0x40, 0x93,
		0x81, 0x26, 0x03, 0x4d, 0xa6, 0x08, 0xa8, 0x06, 0xed, 0x24, 0xa0, 0xc9, 0x40, 0x93, 0x81, 0x26,
		0x03, 0x4d, 0x06, 0x9a, 0x0c, 0x34, 0x19, 0x68, 0x32, 0xb6, 0xa1, 0x17, 0xf4, 0x95, 0x80, 0x26,
		0x03, 0x4d, 0x06, 0x9a, 0x0c, 0x34, 0x19, 0x68, 0x32, 0xd0, 0x64, 0xa0, 0xc9, 0xe4, 0x0d, 0xd5,
		0xac, 0x49, 0x5f, 0x09, 0x85, 0xf6, 0x08, 0xa5, 0xa4, 0x7d, 0x25, 0x5a, 0x61, 0x2c, 0x8e, 0xa8,
		0xfb, 0x39, 0x27, 0x6d, 0x25, 0x38, 0xd5, 0xd0, 0x55, 0x62, 0x66, 0x10, 0x34, 0x95, 0x30, 0x8f,
		0x2b, 0xd1, 0x54, 0x42, 0xc1, 0xdb, 0xa0, 0xa9, 0x04, 0x44, 0x66, 0xfb, 0x09, 0x1a, 0x44, 0x66,
		0x88, 0xcc, 0x16, 0x31, 0x34, 0x88, 0xcc, 0x2b, 0x67, 0x68, 0x10, 0x99, 0x8b, 0x43, 0xc7, 0xd0,
		0x54, 0x02, 0x28, 0x06, 0x28, 0x06, 0x28, 0x06, 0x28, 0x06, 0x28, 0x06, 0x28, 0x06, 0x28, 0x66,
		0x8d, 0x50, 0x0c, 0x9a, 0x4a, 0x18, 0xc1, 0x31, 0xc0, 0x30, 0xb2, 0x18, 0x06, 0x4d, 0x25, 0xd0,
		0x54, 0xc2, 0x26, 0x10, 0x83, 0x64, 0xf9, 0xca, 0x41, 0x0c, 0x92, 0xe5, 0xc0, 0x35, 0xcf, 0x3f,
		0x33, 0x9a, 0x4a, 0x40, 0x95, 0x81, 0x2a, 0x03, 0x55, 0x06, 0xaa, 0x0c, 0x54, 0x19, 0xa8, 0x32,
		0x50, 0x65, 0xac, 0x43, 0x2f, 0x68, 0x2a, 0x01, 0x55, 0x06, 0xaa, 0x0c, 0x36, 0x30, 0x40, 0x93,
		0x81, 0x26, 0x03, 0x4d, 0x06, 0x9a, 0x4c, 0x11, 0x50, 0x0d, 0x9a, 0x4a, 0x40, 0x93, 0x81, 0x26,
		0x03, 0x4d, 0x06, 0x9a, 0x0c, 0x34, 0x19, 0x68, 0x32, 0xd0, 0x64, 0x6c, 0x43, 0x2f, 0x68, 0x2a,
		0x01, 0x4d, 0x06, 0x9a, 0x0c, 0x34, 0x19, 0x68, 0x32, 0xd0, 0x64, 0xa0, 0xc9, 0x40, 0x93, 0xc9,
		0x1b, 0xaa, 0x59, 0x97, 0xa6, 0x12, 0xd2, 0xdd, 0x11, 0x4a, 0x89, 0x7b, 0x4a, 0x70, 0x9a, 0xab,
		0x96, 0x12, 0x31, 0x95, 0xd8, 0x69, 0x36, 0xdb, 0x4e, 0x62, 0x30, 0x80, 0x5c, 0x2b, 0x89, 0x0a,
		0x5a, 0x49, 0xac, 0x02, 0x45, 0xae, 0x63, 0x2b, 0x09, 0x69, 0x8c, 0x38, 0x99, 0x7f, 0x1a, 0xf4,
		0xba, 0x94, 0x0f, 0xdd, 0x94, 0xc4, 0xe4, 0x8f, 0x55, 0xad, 0xba, 0xc4, 0xb5, 0xcd, 0xa0, 0xd7,
		0xed, 0x3f, 0xfc, 0x53, 0x0e, 0x5c, 0x46, 0x4c, 0x39, 0x23, 0xbe, 0x13, 0x84, 0xf2, 0x4e, 0x63,
		0x3a, 0x04, 0xdc, 0x06, 0xdc, 0x46, 0xc1, 0xdd, 0x46, 0x2c, 0x38, 0x0b, 0x3a, 0x2a, 0x1e, 0x43,
		0x82, 0x46, 0x96, 0x4f, 0x68, 0xd0, 0x19, 0xc0, 0x21, 0x39, 0xbe, 0xa7, 0x40, 0xa5, 0x75, 0xf0,
		0x3b, 0x4d, 0xa4, 0x62, 0x4a, 0x26, 0x14, 0xc7, 0xd1, 0xc8, 0x18, 0x14, 0xf8, 0x9b, 0x16, 0xde,
		0xa6, 0xfd, 0xd3, 0x6e, 0xe7, 0xe8, 0xdb, 0x66, 0xc4, 0x86, 0xae, 0xf3, 0x10, 0x86, 0xc3, 0x80,
		0x0a, 0x27, 0xf6, 0xee, 0x9c, 0x3e, 0x9f, 0xf1, 0x19, 0x09, 0x5c, 0xea, 0xb8, 0xa1, 0x47, 0x15,
		0xc2, 0xf2, 0xd2, 0x21, 0x11, 0xa6, 0x11, 0xa6, 0x0b, 0x1e, 0xa6, 0x99, 0x47, 0x03, 0xc1, 0xc4,
		0x23, 0xa7, 0x6d, 0x95, 0x58, 0x2d, 0xa1, 0x51, 0x95, 0x8f, 0x47, 0xb7, 0xfe, 0x4c, 0x62, 0x0d,
		0x29, 0xa0, 0xcb, 0xf3, 0xb3, 0xe6, 0xd5, 0x4d, 0xa3, 0xd5, 0x3a, 0x39, 0x3e, 0x68, 0x5c, 0x1d,
		0x9f, 0x9f, 0xdd, 0x1c, 0x9c, 0x1f, 0x36, 0x65, 0xd7, 0xd2, 0xc0, 0xcd, 0xc7, 0x4a, 0xba, 0xb1,
		0x62, 0xbc, 0x1a, 0xbf, 0xd7, 0xb7, 0xcb, 0x8b, 0x5a, 0xa5, 0x52, 0xb9, 0xd9, 0xbc, 0xa8, 0x95,
		0x57, 0x11, 0x7d, 0x35, 0xbd, 0xc6, 0x70, 0x7a, 0xbe, 0x9e, 0x1d, 0x36, 0x8f, 0x8e, 0xcf, 0x9a,
		0x87, 0x36, 0xbf, 0xca, 0x74, 0x46, 0x36, 0x8b, 0xf1, 0x1a, 0x5b, 0x59, 0x27, 0xbc, 0xae, 0x4d,
		0xbb, 0x51, 0x23, 0xd0, 0xe3, 0x9e, 0x06, 0x5e, 0xa8, 0xd0, 0x82, 0x76, 0x74, 0x3d, 0x40, 0x05,
		0x40, 0x05, 0xb8, 0x3f, 0xb8, 0x3f, 0xb8, 0x3f, 0xb8, 0x3f, 0xb8, 0x7f, 0xfa, 0x00, 0xec, 0x44,
		0x84, 0x0b, 0xd5, 0x28, 0x3c, 0x1c, 0x04, 0xa1, 0x18, 0xa1, 0x18, 0xa1, 0x18, 0xa1, 0x18, 0xa1,
		0x18, 0xa1, 0x18, 0xa1, 0x58, 0x22, 0x14, 0x73, 0x7a, 0xaf, 0x1c, 0x89, 0xfb, 0x63, 0x20, 0x10,
		0x23, 0x10, 0x23, 0x10, 0x23, 0x10, 0x23, 0x10, 0xdb, 0x1a, 0x88, 0x6b, 0x88, 0xc3, 0xda, 0xe2,
		0xf0, 0x3b, 0x8d, 0x0b, 0x48, 0xb6, 0xc8, 0x58, 0x5f, 0x71, 0x71, 0x32, 0x57, 0xfe, 0xf6, 0x4b,
		0xbf, 0xfe, 0x1b, 0x6f, 0x7c, 0x8e, 0xb4, 0x9f, 0x41, 0xc7, 0xeb, 0x27, 0xf0, 0xf5, 0x49, 0x2a,
		0xa7, 0x5f, 0xff, 0x7e, 0xcb, 0xbf, 0xca, 0xe2, 0xff, 0xb2, 0xe4, 0x3b, 0xf5, 0xc1, 0xc1, 0x70,
		0xd7, 0xcd, 0xd2, 0x4d, 0x74, 0xe5, 0x13, 0x16, 0x8b, 0x86, 0x10, 0xaf, 0x67, 0x40, 0xfa, 0x7e,
		0xbf, 0xe9, 0xd3, 0x7e, 0x54, 0xef, 0x5b, 0x71, 0xd0, 0xf3, 0xfd, 0x8f, 0xef, 0x5e, 0xf3, 0x64,
		0xc9, 0x7f, 0xf9, 0x9c, 0x7b, 0x94, 0x53, 0xef, 0xf3, 0xe3, 0xe8, 0x57, 0x53, 0xbd, 0x5f, 0xa3,
		0xd7, 0xe9, 0xdf, 0x86, 0x7a, 0xaf, 0xc6, 0xc2, 0xd7, 0x17, 0xc6, 0x24, 0x96, 0x6f, 0x84, 0xee,
		0x64, 0x19, 0xec, 0xcf, 0x2c, 0x83, 0x85, 0xff, 0xfc, 0xc6, 0x32, 0x28, 0x1f, 0xd2, 0xd8, 0xe5,
		0x2c, 0x1a, 0x2d, 0xcd, 0x72, 0xc3, 0xf3, 0x58, 0xd0, 0x29, 0xcd, 0xac, 0xa3, 0x92, 0x47, 0x04,
		0x29, 0x89, 0xb0, 0x14, 0xdd, 0x3d, 0xc6, 0xcc, 0x25, 0x7e, 0x89, 0x05, 0xf7, 0x34, 0x10, 0x21,
		0x7f, 0x7c, 0x6b, 0xec, 0x64, 0x47, 0x17, 0x26, 0x06, 0xc6, 0x69, 0x80, 0xb0, 0x3c, 0xf0, 0x4d,
		0x0b, 0x74, 0xa5, 0x81, 0xad, 0x34, 0x90, 0x55, 0x02, 0xae, 0x6a, 0x7e, 0x2c, 0xe9, 0xd1, 0x80,
		0xe5, 0xd9, 0x67, 0x4a, 0xfc, 0x25, 0x27, 0xfb, 0x01, 0x53, 0x33, 0x95, 0x97, 0xcb, 0xf8, 0x2a,
		0x8c, 0x1c, 0x9f, 0xde, 0x53, 0xbf, 0xe4, 0x86, 0x81, 0x20, 0x2c, 0xa0, 0xbc, 0xd4, 0x0e, 0x79,
		0xc9, 0xf5, 0x19, 0x0d, 0x44, 0x29, 0x0a, 0xb9, 0x98, 0x5b, 0xe3, 0x49, 0x6f, 0x95, 0xee, 0x40,
		0xce, 0xd4, 0xb4, 0x4f, 0x86, 0xee, 0xa9, 0xd3, 0x3c, 0x59, 0x7a, 0xa7, 0x4c, 0xeb, 0x94, 0xe9,
		0x9c, 0x16, 0x1a, 0xf7, 0x94, 0x0d, 0x4a, 0x48, 0x19, 0x2d, 0xaf, 0x97, 0x45, 0x93, 0x64, 0x68,
		0x42, 0x16, 0x45, 0xbc, 0x32, 0x83, 0xcb, 0x10, 0xc3, 0xe2, 0x2f, 0x3d, 0xff, 0x56, 0xcf, 0xff,
		0xe5, 0x85, 0xb7, 0x79, 0xeb, 0xbd, 0xd2, 0xbd, 0xcf, 0xf3, 0x47, 0x9a, 0xde, 0x78, 0xe6, 0xa6,
		0xc3, 0x23, 0x2e, 0xda, 0xc4, 0x1d, 0xd4, 0x5a, 0x3d, 0xbf, 0xe1, 0xf3, 0x63, 0x30, 0x86, 0xbf,
		0xf3, 0xe2, 0x71, 0x17, 0x3b, 0x82, 0xa5, 0x06, 0xff, 0x9a, 0x61, 0xcf, 0x1a, 0x30, 0x5b, 0x54,
		0x0a, 0xf7, 0x96, 0x7d, 0x26, 0xb6, 0xc3, 0xc4, 0xf6, 0xf6, 0xd2, 0xae, 0x58, 0xbb, 0x9c, 0x72,
		0x3a, 0x97, 0x05, 0x8b, 0xe9, 0x27, 0x5d, 0xfe, 0x3a, 0x73, 0x5f, 0x7f, 0xd9, 0xeb, 0xbc, 0xee,
		0x8d, 0xdf, 0xf4, 0xbe, 0x49, 0xbc, 0xed, 0x9b, 0x93, 0x93, 0xd6, 0x89, 0xa6, 0x76, 0x9a, 0xa9,
		0x9d, 0x64, 0x92, 0xc9, 0x93, 0x43, 0xea, 0x6f, 0x21, 0x80, 0x32, 0xe9, 0x74, 0x38, 0xed, 0x24,
		0xe3, 0x3a, 0xd3, 0x43, 0x7f, 0x67, 0x2e, 0xb2, 0x03, 0x54, 0xfa, 0xa4, 0x53, 0x48, 0x30, 0xd9,
		0x7f, 0xaf, 0xbc, 0x80, 0x48, 0x77, 0x3c, 0x87, 0x29, 0xf1, 0xe3, 0xe8, 0xba, 0x62, 0xe0, 0xb9,
		0x64, 0x0b, 0xad, 0x78, 0x38, 0x2e, 0xd1, 0x42, 0x34, 0x23, 0x5a, 0xa5, 0x3d, 0x00, 0xbd, 0xec,
		0x93, 0xce, 0xa0, 0x77, 0x8b, 0x7c, 0x36, 0x6a, 0x32, 0xc2, 0x7a, 0xe4, 0xa2, 0xd2, 0x2d, 0x6a,
		0xd5, 0xc5, 0xad, 0x6d, 0x91, 0x6b, 0x5b, 0xec, 0x5a, 0x16, 0xbd, 0x9c, 0x76, 0x9c, 0x7d, 0xee,
		0x69, 0x26, 0xb8, 0xcb, 0xac, 0xf1, 0x52, 0x91, 0xf6, 0x71, 0x77, 0x59, 0xe0, 0xf8, 0x2c, 0xf8,
		0x19, 0xcb, 0xbb, 0x8a, 0xe9, 0x10, 0xf0, 0x15, 0xf0, 0x15, 0x05, 0xf3, 0x15, 0x3d, 0x16, 0x88,
		0xea, 0xb6, 0x82, 0x87, 0x90, 0xa8, 0xc8, 0x51, 0xec, 0xd2, 0x55, 0xb0, 0x2c, 0x75, 0x05, 0x59,
		0x6a, 0x53, 0x9f, 0x76, 0x7b, 0x6b, 0x6b, 0x73, 0x0b, 0x99, 0x6a, 0x6d, 0x71, 0x37, 0xe7, 0x99,
		0xea, 0xa9, 0x72, 0xb8, 0xb1, 0xe8, 0xc7, 0x8d, 0x19, 0x5c, 0xb4, 0x31, 0xa2, 0xac, 0xba, 0x64,
		0xe8, 0x44, 0xb9, 0x5f, 0x22, 0x68, 0x7a, 0x6e, 0x3d, 0xbc, 0xcc, 0x30, 0xb5, 0xae, 0x81, 0x5a,
		0x83, 0x5a, 0x4f, 0xa9, 0x75, 0x1c, 0xd1, 0x41, 0xe6, 0x5c, 0x81, 0x5b, 0x0f, 0x87, 0x00, 0x60,
		0x06, 0x60, 0x2e, 0x20, 0x60, 0xde, 0xac, 0x29, 0x00, 0xe6, 0x1d, 0x00, 0x66, 0x00, 0xe6, 0x9c,
		0x02, 0xe6, 0x7a, 0x6d, 0xaf, 0xbe, 0xb7, 0xbd, 0x53, 0xdb, 0x03, 0x6a, 0x5e, 0x89, 0x5a, 0x05,
		0x5d, 0x1b, 0xa1, 0x17, 0xa1, 0x77, 0xd9, 0x7c, 0x43, 0xd7, 0x9e, 0x3e, 0x4b, 0x97, 0x76, 0x6f,
		0xa9, 0x42, 0x77, 0x92, 0xd1, 0xf5, 0xf0, 0x12, 0xf0, 0x12, 0x05, 0xf3, 0x12, 0xb7, 0x24, 0xa6,
		0x53, 0x29, 0xc8, 0x51, 0xec, 0x74, 0x26, 0x83, 0xd6, 0x5b, 0x13, 0x6d, 0xca, 0x75, 0x58, 0x7b,
		0x7f, 0x46, 0x8b, 0x7a, 0xf1, 0x0f, 0xa3, 0xbf, 0x0f, 0xaa, 0xfb, 0x8c, 0x7e, 0xd5, 0x44, 0xb5,
		0xfc, 0xaf, 0x91, 0x80, 0xc4, 0x65, 0xfb, 0xaf, 0xc1, 0x5d, 0xf5, 0x41, 0x12, 0xed, 0x09, 0xc8,
		0xd8, 0x11, 0x23, 0xc1, 0x08, 0x77, 0x0c, 0x77, 0xfc, 0xaa, 0x5e, 0x82, 0x04, 0x23, 0xf4, 0x92,
		0x42, 0xea, 0x25, 0x48, 0x30, 0xea, 0x8d, 0xbb, 0x05, 0x4a, 0x30, 0xea, 0xdd, 0x0c, 0x9b, 0x24,
		0xbf, 0xf8, 0x8b, 0x09, 0xf7, 0x8e, 0x7a, 0xce, 0xbd, 0x4f, 0x02, 0x89, 0x3c, 0xe3, 0xb3, 0xcb,
		0x8b, 0x51, 0xca, 0x9b, 0xe2, 0x55, 0x4a, 0x85, 0x4a, 0x38, 0x0e, 0x5e, 0xdc, 0x96, 0x8c, 0x63,
		0xca, 0xaa, 0xf3, 0xb9, 0x89, 0x4e, 0x55, 0x7d, 0x2e, 0xb9, 0x74, 0x73, 0x83, 0x9d, 0x53, 0x2e,
		0xe9, 0xf5, 0x01, 0xcf, 0xe9, 0x96, 0x7c, 0x36, 0xe8, 0x39, 0xad, 0x29, 0x4c, 0x2e, 0x24, 0xae,
		0x4b, 0xe3, 0x38, 0x9d, 0x27, 0x5f, 0x2e, 0x9b, 0xce, 0x0c, 0x86, 0x03, 0x73, 0x15, 0x8c, 0x48,
		0x97, 0x31, 0x69, 0x37, 0x2a, 0xed, 0xc6, 0xa5, 0xd7, 0xc8, 0x14, 0xe1, 0xe9, 0xca, 0x8f, 0xcb,
		0xed, 0xbf, 0xb5, 0xc3, 0x3c, 0x0d, 0x47, 0xe5, 0x6e, 0xe3, 0x68, 0x5b, 0x23, 0x84, 0x6c, 0x8e,
		0x98, 0x55, 0x71, 0xb4, 0xed, 0xaa, 0xa7, 0xa0, 0x5e, 0xd9, 0xab, 0xe3, 0x28, 0x5b, 0x35, 0xea,
		0x2c, 0x7f, 0x3f, 0x99, 0x03, 0xfa, 0xa7, 0x49, 0x93, 0xae, 0xcc, 0x09, 0x4b, 0x73, 0x7e, 0xf3,
		0xc5, 0x78, 0xc0, 0x1e, 0xc0, 0x1e, 0xc0, 0x1e, 0x32, 0xd8, 0xa3, 0x6f, 0x3e, 0xb2, 0x15, 0x0f,
		0x73, 0x84, 0x57, 0xc1, 0x29, 0x4b, 0x56, 0x40, 0x64, 0xeb, 0xc5, 0x02, 0x22, 0xd8, 0x3d, 0xd5,
		0xc4, 0x9d, 0x66, 0x07, 0x83, 0xff, 0x82, 0xff, 0x82, 0xff, 0x02, 0x77, 0x02, 0x77, 0x02, 0x77,
		0x02, 0x77, 0x02, 0x77, 0x7a, 0xf6, 0x99, 0x05, 0xef, 0x05, 0x3f, 0x07, 0x3e, 0x3e, 0x56, 0x47,
		0x1d, 0xb3, 0x83, 0x01, 0x75, 0x00, 0x75, 0x00, 0x75, 0xa4, 0x5c, 0x31, 0xbd, 0xe0, 0xed, 0xc6,
		0x66, 0x89, 0xc8, 0xd2, 0x9e, 0xc2, 0x18, 0xa3, 0xd7, 0x59, 0x39, 0xe6, 0xd0, 0x07, 0xc5, 0x34,
		0x42, 0x32, 0xcd, 0xd0, 0x4c, 0xdf, 0xe7, 0x32, 0x02, 0xd5, 0x0c, 0xe1, 0x05, 0x53, 0xd0, 0xcd,
		0x24, 0x78, 0xd0, 0x08, 0xe5, 0x8c, 0x40, 0xba, 0xac, 0xa6, 0x4a, 0x1f, 0xc4, 0xcb, 0x64, 0xb6,
		0xde, 0xe5, 0x63, 0x94, 0xeb, 0x77, 0x2b, 0x5c, 0x73, 0xba, 0x7d, 0x31, 0x1f, 0xb8, 0x3e, 0x7d,
		0xee, 0x58, 0xe6, 0xc8, 0x98, 0x79, 0xe0, 0x46, 0x84, 0xa0, 0x3c, 0xd0, 0xe6, 0x91, 0xcb, 0xff,
		0x79, 0x5f, 0xaf, 0xec, 0x7d, 0xaf, 0x38, 0xf5, 0xeb, 0xdf, 0xf5, 0xca, 0xf7, 0x8a, 0xb3, 0x7b,
		0xfd, 0xbd, 0xe2, 0xec, 0x5d, 0xff, 0xfe, 0x5e, 0x75, 0x36, 0x87, 0x3f, 0xfe, 0xb3, 0xf9, 0xd4,
		0xff, 0xdb, 0xde, 0xe8, 0x6f, 0xd5, 0x8f, 0xb5, 0xd1, 0xdf, 0x3f, 0xfc, 0xf8, 0xf1, 0xe9, 0xc7,
		0x8f, 0x4f, 0x0a, 0x03, 0xfc, 0xab, 0xbc, 0xea, 0x25, 0x97, 0x35, 0xdb, 0x91, 0xc4, 0x5e, 0x4a,
		0x3b, 0x44, 0x66, 0x63, 0xa6, 0xf2, 0x26, 0x8f, 0x59, 0xaf, 0xae, 0x6f, 0x30, 0xa5, 0x9d, 0x23,
		0x0a, 0x54, 0xd2, 0x68, 0x7d, 0x91, 0x64, 0x85, 0xeb, 0xe4, 0x7a, 0x4d, 0x95, 0xae, 0xb3, 0x95,
		0xa3, 0xa9, 0x1a, 0xeb, 0xa4, 0xff, 0x4a, 0x69, 0x76, 0xe6, 0xa4, 0x6b, 0xb8, 0x33, 0xe7, 0xa2,
		0xd3, 0x34, 0xde, 0x99, 0xf3, 0xc4, 0xb2, 0x55, 0x85, 0x35, 0x54, 0x15, 0xae, 0x94, 0x46, 0xa3,
		0xaa, 0x30, 0xe9, 0xaa, 0x41, 0x55, 0x21, 0x34, 0x2a, 0x68, 0x54, 0x2b, 0x95, 0x63, 0x90, 0x19,
		0xcb, 0x86, 0xbb, 0x23, 0x33, 0x96, 0x9f, 0x29, 0x40, 0x66, 0x4c, 0x23, 0x57, 0x44, 0x55, 0x21,
		0xb0, 0x07, 0xb0, 0x07, 0xaa, 0x0a, 0x51, 0x55, 0xf8, 0xe6, 0x33, 0xa2, 0xaa, 0x10, 0xfe, 0x0b,
		0xfe, 0x0b, 0xdc, 0x09, 0xdc, 0x09, 0xdc, 0x09, 0xdc, 0x09, 0xdc, 0x09, 0x55, 0x85, 0x40, 0x1d,
		0x40, 0x1d, 0xeb, 0x85, 0x3a, 0x50, 0x55, 0x68, 0x04, 0x8a, 0x69, 0x84, 0x64, 0x9a, 0xa1, 0x99,
		0xbe, 0xcf, 0x65, 0x04, 0xaa, 0x19, 0xc2, 0x0b, 0xa6, 0xa0, 0x9b, 0x49, 0xf0, 0xa0, 0x11, 0xca,
		0x19, 0x81, 0x74, 0x59, 0x4d, 0x15, 0xaa, 0x0a, 0xb3, 0x83, 0x80, 0x9a, 0xd6, 0x1c, 0xaa, 0x0a,
		0x65, 0x06, 0x44, 0x55, 0x61, 0xa6, 0x6c, 0x07, 0x55, 0x85, 0x0b, 0x07, 0x43, 0x55, 0xe1, 0x82,
		0xeb, 0x4d, 0x54, 0x15, 0xa6, 0xe8, 0xa6, 0x99, 0xfe, 0x23, 0x15, 0xaa, 0xed, 0xa8, 0x44, 0x1b,
		0xcf, 0xe1, 0xed, 0x05, 0xef, 0xb9, 0x22, 0x18, 0x45, 0x92, 0xe3, 0xf1, 0xe0, 0x37, 0x8d, 0xe9,
		0xe0, 0x37, 0x97, 0xa3, 0xc1, 0xbf, 0x25, 0xa6, 0x7f, 0x09, 0x5a, 0x9b, 0xbe, 0x53, 0xf8, 0xe8,
		0xe5, 0x46, 0xaf, 0xd3, 0x37, 0xe5, 0xc1, 0x69, 0x75, 0x6f, 0x47, 0x96, 0x94, 0x2d, 0x51, 0x13,
		0xf5, 0xef, 0xf7, 0x49, 0x67, 0x7f, 0x66, 0x02, 0x92, 0x76, 0x4e, 0x3d, 0xa4, 0xb1, 0xcb, 0x59,
		0x34, 0x5a, 0x26, 0xe5, 0x86, 0xe7, 0xc5, 0xa5, 0x6f, 0x27, 0x8d, 0xb3, 0x52, 0x4c, 0x85, 0x60,
		0x41, 0x27, 0x2e, 0x89, 0xb0, 0x44, 0x4a, 0x27, 0x8d, 0x2f, 0xa5, 0xc9, 0xed, 0xd0, 0x95, 0x35,
		0x53, 0x55, 0x65, 0xbd, 0xbb, 0xb2, 0xca, 0xb5, 0x13, 0x9e, 0x9b, 0x6f, 0x59, 0x7f, 0xb4, 0xc8,
		0x48, 0x9a, 0x81, 0xeb, 0x87, 0x31, 0x0b, 0x3a, 0x25, 0x37, 0x0c, 0x04, 0x61, 0x01, 0xe5, 0xa5,
		0x76, 0xc8, 0x87, 0x76, 0x33, 0x2d, 0x0b, 0x89, 0x23, 0xea, 0xb2, 0x36, 0x73, 0x7f, 0x04, 0x1e,
		0x11, 0xa4, 0x14, 0x06, 0xa5, 0xa6, 0xb8, 0xa3, 0x3c, 0xa0, 0x62, 0xfa, 0x4b, 0xf1, 0xa7, 0x52,
		0xe9, 0xea, 0x8e, 0xc6, 0xb4, 0x44, 0x38, 0x1d, 0x0c, 0x12, 0x0b, 0x12, 0x78, 0x84, 0x7b, 0x3f,
		0x82, 0x93, 0xda, 0xc7, 0xd2, 0xe4, 0xb1, 0x63, 0xf1, 0xe8, 0xd3, 0xc1, 0x1d, 0xe2, 0x4f, 0x68,
		0x31, 0x6b, 0x52, 0x0d, 0x45, 0x31, 0xb8, 0x11, 0xd4, 0xa2, 0x18, 0x80, 0xaf, 0xdf, 0x0a, 0xc0,
		0xe9, 0xd0, 0x8e, 0x1e, 0x94, 0x53, 0x4e, 0x74, 0xdc, 0xf2, 0x9b, 0x78, 0xe6, 0xf5, 0xb9, 0x5c,
		0xfe, 0x5d, 0x5e, 0xf1, 0xb9, 0x49, 0x9b, 0x59, 0xa7, 0x6b, 0x5e, 0x9d, 0xd0, 0x93, 0x24, 0xf6,
		0x1c, 0x69, 0x3c, 0xc5, 0xac, 0x67, 0x60, 0x49, 0x8e, 0x52, 0x4a, 0xeb, 0x07, 0xa4, 0xed, 0x5e,
		0xda, 0xce, 0x5f, 0xda, 0x35, 0x6b, 0x97, 0x0d, 0xc3, 0xd4, 0xa4, 0xd1, 0xb7, 0xec, 0x3d, 0x8b,
		0x78, 0x29, 0xf1, 0xea, 0xec, 0xc5, 0xe9, 0xa0, 0x62, 0x25, 0xa7, 0x50, 0x91, 0xb5, 0xd7, 0x12,
		0x28, 0x26, 0x59, 0x90, 0x66, 0x60, 0x62, 0xea, 0x64, 0xd9, 0xcc, 0x76, 0x39, 0xce, 0x82, 0x54,
		0xc7, 0xbb, 0x4f, 0xf4, 0xc5, 0x0c, 0x0f, 0xc9, 0xa0, 0x01, 0xb9, 0xf5, 0x53, 0x9c, 0x6d, 0x3e,
		0x79, 0xbd, 0xf1, 0x85, 0x89, 0xe9, 0x5d, 0x9b, 0xf4, 0x7c, 0x31, 0x4a, 0xbb, 0x53, 0x98, 0x23,
		0xcc, 0x31, 0x5b, 0x73, 0xbc, 0x0d, 0x43, 0x9f, 0xa6, 0xe3, 0xd9, 0x63, 0x7b, 0xac, 0x66, 0x68,
		0x8f, 0x7e, 0x18, 0x46, 0xb7, 0xc4, 0xfd, 0x99, 0x6e, 0x6f, 0xc0, 0xf4, 0xb4, 0xe3, 0x67, 0x97,
		0xa7, 0xb7, 0xcd, 0x36, 0xf1, 0x63, 0x18, 0x27, 0x8c, 0x13, 0xc6, 0xb9, 0xe8, 0x9e, 0x5d, 0xd1,
		0x4b, 0x6f, 0x92, 0xfd, 0x8b, 0x60, 0x50, 0x30, 0xa8, 0x4c, 0x0d, 0x2a, 0xf5, 0x21, 0x93, 0x12,
		0xb5, 0x46, 0x92, 0x35, 0x45, 0x72, 0xe7, 0xed, 0x2a, 0xa8, 0x68, 0x6a, 0x25, 0x9a, 0x8a, 0x87,
		0x46, 0xea, 0xa8, 0x16, 0x79, 0x92, 0x3b, 0x5d, 0x78, 0xe5, 0x9f, 0x4c, 0xe1, 0x30, 0x48, 0x2d,
		0x9f, 0xcd, 0x90, 0xce, 0x78, 0x9d, 0x61, 0xc4, 0x19, 0xc9, 0x75, 0x29, 0x43, 0xce, 0xe0, 0x2a,
		0xc4, 0x1c, 0xc4, 0x1c, 0x08, 0x1e, 0x73, 0xf7, 0x14, 0x11, 0x93, 0x50, 0x3b, 0x06, 0x57, 0xa5,
		0xa7, 0x53, 0xa3, 0x1c, 0xc9, 0x60, 0x53, 0x69, 0xbc, 0x7f, 0xd5, 0x3a, 0x3e, 0xbc, 0xa9, 0xfc,
		0xbd, 0x5b, 0xad, 0x54, 0x0a, 0x62, 0x9d, 0xc8, 0x5c, 0x5b, 0x65, 0xa1, 0xcc, 0xa3, 0x81, 0x60,
		0xe2, 0x91, 0xd3, 0xb6, 0x8c, 0x99, 0xa6, 0x88, 0xe5, 0xe5, 0xe3, 0xd1, 0xad, 0x3e, 0x93, 0x58,
		0xa1, 0xe5, 0xd8, 0xc0, 0x62, 0xae, 0xfe, 0xdd, 0x6a, 0x5e, 0xa6, 0x9d, 0xf0, 0x01, 0x06, 0x89,
		0xa5, 0xca, 0x2b, 0x15, 0x77, 0x15, 0x8d, 0xac, 0x7c, 0xaf, 0x6f, 0xe5, 0x59, 0x40, 0x3d, 0x3d,
		0x8f, 0xbb, 0x6b, 0xd7, 0xe3, 0xee, 0xd5, 0x2c, 0x7a, 0xdc, 0xc6, 0xd9, 0xbf, 0x6d, 0x5a, 0x09,
		0xbb, 0x8d, 0x5d, 0xd3, 0x49, 0xfd, 0xeb, 0xec, 0x93, 0xfa, 0x49, 0xa0, 0x41, 0x1a, 0xc7, 0x3a,
		0x85, 0x06, 0xc9, 0x1b, 0x46, 0x00, 0x6c, 0x03, 0x6c, 0xaf, 0x6b, 0x28, 0x9f, 0x96, 0xa3, 0x49,
		0x74, 0x58, 0x59, 0x61, 0x38, 0x67, 0x24, 0x20, 0x8e, 0xd2, 0xc3, 0xeb, 0x78, 0x09, 0xb5, 0x97,
		0x99, 0x7b, 0x29, 0x22, 0xba, 0x27, 0x61, 0x87, 0xb9, 0xc4, 0x57, 0xd8, 0xb4, 0xfa, 0x71, 0xd5,
		0x6f, 0xc1, 0xda, 0x4e, 0x27, 0x0e, 0x6c, 0x7e, 0x83, 0x6e, 0x44, 0x3b, 0x57, 0x9c, 0x04, 0x71,
		0x14, 0x72, 0x61, 0xf3, 0x8b, 0x44, 0x5e, 0x30, 0xa8, 0x29, 0x3d, 0x09, 0xc3, 0xa8, 0x6a, 0xf3,
		0x8b, 0xc4, 0x9e, 0xef, 0x5a, 0x6d, 0x13, 0x94, 0xd2, 0xdd, 0x4a, 0xad, 0xba, 0xfd, 0xd7, 0x69,
		0xe3, 0xcc, 0xe6, 0x17, 0xe1, 0x6d, 0x77, 0x77, 0x67, 0xe7, 0xa1, 0xb6, 0x65, 0xf5, 0x6c, 0xc4,
		0xe1, 0xee, 0x6e, 0xa5, 0x56, 0xbf, 0x0a, 0x7f, 0xd2, 0xe0, 0x73, 0x2f, 0xb6, 0x7a, 0x42, 0xe2,
		0xda, 0x66, 0xcd, 0xe6, 0x17, 0xb8, 0x67, 0x5c, 0xf4, 0x88, 0x7f, 0xd5, 0xb1, 0xda, 0x3f, 0xb1,
		0xe8, 0x92, 0x75, 0x8a, 0x12, 0x2a, 0xac, 0x5e, 0x4f, 0xc4, 0xef, 0x35, 0xa3, 0xd0, 0x6a, 0xfc,
		0x11, 0x87, 0x01, 0x15, 0x2d, 0x22, 0xee, 0xec, 0x76, 0xb2, 0x9e, 0xdd, 0x93, 0xc0, 0x1e, 0xae,
		0xc2, 0xa3, 0xb0, 0xc7, 0xed, 0xc6, 0xe2, 0xdf, 0xda, 0x6c, 0x40, 0x67, 0x6d, 0x37, 0x87, 0x6f,
		0x57, 0x36, 0xbf, 0x82, 0x1b, 0xd8, 0xbd, 0x8c, 0xa2, 0xf3, 0x7b, 0xca, 0x1b, 0xa2, 0x5b, 0x00,
		0xd4, 0xb7, 0x75, 0xc4, 0x6e, 0xa9, 0xd5, 0xb3, 0xd1, 0xe6, 0xa4, 0x4b, 0x2f, 0xa8, 0x4f, 0x1e,
		0x4f, 0x5b, 0xc7, 0x36, 0xbf, 0x88, 0x77, 0x7f, 0x7b, 0xe1, 0xba, 0x5f, 0xa3, 0x58, 0x70, 0x4a,
		0xac, 0x5e, 0x5b, 0xff, 0xf5, 0xed, 0xe6, 0xa7, 0x9d, 0x76, 0x64, 0xb5, 0x69, 0xdf, 0x76, 0x37,
		0x77, 0x2a, 0x11, 0xe1, 0x07, 0x77, 0xc4, 0x6a, 0xd0, 0x71, 0xcb, 0x84, 0xd5, 0x6c, 0xb4, 0xb3,
		0xb7, 0xb7, 0x6b, 0xb5, 0xd0, 0xf4, 0xb0, 0xbb, 0x7d, 0x42, 0x22, 0xab, 0xe7, 0xc0, 0x0f, 0x5d,
		0xe2, 0x5f, 0x11, 0xff, 0xa7, 0xd5, 0x0b, 0x69, 0xa7, 0xb2, 0x49, 0xc4, 0x76, 0xdd, 0xee, 0x97,
		0x10, 0x91, 0xf5, 0xe1, 0x39, 0xbe, 0xf2, 0xba, 0xc4, 0x6a, 0xf6, 0xd0, 0xf5, 0xe2, 0x63, 0x97,
		0x45, 0x76, 0x23, 0xbe, 0x76, 0x75, 0xfb, 0xb4, 0xcd, 0x3f, 0xf7, 0x02, 0xcf, 0xb7, 0x9a, 0xcb,
		0xdd, 0xb1, 0x88, 0x72, 0x9f, 0x04, 0x56, 0x4b, 0x4c, 0x2e, 0x8b, 0xdd, 0xf0, 0xf8, 0xf2, 0x44,
		0xb1, 0xbd, 0x6c, 0x4e, 0xf0, 0xf7, 0x29, 0x71, 0x4f, 0xc8, 0xa3, 0xdd, 0x94, 0x88, 0x47, 0xdc,
		0x76, 0xd8, 0x64, 0xb7, 0xe8, 0x6a, 0xb7, 0x34, 0x40, 0xda, 0x3e, 0x09, 0xe8, 0x6e, 0xa5, 0xb6,
		0x59, 0x80, 0x24, 0xe3, 0x26, 0xf1, 0x4e, 0x88, 0xd5, 0xb9, 0x08, 0x8f, 0x75, 0x98, 0x20, 0xfe,
		0x5f, 0x9c, 0x44, 0x11, 0xe5, 0xe7, 0xf7, 0x94, 0xdf, 0x51, 0xe2, 0xf5, 0xb9, 0x5d, 0x40, 0xad,
		0x2e, 0x8d, 0xe8, 0xc5, 0xb7, 0x56, 0xc7, 0x3d, 0x57, 0x34, 0xbb, 0x3d, 0xdf, 0xf6, 0xac, 0x44,
		0xcf, 0x6a, 0xdb, 0x88, 0x2b, 0xf6, 0xa3, 0xc0, 0x41, 0xe1, 0x96, 0x4f, 0xc9, 0xbd, 0xd5, 0x6f,
		0xd1, 0x25, 0xee, 0x25, 0x75, 0xbf, 0x06, 0x6e, 0x18, 0x08, 0x1e, 0xfa, 0x3e, 0xf5, 0x8e, 0x8f,
		0xac, 0x16, 0x0e, 0x36, 0x59, 0x64, 0x3b, 0xa4, 0xed, 0x46, 0xbe, 0xd5, 0xe2, 0xcd, 0x7f, 0xed,
		0xd6, 0xc1, 0xef, 0x58, 0x14, 0xb1, 0x49, 0x13, 0x33, 0xcb, 0x11, 0xed, 0xe1, 0x03, 0xb3, 0xf9,
		0x0d, 0x7e, 0xfd, 0x22, 0x41, 0xab, 0x65, 0x77, 0x6d, 0x50, 0xc8, 0x5c, 0xda, 0xfc, 0x7c, 0x69,
		0xb5, 0x49, 0x3c, 0x46, 0x94, 0xbb, 0xf6, 0x63, 0xd7, 0x51, 0x9d, 0xd6, 0x71, 0xd4, 0xf0, 0x3c,
		0x4e, 0xe3, 0xb8, 0x00, 0xa9, 0xe0, 0xcd, 0x83, 0xb8, 0x4b, 0x5c, 0xcf, 0xea, 0xb2, 0x2d, 0x1e,
		0x0a, 0x1a, 0x06, 0xd5, 0xca, 0xe9, 0x2d, 0x13, 0xb6, 0x07, 0xee, 0xab, 0x9e, 0xed, 0x46, 0x32,
		0xae, 0xf3, 0xdd, 0xaa, 0x17, 0x60, 0x51, 0xed, 0x5a, 0xbf, 0xa8, 0xbc, 0xd0, 0x8d, 0x0f, 0xc8,
		0xad, 0x4f, 0x0f, 0xc3, 0x5f, 0x81, 0xfd, 0x55, 0x06, 0xc4, 0xef, 0x7d, 0x89, 0xc2, 0xe0, 0xdc,
		0x6e, 0x06, 0xdb, 0x26, 0xb1, 0x18, 0x94, 0x9a, 0x1e, 0xfd, 0x6d, 0xf5, 0x64, 0x78, 0xb1, 0xf5,
		0x4a, 0x88, 0xdd, 0x95, 0xef, 0x94, 0xb8, 0x77, 0x87, 0x97, 0x27, 0x05, 0x28, 0x56, 0x6e, 0xdd,
		0x3d, 0xc6, 0xcc, 0x25, 0xfe, 0xd7, 0x80, 0x15, 0xa3, 0x30, 0xcd, 0xe6, 0xb7, 0xa0, 0xa3, 0x2e,
		0xfc, 0xf6, 0x83, 0x43, 0xc2, 0x49, 0x64, 0x39, 0x0e, 0x89, 0x0e, 0x02, 0xbb, 0x05, 0x9d, 0x41,
		0xf1, 0x72, 0x81, 0x52, 0x18, 0x71, 0xd7, 0x8b, 0x2d, 0x17, 0x46, 0xee, 0xe2, 0x98, 0xd9, 0x9f,
		0xb6, 0x2f, 0x06, 0xa4, 0x8d, 0xc3, 0xb6, 0xf8, 0x45, 0x38, 0x3d, 0x19, 0x75, 0xc8, 0xb5, 0xba,
		0x78, 0x33, 0x76, 0xed, 0xde, 0x63, 0xeb, 0x5a, 0x6d, 0x16, 0x71, 0xbc, 0x73, 0xc9, 0x3a, 0x27,
		0x2c, 0xb0, 0x7a, 0x11, 0x45, 0x61, 0xb0, 0x5d, 0x2b, 0x80, 0x68, 0x7b, 0x7a, 0xf4, 0xe5, 0xd0,
		0xea, 0x5c, 0xf7, 0x73, 0xd9, 0xe0, 0xa2, 0xdd, 0xb2, 0xbd, 0x17, 0x40, 0x64, 0x35, 0x16, 0xbc,
		0x0b, 0xbb, 0x34, 0x0a, 0xac, 0xae, 0x44, 0x6d, 0xbb, 0x2c, 0xb2, 0xdd, 0x3d, 0x4d, 0xc4, 0x1b,
		0xab, 0x3d, 0x94, 0xe5, 0xd2, 0xcd, 0xb0, 0x30, 0xbb, 0x08, 0x75, 0x9b, 0x63, 0xbd, 0xdc, 0xea,
		0x3d, 0x23, 0xf7, 0xdd, 0x3e, 0x82, 0x3d, 0x63, 0xee, 0x95, 0xe5, 0x60, 0x7c, 0x22, 0x97, 0x9f,
		0x1e, 0x74, 0x45, 0x5c, 0x0c, 0x82, 0x31, 0xde, 0xf5, 0x79, 0x70, 0x71, 0xd4, 0x3a, 0x0e, 0xac,
		0x8e, 0xe0, 0xf1, 0x9d, 0xe5, 0x7e, 0x2b, 0xf6, 0xed, 0xde, 0x86, 0x31, 0x5a, 0x4b, 0x35, 0xcb,
		0x37, 0x7b, 0x0e, 0x77, 0x73, 0x1f, 0xf8, 0xe4, 0x97, 0xdd, 0x80, 0x30, 0x16, 0x2d, 0x62, 0x77,
		0xf2, 0xde, 0xee, 0x75, 0x44, 0x44, 0xf7, 0xa8, 0x67, 0x77, 0xc6, 0xa2, 0x8f, 0x3f, 0xaa, 0x9b,
		0x7b, 0x75, 0xcb, 0xd1, 0x60, 0x23, 0x66, 0xe7, 0x3d, 0x51, 0x80, 0x44, 0xd8, 0xa8, 0xfd, 0xa1,
		0xed, 0x2c, 0x69, 0x02, 0xa4, 0xce, 0x3c, 0x6e, 0x79, 0xb7, 0xb7, 0x6a, 0x7d, 0xd7, 0xea, 0x4d,
		0x31, 0x82, 0xda, 0xbe, 0x98, 0x3a, 0x7b, 0x7b, 0x76, 0x4f, 0x41, 0x87, 0x75, 0xc8, 0x2d, 0x13,
		0xe3, 0xd3, 0xcd, 0xed, 0xde, 0x7d, 0x51, 0xb5, 0x3d, 0xa1, 0xfa, 0x6d, 0x58, 0xc7, 0x69, 0xfb,
		0x6b, 0x7c, 0xfe, 0xab, 0x11, 0xd5, 0x4e, 0xad, 0xa6, 0x13, 0xf7, 0x9b, 0xdb, 0x36, 0x3f, 0x7e,
		0xd0, 0x26, 0x56, 0x67, 0xe6, 0xbb, 0xf7, 0x56, 0x1b, 0x01, 0x71, 0x05, 0xf5, 0x59, 0x7c, 0x4a,
		0x05, 0x39, 0x39, 0x3f, 0x6f, 0xd9, 0x6e, 0xcf, 0x7f, 0x31, 0x4e, 0x7d, 0x1a, 0xc7, 0xad, 0x5a,
		0xcb, 0xf2, 0x00, 0x71, 0x74, 0x78, 0x62, 0x39, 0xab, 0xbb, 0x0d, 0x03, 0xbb, 0x79, 0xb5, 0xdd,
		0xbb, 0xd1, 0xef, 0x36, 0x6b, 0x9b, 0x5f, 0x88, 0xa0, 0x3f, 0x29, 0x8d, 0x2c, 0x4f, 0xb4, 0x84,
		0xcc, 0xa5, 0x47, 0x5f, 0x0e, 0xcf, 0x2f, 0x6d, 0x77, 0x4f, 0xa7, 0x3d, 0x5f, 0xb0, 0xc8, 0xa7,
		0x0f, 0xa1, 0xfd, 0x13, 0x72, 0x78, 0x6c, 0x77, 0x66, 0xfe, 0xd6, 0xff, 0x46, 0x5d, 0x41, 0x2e,
		0x05, 0xe1, 0x45, 0xc8, 0x4c, 0x1c, 0x0a, 0x6e, 0x79, 0xbc, 0x38, 0xb6, 0xbb, 0x43, 0xd4, 0x68,
		0x5b, 0x45, 0x41, 0x8a, 0xb0, 0xdd, 0xb0, 0xdd, 0xa6, 0x56, 0x6f, 0xbd, 0xe5, 0xc4, 0x63, 0xe1,
		0x69, 0xe3, 0xc0, 0xe6, 0x77, 0x08, 0x23, 0xd1, 0x5f, 0x4b, 0x85, 0x38, 0x45, 0xe4, 0xce, 0xf2,
		0xc3, 0x37, 0x08, 0x77, 0x03, 0x2a, 0x5a, 0xbe, 0xdd, 0x07, 0x3d, 0xf4, 0x51, 0x61, 0x8b, 0x87,
		0x0f, 0x8f, 0x96, 0x9b, 0xb6, 0xdd, 0x29, 0x6c, 0x61, 0xfd, 0x16, 0x55, 0xc1, 0x2b, 0x95, 0x5d,
		0xcb, 0x3b, 0xe0, 0xd8, 0xbd, 0x49, 0xea, 0xd0, 0x77, 0x59, 0x33, 0xf0, 0x5a, 0xc2, 0x76, 0x52,
		0x64, 0x79, 0x43, 0x78, 0x97, 0x44, 0xbf, 0x48, 0x74, 0x18, 0x8a, 0x6a, 0xb5, 0xc5, 0xc3, 0x36,
		0xb3, 0xbc, 0xa7, 0x52, 0x57, 0x58, 0xcf, 0x4c, 0x07, 0x75, 0x29, 0xe4, 0xd6, 0xee, 0x89, 0x98,
		0x24, 0x7f, 0xc7, 0x8d, 0xed, 0x0b, 0xb0, 0xeb, 0x6b, 0x28, 0xe4, 0xfc, 0x7d, 0x6e, 0x7b, 0xd5,
		0x6f, 0xad, 0x10, 0x0b, 0xeb, 0xd2, 0x15, 0x74, 0x6b, 0xcb, 0xab, 0x1d, 0xc6, 0xe7, 0xe1, 0x6d,
		0x41, 0xea, 0x24, 0xda, 0x56, 0xbf, 0x87, 0x17, 0xfc, 0x5d, 0x88, 0x23, 0xf1, 0xb6, 0x06, 0x47,
		0xe2, 0x5d, 0xb0, 0xa0, 0x53, 0x8c, 0x7d, 0xe8, 0x83, 0x56, 0x64, 0x6e, 0x18, 0x04, 0xd4, 0xb5,
		0x3a, 0x3a, 0x32, 0xcb, 0xdb, 0xf2, 0x85, 0x22, 0x38, 0x17, 0x3d, 0xbb, 0xf7, 0xe5, 0xc5, 0xb6,
		0xef, 0xdb, 0xb1, 0x9c, 0x7a, 0x77, 0x1f, 0x39, 0xb3, 0xbc, 0x7c, 0xc8, 0xef, 0x46, 0x96, 0x4b,
		0xfd, 0x97, 0xbd, 0xdb, 0x42, 0xb4, 0x77, 0x8c, 0x05, 0xe1, 0x27, 0x76, 0xfb, 0xd4, 0x7b, 0xbb,
		0x77, 0x4d, 0x75, 0xdb, 0x45, 0xd8, 0xad, 0x1d, 0x0d, 0x33, 0xc3, 0x3e, 0x0b, 0x7e, 0xda, 0xdf,
		0x96, 0x59, 0x0c, 0xb2, 0x15, 0x7f, 0xd8, 0x2e, 0xf7, 0x57, 0x6b, 0xa7, 0x51, 0x74, 0xf9, 0x8b,
		0x09, 0xf7, 0xce, 0x76, 0xcc, 0xe4, 0xd9, 0xdd, 0xe9, 0xcd, 0xf3, 0x58, 0x41, 0x04, 0xc2, 0xcf,
		0x76, 0x37, 0x3c, 0x1d, 0x1e, 0xa7, 0x55, 0xeb, 0x5a, 0xad, 0x16, 0xf8, 0x24, 0xb2, 0x5a, 0x25,
		0x88, 0x79, 0x64, 0x77, 0x61, 0x41, 0x37, 0x0a, 0x63, 0x66, 0xff, 0x86, 0x0a, 0x1e, 0xf3, 0xdb,
		0x02, 0x34, 0x58, 0xb1, 0x5a, 0xcf, 0xb0, 0x9c, 0x8b, 0x3e, 0xd4, 0xb6, 0x22, 0xbb, 0xb1, 0x5e,
		0x14, 0x06, 0xd5, 0xad, 0x2d, 0xfb, 0xf7, 0x3d, 0x1e, 0x5b, 0x7e, 0xc8, 0x7c, 0x74, 0x65, 0xb5,
		0xd4, 0xda, 0xe1, 0x9b, 0x95, 0xcd, 0xe3, 0xc3, 0xab, 0x22, 0xe5, 0x55, 0xaa, 0x47, 0xbf, 0x3c,
		0xcb, 0x13, 0x2b, 0xb1, 0xed, 0xe7, 0x5d, 0x1e, 0x85, 0xfc, 0x17, 0xe1, 0xb6, 0xb7, 0xe6, 0x8f,
		0x0e, 0x43, 0x37, 0x1e, 0xef, 0x6c, 0x29, 0x46, 0x3f, 0x95, 0xfb, 0x4d, 0xab, 0x83, 0x46, 0x44,
		0x38, 0xb1, 0xbb, 0x77, 0x87, 0xd5, 0x1d, 0x32, 0x39, 0xf3, 0x3a, 0x56, 0xc3, 0x26, 0xbf, 0x66,
		0xfb, 0x09, 0x59, 0x84, 0xd8, 0x5f, 0x05, 0x71, 0xde, 0xf6, 0xba, 0xc5, 0x70, 0xa7, 0x83, 0x03,
		0xb3, 0xac, 0x56, 0x05, 0xec, 0x2f, 0x6e, 0x62, 0x05, 0x10, 0x8b, 0xff, 0x5b, 0xdb, 0xdb, 0xb4,
		0x3a, 0x1d, 0x74, 0x4b, 0x62, 0xe6, 0x1e, 0x5f, 0x1e, 0x9e, 0x15, 0xe1, 0xe8, 0x80, 0x4d, 0xeb,
		0x0f, 0xce, 0x89, 0x37, 0x2d, 0x57, 0x8a, 0x3d, 0xbb, 0xab, 0xb1, 0x7a, 0x51, 0x01, 0xba, 0x39,
		0x59, 0x7e, 0x50, 0x51, 0x97, 0x7a, 0x8c, 0x9c, 0x12, 0xe6, 0x9f, 0xdf, 0x53, 0x7e, 0x1c, 0xd9,
		0x9d, 0x4b, 0xb4, 0xbc, 0x65, 0x2f, 0x0b, 0xda, 0x2c, 0x60, 0xb7, 0xc4, 0xf2, 0xc6, 0x04, 0x76,
		0xd3, 0xb7, 0xb9, 0x02, 0xe4, 0xaf, 0xb6, 0x17, 0x20, 0x93, 0xf8, 0x31, 0x28, 0x42, 0x2f, 0x4f,
		0xcb, 0x4b, 0x36, 0x6e, 0x3b, 0x51, 0x14, 0xfa, 0xcc, 0x7d, 0x24, 0xae, 0x1b, 0xf6, 0x02, 0x61,
		0x79, 0xfd, 0xf1, 0x70, 0xc3, 0xa9, 0xd5, 0x40, 0x36, 0x76, 0x43, 0xab, 0x55, 0x0e, 0x1a, 0xf9,
		0xdc, 0xea, 0x8a, 0x0d, 0xcf, 0xee, 0xbd, 0x75, 0x2f, 0xc5, 0xef, 0xf1, 0x5e, 0x28, 0xab, 0xd7,
		0x94, 0xdd, 0x26, 0x71, 0xe7, 0xdd, 0x55, 0x77, 0xed, 0x3e, 0x5a, 0xa6, 0x1b, 0xba, 0xe4, 0x1b,
		0xe5, 0x31, 0x0b, 0x83, 0x6a, 0x21, 0x36, 0x3b, 0xda, 0xcd, 0x2a, 0x1e, 0x6a, 0x5b, 0x5d, 0x3f,
		0xb2, 0xbb, 0x3b, 0x2c, 0xef, 0x5a, 0xde, 0x44, 0x5c, 0x58, 0x8e, 0xfd, 0xc6, 0x7a, 0x3e, 0x29,
		0x42, 0x88, 0x18, 0x6d, 0xa3, 0xdb, 0x3e, 0xb5, 0x3b, 0x47, 0xe4, 0x93, 0xe8, 0xd6, 0x76, 0xf4,
		0xd1, 0x0a, 0x59, 0x20, 0xae, 0xc2, 0xc1, 0xff, 0x5d, 0x52, 0xce, 0xec, 0x6e, 0x79, 0x4b, 0x88,
		0xbf, 0x65, 0xf9, 0x7e, 0x1b, 0xf7, 0xe7, 0x55, 0x78, 0x29, 0x2c, 0x3f, 0xe3, 0xf1, 0xce, 0xf6,
		0x4d, 0xe4, 0xa3, 0xc6, 0x54, 0xa3, 0x9e, 0x04, 0x5f, 0x78, 0x68, 0xb7, 0xd2, 0xdc, 0x66, 0xb7,
		0x9c, 0x16, 0xa0, 0xc1, 0xc2, 0xaf, 0x5f, 0x24, 0x68, 0xb5, 0xec, 0xc6, 0xe6, 0x1e, 0xed, 0xda,
		0x7d, 0x9e, 0x7c, 0xa7, 0xe7, 0x13, 0x6e, 0x3b, 0x47, 0x22, 0x6d, 0x9f, 0x04, 0x74, 0xb7, 0x62,
		0x77, 0x3f, 0x82, 0x09, 0x43, 0x3a, 0x2a, 0xc4, 0x99, 0xf2, 0x6d, 0x12, 0x8b, 0x42, 0xf5, 0xb4,
		0xb1, 0x7c, 0x1b, 0x73, 0x01, 0x0e, 0x41, 0x18, 0xf7, 0x56, 0x6e, 0x36, 0xce, 0x1a, 0x56, 0x53,
		0xa6, 0x76, 0xeb, 0xd7, 0xd5, 0x63, 0x54, 0x8c, 0x96, 0x4f, 0xa7, 0xc4, 0xf5, 0x6d, 0x3f, 0x93,
		0x73, 0xe2, 0x7a, 0x2d, 0x6f, 0xef, 0xd6, 0xb1, 0xdd, 0xe9, 0xfa, 0x2c, 0xa0, 0x1d, 0xdb, 0x01,
		0xfa, 0x73, 0xbe, 0x51, 0xa8, 0x18, 0x68, 0xff, 0x99, 0xe0, 0x81, 0xe5, 0xfb, 0x44, 0x3c, 0xd6,
		0x61, 0x82, 0xf8, 0xad, 0xf0, 0x17, 0xe5, 0x7d, 0x6b, 0x29, 0xc2, 0x51, 0xc8, 0x56, 0x93, 0x0f,
		0xea, 0x86, 0x96, 0x67, 0xbe, 0x89, 0xed, 0x02, 0x4f, 0x6c, 0xf9, 0xd6, 0x5a, 0xe2, 0xf7, 0x9a,
		0x27, 0xad, 0x22, 0xe5, 0xbe, 0x8b, 0x00, 0x0a, 0xbd, 0xfb, 0xdb, 0x2b, 0xaf, 0x00, 0xdd, 0x7e,
		0xff, 0x12, 0xe3, 0x03, 0xf0, 0x2e, 0x88, 0xc7, 0x42, 0xab, 0x5f, 0x88, 0xc6, 0x76, 0x57, 0xae,
		0x15, 0x60, 0x8f, 0xe7, 0xb0, 0x15, 0x43, 0xe0, 0x12, 0xab, 0x61, 0x54, 0x27, 0xb2, 0xbb, 0xb2,
		0xc5, 0xf3, 0x63, 0xab, 0x8f, 0x32, 0xa7, 0xd5, 0x62, 0x74, 0x5b, 0xbd, 0xa4, 0xfc, 0x9e, 0xb9,
		0xb4, 0x50, 0xbd, 0x00, 0x2e, 0xa8, 0xb0, 0xbd, 0x17, 0x80, 0xed, 0x90, 0x7c, 0xd0, 0x63, 0xe2,
		0xc2, 0xee, 0x1e, 0x13, 0xfe, 0x26, 0x8b, 0x1e, 0xac, 0xdf, 0x3a, 0x2c, 0xba, 0xd6, 0xa3, 0xa6,
		0x2e, 0x71, 0x2f, 0xa9, 0x7b, 0x10, 0x06, 0x82, 0x87, 0xbe, 0x4f, 0xbd, 0xe3, 0x23, 0xab, 0xdf,
		0x26, 0xb2, 0xbb, 0x55, 0xe3, 0x3d, 0x73, 0xd9, 0xf9, 0x50, 0x21, 0x6c, 0xda, 0xbe, 0x45, 0xe9,
		0x7e, 0x73, 0xc7, 0x6e, 0xd6, 0xca, 0xba, 0x84, 0x3f, 0xda, 0xbe, 0x05, 0xf7, 0xbe, 0xfb, 0x8b,
		0x70, 0x3a, 0xe2, 0x78, 0x67, 0xcc, 0xee, 0xd2, 0x48, 0xd7, 0xea, 0x70, 0xd1, 0xf3, 0x85, 0xdd,
		0xcd, 0x56, 0xba, 0xd6, 0x6b, 0x69, 0xa2, 0xfb, 0xad, 0x00, 0x67, 0x4d, 0x3d, 0xdc, 0x86, 0x0f,
		0x63, 0x31, 0xcd, 0xee, 0x7a, 0xf9, 0xea, 0xa6, 0xf5, 0xda, 0x78, 0x64, 0xf9, 0x39, 0x8a, 0x5d,
		0x16, 0x3e, 0x14, 0xa0, 0x36, 0xea, 0xe8, 0xef, 0x4b, 0xcb, 0xb7, 0x8e, 0xdc, 0xf5, 0x02, 0xa1,
		0x5a, 0x7f, 0x2a, 0x75, 0xe5, 0xf5, 0xbb, 0x0c, 0xbe, 0x97, 0xdc, 0x77, 0x9a, 0xf5, 0xdc, 0x27,
		0x61, 0xa7, 0x8f, 0x8b, 0xcb, 0x16, 0x3c, 0x2d, 0x6b, 0x3b, 0x9d, 0x38, 0xb0, 0xe1, 0x49, 0xbb,
		0x11, 0xed, 0x28, 0x1c, 0xca, 0x9b, 0xfd, 0x03, 0x47, 0x5e, 0x30, 0x60, 0x46, 0x27, 0x61, 0x18,
		0x55, 0x6d, 0x78, 0xe0, 0x58, 0x6a, 0x3f, 0xd2, 0x0a, 0xd6, 0xec, 0x28, 0xdf, 0xbe, 0xfd, 0xd7,
		0x69, 0xe3, 0xcc, 0x86, 0x07, 0xe6, 0x6d, 0x77, 0x77, 0x67, 0x47, 0x2a, 0x76, 0xad, 0xe0, 0xeb,
		0x0e, 0x37, 0x42, 0xd5, 0x07, 0xe7, 0x89, 0x7d, 0x96, 0x41, 0x0c, 0x2b, 0xf8, 0xc0, 0x71, 0x6d,
		0xb3, 0x66, 0xc3, 0x83, 0xde, 0x0f, 0xd9, 0xad, 0x4c, 0xe7, 0xe0, 0x15, 0xf8, 0x03, 0x16, 0x5d,
		0xb2, 0x8e, 0x6d, 0xae, 0xd6, 0x8a, 0x75, 0x30, 0x6a, 0xb3, 0x64, 0xc5, 0x2a, 0x08, 0x03, 0x2a,
		0x5a, 0x44, 0xdc, 0xd9, 0xe1, 0xbc, 0x3c, 0x3b, 0x3e, 0x2a, 0x7b, 0xb8, 0x0a, 0x8f, 0xc2, 0x1e,
		0xb7, 0x03, 0x23, 0x7e, 0x6b, 0x33, 0xb9, 0x42, 0xef, 0x15, 0x2d, 0xd7, 0x6f, 0x57, 0x36, 0x3c,
		0xaa, 0x1b, 0xd8, 0x31, 0xfd, 0x91, 0x74, 0x49, 0xf9, 0xca, 0xd0, 0xcb, 0xd6, 0x11, 0xbb, 0xa5,
		0x56, 0x7c, 0xdd, 0x69, 0x0e, 0xfe, 0xb4, 0x75, 0x6c, 0xc3, 0x03, 0x7b, 0xf7, 0xb7, 0x17, 0xae,
		0x2b, 0xbf, 0x9b, 0x28, 0xfb, 0x27, 0xfe, 0xaf, 0x6f, 0x07, 0xaf, 0xe9, 0xb4, 0x23, 0x2b, 0x4c,
		0xec, 0xb6, 0xbb, 0xb9, 0x53, 0x89, 0x08, 0x3f, 0xb8, 0x23, 0x56, 0x04, 0xdb, 0x5b, 0x26, 0xac,
		0x60, 0x31, 0x9d, 0xbd, 0xbd, 0x5d, 0x2b, 0x84, 0x82, 0x87, 0xdd, 0xed, 0x13, 0x12, 0x59, 0xf1,
		0x4d, 0xfd, 0xd0, 0x25, 0xfe, 0x15, 0xf1, 0x7f, 0x5a, 0xb1, 0x00, 0x06, 0x67, 0xbd, 0x6d, 0xd7,
		0xed, 0x78, 0x58, 0x11, 0x59, 0x13, 0xae, 0xe2, 0x2b, 0xaf, 0x4b, 0xac, 0x40, 0xaf, 0x5d, 0x2f,
		0x3e, 0x76, 0x59, 0x64, 0x07, 0x72, 0x69, 0x57, 0xb7, 0x4f, 0xdb, 0x5c, 0xf6, 0xf4, 0xd4, 0xec,
		0x9f, 0xf8, 0x8e, 0x45, 0x94, 0xfb, 0x24, 0xb0, 0x42, 0x22, 0x70, 0x59, 0xec, 0x86, 0xc7, 0x97,
		0x27, 0x72, 0xa5, 0x67, 0xab, 0xc2, 0x85, 0xa7, 0xc4, 0x3d, 0x91, 0xdb, 0x31, 0xb1, 0x02, 0xd5,
		0x30, 0xe2, 0xb6, 0xc0, 0x02, 0x3b, 0x44, 0x2d, 0x3b, 0x28, 0xe2, 0xa4, 0xcd, 0xc6, 0xa6, 0x45,
		0xc9, 0x8e, 0x4d, 0xe2, 0x9d, 0x10, 0x2b, 0xb4, 0xd8, 0xd1, 0xce, 0xce, 0xbf, 0x38, 0x89, 0x22,
		0xca, 0xcf, 0xef, 0x29, 0xbf, 0xa3, 0xc4, 0x93, 0xde, 0x45, 0x9c, 0xfd, 0x0b, 0xf4, 0xe2, 0x5b,
		0x2b, 0xe2, 0x83, 0x2b, 0x9a, 0xdd, 0x9e, 0x6f, 0x8b, 0x2a, 0xdb, 0xb3, 0x62, 0xed, 0xc6, 0x15,
		0x7b, 0xd0, 0x0c, 0x0b, 0x04, 0xe5, 0x3e, 0x25, 0xf7, 0x56, 0x3c, 0xed, 0xb0, 0x7a, 0xfb, 0x6b,
		0xe0, 0x2a, 0xd5, 0x6f, 0xaf, 0x80, 0x40, 0x6e, 0xb2, 0xc8, 0x16, 0x08, 0xd6, 0x8d, 0x7c, 0x2b,
		0x48, 0xf9, 0x7f, 0xed, 0xd0, 0x0d, 0x07, 0x27, 0x7c, 0x1d, 0xf7, 0xad, 0xac, 0x4d, 0x5c, 0x6a,
		0x09, 0x02, 0x3b, 0x7c, 0x60, 0x36, 0x3c, 0xe9, 0xb0, 0x6b, 0x9e, 0x1d, 0x39, 0xfb, 0xc1, 0x4e,
		0xd1, 0xcf, 0x97, 0x56, 0x2c, 0xd9, 0xc7, 0x88, 0x72, 0xd7, 0x1e, 0xac, 0x35, 0xaa, 0x87, 0x38,
		0x8e, 0x1a, 0x9e, 0xc7, 0xa5, 0x6a, 0x84, 0x57, 0x96, 0x62, 0xda, 0x3c, 0x88, 0xbb, 0xc4, 0xf5,
		0xac, 0x28, 0x8f, 0xe0, 0xa1, 0xa0, 0x61, 0x50, 0xad, 0xc8, 0x1d, 0x6e, 0xb6, 0x9a, 0x40, 0x76,
		0xd5, 0xb3, 0x65, 0x11, 0x8f, 0xeb, 0xd1, 0xb6, 0xea, 0x16, 0x2d, 0x86, 0x5d, 0x6b, 0x16, 0xc3,
		0x64, 0x63, 0xaf, 0xca, 0xb9, 0xa1, 0x2b, 0x29, 0xf1, 0xf9, 0x22, 0x7b, 0x92, 0xda, 0x0a, 0xc4,
		0x5c, 0x12, 0x8b, 0x41, 0x09, 0xd5, 0xd1, 0xdf, 0x56, 0x7c, 0x5c, 0xa9, 0xed, 0x3d, 0xab, 0x61,
		0xbe, 0x76, 0x54, 0x50, 0x52, 0xe2, 0xde, 0x1d, 0x5e, 0x9e, 0x58, 0x54, 0x3c, 0xd7, 0xba, 0x7b,
		0x8c, 0x99, 0x4b, 0xfc, 0xaf, 0x01, 0xb3, 0xab, 0xd0, 0xc3, 0x86, 0xa7, 0x1d, 0x9f, 0x87, 0x6a,
		0x0f, 0xc8, 0x21, 0x9c, 0x44, 0x96, 0xc4, 0xdf, 0xe8, 0x20, 0xb0, 0x83, 0xa8, 0x0f, 0x8a, 0xe9,
		0x2c, 0x94, 0x70, 0xe3, 0xae, 0x17, 0x5b, 0x42, 0x84, 0xef, 0xe2, 0x98, 0xd9, 0x93, 0xde, 0xb3,
		0x0b, 0x82, 0xc5, 0x61, 0x5b, 0xfc, 0x22, 0x9c, 0x9e, 0x84, 0x61, 0x74, 0x2b, 0x75, 0x7c, 0xc5,
		0x0a, 0x8a, 0x95, 0x62, 0xd7, 0x8e, 0xbd, 0x42, 0xae, 0x15, 0xcb, 0x36, 0x8e, 0x77, 0x2e, 0x59,
		0xe7, 0x84, 0x05, 0x56, 0x4c, 0x7e, 0x14, 0x06, 0xdb, 0x35, 0x8b, 0x44, 0xb1, 0xd3, 0xa3, 0x2f,
		0x87, 0x56, 0xe4, 0xca, 0x9e, 0xd3, 0x47, 0xd9, 0xf6, 0xbf, 0x2b, 0x58, 0x10, 0x91, 0x15, 0x98,
		0xe6, 0x2e, 0xec, 0xd2, 0x28, 0xb0, 0xa2, 0xc2, 0xaa, 0xed, 0xb2, 0xc8, 0x16, 0x77, 0x30, 0x21,
		0xe5, 0x56, 0x78, 0x04, 0x4b, 0x28, 0xf9, 0xb0, 0x20, 0xd0, 0xa6, 0x3a, 0xa5, 0xb1, 0xbe, 0x68,
		0x45, 0x6d, 0xf0, 0xb0, 0x8b, 0xcf, 0x19, 0x73, 0xaf, 0x2c, 0x01, 0x89, 0xd3, 0x13, 0x20, 0x0e,
		0xba, 0x22, 0xb6, 0x0b, 0xe0, 0x8e, 0x77, 0xbb, 0x1c, 0x5c, 0x1c, 0xb5, 0x8e, 0x03, 0x2b, 0x22,
		0x5a, 0x7c, 0x67, 0x89, 0x9f, 0x88, 0x7d, 0x3b, 0xca, 0x70, 0x47, 0x6b, 0xa0, 0x66, 0xc9, 0x26,
		0x97, 0xd1, 0xb1, 0xf7, 0x3e, 0xf9, 0x65, 0x07, 0xb0, 0x89, 0x85, 0xd4, 0x29, 0xb3, 0x2b, 0x80,
		0x8a, 0x76, 0xcc, 0x3f, 0x11, 0xdd, 0xa3, 0x9e, 0x1d, 0x8a, 0x6d, 0x3f, 0xee, 0x56, 0x37, 0xf7,
		0xea, 0x96, 0xa0, 0x9a, 0x46, 0xcc, 0xce, 0x7b, 0xc2, 0x22, 0x01, 0x7f, 0xd4, 0x26, 0xc7, 0x16,
		0x34, 0x3e, 0x01, 0x0a, 0x67, 0x1e, 0xb7, 0xa4, 0xeb, 0x48, 0xb5, 0xbe, 0x6b, 0x45, 0x91, 0xb3,
		0xa0, 0xb6, 0x2c, 0x82, 0xce, 0xde, 0x9e, 0x1d, 0x9f, 0xb4, 0xc3, 0x3a, 0xe4, 0x96, 0x0d, 0xe9,
		0xa3, 0x54, 0x17, 0xe9, 0x55, 0x54, 0xdf, 0x56, 0x6d, 0x49, 0xe0, 0x48, 0x9f, 0x42, 0xb8, 0x9a,
		0xc7, 0xfd, 0xfc, 0x57, 0x23, 0xaa, 0x9d, 0x5a, 0x01, 0x67, 0xef, 0x37, 0xb7, 0x6d, 0x78, 0xcc,
		0xa0, 0x4d, 0xac, 0xc8, 0xe0, 0x75, 0xef, 0xad, 0x58, 0xa4, 0xc4, 0x15, 0xd4, 0x67, 0xf1, 0x29,
		0x15, 0xe4, 0xe4, 0xfc, 0xbc, 0x65, 0x8b, 0x5d, 0x8d, 0x5b, 0x9b, 0xb6, 0x6a, 0x2d, 0x4b, 0x1c,
		0xec, 0xd1, 0xe1, 0x89, 0x25, 0x2c, 0xe1, 0x36, 0x0c, 0xec, 0xe0, 0x5d, 0x76, 0xec, 0x7a, 0xbb,
		0xdb, 0xac, 0x6d, 0x7e, 0x21, 0x82, 0xfe, 0xa4, 0x34, 0xb2, 0x44, 0x50, 0x1e, 0x1d, 0x93, 0x7b,
		0x7e, 0x69, 0x8b, 0x3b, 0x38, 0xed, 0xf9, 0x82, 0x45, 0x3e, 0x7d, 0x08, 0xed, 0xf9, 0xc0, 0x87,
		0xc7, 0x76, 0x64, 0xf0, 0x6e, 0xfd, 0x6f, 0xd4, 0x15, 0xe4, 0x52, 0x10, 0x6e, 0x93, 0x32, 0x7b,
		0x28, 0xb8, 0x25, 0xfe, 0xf6, 0xd8, 0x8e, 0x0e, 0x09, 0xa3, 0xb2, 0x5a, 0xcb, 0x8a, 0xff, 0xdc,
		0xb0, 0xdd, 0xa6, 0x56, 0x6c, 0x21, 0xe2, 0xc4, 0x63, 0xe1, 0x69, 0xe3, 0xc0, 0x86, 0x67, 0x1d,
		0x9d, 0x50, 0x6c, 0x55, 0x57, 0xe0, 0x3b, 0x4b, 0x9a, 0xec, 0x12, 0xee, 0x06, 0x54, 0xb4, 0x7c,
		0x3b, 0x1a, 0xc0, 0xf6, 0xd1, 0x4d, 0x8b, 0x87, 0x0f, 0x8f, 0x96, 0x98, 0x98, 0x1d, 0x29, 0x30,
		0x61, 0xcd, 0x16, 0x1c, 0xc1, 0x2b, 0x95, 0x5d, 0x4b, 0x76, 0x98, 0xdb, 0x51, 0xac, 0x7e, 0xe8,
		0x4b, 0x1f, 0x3f, 0xb2, 0x1a, 0xf0, 0x6d, 0x49, 0x83, 0xca, 0xe1, 0x61, 0xb6, 0x87, 0xa1, 0xa8,
		0x56, 0x5b, 0x3c, 0x6c, 0x33, 0x4b, 0x7a, 0x0d, 0x74, 0x85, 0x35, 0x8c, 0x66, 0x90, 0x5f, 0x26,
		0xb7, 0x76, 0x7c, 0xd8, 0x49, 0x52, 0x69, 0xdc, 0x50, 0xd3, 0xa2, 0x2a, 0xfb, 0xd1, 0x69, 0x26,
		0xe7, 0xb6, 0x54, 0xa7, 0xd5, 0xac, 0x5a, 0x10, 0xa3, 0x63, 0x4c, 0x6b, 0x87, 0xb1, 0xd4, 0x29,
		0xa6, 0x2b, 0xcd, 0x8f, 0xb6, 0xad, 0x78, 0x5e, 0x2f, 0xf8, 0xdb, 0xaa, 0x23, 0x19, 0xb6, 0x06,
		0x47, 0x32, 0x5c, 0xb0, 0xa0, 0x63, 0xd7, 0x7e, 0xb7, 0x41, 0x0b, 0x0d, 0x37, 0x0c, 0x02, 0xea,
		0x5a, 0x11, 0x45, 0x98, 0x25, 0xed, 0x5e, 0x42, 0x11, 0x9c, 0x8b, 0x9e, 0x1d, 0xfb, 0x1a, 0x62,
		0x5b, 0xea, 0xad, 0x2d, 0xa1, 0x66, 0xdd, 0x47, 0xce, 0x2c, 0x49, 0xeb, 0xfb, 0xdd, 0xc8, 0x12,
		0x09, 0xf4, 0xb2, 0x77, 0x6b, 0x55, 0xbb, 0x9f, 0x58, 0x10, 0x7e, 0x62, 0x87, 0xaf, 0xba, 0xb7,
		0xa3, 0x7a, 0xbd, 0xdb, 0xb6, 0x69, 0xb7, 0x58, 0x34, 0xcc, 0x38, 0xf9, 0x2c, 0xf8, 0x69, 0x4f,
		0xdb, 0x3a, 0x31, 0x50, 0x6b, 0xff, 0xb0, 0x45, 0x06, 0xad, 0xd6, 0x4e, 0xa3, 0xe8, 0xf2, 0x17,
		0x13, 0xee, 0x9d, 0x2d, 0x98, 0xc0, 0xb3, 0xa3, 0xe3, 0x88, 0xe7, 0x31, 0xcb, 0x04, 0x9b, 0xcf,
		0x76, 0x34, 0xa8, 0x1a, 0xb6, 0x91, 0xaf, 0x75, 0xad, 0x60, 0x8d, 0x3e, 0x89, 0xac, 0x60, 0x8b,
		0x31, 0x8f, 0xec, 0x48, 0x34, 0x76, 0xa3, 0x30, 0x66, 0xf6, 0x14, 0xd4, 0xf2, 0x98, 0xdf, 0x5a,
		0xb4, 0xe1, 0xd9, 0x0a, 0xfe, 0x6a, 0x09, 0x87, 0x79, 0xa8, 0x6d, 0x45, 0x76, 0x60, 0x96, 0x28,
		0x0c, 0xaa, 0x5b, 0x5b, 0xf6, 0xec, 0x03, 0x39, 0xb6, 0xe4, 0x10, 0xbc, 0xc8, 0x8e, 0x83, 0x30,
		0x3b, 0x7c, 0xb3, 0xb2, 0x79, 0x7c, 0x78, 0x65, 0xa3, 0x7e, 0x5c, 0x3d, 0xfa, 0xe5, 0x59, 0x22,
		0x20, 0xc7, 0xb6, 0x9c, 0x7b, 0x72, 0x14, 0xf2, 0x5f, 0x84, 0xdb, 0xd2, 0xfa, 0x33, 0x3a, 0x0c,
		0xdd, 0x78, 0x5c, 0xa9, 0x6c, 0xd7, 0xfe, 0xe6, 0xfb, 0x4d, 0x2b, 0x9c, 0x6e, 0x44, 0x38, 0xb1,
		0x63, 0xef, 0xad, 0x15, 0x1d, 0x90, 0x38, 0xf3, 0x3a, 0x56, 0xc0, 0x02, 0xbf, 0x66, 0x4b, 0x67,
		0x78, 0x42, 0xec, 0xc9, 0x7e, 0x9e, 0xb7, 0xbd, 0xae, 0x5d, 0x6e, 0x6a, 0xd0, 0x28, 0xde, 0x0a,
		0x76, 0x68, 0x4f, 0x71, 0x01, 0xb3, 0x48, 0x74, 0xfb, 0x6f, 0x6d, 0x6f, 0xd3, 0x0a, 0x79, 0xfb,
		0x96, 0xc4, 0xcc, 0x3d, 0xbe, 0x3c, 0x3c, 0xb3, 0xa9, 0x05, 0xe9, 0xa6, 0x35, 0x8d, 0xaa, 0xe3,
		0x4d, 0x4b, 0x14, 0x37, 0xcf, 0x8e, 0xaa, 0x87, 0x5e, 0x64, 0x51, 0x37, 0x03, 0x4b, 0x1a, 0x7d,
		0x77, 0xa9, 0xc7, 0xc8, 0x29, 0x61, 0xfe, 0xf9, 0x3d, 0xe5, 0xc7, 0x91, 0x1d, 0x39, 0x0d, 0x4b,
		0x5a, 0xa0, 0xb1, 0xa0, 0xcd, 0x02, 0x76, 0x4b, 0x2c, 0xd9, 0xb8, 0x68, 0x07, 0x1d, 0x98, 0x2b,
		0x88, 0xfb, 0x6a, 0x4b, 0x41, 0x1c, 0x89, 0x1f, 0x03, 0x9b, 0x7a, 0x32, 0x59, 0x92, 0x92, 0xbd,
		0xed, 0x44, 0x51, 0xe8, 0x33, 0xf7, 0x91, 0xb8, 0x6e, 0xd8, 0x0b, 0x84, 0x25, 0xf5, 0x70, 0xc3,
		0x0d, 0x35, 0x56, 0x00, 0xaf, 0xd8, 0x0d, 0xad, 0x60, 0xb5, 0x34, 0xf2, 0xb9, 0x15, 0x19, 0x59,
		0xcf, 0x8e, 0xbd, 0x09, 0x2f, 0xc5, 0xc2, 0x71, 0x4d, 0xba, 0x15, 0x6b, 0xc1, 0x8e, 0x25, 0x7b,
		0xe7, 0xdd, 0x55, 0x77, 0xed, 0x68, 0xf1, 0xdc, 0x0d, 0x5d, 0xf2, 0x8d, 0xf2, 0x98, 0x85, 0x41,
		0xd5, 0xaa, 0xcd, 0x1f, 0x76, 0xa0, 0xda, 0x87, 0xda, 0x56, 0xd7, 0x8f, 0xec, 0xe8, 0xce, 0xc5,
		0xbb, 0x96, 0x34, 0x41, 0x14, 0x96, 0x60, 0x98, 0xb1, 0xce, 0x49, 0x6c, 0x72, 0xb1, 0xa3, 0x6d,
		0x08, 0xdb, 0xa7, 0x76, 0x68, 0xde, 0x3e, 0x89, 0x6e, 0x6d, 0x89, 0xba, 0xad, 0x90, 0x05, 0xe2,
		0x2a, 0x1c, 0xfc, 0xdf, 0x25, 0xe5, 0xcc, 0x8e, 0xd6, 0x62, 0x84, 0xf8, 0x5b, 0x96, 0xd4, 0x49,
		0xbb, 0x3f, 0xaf, 0xc2, 0x4b, 0x61, 0xc9, 0x19, 0x20, 0x77, 0xb6, 0x6c, 0x56, 0x1b, 0x35, 0x60,
		0x18, 0xed, 0x59, 0xfc, 0xc2, 0x43, 0x3b, 0x14, 0xbb, 0x36, 0xbb, 0xe5, 0xd4, 0xa2, 0x8d, 0x96,
		0xc3, 0xc3, 0x72, 0xed, 0xc0, 0x8c, 0x1e, 0xed, 0xda, 0x71, 0xde, 0x5d, 0xa7, 0xe7, 0x13, 0x6e,
		0x0b, 0x16, 0x27, 0x6d, 0x9f, 0x04, 0x74, 0xb7, 0x62, 0xc7, 0x7e, 0xc5, 0x09, 0x12, 0x3f, 0xb2,
		0xea, 0xcc, 0xbb, 0x36, 0x89, 0x85, 0x95, 0x7b, 0xc6, 0x2d, 0xd9, 0x5e, 0x65, 0x51, 0xd3, 0xd4,
		0x71, 0xef, 0xb9, 0x66, 0xe3, 0xac, 0x61, 0x05, 0x34, 0x6f, 0xb7, 0x7e, 0x5d, 0x3d, 0x46, 0x76,
		0xb5, 0x3c, 0x38, 0x25, 0xae, 0x6f, 0xcb, 0x19, 0x2c, 0x13, 0x97, 0x66, 0x49, 0x9b, 0x91, 0x8e,
		0x2d, 0xce, 0xcc, 0x67, 0x01, 0xed, 0xd8, 0x02, 0x1c, 0x9f, 0xe3, 0x5d, 0x2b, 0x63, 0x85, 0x3d,
		0x67, 0x9f, 0x05, 0x96, 0xd4, 0x03, 0x7b, 0xac, 0xc3, 0x04, 0xf1, 0x5b, 0xe1, 0x2f, 0xca, 0xfb,
		0xab, 0xd9, 0xa6, 0x23, 0xa5, 0xac, 0x00, 0xbf, 0xd4, 0x0d, 0x2d, 0xc9, 0x9c, 0x11, 0x5b, 0x88,
		0x7b, 0x6c, 0xc9, 0x16, 0x21, 0xe2, 0xf7, 0x9a, 0x27, 0x2d, 0x1b, 0x73, 0x67, 0x36, 0x81, 0x1b,
		0xef, 0xfe, 0xf6, 0xca, 0xb3, 0xa8, 0x7b, 0xda, 0x5f, 0x62, 0x7c, 0x00, 0xc3, 0x05, 0xf1, 0x58,
		0x68, 0xc5, 0x83, 0xd3, 0xd8, 0x8e, 0x4a, 0x10, 0x8b, 0xf6, 0xb6, 0x0c, 0xb7, 0x64, 0x06, 0xae,
		0x1d, 0xe7, 0xbe, 0x77, 0x22, 0x3b, 0x32, 0xd4, 0x9e, 0x1f, 0x5b, 0x71, 0x34, 0x1b, 0xad, 0xda,
		0xd5, 0x05, 0xeb, 0x92, 0xf2, 0x7b, 0xe6, 0x52, 0x2b, 0xf7, 0x10, 0x5e, 0x50, 0x61, 0xcb, 0x1e,
		0x42, 0x5b, 0xa0, 0xe2, 0x60, 0x4f, 0xe9, 0x85, 0x1d, 0x7b, 0x4a, 0xfd, 0x4d, 0x16, 0x3d, 0x58,
		0xb3, 0xd5, 0x49, 0x74, 0xad, 0x41, 0x05, 0x5d, 0xe2, 0x5e, 0x52, 0xf7, 0x20, 0x0c, 0x04, 0x0f,
		0x7d, 0x9f, 0x7a, 0xc7, 0x47, 0x56, 0x3c, 0x75, 0x64, 0x47, 0xeb, 0x9e, 0x7b, 0xe6, 0xb2, 0xf3,
		0xa1, 0x62, 0x63, 0xcf, 0x29, 0xda, 0x9b, 0x3b, 0x76, 0xb0, 0x1d, 0xd6, 0x25, 0xfc, 0xd1, 0x96,
		0xad, 0x44, 0xc3, 0x43, 0xa9, 0x47, 0x9c, 0xe1, 0x8c, 0xd9, 0x51, 0x22, 0xe4, 0x5a, 0xe1, 0x6e,
		0x7b, 0xbe, 0xb0, 0x63, 0xf3, 0x73, 0xd7, 0x1a, 0xcd, 0x43, 0x74, 0xbf, 0x59, 0xd4, 0x7b, 0xfd,
		0xe1, 0x36, 0x7c, 0x18, 0x8b, 0x1e, 0x76, 0xd4, 0x5d, 0x56, 0x37, 0xad, 0xd1, 0x12, 0x23, 0x4b,
		0xce, 0xdf, 0xe8, 0xb2, 0xf0, 0xc1, 0xa2, 0xda, 0x84, 0xa3, 0xbf, 0x2f, 0x2d, 0x29, 0x11, 0xbe,
		0xeb, 0x05, 0x42, 0xb6, 0xae, 0x2a, 0xd5, 0x15, 0xd7, 0xef, 0xf4, 0x8e, 0xfb, 0xf6, 0x6f, 0xbd,
		0xfe, 0x1b, 0x6f, 0x7c, 0xed, 0x72, 0xf3, 0x41, 0xc4, 0xe5, 0xfd, 0xd2, 0xf7, 0x77, 0x7a, 0xe6,
		0xa0, 0xfc, 0x27, 0x7d, 0xfc, 0x15, 0x72, 0x6f, 0x90, 0xe5, 0x73, 0x1d, 0xfa, 0x20, 0xf6, 0x05,
		0xf5, 0x69, 0x97, 0x0a, 0xfe, 0xe8, 0x84, 0x81, 0xe3, 0xde, 0x91, 0xa0, 0x43, 0xcb, 0xc9, 0x96,
		0x40, 0xf9, 0x0f, 0x12, 0x37, 0x78, 0xa7, 0xd7, 0xa5, 0x81, 0x28, 0xef, 0x97, 0xda, 0xc4, 0x8f,
		0x69, 0xc2, 0x2b, 0x67, 0x2e, 0x2b, 0x97, 0x15, 0x3f, 0xe1, 0xf5, 0x1b, 0x9f, 0xb0, 0xd1, 0xeb,
		0xf4, 0x6f, 0x45, 0x3d, 0x9d, 0xdf, 0x71, 0xbc, 0x76, 0x37, 0x42, 0xd7, 0x61, 0xed, 0x7d, 0x36,
		0xee, 0xa7, 0x1b, 0xbf, 0xfc, 0x87, 0xd1, 0xdf, 0xdd, 0x30, 0x68, 0xb3, 0x4e, 0xd2, 0x0f, 0x7b,
		0x48, 0x63, 0x97, 0xb3, 0x48, 0xb0, 0x30, 0xe8, 0xdf, 0xa4, 0xe1, 0x79, 0x71, 0xe9, 0xaa, 0x75,
		0x7c, 0x58, 0xda, 0x28, 0x0d, 0xb6, 0x8b, 0x8b, 0xc7, 0x88, 0x96, 0x62, 0x2a, 0x04, 0x0b, 0x3a,
		0xa5, 0x76, 0xc8, 0x4b, 0xe2, 0x8e, 0x96, 0x6e, 0x49, 0x4c, 0x4b, 0x93, 0xfb, 0x26, 0xbd, 0xd5,
		0x9f, 0x2c, 0xe8, 0x7f, 0x98, 0x6a, 0xc2, 0x5f, 0x3f, 0x18, 0xbe, 0xc7, 0x7e, 0xa9, 0x92, 0xf0,
		0x82, 0x16, 0xa7, 0x6d, 0xf6, 0x50, 0xde, 0x4f, 0xe1, 0x24, 0xa6, 0x79, 0x68, 0xd7, 0x19, 0xd0,
		0xf1, 0xe4, 0x1e, 0xa9, 0x7c, 0x19, 0xf6, 0xb8, 0x4b, 0x53, 0xdd, 0xee, 0xa5, 0x5d, 0x44, 0xc3,
		0x27, 0x4e, 0xe7, 0x06, 0x5f, 0xd8, 0x82, 0xe0, 0x3d, 0x9a, 0x72, 0x80, 0x59, 0x93, 0x18, 0xbf,
		0xb8, 0x6e, 0x67, 0x95, 0x74, 0xf9, 0x31, 0x9e, 0x6e, 0xc2, 0x44, 0xc4, 0xbc, 0xf4, 0xdf, 0x7c,
		0xb2, 0x9b, 0xa1, 0x7f, 0x75, 0xca, 0xaf, 0xf5, 0xc2, 0x42, 0xce, 0x07, 0x3f, 0x11, 0xdf, 0x7f,
		0xec, 0x9b, 0xc5, 0xc0, 0x1c, 0x04, 0xe9, 0x94, 0x22, 0x1e, 0x8a, 0xd0, 0x0d, 0xfd, 0x12, 0xf3,
		0x68, 0x20, 0x58, 0x9b, 0x51, 0x5e, 0x6a, 0x33, 0xea, 0x7b, 0xa5, 0xf7, 0x7d, 0x73, 0xfa, 0x50,
		0x12, 0x77, 0x44, 0xfc, 0x08, 0x58, 0x5c, 0x22, 0xae, 0x4b, 0x23, 0x41, 0xbd, 0x52, 0x18, 0x0c,
		0xae, 0xfe, 0x76, 0xd2, 0x38, 0x4b, 0xff, 0x4c, 0x6d, 0xd2, 0xf3, 0x67, 0x27, 0xd0, 0xe9, 0x1b,
		0x6a, 0xbc, 0xdf, 0xbf, 0xd7, 0x4d, 0xe5, 0xef, 0xdd, 0x6a, 0xa5, 0x92, 0x76, 0xcc, 0x91, 0x79,
		0x56, 0x52, 0x5e, 0x96, 0xd6, 0x4c, 0x55, 0xcc, 0x55, 0x83, 0xd9, 0xaa, 0x9a, 0xaf, 0x36, 0x33,
		0xd6, 0x66, 0xce, 0x7a, 0xcc, 0x5a, 0x0e, 0xe3, 0xa4, 0x44, 0x70, 0xe5, 0x41, 0x45, 0x9d, 0xd2,
		0x8c, 0x0f, 0xcd, 0x4b, 0x3c, 0x72, 0xda, 0x96, 0x99, 0xf5, 0x71, 0x0c, 0xda, 0x92, 0xb8, 0xf6,
		0x78, 0x74, 0xeb, 0xcf, 0x24, 0x56, 0x58, 0x37, 0xe3, 0x17, 0x19, 0x58, 0xea, 0xd5, 0xbf, 0x5b,
		0xcd, 0x4b, 0xd9, 0x85, 0xf3, 0x8d, 0xf8, 0x3d, 0x9a, 0x0c, 0xb2, 0xe9, 0x85, 0xd3, 0x8b, 0xdf,
		0xa5, 0xf2, 0xf7, 0x5e, 0xdf, 0xeb, 0x48, 0x8f, 0xf8, 0xf4, 0x31, 0x27, 0xaf, 0xb1, 0x5b, 0x8c,
		0xd7, 0xd8, 0xab, 0x15, 0xe0, 0x35, 0x1a, 0x67, 0xff, 0x2e, 0xc2, 0x8a, 0xda, 0x6d, 0xec, 0x2a,
		0xbc, 0x86, 0xd4, 0x95, 0xd7, 0xa6, 0x5d, 0x7f, 0xce, 0xe8, 0xed, 0x9b, 0xdc, 0x2c, 0x08, 0x42,
		0x41, 0x46, 0x28, 0xee, 0xed, 0xe9, 0x2d, 0xc7, 0xee, 0x1d, 0xed, 0x92, 0x88, 0x88, 0xbb, 0x21,
		0xf9, 0x8a, 0x68, 0x30, 0x64, 0x56, 0xce, 0x0c, 0x03, 0x5b, 0xf4, 0xe3, 0xc6, 0x88, 0x80, 0xbd,
		0x93, 0x7b, 0x97, 0x57, 0x16, 0xed, 0xa4, 0x81, 0xd7, 0x9b, 0x6f, 0x30, 0xd7, 0xf2, 0xeb, 0x8d,
		0x18, 0x93, 0x90, 0x9b, 0x25, 0x06, 0x7b, 0x69, 0xc0, 0xdd, 0x2c, 0x98, 0xa3, 0xe2, 0x2e, 0x41,
		0x34, 0x4c, 0x8b, 0xdd, 0xa4, 0xb1, 0x9a, 0x34, 0x36, 0x7b, 0x89, 0xc5, 0xfa, 0xef, 0x65, 0x58,
		0xbe, 0x49, 0xca, 0xa4, 0xca, 0xee, 0x78, 0x0e, 0x53, 0xea, 0x0f, 0xe9, 0x74, 0x85, 0x9c, 0x93,
		0xfd, 0x64, 0x0b, 0xad, 0x78, 0x5c, 0x3f, 0xd1, 0x42, 0xcc, 0x09, 0xd5, 0x27, 0x9d, 0x0e, 0xa7,
		0x1d, 0x22, 0xa8, 0xa3, 0x42, 0xf9, 0x9f, 0x8d, 0xb2, 0x1e, 0x94, 0xd8, 0x27, 0x1d, 0x30, 0xe2,
		0x05, 0x8b, 0xbf, 0xff, 0x5d, 0x0a, 0x47, 0x88, 0x7d, 0x4a, 0xda, 0x8a, 0x64, 0x78, 0x47, 0xe2,
		0xda, 0xd6, 0x04, 0x18, 0x25, 0x53, 0xa5, 0x83, 0xfe, 0xe3, 0x9a, 0x02, 0x98, 0x29, 0x3c, 0x39,
		0xe9, 0x89, 0xd0, 0x09, 0x68, 0x27, 0x14, 0x8c, 0x08, 0xaa, 0xe0, 0x56, 0x9e, 0x8f, 0x23, 0xaf,
		0xdf, 0xf5, 0x97, 0xf7, 0x9a, 0xf8, 0xa5, 0x74, 0x41, 0x77, 0x7d, 0xfc, 0x52, 0xaa, 0xa0, 0x6c,
		0x8b, 0x5f, 0xba, 0x0d, 0x43, 0x9f, 0xca, 0x49, 0xb3, 0x63, 0xbf, 0x54, 0xcd, 0x81, 0xbf, 0xf0,
		0x7a, 0x91, 0x4f, 0x1f, 0x9c, 0x6e, 0xe8, 0x29, 0x38, 0x8b, 0xd9, 0x41, 0x60, 0xea, 0x30, 0xf5,
		0x82, 0x99, 0x3a, 0x0d, 0x7a, 0x5d, 0xca, 0x87, 0xda, 0x8a, 0x82, 0xb9, 0xd7, 0x25, 0xae, 0x6d,
		0x06, 0xbd, 0x6e, 0xff, 0xe1, 0x9f, 0x72, 0xe0, 0x2a, 0x68, 0x40, 0x6e, 0x7d, 0xea, 0xb4, 0xfd,
		0xf0, 0x97, 0xe3, 0x0e, 0x2b, 0x90, 0xe5, 0x5d, 0xc6, 0xa2, 0xc1, 0xe4, 0x41, 0xc6, 0xa0, 0x60,
		0x02, 0xae, 0x07, 0xae, 0x07, 0x28, 0x23, 0x97, 0x28, 0xa3, 0x4b, 0x5c, 0x87, 0x78, 0x1e, 0xa7,
		0x71, 0x2c, 0xef, 0x32, 0x66, 0x07, 0x81, 0xa9, 0xc3, 0xd4, 0x0b, 0x66, 0xea, 0xf2, 0xcb, 0xfb,
		0x99, 0xb9, 0xef, 0xca, 0x89, 0x1d, 0x82, 0xf2, 0x40, 0x3a, 0xd5, 0x5e, 0xfe, 0xcf, 0xf7, 0x8a,
		0xb3, 0x47, 0x9c, 0x76, 0xc3, 0x39, 0xba, 0xfe, 0xa7, 0xf6, 0xf4, 0x7e, 0xff, 0xf9, 0xdf, 0x3f,
		0xfc, 0xb3, 0xf5, 0xf4, 0xaf, 0xf4, 0x33, 0x76, 0x9d, 0x03, 0xcf, 0x15, 0x85, 0x5c, 0x38, 0x71,
		0x44, 0xa9, 0x82, 0x44, 0x3b, 0x33, 0x06, 0xfc, 0x16, 0xfc, 0x56, 0xc1, 0xfc, 0x56, 0x61, 0x2a,
		0x96, 0x9a, 0x57, 0x7f, 0x34, 0x2f, 0xce, 0x9a, 0x57, 0x37, 0x97, 0xad, 0x66, 0xf3, 0xd0, 0xfe,
		0xaa, 0xa5, 0xc1, 0x6b, 0xdc, 0x7c, 0x3d, 0xfb, 0xf3, 0xec, 0xfc, 0xaf, 0x33, 0x9b, 0xab, 0x4c,
		0x86, 0x2f, 0xb2, 0x55, 0xf9, 0xf2, 0xd9, 0xfe, 0xb7, 0xa8, 0x17, 0xe2, 0x2d, 0xb6, 0x8a, 0xf0,
		0x12, 0xd5, 0x4a, 0xa5, 0x18, 0xaf, 0x51, 0x84, 0xb7, 0xa8, 0x6d, 0x55, 0x2a, 0xa7, 0x85, 0x78,
		0x8f, 0x62, 0xac, 0xa9, 0xd3, 0x62, 0x18, 0x78, 0x21, 0x5e, 0x43, 0x69, 0x45, 0xad, 0x47, 0x71,
		0x65, 0xd2, 0xb2, 0xb5, 0x54, 0x1b, 0xd8, 0xe4, 0x66, 0x33, 0xdd, 0x86, 0x36, 0x2a, 0xee, 0xf6,
		0xc7, 0x45, 0x8c, 0xe3, 0xbf, 0xa7, 0xaa, 0x44, 0x9b, 0xdc, 0x76, 0xd1, 0x4e, 0xb7, 0x93, 0xc6,
		0x97, 0xf1, 0xe6, 0xb6, 0xb8, 0x24, 0xc2, 0x12, 0x0b, 0x3c, 0x76, 0xcf, 0xbc, 0x1e, 0xf1, 0x4b,
		0xcd, 0xd1, 0x4d, 0xa7, 0xfb, 0xdc, 0x64, 0x55, 0xb5, 0x2a, 0xca, 0x87, 0x0a, 0xc1, 0x4e, 0x73,
		0x58, 0x3e, 0x94, 0xb6, 0xa6, 0x6e, 0x72, 0xa1, 0x52, 0x6d, 0xdd, 0xdc, 0xa2, 0x51, 0xa8, 0xb1,
		0x5b, 0x66, 0x9e, 0x97, 0x11, 0x75, 0x59, 0xfb, 0x71, 0xb0, 0x43, 0xce, 0x0f, 0x3b, 0xcc, 0x25,
		0x7e, 0x69, 0x72, 0x9b, 0xa9, 0x4d, 0xf6, 0x8d, 0xf6, 0xd7, 0x1d, 0x73, 0xef, 0x7e, 0x04, 0xe2,
		0x8e, 0xc5, 0x33, 0xff, 0xe1, 0x96, 0xfa, 0x61, 0xd0, 0x89, 0x65, 0x1f, 0x47, 0x4e, 0x59, 0x52,
		0xb6, 0x61, 0x1d, 0xb6, 0xac, 0xcf, 0xa6, 0x75, 0xd9, 0xb6, 0x76, 0x1b, 0xd7, 0x6e, 0xeb, 0x5a,
		0x6d, 0x5e, 0x0d, 0x5b, 0x48, 0xc2, 0x2a, 0x79, 0xa5, 0x6a, 0x6e, 0xbd, 0xc8, 0x97, 0x14, 0xce,
		0x85, 0xbe, 0x1d, 0x85, 0x31, 0xcc, 0x97, 0x18, 0xca, 0x4f, 0xd4, 0x6a, 0xe1, 0xdc, 0x75, 0x52,
		0x38, 0x97, 0x6e, 0xcf, 0xcb, 0xe4, 0x3a, 0xf9, 0xbd, 0x2f, 0x13, 0xa8, 0x96, 0x64, 0x13, 0x4c,
		0xf2, 0x97, 0x4e, 0x60, 0x13, 0xe5, 0x58, 0xa4, 0x29, 0xe8, 0x9c, 0x3d, 0xca, 0x4a, 0x18, 0x6f,
		0x61, 0x50, 0xc3, 0xae, 0x06, 0x9d, 0x5e, 0x1b, 0xbb, 0x1a, 0xb0, 0xab, 0x01, 0xb4, 0x04, 0xbb,
		0x1a, 0x74, 0x43, 0x0f, 0xec, 0x6a, 0xc0, 0xae, 0x06, 0xc3, 0x41, 0x77, 0x7d, 0xfc, 0x12, 0xea,
		0x0d, 0x17, 0xfb, 0xa5, 0x3c, 0xd4, 0x1b, 0xba, 0x61, 0xaf, 0xef, 0xc9, 0x14, 0x8a, 0x0d, 0x27,
		0x23, 0xac, 0x87, 0x26, 0x0a, 0x23, 0xb7, 0xc6, 0xc8, 0xa5, 0x35, 0x51, 0x16, 0x38, 0xbb, 0x95,
		0x5a, 0xf5, 0xbf, 0xce, 0xe0, 0x88, 0x81, 0x58, 0x5d, 0x16, 0x7d, 0x39, 0x20, 0xa4, 0x48, 0x79,
		0x53, 0x82, 0x14, 0x29, 0x65, 0x6a, 0xb6, 0x4b, 0x91, 0xa3, 0x30, 0xb3, 0x5d, 0xd7, 0x20, 0x46,
		0xee, 0x2a, 0x0c, 0x71, 0x31, 0x68, 0x56, 0xaa, 0x52, 0xb4, 0x56, 0x52, 0x4e, 0x7b, 0x0f, 0x1e,
		0xe4, 0x94, 0x05, 0xca, 0x6b, 0x5f, 0x93, 0x67, 0x99, 0x1b, 0x6e, 0x50, 0xda, 0xa7, 0x71, 0xbc,
		0x23, 0x4e, 0x5c, 0xc1, 0xc2, 0xe0, 0x90, 0x75, 0xd8, 0xa0, 0x37, 0x6d, 0x45, 0x79, 0xdc, 0xa7,
		0x8f, 0x1a, 0xa6, 0x80, 0x3c, 0xe4, 0x7e, 0x0a, 0xaa, 0xbb, 0xf5, 0xfa, 0xf6, 0x4e, 0xbd, 0x5e,
		0xd9, 0xd9, 0xdc, 0xa9, 0xec, 0x6d, 0x6d, 0x55, 0xb7, 0x65, 0x0a, 0x48, 0x33, 0x9b, 0x95, 0x77,
		0xab, 0xb9, 0xfa, 0x3a, 0xab, 0x6c, 0xc1, 0x47, 0x29, 0x34, 0x72, 0xeb, 0x87, 0xee, 0x4f, 0x87,
		0x72, 0x1e, 0x72, 0x3d, 0x68, 0xe4, 0xd9, 0x80, 0x40, 0x23, 0x40, 0x23, 0x40, 0x23, 0x40, 0x23,
		0x40, 0x23, 0x40, 0x23, 0x40, 0x23, 0x40, 0x23, 0x6f, 0xa1, 0x11, 0x97, 0xbb, 0x3a, 0xb1, 0xc8,
		0xcc, 0x70, 0x40, 0x22, 0x40, 0x22, 0x40, 0x22, 0x40, 0x22, 0x40, 0x22, 0x40, 0x22, 0x40, 0x22,
		0x40, 0x22, 0x6f, 0x21, 0x91, 0x36, 0x27, 0x83, 0x6d, 0x2a, 0x3a, 0x13, 0x35, 0x2f, 0xc7, 0x04,
		0x26, 0x01, 0x26, 0x01, 0x26, 0x01, 0x26, 0x01, 0x26, 0x01, 0x26, 0x01, 0x26, 0x01, 0x26, 0x79,
		0x0b, 0x93, 0xfc, 0x7f, 0xe4, 0xf6, 0x96, 0x72, 0x9d, 0x88, 0xe4, 0xf9, 0x88, 0xc0, 0x23, 0xc0,
		0x23, 0xc0, 0x23, 0xc0, 0x23, 0xc0, 0x23, 0xc0, 0x23, 0xc0, 0x23, 0xc0, 0x23, 0x6f, 0xe1, 0x91,
		0x2e, 0x71, 0xc7, 0x7d, 0xa3, 0x75, 0x82, 0x92, 0x05, 0xc3, 0x02, 0x99, 0x00, 0x99, 0x00, 0x99,
		0x00, 0x99, 0x00, 0x99, 0x00, 0x99, 0x00, 0x99, 0x00, 0x99, 0x24, 0x41, 0x26, 0x11, 0xe9, 0xc5,
		0x54, 0x37, 0x2e, 0x79, 0x36, 0x28, 0x50, 0x09, 0x50, 0x09, 0x50, 0x09, 0x50, 0x09, 0x50, 0x09,
		0x50, 0x09, 0x50, 0x09, 0x50, 0xc9, 0x5b, 0xa8, 0x24, 0xbc, 0xa7, 0x3c, 0x66, 0xff, 0x57, 0x2b,
		0x28, 0x79, 0x39, 0x26, 0x30, 0x09, 0x30, 0x09, 0x30, 0x09, 0x30, 0x09, 0x30, 0x09, 0x30, 0x09,
		0x30, 0x09, 0x30, 0xc9, 0x5b, 0x98, 0xa4, 0x17, 0x78, 0xfa, 0x41, 0xc9, 0xdc, 0xa0, 0x40, 0x25,
		0x40, 0x25, 0x40, 0x25, 0x40, 0x25, 0x40, 0x25, 0x40, 0x25, 0x40, 0x25, 0x40, 0x25, 0xaf, 0x7e,
		0xe6, 0xb0, 0x27, 0x34, 0x37, 0x49, 0x9b, 0x1b, 0x11, 0x78, 0x04, 0x78, 0x04, 0x78, 0x04, 0x78,
		0x04, 0x78, 0x04, 0x78, 0x04, 0x78, 0x04, 0x78, 0xe4, 0x4d, 0x3c, 0x62, 0xa2, 0xd4, 0x75, 0xc9,
		0xb8, 0xc0, 0x26, 0xc0, 0x26, 0xc0, 0x26, 0xc0, 0x26, 0xc0, 0x26, 0xc0, 0x26, 0xc0, 0x26, 0xc0,
		0x26, 0x89, 0xb0, 0x89, 0xde, 0x62, 0xd7, 0x85, 0xa3, 0x02, 0x97, 0x00, 0x97, 0x00, 0x97, 0x00,
		0x97, 0x00, 0x97, 0x00, 0x97, 0x00, 0x97, 0xac, 0x13, 0x2e, 0x31, 0x7a, 0x94, 0x8e, 0xe4, 0xf9,
		0xb1, 0x93, 0xeb, 0x35, 0x9c, 0x23, 0x3b, 0x38, 0x9e, 0x75, 0x43, 0xf2, 0xb4, 0xa9, 0xe1, 0x43,
		0x08, 0xde, 0x73, 0x45, 0x30, 0x72, 0xfb, 0xc7, 0xe3, 0x5b, 0xdc, 0x8c, 0x0f, 0xf8, 0xbf, 0x39,
		0x18, 0x0f, 0x9e, 0x83, 0x83, 0xb9, 0xbc, 0x5e, 0xe4, 0xd3, 0x07, 0xa7, 0x1b, 0x7a, 0x0a, 0xa7,
		0xf8, 0xcd, 0x0e, 0x82, 0x33, 0xf8, 0xcc, 0x21, 0x3e, 0x1c, 0xcf, 0xb5, 0x92, 0x33, 0xf8, 0x68,
		0xd0, 0xeb, 0x52, 0x3e, 0x74, 0x4b, 0x0a, 0xe7, 0xf0, 0xd5, 0x25, 0xae, 0x6d, 0x06, 0xbd, 0x6e,
		0xff, 0xe1, 0x9f, 0x72, 0xe0, 0x2a, 0x68, 0x40, 0x6e, 0x7d, 0xea, 0xb4, 0xfd, 0xf0, 0xd7, 0x58,
		0xa6, 0x96, 0x77, 0x19, 0x8b, 0x06, 0x93, 0x3f, 0xfd, 0xb3, 0x4d, 0xfc, 0x18, 0xae, 0x07, 0xae,
		0x07, 0xc7, 0x7f, 0xce, 0xbb, 0x9d, 0x3c, 0x1c, 0xff, 0x79, 0xf7, 0x6b, 0x20, 0x21, 0x11, 0xcf,
		0xe3, 0x34, 0x56, 0x38, 0x04, 0xf4, 0xc5, 0x38, 0x30, 0x78, 0x18, 0x7c, 0xc1, 0x0c, 0x5e, 0x7e,
		0x79, 0x3f, 0x33, 0xfa, 0x5d, 0xb9, 0xb3, 0xc8, 0x05, 0xe5, 0x81, 0xb4, 0x34, 0x54, 0xfe, 0xcf,
		0xf7, 0x8a, 0xb3, 0x47, 0x9c, 0x76, 0xc3, 0x39, 0xba, 0xfe, 0xa7, 0xf6, 0xf4, 0x7e, 0xff, 0xf9,
		0xdf, 0x3f, 0xfc, 0xb3, 0xf5, 0xf4, 0xaf, 0xf4, 0x33, 0x76, 0x9d, 0x03, 0xff, 0xa5, 0xc5, 0x79,
		0xc1, 0x73, 0xc1, 0x73, 0xc1, 0x73, 0xc1, 0x73, 0x65, 0xea, 0xb9, 0x02, 0xda, 0x09, 0x05, 0x23,
		0x82, 0x7a, 0x8e, 0x16, 0xa9, 0x67, 0xc9, 0x78, 0xf0, 0x67, 0xf0, 0x67, 0x50, 0x7d, 0x8a, 0xa8,
		0xfa, 0xcc, 0x18, 0x7c, 0x14, 0x72, 0xe1, 0xc4, 0x11, 0xa5, 0x9e, 0x16, 0xff, 0x31, 0x33, 0x1c,
		0xdc, 0x07, 0xdc, 0x47, 0xc1, 0xdc, 0x07, 0xf3, 0x68, 0x20, 0x98, 0x78, 0xe4, 0xb4, 0xad, 0xe2,
		0x3e, 0x24, 0x52, 0x9d, 0xe5, 0xe3, 0xd1, 0xad, 0x3f, 0x93, 0x98, 0xaa, 0xd7, 0xff, 0x34, 0xaf,
		0xfe, 0x68, 0x5e, 0x9c, 0x35, 0xaf, 0x6e, 0x2e, 0x5b, 0xcd, 0xe6, 0xa1, 0xec, 0xda, 0x19, 0x64,
		0x73, 0x63, 0xa5, 0xb2, 0x03, 0xc5, 0x2a, 0x99, 0xf1, 0xfb, 0x0c, 0x5e, 0xe3, 0xe6, 0xeb, 0xd9,
		0x9f, 0x67, 0xe7, 0x7f, 0x9d, 0x29, 0x94, 0xa1, 0x7c, 0xcc, 0xc7, 0x8b, 0x6c, 0x55, 0xbe, 0x7c,
		0xb6, 0xff, 0x2d, 0xea, 0x85, 0x78, 0x8b, 0xad, 0x22, 0xbc, 0x44, 0xb5, 0x52, 0x29, 0xc6, 0x6b,
		0x14, 0xe1, 0x2d, 0x6a, 0x5b, 0x95, 0xca, 0x69, 0x21, 0xde, 0xa3, 0x18, 0x6b, 0xea, 0xb4, 0x18,
		0x06, 0x5e, 0x88, 0xd7, 0x50, 0x5a, 0x51, 0x52, 0x57, 0x5e, 0x9b, 0x46, 0xa9, 0x46, 0x18, 0x9c,
		0x0e, 0xda, 0x06, 0xae, 0x06, 0xae, 0x06, 0xae, 0x06, 0xae, 0x06, 0xae, 0x06, 0xae, 0x06, 0xae,
		0x06, 0xae, 0x06, 0xae, 0x06, 0xae, 0x06, 0xae, 0x06, 0xae, 0x06, 0xae, 0xa6, 0xeb, 0x37, 0x13,
		0x4e, 0x55, 0xb9, 0xd1, 0xeb, 0xf4, 0xe1, 0xf8, 0x80, 0xcc, 0x25, 0xc7, 0x67, 0x92, 0xb4, 0x6f,
		0x23, 0x74, 0x1d, 0xd6, 0xde, 0x9f, 0xd9, 0x31, 0xf3, 0xe2, 0x1f, 0x36, 0x86, 0x94, 0x60, 0x7f,
		0xb2, 0x7d, 0x66, 0xf4, 0xf7, 0xc1, 0x2e, 0x9a, 0xf4, 0x05, 0xdd, 0xb1, 0xcb, 0x59, 0x34, 0xda,
		0xfe, 0x53, 0x6e, 0x78, 0x5e, 0x5c, 0x3a, 0x69, 0x7c, 0x29, 0xc5, 0x54, 0x08, 0x16, 0x74, 0xe2,
		0x92, 0x08, 0x4b, 0x2c, 0xf0, 0xd8, 0x3d, 0xf3, 0x7a, 0xc4, 0x2f, 0x8d, 0xf7, 0xd3, 0x94, 0xa6,
		0x8f, 0x27, 0x49, 0x4e, 0xab, 0x96, 0x91, 0x53, 0x9f, 0x74, 0x40, 0x4e, 0x17, 0x90, 0xd3, 0xfe,
		0x77, 0xc9, 0x19, 0x39, 0x3d, 0x64, 0x5c, 0x6e, 0xba, 0x49, 0xa7, 0xc3, 0x69, 0x87, 0x08, 0xea,
		0x30, 0x4f, 0x9d, 0x18, 0x3e, 0x1b, 0x4d, 0xf2, 0x63, 0xbf, 0x30, 0xcf, 0xcb, 0x88, 0xba, 0xac,
		0xfd, 0x58, 0x12, 0x77, 0xb4, 0xe4, 0x87, 0x1d, 0xe6, 0x12, 0xbf, 0x34, 0xb9, 0xcd, 0xd4, 0x26,
		0xfb, 0x46, 0xfb, 0xeb, 0x8e, 0xb9, 0x77, 0x3f, 0x02, 0x71, 0xc7, 0xe2, 0x99, 0xff, 0x70, 0x4b,
		0xfd, 0x30, 0xe8, 0xa0, 0x97, 0x80, 0x8a, 0x4d, 0xeb, 0xb2, 0x6d, 0xed, 0x36, 0xae, 0xdd, 0xd6,
		0xb5, 0xda, 0xbc, 0x1a, 0xb4, 0x58, 0x7d, 0x2f, 0x01, 0x9f, 0x92, 0xb6, 0x9c, 0x58, 0x35, 0x17,
		0xfa, 0x76, 0x14, 0xc6, 0x68, 0x4d, 0x36, 0xda, 0x26, 0x80, 0x09, 0xac, 0xbd, 0x3f, 0xd8, 0x13,
		0x9b, 0xcf, 0x8d, 0xca, 0x9a, 0xd1, 0xdc, 0x75, 0x52, 0x34, 0x27, 0xb7, 0xe1, 0x59, 0xdb, 0x46,
		0xe7, 0x64, 0xb3, 0xf1, 0xf6, 0x3b, 0x27, 0x30, 0x89, 0x72, 0xfc, 0x8b, 0x09, 0xf7, 0x8e, 0x7a,
		0xce, 0xbd, 0x4f, 0x92, 0xbf, 0xee, 0x64, 0xcd, 0x3f, 0xbf, 0x3c, 0xe1, 0xf7, 0x4d, 0x07, 0xf0,
		0x52, 0x07, 0x05, 0x99, 0x20, 0x30, 0xeb, 0xf4, 0x53, 0xbc, 0x8a, 0x8a, 0x97, 0x57, 0xf6, 0xea,
		0xca, 0x5e, 0xfc, 0xa5, 0xd7, 0x1e, 0xbc, 0xf8, 0x8a, 0x18, 0x54, 0x5a, 0x48, 0x56, 0x76, 0xc7,
		0xab, 0x42, 0x92, 0x45, 0x8d, 0xae, 0x5f, 0x0f, 0x6e, 0x92, 0x72, 0x49, 0xaf, 0x0f, 0x39, 0x49,
		0xb7, 0xe4, 0xf3, 0xce, 0x4e, 0x5c, 0x97, 0xc6, 0x71, 0x3a, 0x4f, 0xbe, 0x9c, 0x9c, 0xcc, 0x0c,
		0x06, 0x32, 0xa0, 0x60, 0x44, 0x60, 0x03, 0x72, 0x46, 0x66, 0x3b, 0x1d, 0xe8, 0xbf, 0xb5, 0x3c,
		0xb1, 0x9f, 0x35, 0xa0, 0x6d, 0x34, 0x16, 0xd3, 0xea, 0x59, 0xe6, 0x86, 0x9b, 0x74, 0xb5, 0x42,
		0x63, 0xb1, 0x55, 0x4f, 0x41, 0xbd, 0xb2, 0x57, 0x47, 0x23, 0xb1, 0x39, 0xe6, 0x9a, 0xeb, 0x23,
		0xea, 0x46, 0x2c, 0x56, 0x6e, 0x13, 0xe3, 0x9c, 0xdf, 0x7c, 0x31, 0x1e, 0xb0, 0x07, 0xb0, 0x07,
		0xb0, 0x87, 0x0c, 0xf6, 0xe8, 0x9b, 0x8f, 0x23, 0xfa, 0x63, 0x6a, 0x50, 0x24, 0x15, 0x9c, 0xb2,
		0xe4, 0xce, 0xc9, 0x6c, 0xbd, 0x58, 0x40, 0x04, 0xbb, 0xa7, 0x9a, 0xb8, 0xd3, 0xec, 0x60, 0xf0,
		0x5f, 0xf0, 0x5f, 0xf0, 0x5f, 0xe0, 0x4e, 0xe0, 0x4e, 0xe0, 0x4e, 0xe0, 0x4e, 0xe0, 0x4e, 0xcf,
		0x3e, 0xb3, 0xe0, 0xbd, 0xe0, 0xe7, 0xc0, 0xc7, 0x6b, 0x38, 0x13, 0x62, 0x76, 0x30, 0xa0, 0x0e,
		0xa0, 0x0e, 0xa0, 0x8e, 0x94, 0x2b, 0xa6, 0x17, 0xc8, 0xb5, 0x95, 0x99, 0x23, 0x4b, 0x7b, 0x0a,
		0x63, 0x8c, 0x5e, 0x67, 0xe5, 0x98, 0x43, 0x1f, 0x14, 0xd3, 0x08, 0xc9, 0x34, 0x43, 0x33, 0x7d,
		0x9f, 0xcb, 0x08, 0x54, 0x33, 0x84, 0x17, 0x4c, 0x41, 0x37, 0x93, 0xe0, 0x41, 0x23, 0x94, 0x33,
		0x02, 0xe9, 0xb2, 0x9a, 0x2a, 0x7d, 0x10, 0x2f, 0x93, 0xd9, 0x7a, 0x97, 0x8f, 0x51, 0xae, 0xdf,
		0xad, 0x70, 0xcd, 0xe9, 0xf6, 0xc5, 0x7c, 0xe0, 0xfa, 0xf4, 0xb9, 0xe3, 0xea, 0xae, 0x86, 0xb1,
		0x54, 0x9b, 0x3d, 0xce, 0x0d, 0xf8, 0x9f, 0xf7, 0xf5, 0xca, 0xde, 0xf7, 0x8a, 0x53, 0xbf, 0xfe,
		0x5d, 0xaf, 0x7c, 0xaf, 0x38, 0xbb, 0xd7, 0xdf, 0x2b, 0xce, 0xde, 0xf5, 0xef, 0xef, 0x55, 0x67,
		0x73, 0xf8, 0xe3, 0x3f, 0x9b, 0x4f, 0xfd, 0xbf, 0xed, 0x8d, 0xfe, 0x56, 0xfd, 0x58, 0x1b, 0xfd,
		0xfd, 0xc3, 0x8f, 0x1f, 0x9f, 0x7e, 0xfc, 0xf8, 0xa4, 0x30, 0xc0, 0xbf, 0xca, 0xab, 0x5e, 0x72,
		0x59, 0xb3, 0x1d, 0x49, 0xec, 0x75, 0xc2, 0x62, 0xd1, 0x10, 0x82, 0xab, 0xe1, 0xaf, 0x53, 0x16,
		0x34, 0x7d, 0xda, 0x87, 0x9f, 0x7d, 0xf7, 0x13, 0xf4, 0x7c, 0x5f, 0x01, 0x3f, 0x9d, 0x92, 0x07,
		0x7d, 0x83, 0x9d, 0x73, 0x8f, 0x72, 0xea, 0x7d, 0x7e, 0x1c, 0x0d, 0x85, 0xf3, 0x7c, 0x34, 0x95,
		0xb9, 0xce, 0x96, 0x8d, 0x6e, 0x8c, 0x4a, 0xf1, 0x72, 0xd0, 0x95, 0x63, 0x58, 0x7e, 0x2b, 0x5d,
		0x53, 0x28, 0xb5, 0xc1, 0x4a, 0xb5, 0xa4, 0xb0, 0x86, 0x92, 0xc2, 0x95, 0x72, 0x68, 0x94, 0x14,
		0x26, 0x5d, 0x35, 0x28, 0x29, 0x84, 0x40, 0x05, 0x81, 0x6a, 0xa5, 0x5a, 0x0c, 0xd2, 0x62, 0xd9,
		0x10, 0x77, 0xa4, 0xc5, 0xf2, 0x33, 0x05, 0x48, 0x8b, 0x69, 0x24, 0x8a, 0x28, 0x29, 0x04, 0xf6,
		0x00, 0xf6, 0x40, 0x49, 0x21, 0x4a, 0x0a, 0xdf, 0x7c, 0x46, 0x94, 0x14, 0xc2, 0x7f, 0xc1, 0x7f,
		0x81, 0x3b, 0x81, 0x3b, 0x81, 0x3b, 0x81, 0x3b, 0x81, 0x3b, 0xa1, 0xa4, 0x10, 0xa8, 0x03, 0xa8,
		0x63, 0xbd, 0x50, 0x07, 0x4a, 0x0a, 0x8d, 0x40, 0x31, 0x8d, 0x90, 0x4c, 0x33, 0x34, 0xd3, 0xf7,
		0xb9, 0x8c, 0x40, 0x35, 0x43, 0x78, 0xc1, 0x14, 0x74, 0x33, 0x09, 0x1e, 0x34, 0x42, 0x39, 0x23,
		0x90, 0x2e, 0xab, 0xa9, 0x42, 0x49, 0x61, 0x76, 0x10, 0x50, 0xd3, 0x9a, 0x43, 0x49, 0xa1, 0xcc,
		0x80, 0x28, 0x29, 0xcc, 0x94, 0xed, 0xa0, 0xa4, 0x70, 0xe1, 0x60, 0x28, 0x29, 0x5c, 0x70, 0xbd,
		0xf6, 0x92, 0xc2, 0x14, 0x7d, 0x34, 0xd3, 0x7f, 0x21, 0xcd, 0xbd, 0xe3, 0x57, 0xd8, 0x6d, 0x54,
		0xa2, 0x7b, 0xe7, 0xf0, 0xde, 0x82, 0xf7, 0x5c, 0x11, 0x8c, 0x62, 0xc8, 0xf1, 0x78, 0xe4, 0x9b,
		0x71, 0xf7, 0xf7, 0x9b, 0xcb, 0xd1, 0xc8, 0xdf, 0x12, 0xb3, 0xbe, 0x04, 0xed, 0x4c, 0xdf, 0x29,
		0x7c, 0xee, 0x94, 0x2d, 0xfa, 0x53, 0xb6, 0x41, 0x4d, 0xdd, 0x92, 0x3f, 0x69, 0xab, 0xd4, 0x45,
		0xdd, 0xf7, 0xbf, 0x9d, 0x34, 0xce, 0xf4, 0xb7, 0xdf, 0x47, 0x57, 0x56, 0x3d, 0xc2, 0xca, 0x7a,
		0x77, 0x65, 0x95, 0x6b, 0x27, 0x3c, 0x37, 0xdf, 0xb2, 0x8e, 0x69, 0x91, 0xcd, 0x34, 0x03, 0xd7,
		0x0f, 0x63, 0x16, 0x74, 0x4a, 0x6e, 0x18, 0x08, 0xc2, 0x02, 0xca, 0x4b, 0xed, 0x90, 0x0f, 0xcd,
		0x68, 0x5a, 0x19, 0x12, 0x0f, 0x3a, 0xe7, 0x33, 0xf7, 0x47, 0xe0, 0x11, 0x41, 0x4a, 0x61, 0xb0,
		0xc8, 0x96, 0x3e, 0x95, 0x4a, 0x57, 0x77, 0x34, 0xa6, 0x25, 0xc2, 0xe9, 0x60, 0x90, 0x58, 0x90,
		0xc0, 0x23, 0xdc, 0xfb, 0x11, 0x9c, 0xd4, 0x3e, 0x96, 0x26, 0x8f, 0x1d, 0x8b, 0x47, 0x9f, 0x0e,
		0xee, 0x10, 0x7f, 0x42, 0x8b, 0x59, 0x93, 0x82, 0x28, 0xea, 0xc1, 0x8d, 0x60, 0x17, 0xc5, 0x60,
		0x7c, 0xfd, 0x56, 0x30, 0x4e, 0x87, 0x79, 0x34, 0x60, 0x9d, 0x72, 0x92, 0x5e, 0xe8, 0x6f, 0xa0,
		0x9a, 0xd7, 0x67, 0x71, 0xf9, 0x17, 0x79, 0xc5, 0xdb, 0x96, 0xef, 0x42, 0xdf, 0x73, 0x04, 0xeb,
		0xbe, 0x6d, 0x01, 0x13, 0x63, 0x9b, 0x5e, 0xf2, 0xc6, 0x57, 0x4e, 0xe6, 0x49, 0x12, 0x7b, 0x8e,
		0x34, 0x9e, 0x62, 0xd6, 0x33, 0xb0, 0x24, 0x47, 0x22, 0xa4, 0xf5, 0x03, 0xd2, 0x76, 0x2f, 0x6d,
		0xe7, 0x2f, 0xed, 0x9a, 0xb5, 0xcb, 0x86, 0x21, 0x6b, 0xd2, 0xe8, 0x9b, 0xb6, 0x17, 0xba, 0x5c,
		0x0f, 0xf4, 0xbc, 0x03, 0x44, 0xd6, 0x5e, 0x4b, 0x78, 0x98, 0x64, 0x19, 0xe6, 0x04, 0x1c, 0x7a,
		0xe1, 0x2f, 0x05, 0x4c, 0x38, 0xb8, 0x3a, 0x35, 0x14, 0x6c, 0x93, 0x9e, 0x3f, 0xf8, 0x54, 0x95,
		0x35, 0x39, 0x23, 0x9b, 0xb5, 0x81, 0xc2, 0x14, 0xcd, 0x24, 0x1b, 0xcd, 0x4c, 0xfd, 0x84, 0xec,
		0x1e, 0x0b, 0xc4, 0x66, 0x4d, 0xe1, 0x70, 0x6c, 0x89, 0x63, 0x86, 0x14, 0xd3, 0xa4, 0x6a, 0x92,
		0xae, 0x86, 0xb2, 0x09, 0x2d, 0xb9, 0xb4, 0x49, 0xee, 0x4c, 0x75, 0x1c, 0x8d, 0x89, 0xb2, 0x27,
		0x35, 0x81, 0x3b, 0x77, 0x9f, 0xb6, 0x5e, 0xdb, 0xab, 0xef, 0x6d, 0xef, 0xd4, 0xf6, 0xb6, 0x72,
		0xf4, 0x8d, 0x33, 0x12, 0xeb, 0xaf, 0x73, 0xb0, 0x15, 0xbe, 0x17, 0xc9, 0x87, 0xea, 0x5e, 0x84,
		0x40, 0x8d, 0x40, 0x8d, 0x40, 0x8d, 0x40, 0x8d, 0x40, 0x8d, 0x40, 0x8d, 0x40, 0x6d, 0x4a, 0xa5,
		0x4d, 0x48, 0xd4, 0x9b, 0x0f, 0x83, 0xcf, 0x69, 0xec, 0x60, 0xf2, 0x99, 0x98, 0x12, 0xba, 0x0e,
		0x7d, 0x10, 0xfb, 0x82, 0xfa, 0xb4, 0x4b, 0x05, 0x7f, 0x74, 0xc2, 0xc0, 0x71, 0xef, 0x24, 0xca,
		0x8b, 0x5e, 0xc4, 0x97, 0x36, 0xf1, 0x63, 0x15, 0xa1, 0xa4, 0xbc, 0x36, 0x47, 0x89, 0x4e, 0xd4,
		0xe1, 0x54, 0x6d, 0x95, 0x34, 0x1d, 0x26, 0x9a, 0xaa, 0x7d, 0x92, 0x54, 0xdb, 0x24, 0x69, 0x15,
		0xb2, 0x06, 0x15, 0x12, 0x2a, 0x24, 0x54, 0x48, 0x90, 0x1b, 0x90, 0x1b, 0x90, 0x1b, 0x90, 0x1b,
		0x90, 0x1b, 0x90, 0x1b, 0xa8, 0x90, 0x08, 0xd4, 0x08, 0xd4, 0x08, 0xd4, 0x08, 0xd4, 0x08, 0xd4,
		0x08, 0xd4, 0x08, 0xd4, 0x66, 0x89, 0xfa, 0x2a, 0xa5, 0xb0, 0x14, 0xdb, 0x81, 0x8c, 0xef, 0x43,
		0xc9, 0xac, 0xf4, 0x35, 0x69, 0x9d, 0x68, 0xe9, 0xb5, 0xda, 0xd7, 0x3f, 0x42, 0xdf, 0xbb, 0xea,
		0x8f, 0x61, 0xa0, 0xf6, 0x75, 0x74, 0xb7, 0x84, 0x65, 0xaf, 0x83, 0xdf, 0x4e, 0x56, 0xf1, 0x5a,
		0x41, 0xc5, 0xab, 0x0e, 0x90, 0x94, 0x7d, 0xc5, 0x6b, 0x62, 0x90, 0x33, 0xf9, 0xda, 0x3e, 0x25,
		0x6d, 0x4e, 0x13, 0x7d, 0xef, 0xb1, 0x72, 0x9c, 0x00, 0xc6, 0x94, 0x5b, 0x23, 0x7b, 0xfb, 0xf4,
		0x69, 0x24, 0xa3, 0x6f, 0x0c, 0x96, 0x9f, 0x01, 0x23, 0xe0, 0x61, 0x4f, 0x24, 0xdd, 0x2f, 0x33,
		0x79, 0xeb, 0xd9, 0x8b, 0xec, 0x28, 0x02, 0x4f, 0xb8, 0x3d, 0xc4, 0x3e, 0xa3, 0x48, 0xb6, 0xbd,
		0x03, 0x85, 0xe0, 0xd8, 0x29, 0xa8, 0x9d, 0xbc, 0x5a, 0xbd, 0x53, 0x50, 0x6d, 0x83, 0xa0, 0xcc,
		0xbe, 0x40, 0x4b, 0x15, 0x1a, 0x6c, 0xac, 0xd3, 0xb2, 0xdc, 0xad, 0x51, 0x69, 0x24, 0x3b, 0x86,
		0xa9, 0x74, 0x0a, 0x53, 0xeb, 0x10, 0xa6, 0xa3, 0x4d, 0x1a, 0x0b, 0x44, 0x75, 0x1b, 0xbd, 0x59,
		0xf5, 0x49, 0x57, 0x9a, 0x75, 0x16, 0xdd, 0x52, 0x96, 0x09, 0xb9, 0x45, 0x83, 0xb4, 0xa5, 0x55,
		0xe2, 0x32, 0x3d, 0x05, 0xdb, 0x5b, 0x5b, 0x9b, 0x5b, 0x68, 0xce, 0xaa, 0xa6, 0x86, 0x29, 0x2e,
		0x1a, 0x0d, 0xbe, 0x2f, 0x16, 0x9c, 0x05, 0x1d, 0x1d, 0x3d, 0x22, 0x77, 0xa1, 0x37, 0xae, 0x54,
		0x6f, 0x9c, 0x61, 0xe5, 0x2b, 0x28, 0xbe, 0x63, 0xd1, 0x7d, 0x3d, 0x3d, 0xf3, 0x1b, 0x5c, 0x55,
		0x90, 0x0d, 0xc0, 0xd1, 0x7a, 0x96, 0xde, 0x45, 0xd6, 0x70, 0x3e, 0xe2, 0x79, 0x9c, 0xc6, 0x31,
		0x8d, 0xe5, 0x89, 0xdf, 0x74, 0x88, 0xf5, 0x68, 0xab, 0xc2, 0x22, 0x70, 0x3f, 0xc5, 0x45, 0x9f,
		0x0d, 0xf3, 0x93, 0x3f, 0x62, 0x73, 0xb8, 0xa2, 0x35, 0x1c, 0xaf, 0x39, 0x1a, 0x48, 0xad, 0x51,
		0x7b, 0xb5, 0x20, 0x8d, 0xda, 0xa5, 0x0c, 0x47, 0x97, 0x01, 0x69, 0x37, 0x24, 0xed, 0x06, 0xa5,
		0xd3, 0xb0, 0xd4, 0x30, 0xbb, 0x6c, 0xa3, 0x50, 0x59, 0x83, 0x9b, 0x0c, 0x90, 0x52, 0x2c, 0x7f,
		0x73, 0xd1, 0xa5, 0x12, 0xd1, 0x0d, 0x99, 0xa1, 0x36, 0x73, 0xd4, 0x69, 0x96, 0xda, 0xcd, 0x53,
		0xb7, 0x99, 0x1a, 0x33, 0x57, 0x63, 0x66, 0x6b, 0xc2, 0x7c, 0x35, 0x11, 0x77, 0xc5, 0xf5, 0xa6,
		0x6a, 0xd6, 0x33, 0x7c, 0x48, 0xdf, 0xba, 0x98, 0xb2, 0x25, 0x5d, 0x0b, 0x42, 0xb3, 0x26, 0xa4,
		0xcb, 0xdc, 0x4d, 0x98, 0xbd, 0x31, 0xf3, 0x37, 0xe5, 0x06, 0x8c, 0xbb, 0x03, 0xe3, 0x6e, 0xc1,
		0xa4, 0x7b, 0xd0, 0xe3, 0x26, 0x34, 0xb9, 0x8b, 0xc9, 0x8b, 0x2a, 0x1f, 0xd9, 0xf2, 0xaa, 0x42,
		0xe2, 0xa8, 0x61, 0xeb, 0xd7, 0x55, 0x3b, 0x8d, 0x63, 0xea, 0xee, 0x99, 0x3f, 0x19, 0xf8, 0x3f,
		0xef, 0xdf, 0x4f, 0x7a, 0xdd, 0x8f, 0xba, 0xdb, 0xff, 0xae, 0x0e, 0xfe, 0x6f, 0xf8, 0x73, 0x6d,
		0xd0, 0x16, 0x7f, 0xf4, 0xf3, 0xd6, 0xf7, 0x8a, 0xb3, 0x35, 0xe8, 0x99, 0xff, 0xe1, 0x9f, 0xcd,
		0xa7, 0xf4, 0x17, 0xfe, 0x4b, 0xdf, 0x22, 0xbd, 0xce, 0xc9, 0x71, 0x11, 0x3a, 0x72, 0x12, 0x43,
		0x17, 0xe4, 0xf8, 0x34, 0xe8, 0x0c, 0xb4, 0x49, 0xcd, 0xb1, 0xed, 0xf9, 0xf0, 0x08, 0x73, 0x08,
		0x73, 0x08, 0x73, 0x6b, 0x14, 0xe6, 0x7a, 0x2c, 0x10, 0xbb, 0x06, 0xe2, 0xdb, 0x96, 0xc6, 0x21,
		0xf5, 0x1e, 0xd1, 0x35, 0xfe, 0xa3, 0xd7, 0x9a, 0x4a, 0xa6, 0x8e, 0xec, 0x32, 0xe4, 0x53, 0xe7,
		0x86, 0xd7, 0x9c, 0xe1, 0x9f, 0x1b, 0xdf, 0xe0, 0xe1, 0x50, 0x9a, 0xad, 0xed, 0xf9, 0x94, 0x1a,
		0x38, 0xda, 0x2b, 0xeb, 0x29, 0xdd, 0xac, 0x59, 0x3c, 0xa7, 0xef, 0xf2, 0x39, 0x5a, 0x6e, 0x10,
		0xe6, 0x4a, 0x55, 0x1b, 0xc5, 0x03, 0x80, 0xe6, 0xc6, 0xd3, 0x93, 0x84, 0xef, 0x53, 0xb7, 0x8d,
		0x49, 0xc6, 0x70, 0xfc, 0x53, 0xaa, 0xdc, 0xbc, 0xfe, 0xcf, 0xad, 0xb2, 0xf3, 0x4e, 0x83, 0xa6,
		0xa5, 0x4f, 0xcb, 0xd2, 0xb5, 0x85, 0x0f, 0x52, 0x75, 0x9e, 0x40, 0x3b, 0xa4, 0xea, 0xec, 0xc1,
		0xb8, 0xc4, 0x6e, 0xa6, 0xc4, 0xf2, 0xd2, 0x8e, 0x9e, 0xa3, 0x18, 0x5f, 0xec, 0x86, 0x52, 0x9d,
		0xbc, 0xd5, 0xb8, 0xcf, 0x74, 0xfd, 0xc9, 0xde, 0x9c, 0xad, 0x34, 0x7d, 0xcb, 0xde, 0x9c, 0x27,
		0x5d, 0x4e, 0xb4, 0x06, 0x27, 0x0a, 0x27, 0x6a, 0x91, 0x13, 0x45, 0xbe, 0x6f, 0x95, 0x98, 0xc9,
		0x84, 0xd9, 0x1b, 0x33, 0x7f, 0x53, 0x6e, 0xc0, 0xb8, 0x3b, 0x30, 0xee, 0x16, 0x4c, 0xba, 0x07,
		0xbd, 0x94, 0x19, 0xf9, 0x3e, 0xe4, 0xfb, 0x90, 0xef, 0x4b, 0x34, 0x07, 0x21, 0x67, 0x1d, 0x9d,
		0x3b, 0xc1, 0x26, 0xee, 0x78, 0x38, 0x2e, 0x02, 0x1b, 0x02, 0x1b, 0x02, 0xdb, 0x5a, 0x05, 0xb6,
		0x71, 0x58, 0x73, 0xb4, 0xba, 0x80, 0x67, 0xd1, 0xad, 0xae, 0x71, 0xcc, 0x66, 0xd0, 0xeb, 0xf6,
		0x3f, 0xc5, 0x13, 0x8a, 0x38, 0x92, 0xce, 0x31, 0x8a, 0x38, 0xe0, 0xe2, 0xe1, 0xe2, 0xd7, 0xd6,
		0xc5, 0xa3, 0x88, 0x43, 0xe3, 0x7a, 0x44, 0x11, 0xc7, 0xf2, 0xf1, 0x51, 0xc4, 0xb1, 0xb2, 0x29,
		0x45, 0x11, 0x87, 0xfe, 0xd1, 0x50, 0xc4, 0x61, 0x5d, 0x11, 0x47, 0x8a, 0x96, 0xae, 0xfa, 0xbf,
		0xb6, 0x4a, 0x12, 0xf2, 0x9e, 0x73, 0x8d, 0x55, 0x1c, 0x83, 0xd1, 0xb0, 0xe5, 0x30, 0x33, 0x1c,
		0x8f, 0x14, 0x24, 0x52, 0x90, 0xaf, 0x9a, 0xb6, 0xd3, 0xe1, 0x61, 0xcf, 0x40, 0x2a, 0x72, 0x66,
		0x6c, 0xbd, 0xb4, 0xbe, 0x0a, 0x5a, 0x0f, 0x5a, 0x0f, 0x5a, 0xaf, 0xfe, 0xa2, 0xba, 0xdc, 0xc8,
		0x64, 0x40, 0x4d, 0x0d, 0x0a, 0x96, 0x1a, 0x81, 0x96, 0x86, 0x05, 0x86, 0xdd, 0x8a, 0x31, 0xf7,
		0x62, 0xd2, 0xcd, 0x18, 0x77, 0x37, 0xa6, 0xdd, 0x4e, 0x66, 0xee, 0x27, 0x33, 0x37, 0x94, 0x85,
		0x3b, 0x32, 0xc4, 0x72, 0x35, 0xaf, 0x77, 0xdd, 0x6e, 0x6a, 0x32, 0x30, 0x71, 0x5d, 0x1a, 0x09,
		0xa7, 0x1b, 0x7a, 0x06, 0x17, 0xe4, 0xa4, 0xd9, 0xd1, 0xcc, 0xcd, 0x0c, 0xad, 0x94, 0x99, 0xd3,
		0xc0, 0x06, 0xc7, 0x0f, 0x9b, 0xba, 0x8f, 0x61, 0xdd, 0xc8, 0x94, 0xe3, 0xcc, 0xc2, 0x81, 0x66,
		0xe6, 0x48, 0xb3, 0x72, 0xa8, 0x99, 0x3b, 0xd6, 0xcc, 0x1d, 0x6c, 0x96, 0x8e, 0xd6, 0x8c, 0xc3,
		0x35, 0xe4, 0x78, 0x27, 0x1f, 0x46, 0x7b, 0xfa, 0x67, 0xa9, 0xb5, 0xdc, 0x86, 0xa1, 0x4f, 0x49,
		0x60, 0xd2, 0x5e, 0xc6, 0x68, 0xaf, 0xfa, 0xce, 0x8e, 0x89, 0x35, 0x91, 0x55, 0x20, 0xde, 0x3d,
		0xe5, 0x82, 0xc5, 0xb4, 0xbf, 0xdc, 0x87, 0xda, 0xe6, 0x3d, 0xf1, 0x33, 0x88, 0x81, 0x8b, 0xef,
		0x6b, 0x3e, 0x1c, 0x56, 0x2b, 0x15, 0x04, 0x43, 0x04, 0x43, 0x04, 0x43, 0x04, 0x43, 0x7b, 0x82,
		0xa1, 0xf2, 0x19, 0x13, 0x49, 0x7d, 0xd7, 0xb6, 0xc1, 0x5b, 0x98, 0x29, 0x9e, 0x78, 0xf9, 0xc7,
		0xac, 0xb9, 0x97, 0x4c, 0x17, 0x57, 0x64, 0x1c, 0x54, 0xe6, 0x6e, 0x37, 0xce, 0xd4, 0x57, 0x33,
		0xba, 0x5f, 0x06, 0x89, 0xfb, 0x8c, 0xdc, 0xc1, 0xf3, 0x25, 0x42, 0x1e, 0x0a, 0xbf, 0x44, 0xea,
		0x95, 0xbd, 0xad, 0x02, 0xaf, 0x92, 0x77, 0x76, 0x8e, 0x7e, 0xbd, 0xc6, 0x64, 0x26, 0xe2, 0x94,
		0x76, 0x23, 0x61, 0x9e, 0xbd, 0x8c, 0x6f, 0x64, 0x9e, 0xae, 0xf4, 0xf1, 0x1d, 0xf8, 0x0a, 0xf8,
		0x0a, 0xf8, 0x0a, 0xf8, 0x8a, 0x3d, 0x7c, 0x05, 0xe2, 0x5d, 0x96, 0xf1, 0xce, 0xf1, 0xa8, 0x4f,
		0x1e, 0x33, 0x8b, 0x7a, 0xa3, 0xdb, 0x99, 0x8f, 0x7d, 0x10, 0xea, 0x10, 0xf8, 0x10, 0xf8, 0x10,
		0xf8, 0x2c, 0x0a, 0x7c, 0x10, 0xea, 0x12, 0xff, 0x81, 0x50, 0xa7, 0x45, 0x85, 0xa9, 0x40, 0xa8,
		0x53, 0x5a, 0x22, 0x6b, 0x20, 0xd4, 0x6d, 0x6e, 0x57, 0x2a, 0x10, 0xea, 0xf2, 0x36, 0xfa, 0x7a,
		0x0b, 0x75, 0x2c, 0xe4, 0x4c, 0x64, 0xc2, 0x59, 0x46, 0x77, 0x42, 0x65, 0x01, 0x08, 0x0b, 0x08,
		0x0b, 0x08, 0x0b, 0x08, 0x4b, 0xc9, 0x64, 0xd7, 0x85, 0x65, 0xae, 0x6b, 0x0b, 0x7c, 0x05, 0x7c,
		0x05, 0x85, 0x05, 0xe0, 0x2b, 0x09, 0x96, 0x48, 0x6d, 0xab, 0x0e, 0xba, 0x02, 0xba, 0x92, 0x1f,
		0xba, 0x72, 0xcf, 0xb8, 0xe8, 0x11, 0xdf, 0x51, 0x3d, 0xee, 0x3c, 0x71, 0x54, 0x7e, 0x79, 0x43,
		0xd0, 0x0a, 0xd0, 0x0a, 0xd0, 0x0a, 0xd0, 0x0a, 0x6b, 0x68, 0xc5, 0xb4, 0x5f, 0x67, 0x16, 0x35,
		0x00, 0x7b, 0x06, 0xef, 0x31, 0xfa, 0x66, 0xd6, 0x73, 0x0b, 0xc3, 0x2d, 0xc2, 0xdf, 0x9c, 0xa3,
		0xdd, 0x0c, 0xee, 0x65, 0xaa, 0xa5, 0xf8, 0xd2, 0x1b, 0xda, 0xda, 0x6a, 0x3c, 0x5b, 0x90, 0x97,
		0x11, 0x3f, 0xca, 0xd6, 0x88, 0xb6, 0x61, 0x44, 0x7a, 0x8d, 0x88, 0x38, 0xed, 0x86, 0x73, 0x74,
		0xfd, 0x4f, 0xf5, 0x63, 0xfd, 0x69, 0xff, 0xc3, 0x3f, 0x3b, 0x4f, 0x2f, 0xff, 0xf1, 0xf7, 0xa2,
		0x5f, 0xab, 0x7e, 0xdc, 0x79, 0xda, 0x5f, 0xf2, 0x5f, 0xb6, 0x9f, 0xf6, 0x13, 0x8e, 0xb1, 0xf5,
		0xf4, 0x7e, 0xee, 0x57, 0xfb, 0xff, 0x5e, 0x5b, 0x76, 0x41, 0x7d, 0xc9, 0x05, 0x9b, 0xcb, 0x2e,
		0xd8, 0x5c, 0x72, 0xc1, 0xd2, 0x47, 0xaa, 0x2d, 0xb9, 0x60, 0xeb, 0xe9, 0xf7, 0xdc, 0xef, 0xbf,
		0x5f, 0xfc, 0xab, 0xdb, 0x4f, 0x1f, 0x7e, 0x2f, 0xfb, 0x6f, 0x3b, 0x4f, 0xbf, 0xf7, 0x3f, 0x14,
		0xc0, 0xa5, 0xd8, 0xc6, 0x77, 0x0d, 0x21, 0xbb, 0x13, 0x16, 0x8b, 0x86, 0x10, 0xdc, 0x2c, 0xba,
		0x3b, 0x65, 0x41, 0xd3, 0x1f, 0xec, 0xd8, 0xed, 0x73, 0xe0, 0xa0, 0xe7, 0xfb, 0x06, 0x81, 0xd7,
		0x29, 0x79, 0xc8, 0xee, 0x66, 0xe7, 0xdc, 0xa3, 0x9c, 0x7a, 0x9f, 0x1f, 0x47, 0xb7, 0x82, 0xd8,
		0xe1, 0x0c, 0xfa, 0x58, 0x72, 0x87, 0x79, 0xd9, 0xc9, 0x1d, 0xd3, 0x5b, 0x42, 0xf0, 0x80, 0xe0,
		0x01, 0xc1, 0x03, 0x82, 0x87, 0x35, 0x82, 0x07, 0xf2, 0xa8, 0x39, 0xa2, 0x69, 0xc8, 0xa3, 0xea,
		0xbb, 0x1f, 0xf2, 0xa8, 0xd6, 0x2e, 0x91, 0xda, 0x16, 0xf6, 0x67, 0xaf, 0x0b, 0xaf, 0x5c, 0xb3,
		0x46, 0x90, 0x9a, 0xdb, 0xfd, 0xcf, 0x8d, 0x6f, 0xb4, 0xfd, 0xff, 0x3d, 0xe7, 0xd1, 0xc6, 0xb4,
		0x27, 0xf6, 0xe8, 0x5c, 0xf2, 0x72, 0x4e, 0xcf, 0x97, 0xd0, 0x38, 0x75, 0xe5, 0xc9, 0x67, 0x72,
		0x04, 0x27, 0xee, 0x4f, 0x16, 0x18, 0xec, 0x10, 0xbc, 0xe0, 0x5e, 0xe8, 0x16, 0x8c, 0x6e, 0xc1,
		0xab, 0x66, 0x89, 0xe8, 0x16, 0x9c, 0x59, 0x90, 0x30, 0xd6, 0x2d, 0xd8, 0x50, 0x73, 0xf3, 0x39,
		0x63, 0x32, 0xd2, 0xe4, 0xdc, 0xb0, 0xfb, 0x82, 0x18, 0x06, 0x31, 0x0c, 0x62, 0x58, 0x1e, 0xc5,
		0x30, 0x53, 0xee, 0x70, 0x72, 0x83, 0xf1, 0x5e, 0x2b, 0xc7, 0xa3, 0x2e, 0xa7, 0xa3, 0x39, 0x30,
		0xbc, 0x9e, 0x5f, 0xee, 0xf3, 0x9a, 0xb9, 0xb7, 0xe1, 0x75, 0x96, 0x41, 0xa3, 0x8a, 0x8c, 0x05,
		0x04, 0xe3, 0x2e, 0x3b, 0x4b, 0xd7, 0x9d, 0xb9, 0x0b, 0xcf, 0xda, 0x95, 0xaf, 0xcc, 0xa5, 0xaf,
		0xcc, 0xb5, 0xaf, 0xc2, 0xc5, 0x67, 0x24, 0x37, 0x19, 0xb6, 0x37, 0xe3, 0x79, 0x90, 0x39, 0x6b,
		0x33, 0x9d, 0x0f, 0x79, 0xe9, 0x1a, 0x33, 0x50, 0x3a, 0x33, 0xca, 0x8f, 0x8c, 0xff, 0x64, 0xe3,
		0x3d, 0x4a, 0x59, 0xe7, 0x4b, 0x32, 0x8e, 0x69, 0x73, 0xb7, 0xcd, 0xb8, 0x6f, 0xc6, 0xe4, 0xbe,
		0x2b, 0x90, 0xc8, 0x33, 0xf2, 0x2e, 0xcf, 0x97, 0x52, 0x86, 0x79, 0x95, 0xbc, 0x2c, 0xa5, 0xcc,
		0xf6, 0xab, 0xe5, 0x62, 0x31, 0xbd, 0x2b, 0xc6, 0x5d, 0x6c, 0xad, 0x4b, 0x34, 0x68, 0xcc, 0xe5,
		0x81, 0x50, 0x3e, 0xcd, 0x70, 0x64, 0xc7, 0xde, 0x5e, 0xde, 0x18, 0x74, 0x0a, 0x74, 0x0a, 0x74,
		0x0a, 0x74, 0x0a, 0x74, 0x6a, 0x64, 0x6d, 0x3e, 0x25, 0x6d, 0x4e, 0xdb, 0x59, 0xee, 0x35, 0xd9,
		0xc9, 0x66, 0xaf, 0xc9, 0x28, 0xc1, 0xee, 0x3a, 0xac, 0xbd, 0x3f, 0x93, 0x50, 0x7f, 0xf1, 0x0f,
		0xa3, 0xbf, 0x07, 0xfd, 0xcf, 0x61, 0xf5, 0xd2, 0xc9, 0xa4, 0x50, 0x7f, 0x96, 0xd8, 0x65, 0x56,
		0x43, 0x3f, 0x4b, 0x01, 0xb2, 0xbf, 0x69, 0x26, 0x05, 0xfc, 0x19, 0xa0, 0x3b, 0xab, 0x32, 0x0a,
		0x86, 0xab, 0x70, 0x26, 0xf7, 0xc9, 0xb4, 0x1a, 0x67, 0xbe, 0x6e, 0xc4, 0x48, 0x81, 0x8e, 0xb9,
		0x19, 0x37, 0xb1, 0x29, 0x24, 0x16, 0x44, 0x64, 0x70, 0x32, 0xee, 0xf0, 0x36, 0x96, 0xe7, 0xbb,
		0x6b, 0xc8, 0x77, 0xe7, 0x06, 0xd5, 0x23, 0xdf, 0xbd, 0xbe, 0xd1, 0x09, 0xf9, 0x6e, 0xbd, 0x9f,
		0x13, 0xf9, 0x6e, 0x08, 0x34, 0x10, 0x68, 0x20, 0xd0, 0x40, 0xa0, 0x59, 0x60, 0x6d, 0xc8, 0x77,
		0xab, 0xfe, 0x41, 0xbe, 0xdb, 0xc8, 0x6d, 0x91, 0xef, 0x36, 0x2d, 0x76, 0x21, 0xdf, 0x5d, 0xe8,
		0xc5, 0x84, 0x7c, 0xf7, 0x4a, 0x9f, 0x1f, 0xf9, 0x6e, 0xd0, 0x29, 0xd0, 0x29, 0xd0, 0x29, 0xd0,
		0xa9, 0x75, 0xa2, 0x53, 0xc8, 0x77, 0x23, 0xdf, 0x2d, 0x47, 0xec, 0x90, 0xef, 0xb6, 0x0a, 0xdd,
		0x21, 0xdf, 0xbd, 0xe0, 0x3e, 0xab, 0xce, 0x77, 0x0f, 0xd3, 0xb0, 0x68, 0x54, 0x92, 0xff, 0x25,
		0xb3, 0xea, 0xa5, 0x52, 0x36, 0x52, 0x6b, 0xc0, 0x7b, 0xae, 0x08, 0x46, 0x48, 0xe0, 0x78, 0x7c,
		0xcf, 0x9b, 0x8b, 0xc1, 0x03, 0x7f, 0xf3, 0x49, 0x70, 0x73, 0x1c, 0xdd, 0xd7, 0x6f, 0x1a, 0xc3,
		0xa7, 0xbc, 0xf9, 0xc6, 0x79, 0xf4, 0xa5, 0xff, 0x7c, 0x37, 0x93, 0xdf, 0xbd, 0x1a, 0x3f, 0xde,
		0x1a, 0xf4, 0x54, 0x31, 0x53, 0x9a, 0x61, 0xb4, 0x24, 0xc3, 0x78, 0xe7, 0x94, 0x1a, 0x3a, 0xa7,
		0x64, 0x46, 0x28, 0xd1, 0x39, 0xa5, 0x78, 0x51, 0xcb, 0x58, 0xe7, 0x14, 0xe2, 0xba, 0x34, 0x12,
		0x4e, 0x37, 0xf4, 0x32, 0xa8, 0x26, 0x9b, 0xbd, 0x99, 0xf9, 0xe3, 0x5f, 0xdb, 0xc4, 0x8f, 0x29,
		0x1a, 0x17, 0xaf, 0x4c, 0xb1, 0x43, 0xed, 0x9a, 0x75, 0x8a, 0x1c, 0x6a, 0xd7, 0x56, 0xa6, 0xb8,
		0x4d, 0xac, 0xe5, 0x36, 0x0c, 0x7d, 0x4a, 0x82, 0x2c, 0x8e, 0x69, 0xaa, 0xae, 0x71, 0x01, 0x35,
		0xf1, 0xee, 0x29, 0x17, 0x2c, 0x1e, 0xe8, 0x44, 0x43, 0x6e, 0x76, 0x4f, 0xfc, 0x0c, 0x62, 0xe0,
		0xe2, 0xfb, 0xe2, 0x34, 0x74, 0x04, 0x43, 0x04, 0x43, 0x04, 0x43, 0x04, 0xc3, 0xd2, 0xcb, 0x2a,
		0xbe, 0xea, 0x76, 0x06, 0xb1, 0x70, 0x1b, 0x6d, 0xfc, 0xdf, 0x7e, 0x11, 0xb4, 0xf1, 0xd7, 0x77,
		0x3f, 0xb4, 0xf1, 0xb7, 0x76, 0x89, 0xd4, 0x2b, 0x7b, 0xe8, 0xe3, 0x9f, 0xbb, 0xd1, 0xd7, 0xf9,
		0x3c, 0x74, 0xb7, 0xc7, 0x79, 0x9f, 0x4e, 0x8c, 0x37, 0x21, 0x65, 0xd0, 0x09, 0xf9, 0xe5, 0x1d,
		0x41, 0x2d, 0x40, 0x2d, 0x40, 0x2d, 0x40, 0x2d, 0xac, 0xa2, 0x16, 0x38, 0x20, 0x0c, 0xcc, 0x22,
		0x33, 0xd8, 0x58, 0x01, 0xb3, 0x00, 0xb3, 0x78, 0x7d, 0x89, 0xe0, 0x80, 0x30, 0x10, 0x8b, 0x5c,
		0x11, 0x8b, 0x88, 0x53, 0xda, 0x8d, 0x84, 0x79, 0x3e, 0x31, 0xbe, 0x91, 0xf9, 0x3c, 0x48, 0x1f,
		0xdd, 0x81, 0xad, 0x80, 0xad, 0x80, 0xad, 0x80, 0xad, 0xd8, 0xc3, 0x56, 0x50, 0x15, 0x90, 0x65,
		0xbc, 0x73, 0x3c, 0xea, 0x93, 0xc7, 0xcc, 0xa2, 0xde, 0xe8, 0x76, 0xe6, 0x63, 0x1f, 0x2a, 0x00,
		0x10, 0xf8, 0x10, 0xf8, 0x10, 0xf8, 0x2c, 0x0a, 0x7c, 0xa8, 0x00, 0x48, 0xfc, 0x07, 0x3a, 0x9d,
		0x16, 0x11, 0x06, 0x3a, 0x9d, 0xda, 0x12, 0x59, 0x03, 0x9d, 0x6e, 0x73, 0xbb, 0x52, 0x81, 0x50,
		0x97, 0xb7, 0xd1, 0xd7, 0x5b, 0xa8, 0xcb, 0x2a, 0xf3, 0x6f, 0x3a, 0xe3, 0x8f, 0x92, 0x65, 0x10,
		0x16, 0x10, 0x16, 0x10, 0x16, 0x9b, 0x09, 0x0b, 0xea, 0x0a, 0xc0, 0x57, 0x32, 0x03, 0xa3, 0xa8,
		0x58, 0x06, 0x5f, 0x79, 0x63, 0x89, 0x64, 0xd6, 0x20, 0x14, 0x74, 0x05, 0x74, 0x25, 0xc9, 0x32,
		0xb9, 0x67, 0x5c, 0xf4, 0x88, 0xef, 0x8c, 0x1a, 0xdb, 0x98, 0x67, 0x2d, 0x2f, 0x6f, 0x08, 0x5a,
		0x01, 0x5a, 0x01, 0x5a, 0x01, 0x5a, 0x61, 0x0d, 0xad, 0x60, 0x91, 0x61, 0xdf, 0x35, 0xeb, 0xbf,
		0xaa, 0x7b, 0x06, 0xef, 0x31, 0xfa, 0x66, 0xd6, 0x73, 0x8b, 0xe9, 0xcc, 0xdc, 0xd7, 0x33, 0x98,
		0x9b, 0xb9, 0x39, 0xda, 0xcd, 0xa6, 0x3f, 0xaa, 0xa0, 0x3c, 0xc8, 0xec, 0xcc, 0x89, 0xf2, 0x7f,
		0xde, 0xbf, 0xff, 0x5e, 0x71, 0xf6, 0xae, 0x7f, 0x7f, 0xaf, 0x3a, 0x7b, 0xd7, 0xc3, 0x1f, 0xab,
		0x83, 0xff, 0x1b, 0xfe, 0x5c, 0xfb, 0x5e, 0x71, 0xea, 0xe3, 0x9f, 0xb7, 0xbe, 0x57, 0x9c, 0xad,
		0xeb, 0x0f, 0x3f, 0x7e, 0x7c, 0xfa, 0xf0, 0xcf, 0xe6, 0x53, 0xfa, 0x0b, 0xff, 0x55, 0xb6, 0xbd,
		0xcb, 0xfb, 0xc7, 0x02, 0x19, 0xd1, 0x36, 0x8c, 0x48, 0xaf, 0x11, 0x11, 0xa7, 0xdd, 0x70, 0x8e,
		0xae, 0xff, 0xa9, 0x7e, 0xac, 0x3f, 0xed, 0x7f, 0xf8, 0x67, 0xe7, 0xe9, 0xe5, 0x3f, 0xfe, 0x5e,
		0xf4, 0x6b, 0xd5, 0x8f, 0x3b, 0x4f, 0xfb, 0x4b, 0xfe, 0xcb, 0xf6, 0xd3, 0x7e, 0xc2, 0x31, 0xb6,
		0x9e, 0xde, 0xcf, 0xfd, 0x6a, 0xff, 0xdf, 0x6b, 0xcb, 0x2e, 0xa8, 0x2f, 0xb9, 0x60, 0x73, 0xd9,
		0x05, 0x9b, 0x4b, 0x2e, 0x58, 0xfa, 0x48, 0xb5, 0x25, 0x17, 0x6c, 0x3d, 0xfd, 0x9e, 0xfb, 0xfd,
		0xf7, 0x8b, 0x7f, 0x75, 0xfb, 0xe9, 0xc3, 0xef, 0x65, 0xff, 0x6d, 0xe7, 0xe9, 0xf7, 0xfe, 0x87,
		0x02, 0xb8, 0x14, 0xdb, 0xf8, 0xae, 0x21, 0x64, 0x97, 0x49, 0x9f, 0xec, 0x4c, 0xfb, 0x63, 0x67,
		0xda, 0x17, 0x3b, 0x9b, 0x7e, 0xd8, 0x76, 0x89, 0x1d, 0x83, 0x06, 0xbf, 0xdc, 0x61, 0x5e, 0x76,
		0x72, 0xc7, 0xf4, 0x96, 0x10, 0x3c, 0x20, 0x78, 0x40, 0xf0, 0x80, 0xe0, 0x61, 0x8d, 0xe0, 0x81,
		0x3c, 0x6a, 0x8e, 0x68, 0x1a, 0xf2, 0xa8, 0xfa, 0xee, 0x87, 0x3c, 0xaa, 0xb5, 0x4b, 0x04, 0xfb,
		0xb3, 0xd7, 0x87, 0x57, 0xe2, 0x5c, 0x14, 0xad, 0xe3, 0x67, 0x7a, 0x2e, 0x8a, 0x81, 0xf3, 0x72,
		0xf2, 0x79, 0xd6, 0x88, 0x79, 0x6a, 0x99, 0x19, 0xa5, 0x34, 0xe4, 0xd3, 0x8d, 0x51, 0x48, 0x9c,
		0x41, 0x92, 0x07, 0x8a, 0x88, 0x33, 0x48, 0x32, 0x8b, 0x10, 0xc6, 0xa8, 0x5f, 0x06, 0x87, 0x4c,
		0x9a, 0x3c, 0x54, 0x72, 0x72, 0x88, 0xe4, 0xa7, 0x4f, 0x1b, 0xc3, 0x90, 0xb6, 0x31, 0xef, 0x2b,
		0xf3, 0x1a, 0x8b, 0xde, 0xe5, 0x68, 0xa5, 0xf5, 0x9d, 0x86, 0xc9, 0x48, 0x63, 0x46, 0xd3, 0x37,
		0xaa, 0xe1, 0x1b, 0xd5, 0xec, 0xcd, 0x68, 0xf4, 0xba, 0x16, 0x83, 0x21, 0x40, 0x9a, 0x29, 0x10,
		0x2d, 0x6b, 0x3d, 0x56, 0x4e, 0xf2, 0x14, 0x3e, 0x3d, 0xbe, 0x47, 0xdd, 0x53, 0xa8, 0x8d, 0xa0,
		0xb8, 0xac, 0x74, 0x2f, 0x27, 0xf3, 0xcb, 0x48, 0x6d, 0xda, 0xe4, 0x3f, 0xb6, 0xdc, 0x95, 0x92,
		0xd3, 0x33, 0x76, 0xf9, 0xd2, 0x20, 0x57, 0x8f, 0x4f, 0xd7, 0xea, 0xc3, 0xb5, 0xfa, 0x6c, 0x3d,
		0x3e, 0x5a, 0x76, 0x76, 0x1a, 0xbd, 0x4e, 0xff, 0x35, 0xa8, 0xa7, 0xa4, 0x61, 0xab, 0x59, 0xdb,
		0x04, 0x1d, 0x26, 0x3a, 0xa3, 0xbb, 0x6f, 0x55, 0xfb, 0xb3, 0x16, 0x36, 0x80, 0xea, 0xfb, 0x03,
		0x3b, 0x1b, 0xfe, 0x38, 0xb5, 0xb6, 0x67, 0x7f, 0x57, 0x74, 0xd5, 0xe5, 0x43, 0x1a, 0xbb, 0x9c,
		0x45, 0x23, 0x07, 0x53, 0x6e, 0x78, 0x1e, 0xeb, 0xff, 0x4c, 0xfc, 0xd2, 0x71, 0xab, 0xd4, 0xbf,
		0x47, 0xa9, 0x4d, 0xba, 0xcc, 0x7f, 0x2c, 0x0d, 0xbd, 0x44, 0x8f, 0x0f, 0x7c, 0x51, 0xa9, 0x1d,
		0xf2, 0x1f, 0xc1, 0xf4, 0x95, 0x54, 0x9f, 0x42, 0xcf, 0x39, 0x9e, 0xda, 0x38, 0xb3, 0x4e, 0x8e,
		0xac, 0x9d, 0x13, 0xeb, 0xe6, 0xc0, 0xc6, 0x38, 0xaf, 0x31, 0x8e, 0x6b, 0x82, 0xd3, 0xae, 0x36,
		0xca, 0xeb, 0x3a, 0x27, 0xb3, 0x3c, 0x88, 0xc0, 0xda, 0x56, 0xc6, 0x44, 0x43, 0xeb, 0x8f, 0xaa,
		0x69, 0xee, 0x5e, 0x38, 0x9c, 0x66, 0xe0, 0xfa, 0x61, 0xcc, 0x82, 0x4e, 0xdf, 0xc1, 0x08, 0xc2,
		0x02, 0xca, 0xfb, 0xce, 0xa5, 0xf4, 0xed, 0xe2, 0xa2, 0x55, 0x1a, 0x80, 0xd1, 0xb8, 0x74, 0x47,
		0x02, 0xcf, 0xa7, 0x5e, 0xe9, 0xf6, 0xb1, 0x24, 0xee, 0x58, 0xfc, 0x23, 0x38, 0x6e, 0x95, 0x26,
		0xbe, 0x47, 0xd7, 0x73, 0xe9, 0x3d, 0x4a, 0x58, 0xbb, 0x7c, 0x67, 0x42, 0xb6, 0x33, 0x26, 0xd7,
		0x99, 0x92, 0xe9, 0x8c, 0xcb, 0x73, 0xc6, 0x65, 0x39, 0x93, 0x72, 0xdc, 0x53, 0x31, 0x08, 0x53,
		0xc6, 0x0c, 0xe0, 0x5a, 0x16, 0x63, 0xea, 0x21, 0x66, 0x46, 0x09, 0x99, 0x82, 0x75, 0xa4, 0xe5,
		0xed, 0x72, 0xcb, 0x38, 0xfd, 0x94, 0xa5, 0xbb, 0x22, 0x65, 0x5c, 0x56, 0x9d, 0x54, 0x23, 0x93,
		0x99, 0xee, 0xcb, 0x26, 0xff, 0x3e, 0x29, 0xbe, 0x4d, 0xd9, 0x1d, 0x47, 0xb3, 0x74, 0xdf, 0x64,
		0x7a, 0xec, 0xce, 0xf0, 0xfa, 0x94, 0xb3, 0x21, 0x17, 0x92, 0xa5, 0x43, 0xaf, 0x4a, 0x88, 0x55,
		0x0e, 0xa5, 0xaa, 0x21, 0x53, 0x5b, 0x68, 0xd4, 0x16, 0x02, 0x75, 0x84, 0x3a, 0xb3, 0xd6, 0x2e,
		0x8b, 0xba, 0xcb, 0xde, 0x9d, 0x1b, 0x39, 0xae, 0xcf, 0x86, 0x2f, 0x27, 0x39, 0x61, 0xe3, 0x15,
		0x33, 0x3b, 0x98, 0xe4, 0x97, 0xd6, 0x74, 0x7a, 0xbc, 0x62, 0x2a, 0x5b, 0x19, 0xf3, 0xea, 0xc0,
		0xb8, 0xda, 0x30, 0xad, 0x2e, 0x0c, 0xab, 0x1d, 0xb3, 0x6a, 0xc7, 0xa8, 0x3a, 0x31, 0x69, 0xb6,
		0x2a, 0xac, 0x72, 0x6a, 0x57, 0x63, 0x9f, 0x72, 0xc5, 0x3e, 0xe4, 0x12, 0x48, 0x48, 0x22, 0xc8,
		0xd0, 0x80, 0xdc, 0xfa, 0xd4, 0x53, 0x77, 0x5a, 0xe3, 0x81, 0xd4, 0x1d, 0x96, 0xc2, 0xb9, 0x16,
		0xf0, 0x57, 0xf0, 0x57, 0xf0, 0x57, 0x45, 0xf6, 0x57, 0x5d, 0xd1, 0x53, 0xf7, 0x55, 0xfd, 0x41,
		0xe0, 0x60, 0xe0, 0x60, 0xe0, 0x60, 0x52, 0xac, 0x16, 0xe5, 0xfe, 0xf5, 0x1a, 0xfa, 0xd3, 0x6b,
		0xda, 0x87, 0xa4, 0x21, 0xad, 0xa2, 0x73, 0x1f, 0x91, 0xe6, 0x82, 0xe1, 0xc9, 0x26, 0x8f, 0x6d,
		0x4d, 0x3d, 0x21, 0x4c, 0xec, 0xe1, 0xd0, 0x50, 0x5c, 0xa5, 0x75, 0xa3, 0xce, 0x78, 0x0e, 0x36,
		0x35, 0xcf, 0x41, 0x25, 0xc7, 0x53, 0xb0, 0x22, 0x55, 0xfe, 0x1a, 0xc2, 0xb0, 0x5e, 0x61, 0x78,
		0xa4, 0xa5, 0xe6, 0x40, 0x15, 0x0e, 0x28, 0xeb, 0xdc, 0xdd, 0x86, 0x3c, 0x96, 0x17, 0x86, 0xa7,
		0x43, 0x40, 0x1b, 0x36, 0x86, 0xbc, 0xa0, 0x0d, 0x67, 0xa8, 0x0d, 0x8f, 0x57, 0xb4, 0x3a, 0x6f,
		0x99, 0x8c, 0xa4, 0x46, 0x5e, 0xaa, 0x20, 0x2f, 0x20, 0x2f, 0x36, 0x90, 0x17, 0xd5, 0x22, 0x28,
		0xd9, 0x2c, 0xe5, 0xd2, 0x45, 0x27, 0x95, 0xb5, 0xd4, 0x6c, 0x86, 0xda, 0xcc, 0x51, 0xa7, 0x59,
		0x6a, 0x37, 0x4f, 0xdd, 0x66, 0x6a, 0xcc, 0x5c, 0x8d, 0x99, 0xad, 0x09, 0xf3, 0xd5, 0x04, 0xfd,
		0xf3, 0x52, 0xdb, 0xc8, 0x0c, 0x54, 0x36, 0x6a, 0x2b, 0x7b, 0xd3, 0xcd, 0xea, 0x51, 0x3f, 0x88,
		0xfa, 0xc1, 0x8c, 0xdc, 0x83, 0x1e, 0x37, 0xa1, 0x51, 0xea, 0x29, 0x19, 0xd9, 0xb6, 0x6b, 0xba,
		0xf1, 0xb1, 0x89, 0xde, 0xac, 0xc6, 0x7a, 0xb0, 0x5a, 0xdb, 0xb0, 0xf8, 0x3a, 0x2f, 0x45, 0xae,
		0x1a, 0xc0, 0x8e, 0xcf, 0x82, 0x9f, 0x8e, 0x4f, 0x1e, 0x29, 0xd7, 0x7e, 0xa0, 0xc4, 0x74, 0x6f,
		0xfa, 0xfc, 0x3d, 0x10, 0xf0, 0x10, 0xf0, 0x10, 0xf0, 0xd6, 0x28, 0xe0, 0x45, 0x77, 0x8f, 0x31,
		0x02, 0xde, 0xb3, 0xee, 0xda, 0x2f, 0x9b, 0x6a, 0xd7, 0x9e, 0x3e, 0xfc, 0x8f, 0x0f, 0xff, 0xab,
		0x88, 0x71, 0x0a, 0xbb, 0xd7, 0x17, 0xa7, 0x51, 0x26, 0x99, 0x87, 0xc9, 0x4f, 0x52, 0x99, 0x15,
		0x7d, 0xdf, 0x5b, 0xe1, 0x5b, 0xeb, 0xa0, 0xc6, 0xfa, 0x28, 0xb1, 0x26, 0x64, 0x00, 0xc5, 0x0b,
		0x8a, 0x97, 0x9d, 0x5e, 0x4f, 0x5b, 0x24, 0x37, 0xd0, 0x61, 0x4a, 0x67, 0x47, 0xa9, 0x05, 0x1d,
		0xa4, 0x58, 0x64, 0xa3, 0xfb, 0x1c, 0xf6, 0x5d, 0xd4, 0xe6, 0x41, 0x87, 0xc3, 0xe5, 0x2c, 0x6d,
		0x50, 0x83, 0x13, 0x85, 0x13, 0xb5, 0xc8, 0x89, 0x22, 0x6d, 0x00, 0x15, 0x05, 0x2a, 0x0a, 0x54,
		0x94, 0xdc, 0xa8, 0x28, 0x48, 0x1b, 0x20, 0x6d, 0x80, 0xb4, 0x01, 0x02, 0x1e, 0x02, 0x1e, 0x02,
		0xde, 0x5a, 0x04, 0x3c, 0xa4, 0x0d, 0xd6, 0x38, 0x6d, 0xa0, 0x21, 0x4e, 0x85, 0x9c, 0x75, 0x74,
		0xee, 0x9b, 0x9a, 0x78, 0xd1, 0xe1, 0xb8, 0x88, 0x47, 0x88, 0x47, 0x88, 0x47, 0x6b, 0x14, 0x8f,
		0xc6, 0x79, 0x3a, 0x47, 0xab, 0x03, 0x78, 0x16, 0x92, 0xea, 0x1a, 0xc7, 0x6c, 0x06, 0xbd, 0x6e,
		0xff, 0x43, 0x3c, 0x21, 0x13, 0x6c, 0x5d, 0x26, 0x58, 0xc3, 0x41, 0x4c, 0xe8, 0x64, 0x9e, 0x6a,
		0x14, 0x74, 0x32, 0x37, 0x69, 0x36, 0x66, 0xcd, 0x25, 0x8b, 0x36, 0x93, 0x67, 0xe3, 0x7b, 0x61,
		0x3b, 0xb1, 0xa1, 0xe9, 0xcc, 0xc3, 0x8e, 0xe2, 0x88, 0x87, 0x0f, 0x8f, 0x0e, 0x91, 0xe8, 0x61,
		0x3d, 0x65, 0xad, 0x93, 0x21, 0xb0, 0xa3, 0xd8, 0x18, 0x50, 0xc7, 0x8e, 0xe2, 0x0c, 0x77, 0x14,
		0x2b, 0x6e, 0x6b, 0xd4, 0xb3, 0x9d, 0x11, 0xbb, 0x89, 0x0d, 0xf0, 0x5c, 0xec, 0x26, 0x36, 0x87,
		0x9c, 0x94, 0x77, 0x13, 0x77, 0x43, 0x4f, 0x63, 0x4d, 0xd0, 0x60, 0x34, 0xe5, 0xb3, 0x5a, 0x26,
		0x5d, 0x13, 0x0f, 0x8f, 0x2f, 0x1b, 0x9f, 0x4f, 0x9a, 0xa8, 0xd4, 0xcc, 0x4e, 0xe4, 0x42, 0x91,
		0x11, 0x2a, 0x35, 0xdf, 0x5e, 0x6d, 0x34, 0xe8, 0x75, 0xe9, 0xf0, 0x90, 0x24, 0x9d, 0xd5, 0x9a,
		0x1a, 0x84, 0x29, 0x4d, 0x82, 0x94, 0x2d, 0xba, 0x46, 0x0e, 0x99, 0xf3, 0x84, 0x9a, 0x28, 0xed,
		0x34, 0xc8, 0xa6, 0xf3, 0xa6, 0x5a, 0x49, 0xac, 0x96, 0x52, 0x58, 0x6d, 0x90, 0xb3, 0x06, 0xc8,
		0x09, 0xc8, 0x09, 0xc8, 0x09, 0xc8, 0x09, 0xc8, 0x09, 0xc8, 0x09, 0xc8, 0x09, 0xc8, 0xb9, 0x8e,
		0x90, 0x53, 0x21, 0xa5, 0x89, 0xec, 0xc9, 0xdb, 0xdf, 0xb7, 0x2c, 0x85, 0xb1, 0x93, 0xe5, 0xbe,
		0x5a, 0xfd, 0x9b, 0x34, 0xd2, 0x1e, 0xad, 0x6d, 0x26, 0x43, 0x23, 0xc7, 0x0b, 0x94, 0xf8, 0x80,
		0x72, 0x66, 0xa6, 0x86, 0xcc, 0xcc, 0x0a, 0x43, 0x7a, 0xa1, 0x33, 0x33, 0xbd, 0xbe, 0xd1, 0xc6,
		0x3a, 0x72, 0x33, 0xa3, 0x91, 0x90, 0x9d, 0x01, 0x55, 0x06, 0x55, 0x7e, 0x7b, 0x00, 0x16, 0x38,
		0x1e, 0x8b, 0x5d, 0xc2, 0x3d, 0xea, 0x39, 0xd1, 0x4f, 0x11, 0x6b, 0x6c, 0x80, 0x31, 0x37, 0x34,
		0x28, 0x2f, 0x28, 0x2f, 0x28, 0x6f, 0x8e, 0x28, 0xef, 0x28, 0x5c, 0x6e, 0xd7, 0x35, 0x12, 0x5e,
		0x0d, 0xdb, 0x51, 0x34, 0x1d, 0x58, 0x33, 0xfe, 0xa3, 0xb1, 0x86, 0x5a, 0xe7, 0x01, 0x36, 0x9a,
		0xfd, 0xda, 0xdc, 0xb0, 0x9a, 0x0f, 0x53, 0x99, 0x8c, 0x6b, 0xe0, 0x50, 0x15, 0x4d, 0x16, 0xf2,
		0x7c, 0xaa, 0xc8, 0x83, 0x75, 0x53, 0x55, 0xdd, 0xad, 0xd7, 0xb7, 0x77, 0xea, 0xf5, 0xca, 0xce,
		0xe6, 0x4e, 0x65, 0x6f, 0x6b, 0xab, 0xba, 0x5d, 0xdd, 0xb2, 0x68, 0xf6, 0x72, 0x52, 0xa1, 0x7f,
		0x6d, 0x63, 0xe7, 0xb1, 0xc0, 0xa1, 0x9c, 0x87, 0x5c, 0x3f, 0x06, 0x9b, 0x19, 0x16, 0xf8, 0x0b,
		0xf8, 0x0b, 0xf8, 0x0b, 0xf8, 0x0b, 0xf8, 0x0b, 0xf8, 0x0b, 0xf8, 0x0b, 0xf8, 0x0b, 0xf8, 0x6b,
		0x16, 0x7f, 0xb5, 0x43, 0xfe, 0x6b, 0x28, 0x56, 0x85, 0xae, 0xa0, 0x9a, 0x51, 0xd8, 0xdc, 0xe0,
		0xc0, 0x62, 0xc0, 0x62, 0xc0, 0x62, 0xc0, 0x62, 0xc0, 0x62, 0xc0, 0x62, 0xc0, 0x62, 0xc0, 0x62,
		0xc0, 0x62, 0x8b, 0xb1, 0x98, 0x76, 0x3d, 0xec, 0xc5, 0xd0, 0xc0, 0x61, 0xc0, 0x61, 0xc0, 0x61,
		0xc0, 0x61, 0xc0, 0x61, 0xc0, 0x61, 0xc0, 0x61, 0xc0, 0x61, 0xc0, 0x61, 0xb3, 0x38, 0xcc, 0x80,
		0x12, 0x06, 0xfd, 0x0b, 0xb8, 0x0b, 0xb8, 0x0b, 0xb8, 0x0b, 0xb8, 0x0b, 0xb8, 0x0b, 0xb8, 0x0b,
		0xb8, 0x0b, 0xb8, 0x6b, 0x01, 0xee, 0xd2, 0xae, 0x7a, 0x41, 0xeb, 0x02, 0xe6, 0x02, 0xe6, 0x02,
		0xe6, 0x02, 0xe6, 0x02, 0xe6, 0x02, 0xe6, 0x02, 0xe6, 0x02, 0xe6, 0x7a, 0x3e, 0x2d, 0x61, 0x4f,
		0x18, 0xdb, 0x08, 0xb9, 0x60, 0x6c, 0x20, 0x31, 0x20, 0x31, 0x20, 0x31, 0x20, 0x31, 0x20, 0x31,
		0x20, 0x31, 0x20, 0x31, 0x20, 0x31, 0x20, 0xb1, 0x67, 0x48, 0xcc, 0xc4, 0x56, 0xc8, 0x17, 0xe3,
		0x02, 0x81, 0x01, 0x81, 0x01, 0x81, 0x01, 0x81, 0x01, 0x81, 0x01, 0x81, 0x01, 0x81, 0x01, 0x81,
		0x01, 0x81, 0x3d, 0x43, 0x60, 0xe6, 0x36, 0x43, 0x2e, 0x1c, 0x1d, 0x68, 0x0c, 0x68, 0x0c, 0x68,
		0x0c, 0x68, 0x0c, 0x68, 0x0c, 0x68, 0x0c, 0x68, 0x0c, 0x68, 0x0c, 0x68, 0x6c, 0x09, 0x1a, 0xd3,
		0xaf, 0x89, 0x61, 0x3f, 0x24, 0x90, 0x18, 0x90, 0x18, 0x90, 0x18, 0x90, 0x18, 0x90, 0x18, 0x90,
		0x18, 0x90, 0x18, 0x90, 0xd8, 0x6b, 0x48, 0xcc, 0x84, 0x1a, 0x06, 0x0d, 0x0c, 0xc8, 0x0b, 0xc8,
		0x0b, 0xc8, 0x0b, 0xc8, 0x0b, 0xc8, 0x0b, 0xc8, 0x0b, 0xc8, 0x0b, 0xc8, 0x6b, 0x11, 0xf2, 0xd2,
		0xaf, 0x7c, 0x41, 0xef, 0x02, 0xea, 0x02, 0xea, 0x02, 0xea, 0x02, 0xea, 0x02, 0xea, 0x02, 0xea,
		0x02, 0xea, 0x2a, 0x24, 0xea, 0x5a, 0xf7, 0x93, 0xbb, 0x07, 0x27, 0x25, 0x6f, 0x28, 0x9e, 0x0b,
		0x5b, 0x4a, 0x73, 0xcc, 0xf4, 0xc1, 0xf8, 0x5e, 0x59, 0x1d, 0x12, 0x2e, 0x71, 0x3a, 0xb2, 0x77,
		0xe7, 0x46, 0x8e, 0xeb, 0xb3, 0x21, 0x14, 0x51, 0x3c, 0x74, 0x77, 0x76, 0x30, 0xd9, 0x73, 0x4c,
		0x69, 0x9b, 0xf4, 0xfc, 0x01, 0x2c, 0x6a, 0x13, 0x3f, 0xa6, 0x8a, 0xe7, 0xf7, 0x56, 0x70, 0x7e,
		0x2f, 0xce, 0xef, 0xb5, 0xc1, 0x61, 0x2a, 0xc3, 0xe7, 0xc9, 0x6a, 0xb9, 0x0d, 0x43, 0x9f, 0x92,
		0x40, 0x65, 0xbd, 0x8c, 0x0f, 0xbf, 0xae, 0xe6, 0xd8, 0x71, 0xd1, 0x80, 0xdc, 0xfa, 0xd4, 0x53,
		0x77, 0x5a, 0xe3, 0x81, 0xd4, 0x1d, 0x56, 0x7f, 0xfd, 0xc2, 0x5f, 0xc1, 0x5f, 0xc1, 0x5f, 0xc1,
		0x5f, 0xcd, 0x3d, 0x63, 0x57, 0xf4, 0xd4, 0x7d, 0x55, 0x7f, 0x10, 0x38, 0x18, 0x38, 0x18, 0x38,
		0x98, 0x14, 0xab, 0xa5, 0xc7, 0x02, 0x51, 0xdd, 0xd6, 0xe0, 0x5f, 0xb6, 0x15, 0x86, 0xd0, 0x23,
		0x1a, 0x6a, 0x50, 0x57, 0x75, 0x8a, 0x84, 0x9a, 0x15, 0xa7, 0x89, 0xd2, 0xb4, 0xbd, 0xab, 0x69,
		0x40, 0x03, 0x7a, 0x92, 0x06, 0x15, 0x50, 0xab, 0xfa, 0x37, 0x9e, 0x83, 0x4d, 0xcd, 0x73, 0x50,
		0xc9, 0xf1, 0x14, 0xac, 0x48, 0x42, 0xbb, 0xce, 0x0a, 0x5e, 0xbc, 0x33, 0xb8, 0x20, 0x55, 0xa5,
		0x39, 0xed, 0x92, 0x5c, 0xba, 0x80, 0x94, 0xfc, 0xdb, 0xa4, 0xf8, 0x2e, 0xe5, 0x5e, 0x10, 0xf4,
		0xba, 0xb7, 0x94, 0x4b, 0xf0, 0xc9, 0x69, 0x98, 0x99, 0x8e, 0x91, 0x72, 0x46, 0xc6, 0xf0, 0x35,
		0xe5, 0x65, 0xb2, 0x90, 0x4c, 0x05, 0x8a, 0x3d, 0x83, 0x60, 0x6d, 0x89, 0x98, 0xaa, 0x0a, 0xbd,
		0xb4, 0x41, 0x2e, 0x6d, 0x50, 0x6b, 0x0e, 0x62, 0xb5, 0xcb, 0x39, 0xb3, 0xf8, 0x43, 0xc6, 0xe5,
		0x26, 0xdb, 0x1d, 0xaf, 0x30, 0x45, 0xda, 0x32, 0x1a, 0x47, 0x8d, 0xb9, 0x54, 0x8b, 0xc2, 0x5c,
		0xda, 0x60, 0x2e, 0x19, 0x99, 0xd5, 0x6a, 0x98, 0x8b, 0xac, 0xb9, 0x69, 0x93, 0x36, 0x35, 0x4b,
		0x9c, 0xd3, 0x17, 0xd3, 0x93, 0x9b, 0xd1, 0xcc, 0x1e, 0xf2, 0x5f, 0x32, 0xd5, 0x46, 0xc9, 0x94,
		0x8e, 0x81, 0x35, 0x3a, 0x04, 0x4d, 0x4c, 0x22, 0x77, 0x25, 0x53, 0xea, 0x5a, 0xea, 0x5c, 0xd4,
		0xad, 0xae, 0x45, 0xbd, 0x42, 0xf3, 0x61, 0xc0, 0x4d, 0xe5, 0xd5, 0x19, 0x7d, 0xe1, 0x38, 0x74,
		0x1d, 0xfa, 0x20, 0xf6, 0x05, 0xf5, 0x69, 0x97, 0x0a, 0xfe, 0xe8, 0x84, 0x81, 0xe3, 0xde, 0x0d,
		0xe4, 0x23, 0xad, 0x21, 0x7a, 0xe0, 0xc2, 0x35, 0xc6, 0xe8, 0xac, 0xc3, 0xf3, 0x75, 0x71, 0x4a,
		0x53, 0xa6, 0xd4, 0x71, 0x63, 0x04, 0x95, 0x73, 0x9c, 0xc8, 0x98, 0xbc, 0x87, 0xc3, 0x69, 0x5b,
		0x9d, 0x1b, 0x3c, 0x1f, 0x0e, 0x14, 0x01, 0x14, 0x01, 0x14, 0xc1, 0x38, 0x33, 0xd7, 0xcb, 0xd0,
		0x35, 0x99, 0x21, 0x00, 0x3d, 0x00, 0xbd, 0xdd, 0x80, 0x5e, 0xd5, 0xac, 0xe7, 0x63, 0xac, 0xbe,
		0xe5, 0x31, 0x17, 0x6f, 0x75, 0x2d, 0x0f, 0xcd, 0x39, 0x40, 0x5d, 0xc6, 0x6f, 0xc2, 0x09, 0x18,
		0x73, 0x06, 0xa6, 0x9c, 0x82, 0x71, 0xe7, 0x60, 0xdc, 0x49, 0x98, 0x74, 0x16, 0x7a, 0x9c, 0x86,
		0x26, 0xe7, 0xa1, 0x5f, 0x15, 0x98, 0x5b, 0xad, 0x3e, 0x25, 0x6d, 0x79, 0x90, 0xfd, 0x6a, 0xc4,
		0xdf, 0xd1, 0x38, 0x66, 0x6b, 0x42, 0xa9, 0xfa, 0xd3, 0xbc, 0x3f, 0x43, 0xa1, 0x5e, 0xfc, 0xc3,
		0xe8, 0xef, 0x83, 0x42, 0xfc, 0x9c, 0xec, 0xee, 0xd0, 0x51, 0x1d, 0x10, 0xf7, 0x6e, 0x0d, 0xfa,
		0xff, 0x67, 0xa3, 0x23, 0x04, 0x20, 0x04, 0x20, 0x04, 0x20, 0x04, 0x58, 0x1b, 0x02, 0xbe, 0x4f,
		0x43, 0xc0, 0xff, 0xe3, 0xf6, 0x38, 0xa7, 0x81, 0x78, 0xff, 0x61, 0xe3, 0xd3, 0xa7, 0xa9, 0xda,
		0x76, 0x3d, 0xba, 0x64, 0xd6, 0xef, 0xc5, 0x0b, 0xfe, 0x6d, 0x32, 0xb2, 0x47, 0x1f, 0x72, 0x13,
		0x4d, 0x56, 0xca, 0x66, 0x94, 0x35, 0xf1, 0xf1, 0x1f, 0xfd, 0x04, 0xd7, 0x98, 0x46, 0xbe, 0xc4,
		0x99, 0x69, 0xd0, 0xca, 0x17, 0x7a, 0xb1, 0x55, 0x13, 0xde, 0x6b, 0x55, 0x01, 0x4e, 0x8f, 0x96,
		0x3e, 0x85, 0x3e, 0x46, 0x34, 0xf5, 0x67, 0x12, 0xb3, 0x92, 0xc2, 0xae, 0xfe, 0xd5, 0x9f, 0x94,
		0xf6, 0x9d, 0x12, 0x41, 0xf5, 0x69, 0x7e, 0xc3, 0xe1, 0x72, 0x26, 0xf9, 0xd5, 0x20, 0xf9, 0x41,
		0xf2, 0x83, 0xe4, 0x07, 0xc9, 0x0f, 0x7c, 0x0f, 0x7c, 0x0f, 0x7c, 0x0f, 0x7c, 0x0f, 0x92, 0x1f,
		0x24, 0x3f, 0x84, 0x00, 0x84, 0x00, 0x84, 0x00, 0x84, 0x00, 0x48, 0x7e, 0x86, 0xd9, 0x8c, 0x8d,
		0x7a, 0x8e, 0xc4, 0x26, 0x42, 0x8d, 0x72, 0xce, 0xba, 0x77, 0x55, 0x5b, 0x36, 0x2d, 0x59, 0xf4,
		0x57, 0xfb, 0x3a, 0xb9, 0xf7, 0xcd, 0xe4, 0x97, 0x2e, 0x68, 0x3b, 0xcf, 0xc5, 0xb3, 0x6a, 0x12,
		0x9e, 0x16, 0xe9, 0x4e, 0x5b, 0xb1, 0x6c, 0x0d, 0xc5, 0xb2, 0xe6, 0xa0, 0x16, 0x8a, 0x65, 0xb5,
		0x49, 0x6c, 0xd8, 0x4f, 0xb7, 0x1a, 0x2e, 0x06, 0x2d, 0x3e, 0xd7, 0x1c, 0x0b, 0xfb, 0xe9, 0xde,
		0x5e, 0x6d, 0xd8, 0x4f, 0x57, 0x48, 0xa4, 0xaa, 0x40, 0x19, 0xd0, 0xcd, 0x25, 0xc1, 0x07, 0x2e,
		0x4b, 0x21, 0xe3, 0xb4, 0xa0, 0xdf, 0x58, 0xe3, 0x98, 0x77, 0x1a, 0x27, 0x4a, 0x76, 0x82, 0x34,
		0x4e, 0x4c, 0x8a, 0xd9, 0x48, 0x3a, 0x0b, 0xc9, 0x3e, 0xfd, 0xdb, 0x1f, 0x32, 0xc1, 0x47, 0x2c,
		0xb3, 0xe8, 0x7e, 0x3b, 0xf1, 0xa7, 0x9b, 0xe6, 0x3c, 0xfb, 0x57, 0x25, 0x9c, 0xa2, 0x74, 0x84,
		0x28, 0x35, 0x3e, 0x92, 0xc1, 0x41, 0xd2, 0xad, 0x0e, 0x65, 0x71, 0x8d, 0x32, 0x7e, 0x51, 0xc6,
		0x29, 0x2a, 0xad, 0x0a, 0xf5, 0x9a, 0x6c, 0x5a, 0xc2, 0x51, 0x26, 0x9e, 0xc7, 0x69, 0x1c, 0xd3,
		0x58, 0xbe, 0x7b, 0xd4, 0x74, 0x88, 0x35, 0x69, 0x1e, 0x15, 0xa1, 0x79, 0x94, 0xa6, 0xfe, 0x9c,
		0x39, 0x6d, 0x1e, 0x35, 0x5a, 0xd1, 0xea, 0x62, 0xd7, 0x78, 0x20, 0xec, 0x0d, 0x47, 0xe3, 0xdb,
		0x4c, 0x0d, 0xcb, 0x52, 0xb9, 0x0b, 0x7b, 0xc3, 0x57, 0x29, 0x4e, 0xe1, 0x7c, 0x3c, 0x23, 0xe2,
		0x54, 0x84, 0x42, 0xd1, 0x09, 0x1f, 0x32, 0x50, 0x21, 0x1a, 0xa1, 0x2e, 0x28, 0x3f, 0xe6, 0x6f,
		0xca, 0x0d, 0x18, 0x77, 0x07, 0xc6, 0xdd, 0x82, 0x49, 0xf7, 0xa0, 0xc7, 0x4d, 0x68, 0x72, 0x17,
		0x93, 0x17, 0x35, 0x57, 0x17, 0xc4, 0xa2, 0xfb, 0x6d, 0x47, 0x0d, 0x5b, 0xbf, 0x1a, 0xe8, 0x77,
		0xf5, 0x16, 0x07, 0x09, 0xca, 0x03, 0x6d, 0x87, 0x6e, 0x4e, 0x06, 0xfe, 0xcf, 0xfb, 0xf7, 0xdf,
		0x2b, 0xce, 0x1e, 0x71, 0xda, 0x0d, 0xe7, 0xe8, 0xfa, 0x9f, 0xea, 0xc7, 0xfa, 0xd3, 0xfe, 0x87,
		0x7f, 0x76, 0x9e, 0x5e, 0xfe, 0xe3, 0xef, 0x45, 0xbf, 0x56, 0xfd, 0xb8, 0xf3, 0xb4, 0xbf, 0xe4,
		0xbf, 0x6c, 0x3f, 0xed, 0x27, 0x1c, 0x63, 0xeb, 0xe9, 0xfd, 0xdc, 0xaf, 0xf6, 0xff, 0xbd, 0xb6,
		0xec, 0x82, 0xfa, 0x92, 0x0b, 0x36, 0x97, 0x5d, 0xb0, 0xb9, 0xe4, 0x82, 0xa5, 0x8f, 0x54, 0x5b,
		0x72, 0xc1, 0xd6, 0xd3, 0xef, 0xb9, 0xdf, 0x7f, 0xbf, 0xf8, 0x57, 0xb7, 0x9f, 0x3e, 0xfc, 0x5e,
		0xf6, 0xdf, 0x76, 0x9e, 0x7e, 0xef, 0x7f, 0xf8, 0xf0, 0x2f, 0x7d, 0x26, 0x7b, 0x5d, 0xa0, 0x52,
		0xe0, 0xa1, 0x43, 0x76, 0x7c, 0x1a, 0x74, 0x06, 0xd2, 0xaf, 0xe6, 0x48, 0xff, 0x7c, 0x78, 0x04,
		0x7d, 0x04, 0x7d, 0x04, 0xfd, 0x35, 0x0a, 0xfa, 0x3d, 0x16, 0x88, 0x5d, 0x03, 0xd1, 0x5e, 0xe3,
		0x41, 0xc0, 0x9a, 0xcf, 0xd7, 0x1e, 0xff, 0xd1, 0x6b, 0x4d, 0x25, 0x53, 0xe7, 0x6d, 0x1b, 0xf2,
		0xa9, 0x73, 0xc3, 0x1b, 0x3a, 0x7f, 0x7b, 0x32, 0xbe, 0xc1, 0x93, 0x9c, 0x35, 0x5b, 0xdb, 0xf3,
		0x29, 0x35, 0x70, 0x2e, 0x77, 0xd6, 0x53, 0x5a, 0xad, 0xed, 0x5a, 0x3c, 0xa9, 0xef, 0xf2, 0x39,
		0xda, 0x35, 0xf6, 0x07, 0xe4, 0x79, 0x7f, 0xc0, 0xf6, 0xc6, 0x24, 0x81, 0x3a, 0xfe, 0xc9, 0xe2,
		0x46, 0x0f, 0x1a, 0x24, 0x3e, 0x7d, 0xd2, 0xde, 0xda, 0x94, 0x95, 0x42, 0xb9, 0xcf, 0x2b, 0x4a,
		0x2f, 0x5a, 0x59, 0xa9, 0xbe, 0x2d, 0x79, 0x3a, 0xb7, 0xe2, 0x4d, 0xb6, 0xe0, 0x7d, 0xfa, 0x34,
		0xf2, 0x9d, 0x1b, 0xaa, 0x93, 0x87, 0x3e, 0x39, 0x2f, 0xe7, 0xa9, 0xe8, 0x7d, 0x72, 0xe0, 0x44,
		0xe1, 0x44, 0x17, 0xbd, 0x10, 0xd2, 0x9f, 0xab, 0xc4, 0x4c, 0x26, 0xcc, 0xde, 0x98, 0xf9, 0x9b,
		0x72, 0x03, 0xc6, 0xdd, 0x81, 0x71, 0xb7, 0x60, 0xd2, 0x3d, 0xe8, 0xa5, 0xcc, 0x48, 0x7f, 0x22,
		0xfd, 0x89, 0xf4, 0x27, 0xd2, 0x9f, 0xa9, 0x57, 0x64, 0xc8, 0x59, 0x47, 0xe7, 0x09, 0xf5, 0x93,
		0xe0, 0x34, 0x1c, 0x17, 0x61, 0x1e, 0x61, 0x1e, 0x61, 0x7e, 0xad, 0xc2, 0xfc, 0x38, 0xc8, 0x3b,
		0x5a, 0x5d, 0xc0, 0xb3, 0x58, 0x5f, 0xd7, 0x38, 0x66, 0x33, 0xe8, 0x75, 0xfb, 0x9f, 0xe2, 0x09,
		0x35, 0x2d, 0x49, 0xe7, 0x18, 0x35, 0x2d, 0x70, 0xf1, 0x70, 0xf1, 0x6b, 0xeb, 0xe2, 0x51, 0xd3,
		0xa2, 0x71, 0x3d, 0xa2, 0xa6, 0x65, 0xf9, 0xf8, 0xa8, 0x69, 0x59, 0xd9, 0x94, 0xa2, 0xa6, 0xc5,
		0xc0, 0x68, 0x45, 0xd2, 0x0d, 0x62, 0x41, 0x44, 0x2f, 0x36, 0xd0, 0x3b, 0x79, 0x38, 0x2e, 0x40,
		0x25, 0x40, 0x25, 0x40, 0xe5, 0x1a, 0x81, 0x4a, 0x1a, 0xf4, 0xba, 0x94, 0x0f, 0x4b, 0xdd, 0xa0,
		0x18, 0x64, 0x38, 0xc2, 0x5a, 0x95, 0x28, 0xae, 0xb6, 0x77, 0xb1, 0x42, 0x89, 0xcd, 0x3d, 0xe7,
		0x1a, 0x6b, 0x14, 0x07, 0xa3, 0xa1, 0xbf, 0x40, 0x66, 0x21, 0x14, 0x05, 0x36, 0x28, 0xb0, 0x79,
		0xd5, 0xb4, 0x9d, 0x0e, 0x0f, 0x7b, 0x06, 0x0a, 0x6d, 0x66, 0xc6, 0xd6, 0x8b, 0xa8, 0xab, 0x40,
		0xd4, 0x40, 0xd4, 0x40, 0xd4, 0xea, 0x2f, 0xaa, 0xcb, 0x8d, 0x4c, 0x06, 0xd4, 0xd4, 0x8d, 0x68,
		0xa9, 0x11, 0x68, 0xe9, 0x4e, 0x64, 0xd8, 0xad, 0x18, 0x73, 0x2f, 0x26, 0xdd, 0x8c, 0x71, 0x77,
		0x63, 0xda, 0xed, 0x64, 0xe6, 0x7e, 0x32, 0x73, 0x43, 0x59, 0xb8, 0x23, 0xbd, 0x6e, 0x49, 0xb3,
		0x7b, 0x32, 0xe6, 0xa6, 0x26, 0x03, 0x13, 0xd7, 0xa5, 0x91, 0x70, 0xba, 0xa1, 0x67, 0x70, 0x41,
		0x4e, 0x3a, 0x1b, 0xce, 0xdc, 0xcc, 0xd0, 0x4a, 0xd1, 0x7c, 0xc6, 0xc0, 0x5b, 0x0e, 0xd3, 0x54,
		0x1e, 0xc0, 0x94, 0xe3, 0xcc, 0xc2, 0x81, 0x66, 0xe6, 0x48, 0xb3, 0x72, 0xa8, 0x99, 0x3b, 0xd6,
		0xcc, 0x1d, 0x6c, 0x96, 0x8e, 0xd6, 0x8c, 0xc3, 0x35, 0xe4, 0x78, 0x27, 0x1f, 0x46, 0xbb, 0xf2,
		0xba, 0xd4, 0x5a, 0xf4, 0x9d, 0xc1, 0xf0, 0x26, 0xda, 0xab, 0xbe, 0xb3, 0x63, 0x62, 0x4d, 0x64,
		0x89, 0x89, 0x77, 0x4f, 0xb9, 0x60, 0x31, 0xed, 0x2f, 0xf7, 0xa1, 0xb6, 0x79, 0x4f, 0xfc, 0x0c,
		0x62, 0xe0, 0xe2, 0xfb, 0x9a, 0x0f, 0x87, 0xd5, 0x4a, 0x05, 0xc1, 0x10, 0xc1, 0x10, 0xc1, 0x10,
		0xc1, 0xd0, 0x9e, 0x60, 0xd8, 0x63, 0x81, 0xa8, 0x6e, 0x67, 0x10, 0x0b, 0xb7, 0x0d, 0xde, 0xc2,
		0x4c, 0x31, 0xdc, 0xcb, 0x3f, 0x66, 0xcd, 0xbd, 0x64, 0xba, 0x58, 0x2e, 0xe3, 0xa0, 0x32, 0x77,
		0xbb, 0x49, 0xe5, 0x55, 0x46, 0xf7, 0xcb, 0xa0, 0x0e, 0x2b, 0x23, 0x77, 0xf0, 0x7c, 0x89, 0x90,
		0x87, 0xc2, 0x2f, 0x91, 0x7a, 0x65, 0x6f, 0xab, 0xc0, 0xab, 0xe4, 0x9d, 0x9d, 0xa3, 0x5f, 0xaf,
		0x31, 0x99, 0x89, 0x38, 0xa5, 0xdd, 0x48, 0x98, 0x67, 0x2f, 0xe3, 0x1b, 0x99, 0xa7, 0x2b, 0x7d,
		0x7c, 0x07, 0xbe, 0x02, 0xbe, 0x02, 0xbe, 0x02, 0xbe, 0x62, 0x0f, 0x5f, 0x81, 0x78, 0x97, 0x65,
		0xbc, 0x73, 0x3c, 0xea, 0x93, 0xc7, 0xcc, 0xa2, 0xde, 0xe8, 0x76, 0xe6, 0x63, 0x1f, 0x84, 0x3a,
		0x04, 0x3e, 0x04, 0x3e, 0x04, 0x3e, 0x8b, 0x02, 0x1f, 0x84, 0xba, 0xc4, 0x7f, 0x20, 0xd4, 0x69,
		0x51, 0x61, 0x2a, 0x10, 0xea, 0x94, 0x96, 0xc8, 0x1a, 0x08, 0x75, 0x9b, 0xdb, 0x95, 0x0a, 0x84,
		0xba, 0xbc, 0x8d, 0xbe, 0xde, 0x42, 0x1d, 0x0b, 0x39, 0x13, 0x99, 0x70, 0x96, 0xd1, 0x9d, 0x50,
		0x59, 0x00, 0xc2, 0x02, 0xc2, 0x02, 0xc2, 0x02, 0xc2, 0x52, 0x32, 0xd9, 0x45, 0x67, 0x99, 0xeb,
		0xda, 0x02, 0x5f, 0x01, 0x5f, 0x41, 0x61, 0x01, 0xf8, 0x4a, 0x82, 0x25, 0x52, 0xdb, 0xaa, 0x83,
		0xae, 0x80, 0xae, 0xe4, 0x87, 0xae, 0xdc, 0x33, 0x2e, 0x7a, 0xc4, 0x9f, 0xf4, 0x0d, 0x37, 0xce,
		0x5a, 0x5e, 0xde, 0x10, 0xb4, 0x02, 0xb4, 0x02, 0xb4, 0x02, 0xb4, 0xc2, 0x1a, 0x5a, 0x31, 0xed,
		0xbf, 0x9c, 0x45, 0x0d, 0xc0, 0x9e, 0xc1, 0x7b, 0x8c, 0xbe, 0x99, 0xf5, 0xdc, 0x62, 0xe6, 0x00,
		0x8c, 0x7a, 0x06, 0x73, 0x33, 0x37, 0x47, 0xbb, 0x19, 0xdc, 0xcb, 0xd4, 0x81, 0x19, 0x4b, 0x6f,
		0x38, 0x3a, 0x48, 0xe3, 0xfa, 0xf7, 0xf7, 0xaa, 0xb3, 0x77, 0x3d, 0xfc, 0xb1, 0x3a, 0xf8, 0xbf,
		0xe1, 0xcf, 0xb5, 0xef, 0x15, 0xa7, 0x3e, 0xfe, 0x79, 0xeb, 0x7b, 0xc5, 0xd9, 0xba, 0xfe, 0xf0,
		0xe3, 0xc7, 0xa7, 0x0f, 0xff, 0x6c, 0x3e, 0xa5, 0xbf, 0xf0, 0x5f, 0x65, 0xe3, 0x2f, 0x75, 0xfd,
		0xce, 0x62, 0x7e, 0x94, 0xad, 0x11, 0x6d, 0xc3, 0x88, 0xf4, 0x1a, 0x11, 0x4e, 0xa3, 0xb1, 0xfa,
		0x34, 0x9a, 0x15, 0xb9, 0x14, 0xdb, 0xf8, 0xae, 0x21, 0x64, 0x77, 0xc2, 0x62, 0xd1, 0x10, 0x82,
		0x9b, 0x45, 0x77, 0xa7, 0x2c, 0x68, 0xfa, 0x83, 0x1d, 0xbb, 0x7d, 0x0e, 0x1c, 0xf4, 0x7c, 0xdf,
		0x20, 0xf0, 0x3a, 0x25, 0x0f, 0xd9, 0xdd, 0xec, 0x9c, 0x7b, 0x94, 0x53, 0xef, 0xf3, 0xe3, 0xe8,
		0x56, 0x10, 0x3b, 0x1c, 0x9f, 0x05, 0x3f, 0x1d, 0x3f, 0x74, 0xb3, 0xd8, 0x0d, 0xbe, 0xe0, 0x9e,
		0x90, 0x3c, 0x20, 0x79, 0x40, 0xf2, 0x80, 0xe4, 0x01, 0xc9, 0x03, 0x92, 0x07, 0x24, 0x0f, 0x48,
		0x1e, 0x90, 0x3c, 0x20, 0x79, 0x40, 0xf2, 0x80, 0xe4, 0x01, 0xc9, 0x03, 0x29, 0x7e, 0x83, 0xac,
		0x77, 0x70, 0x7a, 0x03, 0x77, 0x98, 0x97, 0x1d, 0xe9, 0x9d, 0xde, 0x12, 0x9c, 0x17, 0x9c, 0x17,
		0x9c, 0x17, 0x9c, 0xd7, 0x1a, 0xce, 0x8b, 0xea, 0xe1, 0x1c, 0x21, 0x75, 0x54, 0x0f, 0xeb, 0xbb,
		0x1f, 0xaa, 0x87, 0xad, 0x5d, 0x22, 0xb5, 0x2d, 0x74, 0x25, 0x03, 0xb5, 0xc8, 0xc5, 0x88, 0xba,
		0x8f, 0x3f, 0x68, 0xf4, 0x3a, 0x7d, 0xc0, 0x43, 0x3d, 0x23, 0xe1, 0xca, 0x30, 0xdd, 0xd9, 0xe8,
		0x63, 0xb4, 0xf6, 0xfe, 0xcc, 0x99, 0x79, 0x2f, 0xfe, 0xa1, 0xff, 0xf7, 0x7b, 0x9f, 0x04, 0xfb,
		0xb3, 0x27, 0xe8, 0x0d, 0x80, 0xdd, 0xfe, 0xe0, 0x1c, 0xbd, 0xe1, 0x8f, 0xd3, 0xd3, 0xf4, 0x9e,
		0xfd, 0x7d, 0xe3, 0x9e, 0xf3, 0x68, 0x63, 0x7a, 0xd0, 0xd4, 0x86, 0x91, 0x03, 0x62, 0x26, 0x2f,
		0x75, 0x48, 0x63, 0x97, 0xb3, 0x68, 0x74, 0xde, 0x60, 0xb9, 0xe1, 0x79, 0xac, 0xff, 0x33, 0xf1,
		0x4b, 0xdf, 0x2e, 0x2e, 0x5a, 0x25, 0x8f, 0x08, 0x52, 0x6a, 0x87, 0xbc, 0x74, 0xdc, 0xba, 0xdf,
		0x2e, 0x4d, 0x5f, 0xd9, 0x30, 0xc3, 0xab, 0x82, 0xe1, 0x81, 0xe1, 0x81, 0xe1, 0x15, 0x9f, 0xe1,
		0x99, 0x3a, 0x07, 0x67, 0x4e, 0x0e, 0xcb, 0xa0, 0x08, 0x64, 0xa9, 0x2e, 0x66, 0xbc, 0x18, 0x64,
		0x99, 0x37, 0x3f, 0x0a, 0xf9, 0xd0, 0x8d, 0x87, 0xc1, 0x4b, 0x07, 0xfe, 0xb1, 0x14, 0x53, 0x11,
		0x97, 0xc4, 0x1d, 0x2d, 0x8d, 0x1e, 0xb3, 0xd4, 0x7f, 0xcc, 0xd2, 0xe0, 0x31, 0x7f, 0x04, 0xd9,
		0xe4, 0x47, 0x32, 0x42, 0xd6, 0xc6, 0xdd, 0x7e, 0x96, 0xee, 0x3f, 0xf3, 0x30, 0x90, 0x75, 0x38,
		0x58, 0x59, 0x58, 0x58, 0x59, 0x78, 0x58, 0x45, 0x98, 0xc8, 0x88, 0x87, 0x19, 0xb6, 0x37, 0xe3,
		0x02, 0xe1, 0x9c, 0xb5, 0x65, 0x52, 0x1c, 0x33, 0x07, 0x87, 0xf7, 0x32, 0xb8, 0x57, 0x26, 0xc5,
		0x32, 0x66, 0x29, 0xda, 0x1b, 0x33, 0x97, 0x69, 0xf1, 0xcc, 0xdc, 0x1c, 0xee, 0x66, 0x78, 0xcf,
		0xac, 0xeb, 0x00, 0x26, 0x37, 0x2e, 0x5a, 0x51, 0x8d, 0x59, 0xd9, 0x27, 0x63, 0x77, 0xb9, 0x5a,
		0xe3, 0xdb, 0x86, 0xf1, 0x65, 0x63, 0x7c, 0x28, 0xc6, 0x29, 0x64, 0x31, 0x4e, 0xc6, 0xae, 0x08,
		0xc5, 0x45, 0xd9, 0x0a, 0x2c, 0x39, 0xcf, 0x00, 0x5c, 0xeb, 0xce, 0x00, 0x04, 0x41, 0x28, 0xc8,
		0x48, 0xa8, 0x30, 0x70, 0x0e, 0x72, 0xec, 0xde, 0xd1, 0x2e, 0x89, 0x88, 0xb8, 0x1b, 0x4a, 0xf6,
		0x11, 0x0d, 0x86, 0x42, 0xba, 0x33, 0xa3, 0xdb, 0x2f, 0xfa, 0x71, 0x63, 0x56, 0xb4, 0x1f, 0xc8,
		0xf5, 0x53, 0xa1, 0xfe, 0x0d, 0x89, 0xfe, 0x5d, 0x3e, 0xa7, 0x4f, 0x23, 0xaa, 0x28, 0x4f, 0x3e,
		0x93, 0x23, 0x38, 0x71, 0x7f, 0xb2, 0xc0, 0xe0, 0xc9, 0xf8, 0x0b, 0xee, 0x85, 0x53, 0xf2, 0x71,
		0x4a, 0xfe, 0xaa, 0xe5, 0x22, 0x9c, 0x92, 0x9f, 0x15, 0x7f, 0x31, 0x77, 0x4a, 0xbe, 0x3b, 0xb6,
		0x50, 0xc3, 0xa9, 0x62, 0xb3, 0xb9, 0x5b, 0x24, 0x4b, 0x57, 0xef, 0xd6, 0xb2, 0x72, 0x6f, 0x99,
		0xbb, 0xb9, 0xcc, 0xdd, 0x5d, 0x96, 0x6e, 0xcf, 0x30, 0x96, 0xb7, 0x35, 0x59, 0x3a, 0xee, 0x31,
		0xee, 0x78, 0xd4, 0xe5, 0x74, 0x34, 0x07, 0x19, 0x25, 0x4b, 0x17, 0xdc, 0xdb, 0x78, 0xb2, 0xd4,
		0xf8, 0x01, 0x4d, 0x2f, 0x5d, 0x35, 0x12, 0x9d, 0x39, 0x76, 0xe1, 0x59, 0xbb, 0xf2, 0x95, 0xb9,
		0xf4, 0x95, 0xb9, 0xf6, 0x55, 0xb8, 0xf8, 0x6c, 0x04, 0xad, 0xe2, 0x25, 0x3a, 0x4d, 0xef, 0x88,
		0x78, 0xe9, 0x1a, 0x33, 0xa8, 0x75, 0xce, 0x68, 0x87, 0xc4, 0xf8, 0x4f, 0x86, 0x69, 0x96, 0x2c,
		0x77, 0x4c, 0x64, 0x1c, 0xd3, 0xe6, 0x6e, 0x9b, 0xf1, 0x79, 0x51, 0x93, 0xfb, 0xae, 0xa0, 0x48,
		0x3e, 0x23, 0xef, 0xf2, 0x7c, 0x29, 0x65, 0xb8, 0xb3, 0x22, 0x2f, 0x4b, 0x29, 0xb3, 0x3e, 0xed,
		0xb9, 0x58, 0x4c, 0xc8, 0x1f, 0xad, 0xf4, 0xf9, 0x0d, 0x1a, 0x73, 0x79, 0x20, 0x94, 0x4f, 0x33,
		0x1c, 0xd9, 0xb1, 0xb7, 0x97, 0x37, 0x06, 0x9d, 0x02, 0x9d, 0x02, 0x9d, 0x02, 0x9d, 0x02, 0x9d,
		0x1a, 0x59, 0x9b, 0x4f, 0x49, 0x9b, 0xd3, 0x76, 0x96, 0x45, 0xa3, 0x3b, 0xd9, 0x34, 0x1c, 0xba,
		0x4b, 0xbc, 0x27, 0x8e, 0xb5, 0xf7, 0x83, 0xfe, 0xe7, 0xb0, 0x7a, 0xe9, 0x64, 0xd2, 0xa0, 0x76,
		0x96, 0xd8, 0x65, 0xd6, 0x3b, 0x76, 0x96, 0x02, 0x64, 0x7f, 0xd3, 0x4c, 0x1a, 0xd7, 0x66, 0x80,
		0xee, 0xac, 0xca, 0x28, 0x18, 0xae, 0xc2, 0x99, 0xdc, 0x27, 0xd3, 0x6a, 0x9c, 0xf9, 0xba, 0x11,
		0x23, 0x05, 0x3a, 0xe6, 0x66, 0xdc, 0x44, 0x5b, 0xa8, 0x58, 0x10, 0x41, 0xcd, 0x27, 0xbc, 0x87,
		0xb7, 0xb1, 0x3c, 0xdf, 0x5d, 0x43, 0xbe, 0x3b, 0x37, 0xa8, 0x1e, 0xf9, 0xee, 0xf5, 0x8d, 0x4e,
		0xc8, 0x77, 0xeb, 0xfd, 0x9c, 0xc8, 0x77, 0x43, 0xa0, 0x81, 0x40, 0x03, 0x81, 0x06, 0x02, 0xcd,
		0x02, 0x6b, 0x43, 0xbe, 0x5b, 0xf5, 0x0f, 0xf2, 0xdd, 0x46, 0x6e, 0x8b, 0x7c, 0xb7, 0x69, 0xb1,
		0x0b, 0xf9, 0xee, 0x42, 0x2f, 0x26, 0xe4, 0xbb, 0x57, 0xfa, 0xfc, 0xc8, 0x77, 0x83, 0x4e, 0x81,
		0x4e, 0x81, 0x4e, 0x81, 0x4e, 0xad, 0x13, 0x9d, 0x42, 0xbe, 0x1b, 0xf9, 0x6e, 0x39, 0x62, 0x87,
		0x7c, 0xb7, 0x55, 0xe8, 0x0e, 0xf9, 0xee, 0x05, 0xf7, 0x59, 0x75, 0xbe, 0x7b, 0x98, 0x86, 0x45,
		0xab, 0xf2, 0xfc, 0x2f, 0x99, 0x55, 0x2f, 0x95, 0xb2, 0x91, 0x5a, 0x03, 0xde, 0x73, 0x45, 0x30,
		0x42, 0x02, 0xc7, 0xe3, 0x7b, 0xde, 0x5c, 0x0c, 0x1e, 0xf8, 0x9b, 0x4f, 0x82, 0x9b, 0xe3, 0xe8,
		0x7e, 0xfb, 0xa6, 0x31, 0x7c, 0xca, 0x9b, 0x6f, 0x9c, 0x47, 0x5f, 0xfa, 0xcf, 0x77, 0x33, 0xf9,
		0xdd, 0xab, 0xf1, 0xe3, 0xad, 0x41, 0x4f, 0x15, 0x33, 0xa5, 0x19, 0x46, 0x4b, 0x32, 0x8c, 0x77,
		0x4e, 0xa9, 0xa1, 0x73, 0x4a, 0x66, 0x84, 0x12, 0x9d, 0x53, 0x8a, 0x17, 0xb5, 0x8c, 0x75, 0x4e,
		0x21, 0xae, 0x4b, 0x23, 0xe1, 0x74, 0x43, 0x2f, 0x83, 0x6a, 0xb2, 0xd9, 0x9b, 0x19, 0x3b, 0xff,
		0x62, 0x52, 0x14, 0xd1, 0x26, 0x7e, 0x4c, 0x71, 0x74, 0xe1, 0xca, 0x14, 0x3b, 0xd4, 0xae, 0x59,
		0xa7, 0xc8, 0xa1, 0x76, 0x6d, 0x65, 0x8a, 0xdb, 0xc4, 0x5a, 0x6e, 0xc3, 0xd0, 0xa7, 0x24, 0xc8,
		0xe2, 0xac, 0xfe, 0xea, 0x1a, 0x17, 0x50, 0x13, 0xef, 0x9e, 0x72, 0xc1, 0xe2, 0x81, 0x4e, 0x34,
		0xe4, 0x66, 0xf7, 0x06, 0x0f, 0x13, 0x99, 0xc6, 0xc0, 0xc5, 0xf7, 0x35, 0x1f, 0x0e, 0xab, 0x95,
		0x0a, 0x82, 0x21, 0x82, 0x21, 0x82, 0x21, 0x82, 0xa1, 0x3d, 0xc1, 0xb0, 0xc7, 0x02, 0x51, 0xdd,
		0xce, 0x20, 0x16, 0x6e, 0xe3, 0x20, 0xdf, 0xb7, 0x5f, 0x04, 0x07, 0xf9, 0xea, 0xbb, 0x1f, 0x0e,
		0xf2, 0xb5, 0x76, 0x89, 0xd4, 0x2b, 0x7b, 0x38, 0xc9, 0x37, 0x77, 0xa3, 0x5f, 0xaf, 0x31, 0x99,
		0x71, 0x7b, 0x9c, 0xf7, 0xe9, 0xc4, 0x78, 0x13, 0x52, 0x06, 0x9d, 0x90, 0x5f, 0xde, 0x11, 0xd4,
		0x02, 0xd4, 0x02, 0xd4, 0x02, 0xd4, 0xc2, 0x2a, 0x6a, 0xb1, 0x9b, 0x01, 0xb3, 0xd8, 0x02, 0xb3,
		0x00, 0xb3, 0xc8, 0x70, 0xc3, 0x0f, 0x98, 0x85, 0xbd, 0x4b, 0xa4, 0xb6, 0x05, 0x62, 0x01, 0x62,
		0x91, 0x23, 0x62, 0x11, 0x71, 0x4a, 0xbb, 0x91, 0x30, 0xcf, 0x27, 0xc6, 0x37, 0x32, 0x9f, 0x07,
		0xe9, 0xa3, 0x3b, 0xb0, 0x15, 0xb0, 0x15, 0xb0, 0x15, 0xb0, 0x15, 0x7b, 0xd8, 0x0a, 0xaa, 0x02,
		0xb2, 0x8c, 0x77, 0x8e, 0x47, 0x7d, 0xf2, 0x98, 0x59, 0xd4, 0x1b, 0xdd, 0xce, 0x7c, 0xec, 0x43,
		0x05, 0x00, 0x02, 0x1f, 0x02, 0x1f, 0x02, 0x9f, 0x45, 0x81, 0x0f, 0x15, 0x00, 0x89, 0xff, 0x40,
		0xa7, 0xd3, 0x22, 0xc2, 0x40, 0xa7, 0x53, 0x5b, 0x22, 0x6b, 0xa0, 0xd3, 0x6d, 0x6e, 0x57, 0x2a,
		0x10, 0xea, 0xf2, 0x36, 0xfa, 0x7a, 0x0b, 0x75, 0x59, 0x65, 0xfe, 0x4d, 0x67, 0xfc, 0x51, 0xb2,
		0x0c, 0xc2, 0x02, 0xc2, 0x02, 0xc2, 0x62, 0x33, 0x61, 0x41, 0x5d, 0x01, 0xf8, 0x4a, 0x66, 0x60,
		0x14, 0x15, 0xcb, 0xe0, 0x2b, 0x6f, 0x2c, 0x91, 0xcc, 0x1a, 0x84, 0x82, 0xae, 0x80, 0xae, 0x24,
		0x59, 0x26, 0xf7, 0x8c, 0x8b, 0x1e, 0xf1, 0x9d, 0x51, 0x63, 0x1b, 0xf3, 0xac, 0xe5, 0xe5, 0x0d,
		0x41, 0x2b, 0x40, 0x2b, 0x40, 0x2b, 0x40, 0x2b, 0xac, 0xa1, 0x15, 0x2c, 0x32, 0xec, 0xbb, 0x66,
		0xfd, 0x57, 0x75, 0xcf, 0xe0, 0x3d, 0x46, 0xdf, 0xcc, 0x7a, 0x6e, 0x31, 0x9d, 0x99, 0xfb, 0x7a,
		0x06, 0x73, 0x33, 0x37, 0x47, 0xbb, 0xd9, 0xf4, 0x47, 0x15, 0x94, 0x07, 0x99, 0x9d, 0x39, 0x51,
		0xfe, 0xcf, 0xfb, 0xf7, 0xdf, 0x2b, 0xce, 0xde, 0xf5, 0xef, 0xef, 0x55, 0x67, 0xef, 0x7a, 0xf8,
		0x63, 0x75, 0xf0, 0x7f, 0xc3, 0x9f, 0x6b, 0xdf, 0x2b, 0x4e, 0x7d, 0xfc, 0xf3, 0xd6, 0xf7, 0x8a,
		0xb3, 0x75, 0xfd, 0xe1, 0xc7, 0x8f, 0x4f, 0x1f, 0xfe, 0xd9, 0x7c, 0x4a, 0x7f, 0xe1, 0xbf, 0xca,
		0xb6, 0x77, 0x79, 0xff, 0x58, 0x20, 0x23, 0xda, 0x86, 0x11, 0xe9, 0x35, 0x22, 0xe2, 0xb4, 0x1b,
		0xce, 0xd1, 0xf5, 0x3f, 0xd5, 0x8f, 0xf5, 0xa7, 0xfd, 0x0f, 0xff, 0xec, 0x3c, 0xbd, 0xfc, 0xc7,
		0xdf, 0x8b, 0x7e, 0xad, 0xfa, 0x71, 0xe7, 0x69, 0x7f, 0xc9, 0x7f, 0xd9, 0x7e, 0xda, 0x4f, 0x38,
		0xc6, 0xd6, 0xd3, 0xfb, 0xb9, 0x5f, 0xed, 0xff, 0x7b, 0x6d, 0xd9, 0x05, 0xf5, 0x25, 0x17, 0x6c,
		0x2e, 0xbb, 0x60, 0x73, 0xc9, 0x05, 0x4b, 0x1f, 0xa9, 0xb6, 0xe4, 0x82, 0xad, 0xa7, 0xdf, 0x73,
		0xbf, 0xff, 0x7e, 0xf1, 0xaf, 0x6e, 0x3f, 0x7d, 0xf8, 0xbd, 0xec, 0xbf, 0xed, 0x3c, 0xfd, 0xde,
		0xff, 0x50, 0x00, 0x97, 0x62, 0x1b, 0xdf, 0x35, 0x84, 0xec, 0x32, 0xe9, 0x93, 0x9d, 0x69, 0x7f,
		0xec, 0x4c, 0xfb, 0x62, 0x67, 0xd3, 0x0f, 0xdb, 0x2e, 0xb1, 0xc3, 0x67, 0xc1, 0x4f, 0xc7, 0x0f,
		0xdd, 0x2c, 0xda, 0x4c, 0x2d, 0xb8, 0x27, 0x24, 0x0f, 0x48, 0x1e, 0x90, 0x3c, 0x20, 0x79, 0x40,
		0xf2, 0x80, 0xe4, 0x01, 0xc9, 0x03, 0x92, 0x07, 0x24, 0x0f, 0x48, 0x1e, 0x90, 0x3c, 0x20, 0x79,
		0x40, 0xf2, 0x40, 0x8a, 0xdf, 0x20, 0xeb, 0x1d, 0x1c, 0x6b, 0xc3, 0x1d, 0xe6, 0x65, 0x47, 0x7a,
		0xa7, 0xb7, 0x04, 0xe7, 0x05, 0xe7, 0x05, 0xe7, 0x05, 0xe7, 0xb5, 0x86, 0xf3, 0xa2, 0x7a, 0x38,
		0x47, 0x48, 0x1d, 0xd5, 0xc3, 0xfa, 0xee, 0x87, 0xea, 0x61, 0x6b, 0x97, 0x08, 0xba, 0x92, 0x81,
		0x5a, 0xe4, 0x64, 0x44, 0xed, 0xa7, 0x81, 0xf6, 0x3a, 0x7d, 0xc0, 0x43, 0x3d, 0x23, 0xe1, 0xca,
		0x30, 0xdd, 0x49, 0x74, 0x68, 0xf5, 0xbd, 0x4f, 0x82, 0xfd, 0xd9, 0xa3, 0x45, 0x07, 0xc0, 0x6e,
		0x7f, 0x70, 0xc0, 0xe8, 0xf0, 0xc7, 0xe9, 0x31, 0xa3, 0xcf, 0xfe, 0x3e, 0x77, 0xd8, 0xa8, 0x89,
		0x83, 0x27, 0x27, 0xef, 0x74, 0x48, 0x63, 0x97, 0xb3, 0x68, 0x74, 0x2e, 0x6b, 0xb9, 0xe1, 0x79,
		0xac, 0xff, 0x33, 0xf1, 0x4b, 0xdf, 0x2e, 0x2e, 0x5a, 0x25, 0x8f, 0x08, 0x52, 0x6a, 0x87, 0xbc,
		0x74, 0xdc, 0xba, 0xdf, 0x2e, 0x4d, 0xdf, 0xd8, 0x30, 0xc1, 0xab, 0x82, 0xe0, 0x81, 0xe0, 0x81,
		0xe0, 0x15, 0x9f, 0xe0, 0x99, 0x3a, 0x5f, 0x73, 0x4e, 0x0d, 0xcb, 0xa0, 0x06, 0x64, 0xa9, 0x2c,
		0x66, 0xbc, 0x16, 0x64, 0x99, 0x37, 0x3f, 0x0a, 0xf9, 0xd0, 0x8d, 0x87, 0xc1, 0x4b, 0x07, 0xfe,
		0xb1, 0x14, 0x53, 0x11, 0x97, 0xc4, 0x1d, 0x2d, 0x8d, 0x1e, 0xb3, 0xd4, 0x7f, 0xcc, 0xd2, 0xe0,
		0x31, 0x7f, 0x04, 0xd9, 0xa4, 0x47, 0x32, 0x02, 0xd6, 0xc6, 0xdd, 0x7e, 0x96, 0xee, 0x3f, 0xf3,
		0x30, 0x90, 0x75, 0x38, 0x58, 0x59, 0x58, 0x58, 0x59, 0x78, 0x58, 0x45, 0x98, 0xc8, 0x88, 0x86,
		0x19, 0xb6, 0x37, 0xe3, 0xfa, 0xe0, 0x9c, 0xb5, 0x65, 0x52, 0x1b, 0x33, 0x07, 0x87, 0xf7, 0x32,
		0xb8, 0x57, 0x26, 0xb5, 0x32, 0x66, 0x19, 0xda, 0x1b, 0x33, 0x97, 0x69, 0xed, 0xcc, 0xdc, 0x1c,
		0xee, 0x66, 0x78, 0xcf, 0xac, 0xcb, 0x00, 0x26, 0x37, 0x2e, 0x5a, 0x4d, 0x8d, 0x59, 0xd5, 0x27,
		0x63, 0x77, 0xb9, 0x5a, 0xe3, 0xdb, 0x86, 0xf1, 0x65, 0x63, 0x7c, 0xa8, 0xc5, 0x29, 0x64, 0x2d,
		0x4e, 0xc6, 0xae, 0x08, 0xb5, 0x45, 0xd9, 0x0a, 0x2c, 0x39, 0x4f, 0x00, 0x5c, 0xeb, 0x4e, 0x00,
		0x04, 0x41, 0x28, 0xc8, 0x48, 0xa8, 0xd0, 0x1f, 0x90, 0xca, 0xb1, 0x7b, 0x47, 0xbb, 0x24, 0x22,
		0xe2, 0x6e, 0xa8, 0xd8, 0x47, 0x34, 0x70, 0x07, 0x2a, 0x80, 0x33, 0x23, 0xdb, 0x2f, 0xfa, 0x71,
		0x63, 0x56, 0xb3, 0x1f, 0xa8, 0xf5, 0x53, 0x9d, 0xfe, 0x75, 0x85, 0xfe, 0x5d, 0x3e, 0x67, 0x4f,
		0x23, 0xa8, 0xc8, 0xa0, 0xb6, 0x2c, 0xb3, 0x9a, 0x32, 0x43, 0xda, 0x93, 0x31, 0xad, 0xc9, 0xa4,
		0xb6, 0x64, 0x5c, 0x4b, 0x32, 0xad, 0x1d, 0x65, 0xa6, 0x15, 0x65, 0xa6, 0x0d, 0x65, 0xa1, 0x05,
		0xe5, 0x3b, 0x45, 0x6c, 0x4c, 0xdb, 0x99, 0xac, 0x76, 0x9f, 0x92, 0x36, 0xa7, 0x6d, 0x13, 0xeb,
		0x7d, 0xcc, 0x3b, 0x76, 0x0c, 0x8c, 0xdd, 0x1a, 0x05, 0xb5, 0x4f, 0x9f, 0x36, 0x86, 0x21, 0x6d,
		0x63, 0xde, 0x57, 0xe6, 0x35, 0x16, 0xbd, 0xcb, 0xd1, 0x4a, 0xeb, 0x3b, 0x0d, 0x93, 0x91, 0xc6,
		0xcc, 0x56, 0x76, 0xa3, 0x5b, 0xd7, 0x8d, 0x6e, 0x55, 0x37, 0xb3, 0x35, 0x5d, 0xd7, 0x62, 0x30,
		0x04, 0x48, 0x33, 0x05, 0xa2, 0x1a, 0x3d, 0x59, 0x39, 0x16, 0xbc, 0xe7, 0x8a, 0x60, 0xe4, 0x2a,
		0x8f, 0xc7, 0x4f, 0x75, 0x73, 0x31, 0x78, 0xaa, 0x6f, 0x3e, 0x09, 0x6e, 0x8e, 0xa3, 0xfb, 0xed,
		0x9b, 0xc6, 0xf0, 0x51, 0x6e, 0xbe, 0x71, 0x1e, 0x7d, 0x19, 0x3c, 0xc4, 0xbb, 0x7c, 0x78, 0x0a,
		0xb5, 0x11, 0x14, 0x97, 0x95, 0xee, 0xe5, 0x64, 0x7e, 0x19, 0xa9, 0x4d, 0x9b, 0xfc, 0xc7, 0x96,
		0xbb, 0x52, 0x72, 0x7a, 0xc6, 0x2e, 0x5f, 0x1a, 0xe4, 0xea, 0xf1, 0xe9, 0x5a, 0x7d, 0xb8, 0x56,
		0x9f, 0xad, 0xc7, 0x47, 0xcb, 0xce, 0x8e, 0x9e, 0xaa, 0x40, 0x35, 0x6b, 0xcb, 0xa8, 0xca, 0x4f,
		0xd1, 0x55, 0xbf, 0x52, 0xb7, 0x77, 0xdc, 0x2a, 0xf5, 0xef, 0x51, 0x6a, 0x93, 0x2e, 0xf3, 0x1f,
		0x4b, 0x43, 0x2f, 0xd1, 0xe3, 0x03, 0x5f, 0x54, 0x6a, 0x87, 0xfc, 0x47, 0xa0, 0xad, 0x8c, 0x4f,
		0x53, 0xb9, 0x9e, 0x36, 0xce, 0xac, 0x93, 0x23, 0x6b, 0xe7, 0xc4, 0xba, 0x39, 0xb0, 0x31, 0xce,
		0x6b, 0x8c, 0xe3, 0x9a, 0xe0, 0xb4, 0xab, 0x8d, 0xf2, 0xba, 0xca, 0xd7, 0xca, 0x83, 0x08, 0xac,
		0x6d, 0x65, 0x4c, 0x34, 0xb4, 0xfe, 0xa8, 0x9a, 0xe6, 0xee, 0x85, 0xc3, 0x69, 0x06, 0xae, 0x1f,
		0xc6, 0x2c, 0xe8, 0xf4, 0x1d, 0x8c, 0x20, 0x2c, 0xa0, 0x7c, 0x50, 0x27, 0x3c, 0x28, 0x37, 0x1b,
		0x80, 0xd1, 0xb8, 0x74, 0x47, 0x02, 0xcf, 0xa7, 0x5e, 0xe9, 0xf6, 0xb1, 0x24, 0xee, 0x58, 0xfc,
		0x23, 0x38, 0x6e, 0x4d, 0x2b, 0xd0, 0x74, 0x3d, 0x97, 0xde, 0x8a, 0x61, 0xed, 0xf2, 0x9d, 0x09,
		0xd9, 0xce, 0x98, 0x5c, 0x67, 0x4a, 0xa6, 0x33, 0x2e, 0xcf, 0x19, 0x97, 0xe5, 0x4c, 0xca, 0x71,
		0x4f, 0xc5, 0x20, 0x4c, 0x19, 0x33, 0x80, 0x6b, 0x59, 0x8c, 0xa9, 0x87, 0x98, 0x19, 0x25, 0x64,
		0x0a, 0xd6, 0x91, 0x96, 0xb7, 0xcb, 0x2d, 0xe3, 0xf4, 0x53, 0x96, 0xee, 0x8a, 0x94, 0x71, 0x59,
		0x75, 0x52, 0x8d, 0x4c, 0x66, 0xba, 0x2f, 0x9b, 0xfc, 0xfb, 0xa4, 0xf8, 0x36, 0x65, 0x77, 0x1c,
		0xcd, 0xd2, 0x7d, 0x93, 0x49, 0x80, 0x19, 0x5d, 0x9f, 0x72, 0x36, 0xe4, 0x42, 0xb2, 0x74, 0xe8,
		0x55, 0x09, 0xb1, 0xca, 0xa1, 0x54, 0x35, 0x64, 0x6a, 0x0b, 0x8d, 0xda, 0x42, 0xa0, 0x8e, 0x50,
		0x67, 0xd6, 0xda, 0x65, 0x51, 0x77, 0xd9, 0xbb, 0x73, 0x23, 0xc7, 0xf5, 0xd9, 0xf0, 0xe5, 0x24,
		0x27, 0x6c, 0xbc, 0x62, 0x66, 0x07, 0x93, 0xfc, 0xd2, 0x33, 0x47, 0x2e, 0xb6, 0x89, 0x1f, 0xcb,
		0x62, 0x62, 0xc5, 0x54, 0xb6, 0x32, 0xe6, 0xd5, 0x81, 0x71, 0xb5, 0x61, 0x5a, 0x5d, 0x18, 0x56,
		0x3b, 0x66, 0xd5, 0x8e, 0x51, 0x75, 0x62, 0xd2, 0x6c, 0x55, 0x58, 0xe5, 0xd4, 0xee, 0x64, 0xb5,
		0xdc, 0x86, 0xa1, 0x4f, 0x49, 0xa0, 0xb2, 0x5e, 0xc6, 0xd1, 0xaa, 0x9a, 0x15, 0x12, 0x92, 0x08,
		0x32, 0x5e, 0x6f, 0xb8, 0xed, 0xc0, 0xf1, 0xa8, 0xa0, 0xae, 0x70, 0x04, 0x27, 0x41, 0xdc, 0x1d,
		0x6e, 0xd5, 0x57, 0x75, 0x63, 0x4b, 0x87, 0x56, 0x77, 0x6a, 0x55, 0x38, 0x34, 0x38, 0x34, 0x38,
		0xb4, 0x34, 0xab, 0xa5, 0xc7, 0x02, 0xb1, 0x59, 0xd3, 0xe0, 0xcf, 0x14, 0x2a, 0x4f, 0x34, 0x35,
		0x12, 0xd2, 0x20, 0x8b, 0xea, 0x6c, 0x04, 0xa4, 0xb9, 0xe0, 0x6f, 0xd2, 0xa5, 0x45, 0xd7, 0x78,
		0x06, 0x7a, 0xb0, 0x68, 0xa8, 0x8d, 0xd0, 0xda, 0x68, 0xc7, 0xd4, 0x14, 0xd4, 0x6b, 0x7b, 0xf5,
		0xbd, 0xed, 0x9d, 0xda, 0xde, 0x56, 0x8e, 0xe7, 0x62, 0x45, 0xea, 0xda, 0x75, 0x8e, 0x61, 0x0d,
		0x0d, 0xc8, 0xad, 0x4f, 0x3d, 0x75, 0x10, 0x33, 0x1e, 0x48, 0x1d, 0xb2, 0xf4, 0xa3, 0x18, 0x50,
		0x0b, 0x50, 0x0b, 0x50, 0x0b, 0x68, 0xd8, 0xdc, 0x33, 0x76, 0x45, 0x4f, 0xdd, 0x57, 0xf5, 0x07,
		0x81, 0x83, 0x81, 0x83, 0x81, 0x83, 0x01, 0x2d, 0x2a, 0x30, 0x2d, 0xaa, 0xd6, 0x76, 0xc1, 0x8c,
		0x52, 0xcf, 0xc2, 0xe6, 0x1a, 0x91, 0xd3, 0xa2, 0x13, 0xa2, 0x75, 0xc9, 0x78, 0x8f, 0x92, 0xc4,
		0x39, 0x48, 0x77, 0x07, 0x94, 0x75, 0xee, 0x6e, 0x43, 0x1e, 0xcb, 0x67, 0xbc, 0xa7, 0x43, 0x20,
		0xe9, 0x6d, 0x0c, 0x7b, 0x21, 0xe9, 0x9d, 0x61, 0xd2, 0x7b, 0xbc, 0xa2, 0xd5, 0x99, 0xcb, 0x64,
		0x24, 0x35, 0xfa, 0x52, 0x05, 0x7d, 0x01, 0x7d, 0xb1, 0x81, 0xbe, 0xa8, 0x56, 0x77, 0xcb, 0x96,
		0x5f, 0x2d, 0x5d, 0x74, 0x52, 0xe5, 0x58, 0x9a, 0xcd, 0x50, 0x9b, 0x39, 0xea, 0x34, 0x4b, 0xed,
		0xe6, 0xa9, 0xdb, 0x4c, 0x8d, 0x99, 0xab, 0x31, 0xb3, 0x35, 0x61, 0xbe, 0x9a, 0xa0, 0x7f, 0x5e,
		0x36, 0x6d, 0x30, 0x03, 0x5b, 0x36, 0xb4, 0xd5, 0xf3, 0xeb, 0xe6, 0xf5, 0xd8, 0x18, 0x81, 0x8d,
		0x11, 0x19, 0xb9, 0x07, 0x3d, 0x6e, 0x42, 0xa3, 0xd4, 0x53, 0x32, 0xd2, 0x8f, 0xc4, 0x74, 0x73,
		0x44, 0x13, 0xcd, 0x0f, 0x8d, 0x35, 0x37, 0x44, 0xf3, 0xc2, 0x42, 0x34, 0x2f, 0xbc, 0xce, 0xcb,
		0x5e, 0x26, 0x0d, 0xd0, 0x6f, 0xd8, 0xb6, 0x9f, 0x3c, 0x52, 0x3e, 0x31, 0x4e, 0xed, 0xe1, 0x7e,
		0xc1, 0x3d, 0x10, 0xfe, 0x11, 0xfe, 0x11, 0xfe, 0xd7, 0x28, 0xfc, 0x47, 0x77, 0x8f, 0x31, 0xc2,
		0xff, 0xb3, 0xf8, 0xf7, 0x32, 0xec, 0xd5, 0x9e, 0x3e, 0xfc, 0x8f, 0x0f, 0xff, 0xab, 0x88, 0x71,
		0x0a, 0x4d, 0x8a, 0x16, 0x27, 0x95, 0x26, 0x79, 0x98, 0xc9, 0x4f, 0x52, 0x79, 0x26, 0x7d, 0xdf,
		0x5b, 0xe1, 0x5b, 0xeb, 0x10, 0x0a, 0xf4, 0x09, 0x04, 0x9a, 0x90, 0x01, 0xf4, 0x3f, 0xe8, 0x7f,
		0x76, 0x7a, 0x3d, 0x6d, 0x91, 0xdc, 0x40, 0x23, 0x51, 0x9d, 0x8d, 0x43, 0x17, 0x34, 0x0a, 0x65,
		0x91, 0x8d, 0xee, 0x73, 0xd8, 0x5e, 0x5b, 0x9b, 0x07, 0xd5, 0x71, 0x9e, 0xa6, 0xf6, 0x24, 0x4a,
		0x0d, 0x4e, 0x14, 0x4e, 0xd4, 0x22, 0x27, 0x8a, 0x24, 0x0a, 0x54, 0x14, 0xa8, 0x28, 0x50, 0x51,
		0x72, 0xa3, 0xa2, 0x20, 0x89, 0x82, 0x24, 0x0a, 0x92, 0x28, 0x7a, 0xc5, 0x29, 0x0d, 0xd0, 0x8f,
		0xc5, 0xa3, 0xbe, 0xfa, 0x06, 0xa2, 0xfc, 0x64, 0x68, 0x04, 0x7b, 0x04, 0x7b, 0x04, 0xfb, 0x35,
		0x0a, 0xf6, 0xea, 0xfb, 0x4d, 0x97, 0xc6, 0xf9, 0x2a, 0x32, 0xd8, 0xe9, 0xb4, 0x2f, 0x64, 0xb0,
		0xe1, 0x8e, 0xe1, 0x8e, 0xd7, 0xda, 0x1d, 0x23, 0x83, 0xbd, 0xc6, 0x19, 0x6c, 0x0d, 0x71, 0x6a,
		0x9c, 0xe2, 0x75, 0xf4, 0x28, 0xfd, 0x73, 0xeb, 0xf3, 0xc5, 0xf8, 0x88, 0x4f, 0x88, 0x4f, 0x88,
		0x4f, 0x6b, 0x14, 0x9f, 0x68, 0xd0, 0xeb, 0xd2, 0xe1, 0x09, 0x38, 0x26, 0xc2, 0x53, 0x5d, 0xe3,
		0x98, 0xcd, 0xa0, 0xd7, 0xed, 0x7f, 0x84, 0xa7, 0x02, 0xb9, 0xf7, 0x90, 0xb3, 0x8e, 0xce, 0x8e,
		0x15, 0x13, 0x27, 0x34, 0x1c, 0x17, 0xee, 0x1c, 0xee, 0x1c, 0xee, 0x7c, 0x8d, 0xdc, 0xf9, 0x04,
		0xce, 0x69, 0x75, 0x00, 0xeb, 0xe3, 0xd2, 0x51, 0x73, 0x9a, 0xb8, 0xe6, 0x54, 0xc3, 0xc9, 0xfe,
		0x38, 0x1a, 0x33, 0xd5, 0x28, 0x38, 0x1a, 0xd3, 0xa4, 0xd9, 0x98, 0x35, 0x97, 0x2c, 0xce, 0x2d,
		0x3a, 0x1b, 0xdf, 0x0b, 0x6d, 0x9c, 0x0c, 0x4d, 0x67, 0x1e, 0x3a, 0x39, 0x8d, 0xce, 0x62, 0x27,
		0xde, 0x3d, 0xe5, 0x82, 0xc5, 0xb4, 0x2b, 0x73, 0x64, 0xcb, 0x04, 0x30, 0x2c, 0x1c, 0x0d, 0xfd,
		0x9d, 0x8c, 0xc1, 0x77, 0xf4, 0x77, 0xca, 0xb0, 0xbf, 0x93, 0x62, 0x93, 0x19, 0x3d, 0xcd, 0x65,
		0xd0, 0xdb, 0xc9, 0x00, 0xfb, 0x45, 0x6f, 0x27, 0x73, 0x78, 0x4a, 0xb9, 0xb7, 0xd3, 0x20, 0x92,
		0xde, 0x13, 0x5f, 0xe3, 0xce, 0xae, 0xf1, 0x88, 0xd8, 0xdf, 0x95, 0x99, 0x60, 0x85, 0xad, 0x09,
		0xd8, 0xdf, 0xf5, 0xf6, 0x6a, 0x53, 0xee, 0x3e, 0xfd, 0xd2, 0x36, 0x75, 0xec, 0xee, 0xd2, 0xd3,
		0x8d, 0x7a, 0xfc, 0x47, 0xa3, 0x4c, 0xa7, 0xb3, 0x3b, 0xb5, 0x66, 0xa7, 0x36, 0x37, 0xac, 0xe6,
		0x3e, 0xc9, 0x93, 0x71, 0x0d, 0xf4, 0x4b, 0xd6, 0x64, 0x1e, 0x2f, 0xf5, 0x11, 0xeb, 0xa6, 0x4a,
		0xf7, 0x61, 0x3f, 0x99, 0xcc, 0x59, 0x4e, 0xa4, 0xdf, 0x6b, 0x0b, 0x77, 0x7f, 0xfa, 0xac, 0x4d,
		0x05, 0xeb, 0x6a, 0xdc, 0x00, 0x3a, 0x19, 0x11, 0x40, 0x0b, 0x40, 0x0b, 0x40, 0x0b, 0x40, 0x0b,
		0x40, 0x0b, 0x40, 0x0b, 0x40, 0x0b, 0x40, 0x6b, 0xbd, 0x81, 0x56, 0xdc, 0x8b, 0x22, 0x2d, 0x7b,
		0x44, 0xa6, 0x9d, 0x36, 0xc6, 0x23, 0xaa, 0x36, 0x1b, 0xd0, 0x73, 0x4e, 0x3e, 0x80, 0x1b, 0x80,
		0x1b, 0x80, 0x9b, 0x11, 0xe0, 0xa6, 0x6f, 0x43, 0x9e, 0xa6, 0x8d, 0x78, 0xb6, 0x54, 0xdd, 0xe4,
		0xb0, 0xae, 0x63, 0x51, 0xb6, 0x5c, 0xa9, 0xf9, 0x5e, 0x36, 0x87, 0x73, 0xaa, 0xed, 0x1d, 0xd1,
		0xd2, 0x1d, 0x4a, 0x5b, 0x16, 0xb4, 0x86, 0x2c, 0xa8, 0xb9, 0x80, 0x81, 0x2c, 0xe8, 0x14, 0x58,
		0x21, 0x0b, 0x0a, 0x8c, 0x07, 0x8c, 0x07, 0x8c, 0x07, 0x71, 0x0e, 0xe2, 0x1c, 0xc4, 0x39, 0x88,
		0x73, 0x10, 0xe7, 0x72, 0x2a, 0xce, 0x21, 0x0b, 0x0a, 0xa0, 0x05, 0xa0, 0x05, 0xa0, 0x05, 0xa0,
		0x05, 0xa0, 0x05, 0xa0, 0x05, 0xa0, 0x05, 0xa0, 0x65, 0x08, 0x68, 0x21, 0x0b, 0x0a, 0xe0, 0x06,
		0xe0, 0x06, 0xe0, 0x26, 0xb3, 0xda, 0x90, 0x05, 0x2d, 0x78, 0x16, 0x54, 0xa1, 0x1d, 0x04, 0x76,
		0x9e, 0xa7, 0xfa, 0xd4, 0x65, 0xa9, 0x0c, 0x70, 0xb2, 0x16, 0x02, 0x83, 0xbf, 0xf3, 0xc6, 0xb3,
		0xdb, 0xe5, 0x60, 0xcf, 0xbb, 0x5c, 0x02, 0x5b, 0x29, 0x71, 0xad, 0xbc, 0xab, 0xbd, 0x86, 0x5d,
		0xed, 0x2b, 0x8c, 0xd1, 0x85, 0xde, 0xd5, 0xde, 0xeb, 0xdb, 0x6f, 0xac, 0x63, 0x5f, 0xfb, 0x68,
		0x24, 0xec, 0x6c, 0x47, 0x4d, 0xc7, 0x4a, 0xe0, 0xae, 0x75, 0x35, 0x1d, 0x8e, 0xc7, 0x62, 0x97,
		0x70, 0x8f, 0x7a, 0x4e, 0xf4, 0x53, 0xc4, 0x3a, 0x8b, 0x3b, 0x5e, 0x0e, 0x0d, 0x0e, 0x0b, 0x0e,
		0x0b, 0x0e, 0x9b, 0x23, 0x0e, 0x3b, 0x0a, 0x97, 0xdb, 0x75, 0x8d, 0x2c, 0x76, 0x17, 0xf9, 0x87,
		0x95, 0xf8, 0xb5, 0xb9, 0x61, 0x91, 0x7f, 0xb0, 0x6e, 0xaa, 0xaa, 0xbb, 0xf5, 0xfa, 0xf6, 0x4e,
		0xbd, 0x5e, 0xd9, 0xd9, 0xdc, 0xa9, 0xec, 0x6d, 0x6d, 0x55, 0xb7, 0xab, 0xc8, 0x44, 0xa4, 0xfe,
		0x63, 0x63, 0x26, 0x82, 0x05, 0x0e, 0xe5, 0x3c, 0xe4, 0xfa, 0x31, 0xd8, 0xcc, 0xb0, 0xc0, 0x5f,
		0xc0, 0x5f, 0xc0, 0x5f, 0xc0, 0x5f, 0xc0, 0x5f, 0xc0, 0x5f, 0xc0, 0x5f, 0xc0, 0x5f, 0xc0, 0x5f,
		0xb3, 0xf8, 0xab, 0x1d, 0xf2, 0x5f, 0x43, 0xb1, 0x2a, 0x74, 0x05, 0xd5, 0x8c, 0xc2, 0xe6, 0x06,
		0x07, 0x16, 0x03, 0x16, 0x03, 0x16, 0x03, 0x16, 0x03, 0x16, 0x03, 0x16, 0x03, 0x16, 0x03, 0x16,
		0x03, 0x16, 0x5b, 0x8c, 0xc5, 0xb4, 0xeb, 0x61, 0x2f, 0x86, 0x06, 0x0e, 0x03, 0x0e, 0x03, 0x0e,
		0x03, 0x0e, 0x03, 0x0e, 0x03, 0x0e, 0x03, 0x0e, 0x03, 0x0e, 0x03, 0x0e, 0x9b, 0xc5, 0x61, 0x06,
		0x94, 0x30, 0xe8, 0x5f, 0xc0, 0x5d, 0xc0, 0x5d, 0xc0, 0x5d, 0xc0, 0x5d, 0xc0, 0x5d, 0xc0, 0x5d,
		0xc0, 0x5d, 0xc0, 0x5d, 0x0b, 0x70, 0x97, 0x76, 0xd5, 0x0b, 0x5a, 0x17, 0x30, 0x17, 0x30, 0x17,
		0x30, 0x17, 0x30, 0x17, 0x30, 0x17, 0x30, 0x17, 0x30, 0x17, 0x30, 0xd7, 0xf3, 0x69, 0x09, 0x7b,
		0xc2, 0xd8, 0x46, 0xc8, 0x05, 0x63, 0x03, 0x89, 0x01, 0x89, 0x01, 0x89, 0x01, 0x89, 0x01, 0x89,
		0x01, 0x89, 0x01, 0x89, 0x01, 0x89, 0x01, 0x89, 0x3d, 0x43, 0x62, 0x26, 0xb6, 0x42, 0xbe, 0x18,
		0x17, 0x08, 0x0c, 0x08, 0x0c, 0x08, 0x0c, 0x08, 0x0c, 0x08, 0x0c, 0x08, 0x0c, 0x08, 0x0c, 0x08,
		0x0c, 0x08, 0xec, 0x19, 0x02, 0x33, 0xb7, 0x19, 0x72, 0xe1, 0xe8, 0x40, 0x63, 0x40, 0x63, 0x40,
		0x63, 0x40, 0x63, 0x40, 0x63, 0x40, 0x63, 0x40, 0x63, 0x40, 0x63, 0x40, 0x63, 0x4b, 0xd0, 0x98,
		0x7e, 0x4d, 0x0c, 0xfb, 0x21, 0x81, 0xc4, 0x80, 0xc4, 0x80, 0xc4, 0x80, 0xc4, 0x80, 0xc4, 0x80,
		0xc4, 0x80, 0xc4, 0x80, 0xc4, 0x5e, 0x43, 0x62, 0x26, 0xd4, 0x30, 0x68, 0x60, 0x40, 0x5e, 0x40,
		0x5e, 0x40, 0x5e, 0x40, 0x5e, 0x40, 0x5e, 0x40, 0x5e, 0x40, 0x5e, 0x40, 0x5e, 0x8b, 0x90, 0x97,
		0x7e, 0xe5, 0x0b, 0x7a, 0x17, 0x50, 0x17, 0x50, 0x17, 0x50, 0x17, 0x50, 0x17, 0x50, 0x17, 0x50,
		0x17, 0x50, 0x57, 0x21, 0x51, 0xd7, 0xba, 0x1f, 0xed, 0x3d, 0x38, 0x29, 0x79, 0x43, 0xf1, 0x5c,
		0xd8, 0x52, 0x9a, 0x13, 0xa7, 0x0f, 0xc6, 0xf7, 0xca, 0xea, 0xe8, 0x70, 0x89, 0xd3, 0x91, 0xbd,
		0x3b, 0x37, 0x72, 0x5c, 0x9f, 0x0d, 0xa1, 0x88, 0xe2, 0xa1, 0xbb, 0xb3, 0x83, 0xc9, 0x9e, 0x63,
		0x4a, 0xdb, 0xa4, 0xe7, 0x0f, 0x60, 0x51, 0x9b, 0xf8, 0x31, 0x55, 0x3c, 0xbf, 0xb7, 0x82, 0xf3,
		0x7b, 0x71, 0x7e, 0xaf, 0x0d, 0x0e, 0x53, 0x19, 0x3e, 0x4f, 0x56, 0xcb, 0x6d, 0x18, 0xfa, 0x94,
		0x04, 0x2a, 0xeb, 0x65, 0x7c, 0xf8, 0x75, 0x35, 0xcf, 0x8e, 0xab, 0x17, 0x39, 0xc4, 0xf3, 0xb8,
		0xe3, 0x51, 0x41, 0x5d, 0xe1, 0x08, 0x4e, 0x82, 0xb8, 0xcb, 0x84, 0x86, 0xb3, 0xc3, 0x97, 0x0f,
		0xad, 0xee, 0xd4, 0xaa, 0x70, 0x68, 0x70, 0x68, 0x70, 0x68, 0x69, 0x56, 0x4b, 0x8f, 0x05, 0x62,
		0xb3, 0xa6, 0xc1, 0x9f, 0xed, 0x28, 0x0c, 0xa1, 0x87, 0xf4, 0x6b, 0x50, 0x47, 0x74, 0x92, 0x7c,
		0xcd, 0x8c, 0x51, 0x37, 0xa9, 0x37, 0x41, 0x07, 0x35, 0x90, 0x78, 0xad, 0xe4, 0xdd, 0xd4, 0x14,
		0xd4, 0x6b, 0x7b, 0xf5, 0xbd, 0xed, 0x9d, 0xda, 0xde, 0x56, 0x8e, 0xe7, 0x62, 0x45, 0x54, 0xf8,
		0x3a, 0xc7, 0xb0, 0x86, 0x06, 0xe4, 0xd6, 0xa7, 0x9e, 0x3a, 0x88, 0x19, 0x0f, 0xa4, 0x0e, 0x59,
		0xfa, 0x51, 0x0c, 0xa8, 0x05, 0xa8, 0x05, 0xa8, 0x05, 0x34, 0x6c, 0xee, 0x19, 0xbb, 0xa2, 0xa7,
		0xee, 0xab, 0xfa, 0x83, 0xc0, 0xc1, 0xc0, 0xc1, 0xc0, 0xc1, 0x80, 0x16, 0x15, 0x98, 0x16, 0x55,
		0x6b, 0xbb, 0x60, 0x46, 0xa9, 0x67, 0x61, 0x73, 0x8d, 0xc8, 0x69, 0xd1, 0x09, 0xd1, 0x3b, 0x83,
		0x0b, 0x52, 0x35, 0xe7, 0xa8, 0x3d, 0xd7, 0x98, 0x2e, 0x24, 0x25, 0xff, 0x36, 0x29, 0xbe, 0x4b,
		0xb9, 0x17, 0x04, 0xbd, 0xee, 0x2d, 0xe5, 0x12, 0x8c, 0x72, 0x1a, 0x68, 0xa6, 0x63, 0xa4, 0x9c,
		0x91, 0x31, 0x80, 0x4d, 0x79, 0x99, 0x2c, 0x28, 0x53, 0x01, 0x63, 0xcf, 0x40, 0x58, 0x5b, 0x22,
		0xaa, 0xaa, 0x82, 0x2f, 0x6d, 0xa0, 0x4b, 0x1b, 0xd8, 0x9a, 0x03, 0x59, 0xed, 0x72, 0xce, 0x2c,
		0xfe, 0x90, 0x71, 0xb9, 0xc9, 0x76, 0xc7, 0x2b, 0x4c, 0x91, 0xb8, 0x8c, 0xc6, 0x51, 0xe3, 0x2e,
		0xd5, 0xa2, 0x70, 0x97, 0x36, 0xb8, 0x4b, 0x46, 0x66, 0xb5, 0x1a, 0xee, 0x22, 0x6b, 0x6e, 0xda,
		0xc4, 0x4d, 0xcd, 0x22, 0xe7, 0xf4, 0xc5, 0xf4, 0x14, 0x9d, 0x68, 0xe6, 0x0f, 0xf9, 0xaf, 0x05,
		0x6f, 0xa3, 0x16, 0x5c, 0xc7, 0xc0, 0x1a, 0x1d, 0x82, 0x26, 0x26, 0x91, 0xbb, 0x5a, 0x70, 0x75,
		0x35, 0x75, 0x2e, 0xea, 0x56, 0xd7, 0xa2, 0x10, 0xb3, 0xf9, 0x30, 0xe0, 0xa6, 0xf2, 0xfa, 0x8c,
		0xbe, 0x70, 0x1c, 0xba, 0x0e, 0x7d, 0x10, 0xfb, 0x82, 0xfa, 0xb4, 0x4b, 0x05, 0x7f, 0xfc, 0xff,
		0xd9, 0xfb, 0xda, 0xde, 0xb6, 0x75, 0xac, 0xdb, 0xef, 0xf9, 0x15, 0x86, 0x31, 0x1f, 0xda, 0x07,
		0x75, 0x63, 0x3b, 0x8e, 0xf3, 0x02, 0x3c, 0xb8, 0x48, 0x9b, 0xf4, 0x4c, 0x70, 0x93, 0x36, 0x68,
		0x72, 0x7a, 0x66, 0xd0, 0x7a, 0x02, 0x46, 0xa2, 0x1d, 0xa2, 0xb2, 0xa4, 0xa1, 0xe8, 0x34, 0xb9,
		0xa7, 0xf9, 0xef, 0x17, 0xb6, 0xe5, 0x77, 0x3b, 0xb1, 0xa4, 0x4d, 0x4a, 0xb4, 0x57, 0x3f, 0x9c,
		0x93, 0x37, 0x91, 0x32, 0xc9, 0xbd, 0xf6, 0xda, 0x8b, 0x9b, 0x9b, 0x95, 0xc0, 0xaf, 0x38, 0xf7,
		0x03, 0x01, 0x89, 0xd4, 0x45, 0x0f, 0x20, 0x9c, 0xd0, 0x47, 0x9b, 0x76, 0xcf, 0xad, 0xcd, 0xc9,
		0xb9, 0x9d, 0x84, 0x8e, 0xbb, 0x31, 0x55, 0x2e, 0xf0, 0x56, 0xc6, 0xf8, 0x73, 0x54, 0x24, 0x6f,
		0x67, 0x8f, 0x0d, 0x66, 0x9b, 0x43, 0x88, 0x80, 0x10, 0x01, 0x21, 0x82, 0xf6, 0xc8, 0x9c, 0x36,
		0x42, 0x27, 0x32, 0x43, 0x10, 0x7a, 0x10, 0x7a, 0xbb, 0x09, 0x7d, 0x56, 0xb3, 0x5e, 0xf4, 0xb1,
		0x74, 0xcb, 0x63, 0xc1, 0xdf, 0x52, 0x2d, 0x0f, 0xe2, 0x5d, 0x40, 0x2a, 0xe3, 0xd7, 0x01, 0x02,
		0xda, 0xc0, 0x40, 0x17, 0x28, 0x68, 0x07, 0x07, 0xed, 0x20, 0xa1, 0x13, 0x2c, 0x68, 0x40, 0x83,
		0x08, 0x3c, 0xe8, 0x55, 0x81, 0x85, 0xd5, 0xea, 0x71, 0xd6, 0x4e, 0x4f, 0xb2, 0x5f, 0xf4, 0xf8,
		0x07, 0x84, 0x6d, 0x5e, 0x8d, 0x43, 0xaa, 0xfe, 0x34, 0x1f, 0x4f, 0x85, 0x50, 0x73, 0x3f, 0x88,
		0xbf, 0x1f, 0x9c, 0x30, 0x2c, 0xc8, 0xb1, 0x55, 0x8a, 0xec, 0x80, 0xa8, 0x77, 0xa7, 0x11, 0xff,
		0x67, 0x5a, 0x87, 0x0b, 0x80, 0x0b, 0x80, 0x0b, 0x80, 0x0b, 0xb0, 0xd6, 0x05, 0x7c, 0x9f, 0xb8,
		0x80, 0xff, 0x75, 0x7a, 0x52, 0x72, 0x5f, 0xbd, 0x79, 0xbb, 0xfb, 0xfe, 0xfd, 0x44, 0x6d, 0x6b,
		0xc5, 0x8f, 0x4c, 0xe3, 0x5e, 0xb4, 0xe4, 0x67, 0xe3, 0x96, 0x5d, 0xfe, 0x58, 0x18, 0x6f, 0x92,
		0x6b, 0x34, 0x93, 0x59, 0x13, 0x1f, 0xfd, 0xa3, 0x0f, 0x70, 0xb5, 0x69, 0xe4, 0x2b, 0xc0, 0x8c,
		0x40, 0x2b, 0x5f, 0x8a, 0x62, 0x79, 0x07, 0xbc, 0xad, 0xac, 0x02, 0x1c, 0x8d, 0x96, 0x3e, 0xa1,
		0x3e, 0x5a, 0x34, 0xf5, 0x19, 0x89, 0x39, 0x93, 0xc2, 0x9e, 0x7d, 0xd4, 0x9f, 0x33, 0x15, 0xd4,
		0x60, 0x8a, 0xd3, 0x69, 0x7e, 0xc3, 0xe6, 0x0a, 0x26, 0xf9, 0xd5, 0x21, 0xf9, 0x41, 0xf2, 0x83,
		0xe4, 0x07, 0xc9, 0x0f, 0xf1, 0x1e, 0xe2, 0x3d, 0xc4, 0x7b, 0x88, 0xf7, 0x20, 0xf9, 0x41, 0xf2,
		0x83, 0x0b, 0x80, 0x0b, 0x80, 0x0b, 0x80, 0x0b, 0x80, 0xe4, 0xa7, 0x39, 0x9a, 0xb1, 0x51, 0xcf,
		0x49, 0x71, 0x88, 0x90, 0x50, 0xce, 0xd9, 0xf6, 0x72, 0xb1, 0xab, 0xa6, 0xc5, 0x44, 0xe1, 0xd8,
		0x3f, 0xc7, 0x7d, 0xdf, 0x8e, 0xff, 0xe8, 0x2b, 0x6f, 0x17, 0x39, 0x79, 0x36, 0x9b, 0x84, 0x47,
		0x22, 0xdd, 0x91, 0x25, 0xcb, 0xd6, 0x91, 0x2c, 0xab, 0x8f, 0x6a, 0x21, 0x59, 0x96, 0x4c, 0x62,
		0xc3, 0x79, 0xba, 0x7c, 0x62, 0x31, 0x68, 0xf1, 0x85, 0x8e, 0xb1, 0x70, 0x9e, 0xee, 0xf5, 0xd5,
		0x86, 0xf3, 0x74, 0x1b, 0xc9, 0x54, 0x33, 0x84, 0x0c, 0xa8, 0xe6, 0xb2, 0xc6, 0x00, 0x97, 0x53,
		0x31, 0xe3, 0xa4, 0xa4, 0x5f, 0x5b, 0xe1, 0x98, 0x1d, 0xc2, 0x89, 0x4a, 0x3b, 0x41, 0x84, 0x13,
		0x93, 0x60, 0x36, 0xd6, 0x9d, 0x85, 0xf5, 0x86, 0xfe, 0xf5, 0x81, 0x5c, 0x63, 0x10, 0x13, 0x86,
		0x4c, 0xa9, 0x42, 0xa4, 0x84, 0x21, 0x51, 0xe2, 0x10, 0x28, 0x0d, 0x13, 0x9a, 0x66, 0x3c, 0xfd,
		0xa9, 0x4c, 0x32, 0x8b, 0x29, 0xb9, 0x4d, 0x66, 0x0e, 0x93, 0x99, 0xab, 0xcc, 0x73, 0x92, 0xc1,
		0x07, 0xcf, 0xc9, 0x70, 0x93, 0x86, 0x1d, 0xe5, 0xc1, 0xcb, 0xa6, 0x2e, 0x1f, 0x95, 0x70, 0x8e,
		0x33, 0x10, 0xfe, 0xdc, 0x0b, 0x47, 0xa5, 0xf8, 0xa8, 0xa5, 0xad, 0x28, 0x1d, 0x95, 0x6c, 0xb9,
		0x9b, 0x21, 0x18, 0xa9, 0x49, 0xf5, 0x54, 0x61, 0xb4, 0xbe, 0xf3, 0x4b, 0x31, 0xdf, 0x23, 0x54,
		0x3e, 0x4a, 0xf1, 0x6c, 0xfc, 0xda, 0xe9, 0x92, 0x57, 0x89, 0xca, 0x8e, 0xd6, 0x9a, 0x04, 0x65,
		0x47, 0x9b, 0x28, 0x3b, 0xaa, 0x45, 0xe6, 0x18, 0x37, 0x87, 0xdb, 0x18, 0x0a, 0x33, 0x05, 0xcd,
		0xfd, 0xfd, 0x3d, 0x5c, 0xc4, 0xb0, 0xf0, 0xaf, 0x65, 0x32, 0x74, 0x27, 0xc0, 0xbe, 0x48, 0x49,
		0xe1, 0x77, 0x28, 0x4a, 0xba, 0x1f, 0x1a, 0x8a, 0xd1, 0x5b, 0x08, 0x25, 0x5f, 0x0d, 0x25, 0x13,
		0x88, 0x26, 0x6b, 0x04, 0x7e, 0x3b, 0x19, 0x06, 0xa4, 0x7c, 0xd2, 0xeb, 0xf4, 0x59, 0xd3, 0x40,
		0xd2, 0x7f, 0xdd, 0xb7, 0x25, 0x0c, 0x1c, 0xd7, 0xca, 0x41, 0xeb, 0x8f, 0xc8, 0xf1, 0xd4, 0xe8,
		0xac, 0x1b, 0x68, 0x9e, 0xf2, 0xc8, 0x91, 0x22, 0x8c, 0xe7, 0xb0, 0x7c, 0x7e, 0xf5, 0xd0, 0x28,
		0x31, 0xd7, 0x95, 0x3c, 0x8a, 0x4a, 0x6d, 0xd6, 0x15, 0xde, 0x53, 0x69, 0x38, 0x35, 0x3d, 0x39,
		0x98, 0xe8, 0x52, 0x3b, 0x90, 0x3f, 0xfc, 0xc9, 0xbb, 0xe8, 0x0e, 0x68, 0xab, 0x66, 0x02, 0xda,
		0x44, 0xf5, 0xfb, 0x37, 0x27, 0x9c, 0x4d, 0x52, 0x7f, 0x3f, 0xe7, 0x60, 0x56, 0x84, 0x0f, 0x8d,
		0xf4, 0xc1, 0xec, 0xe0, 0xe9, 0xa4, 0x55, 0x6a, 0x67, 0x4d, 0xe3, 0x8a, 0x49, 0xd6, 0xe5, 0x8a,
		0xcb, 0xa8, 0x6f, 0x03, 0x25, 0x75, 0xcf, 0x4b, 0x4b, 0xac, 0xe5, 0xfd, 0xb6, 0xd4, 0x5a, 0x0e,
		0x11, 0x30, 0x13, 0x5d, 0x68, 0xf1, 0x9c, 0xaf, 0xaf, 0xa7, 0xd0, 0x44, 0x8b, 0xed, 0xd1, 0x9a,
		0xf0, 0x68, 0xf0, 0x68, 0x85, 0xf4, 0x68, 0xcd, 0x4c, 0x1e, 0xad, 0xa9, 0xc5, 0xa3, 0x35, 0xe1,
		0xd1, 0xe0, 0xd1, 0x36, 0xdc, 0xa3, 0xbd, 0xf8, 0x17, 0xad, 0xd7, 0x82, 0xbd, 0x64, 0x51, 0x2f,
		0x4d, 0xb4, 0x5b, 0x5e, 0x6b, 0x63, 0xf2, 0xb5, 0xbd, 0xd2, 0x97, 0xa7, 0x72, 0xf5, 0xb0, 0xbc,
		0x80, 0x81, 0x6b, 0x6e, 0x87, 0x26, 0xda, 0x06, 0x5d, 0x13, 0x42, 0xd6, 0xde, 0xf6, 0x4c, 0x02,
		0x11, 0x89, 0x13, 0xbb, 0x92, 0x42, 0x40, 0x6a, 0x93, 0x4f, 0x6d, 0xe2, 0x69, 0x12, 0xab, 0xb2,
		0xe9, 0x21, 0xeb, 0xfa, 0xc2, 0x32, 0x73, 0xbb, 0xc2, 0xaf, 0xf4, 0xd7, 0x44, 0x2f, 0x4a, 0xbe,
		0xa5, 0x3e, 0xf3, 0x74, 0x32, 0xda, 0x56, 0x2d, 0x2a, 0x6d, 0x6b, 0x6f, 0x27, 0x6d, 0x6b, 0xe7,
		0x45, 0xdb, 0x12, 0x6f, 0x27, 0x4e, 0x25, 0xdd, 0xf6, 0xba, 0x7c, 0x18, 0x43, 0x24, 0x99, 0xb3,
		0x11, 0xb6, 0x35, 0x12, 0x3c, 0x73, 0xe6, 0xf7, 0xba, 0xfd, 0x97, 0xa4, 0xfd, 0xe8, 0x89, 0xeb,
		0xe9, 0xa4, 0x5f, 0x65, 0x64, 0xf5, 0x71, 0xb2, 0xd7, 0xc1, 0x49, 0x59, 0xef, 0x26, 0xc1, 0xee,
		0x45, 0xe6, 0x61, 0x0a, 0xc2, 0x78, 0x5d, 0x31, 0xcf, 0x9a, 0xe1, 0x59, 0xeb, 0x2f, 0x5b, 0x24,
		0x09, 0x58, 0x4e, 0xd0, 0xeb, 0x73, 0x9b, 0x14, 0x0e, 0x63, 0xfc, 0xe4, 0x86, 0xc4, 0xf8, 0x70,
		0x16, 0x05, 0x8f, 0xf1, 0x1d, 0x26, 0xa5, 0xe0, 0xb2, 0xa2, 0x24, 0xf3, 0x23, 0xd1, 0x37, 0xe9,
		0x28, 0x7d, 0xc8, 0xbf, 0xac, 0xb1, 0xed, 0x48, 0xd0, 0xc2, 0xcd, 0x7e, 0x99, 0x0d, 0x21, 0x65,
		0x6c, 0x6e, 0x3c, 0x39, 0x2b, 0x86, 0xe8, 0x66, 0x23, 0x43, 0x82, 0xd6, 0x61, 0x8a, 0x47, 0xb3,
		0xa5, 0x26, 0x65, 0x48, 0x52, 0xa0, 0x48, 0x45, 0xa2, 0x3a, 0x69, 0x45, 0x94, 0x7a, 0x44, 0x99,
		0xeb, 0x92, 0xa5, 0x3e, 0x1d, 0x45, 0x8a, 0x11, 0xf5, 0xd0, 0xd6, 0x0e, 0x1b, 0x8d, 0xe6, 0x41,
		0xa3, 0x51, 0x3d, 0xd8, 0x3b, 0xa8, 0x1e, 0xed, 0xef, 0xd7, 0x9a, 0xb5, 0xfd, 0x02, 0x8d, 0x76,
		0x31, 0xf3, 0x5b, 0x12, 0xa2, 0x50, 0xea, 0x42, 0xa1, 0xd9, 0x1d, 0x05, 0x79, 0x21, 0x50, 0xba,
		0xc2, 0x9f, 0x19, 0x0b, 0x7d, 0x26, 0x9b, 0xe4, 0x96, 0x96, 0x6b, 0x91, 0x85, 0x5f, 0xb9, 0x93,
		0x01, 0x73, 0x1d, 0x16, 0xa9, 0x4a, 0xf8, 0x53, 0x65, 0x20, 0x53, 0x8b, 0x4d, 0x81, 0x4a, 0x81,
		0x4a, 0x81, 0x4a, 0x81, 0x4a, 0x81, 0x4a, 0x81, 0x4a, 0x6d, 0x2e, 0x95, 0xd2, 0xe5, 0x97, 0x5d,
		0x11, 0x39, 0x4c, 0xba, 0xd9, 0x3c, 0xf2, 0xb8, 0x11, 0xf8, 0x62, 0xf8, 0x62, 0xf8, 0x62, 0xf8,
		0x62, 0xf8, 0x62, 0xf8, 0x62, 0xf8, 0xe2, 0xa4, 0xbe, 0x98, 0x4b, 0x19, 0xc8, 0x6c, 0x9e, 0x38,
		0x6e, 0x02, 0x7e, 0x18, 0x7e, 0x18, 0x7e, 0x18, 0x7e, 0x18, 0x7e, 0x18, 0x7e, 0x18, 0x7e, 0x38,
		0xa9, 0x1f, 0x6e, 0x3b, 0x11, 0x85, 0x2f, 0x9e, 0x6a, 0x06, 0xfe, 0x18, 0xfe, 0x18, 0xfe, 0x18,
		0xfe, 0x18, 0xfe, 0x18, 0xfe, 0x18, 0xfe, 0x38, 0xa9, 0x3f, 0xee, 0xf6, 0x3c, 0x25, 0x68, 0xf6,
		0x8e, 0xe7, 0x9a, 0x82, 0x5f, 0x86, 0x5f, 0x86, 0x5f, 0x86, 0x5f, 0x86, 0x5f, 0x86, 0x5f, 0x86,
		0x5f, 0x4e, 0xea, 0x97, 0x03, 0x47, 0xf1, 0x8c, 0xfe, 0x38, 0x6e, 0x02, 0x7e, 0x18, 0x7e, 0x18,
		0x7e, 0x18, 0x7e, 0x18, 0x7e, 0x18, 0x7e, 0x18, 0x7e, 0x38, 0xa9, 0x1f, 0xce, 0x1c, 0x15, 0x23,
		0x16, 0x86, 0x0f, 0x86, 0x0f, 0x86, 0x0f, 0x86, 0x0f, 0x86, 0x0f, 0x86, 0x0f, 0x4e, 0xe5, 0x83,
		0x7b, 0x3e, 0x91, 0x42, 0x3d, 0xd3, 0x10, 0x7c, 0x32, 0x7c, 0x32, 0x7c, 0x32, 0x7c, 0x32, 0x7c,
		0x32, 0x7c, 0x32, 0x7c, 0x72, 0x72, 0x9f, 0xfc, 0xd3, 0x0f, 0x7e, 0xf9, 0x95, 0x50, 0x06, 0x2a,
		0xc8, 0xea, 0x95, 0x67, 0x9a, 0x82, 0x5f, 0x86, 0x5f, 0x86, 0x5f, 0x86, 0x5f, 0x86, 0x5f, 0x86,
		0x5f, 0x86, 0x5f, 0x4e, 0xe4, 0x97, 0xbd, 0x7e, 0x70, 0xeb, 0x78, 0x9c, 0xc9, 0xf4, 0x0e, 0x79,
		0xaa, 0x0d, 0x78, 0x62, 0x78, 0xe2, 0x8d, 0xf2, 0xc4, 0x4a, 0x74, 0xb9, 0x12, 0xce, 0xcf, 0xc8,
		0xb8, 0x2f, 0xfe, 0xd3, 0x1f, 0xe2, 0x58, 0xd9, 0x67, 0x7e, 0x10, 0x71, 0x27, 0xf0, 0x13, 0x9f,
		0xe8, 0x87, 0x4f, 0x87, 0x4f, 0x87, 0x4f, 0x2f, 0xb2, 0x4f, 0x47, 0x49, 0x36, 0x94, 0x64, 0xeb,
		0x7f, 0x82, 0xa0, 0xa7, 0xc8, 0x6a, 0xb2, 0x2d, 0x69, 0x0b, 0xb4, 0x0c, 0xb4, 0x0c, 0x02, 0x09,
		0x04, 0x12, 0x90, 0x29, 0x90, 0x29, 0x08, 0x24, 0x89, 0x3d, 0x73, 0xf6, 0xaa, 0x6c, 0x33, 0xad,
		0xc0, 0x1b, 0xc3, 0x1b, 0xc3, 0x1b, 0xc3, 0x1b, 0xc3, 0x1b, 0xc3, 0x1b, 0xc3, 0x1b, 0x27, 0xf6,
		0xc6, 0x59, 0x6b, 0xc1, 0x4c, 0xb5, 0x01, 0x4f, 0x0c, 0x4f, 0x0c, 0x4f, 0x0c, 0x4f, 0x0c, 0x4f,
		0x0c, 0x4f, 0x0c, 0x4f, 0x9c, 0xd8, 0x13, 0x53, 0x55, 0x82, 0x59, 0xd2, 0x16, 0x3c, 0x33, 0x3c,
		0x33, 0x3c, 0x33, 0x3c, 0x33, 0x3c, 0x33, 0x3c, 0x33, 0x3c, 0x73, 0x62, 0xcf, 0x9c, 0xb5, 0x16,
		0xcc, 0x54, 0x1b, 0xf0, 0xc4, 0xf0, 0xc4, 0xf0, 0xc4, 0xf0, 0xc4, 0xf0, 0xc4, 0xf0, 0xc4, 0xf0,
		0xc4, 0x89, 0x3d, 0x71, 0xf6, 0xc8, 0x18, 0xf1, 0x30, 0xbc, 0x30, 0xbc, 0x30, 0xbc, 0x30, 0xbc,
		0x30, 0xbc, 0x30, 0xbc, 0x70, 0x3a, 0x2f, 0x4c, 0x53, 0x0f, 0x66, 0xa1, 0x25, 0x78, 0x65, 0x78,
		0x65, 0x78, 0x65, 0x78, 0x65, 0x78, 0x65, 0x78, 0x65, 0x78, 0xe5, 0x35, 0xff, 0x72, 0xcd, 0x35,
		0x95, 0xfc, 0xb0, 0x5b, 0x42, 0xaf, 0xbe, 0x78, 0xb8, 0x2d, 0x08, 0xb9, 0x64, 0xfd, 0xb9, 0x64,
		0x5e, 0x52, 0xd7, 0x9e, 0xf9, 0x30, 0x5b, 0xca, 0x43, 0x6c, 0xeb, 0x0d, 0x79, 0x6b, 0xcd, 0x21,
		0x3f, 0xf1, 0xfd, 0x40, 0x0d, 0x46, 0x20, 0x91, 0xe5, 0x96, 0x23, 0xe7, 0x9e, 0x77, 0x59, 0xc8,
		0xd4, 0x7d, 0xff, 0xed, 0x77, 0x83, 0x90, 0xfb, 0xce, 0x80, 0xb4, 0x54, 0x44, 0xdf, 0x9d, 0xb4,
		0x99, 0xc3, 0xa3, 0xdd, 0x65, 0x5f, 0xee, 0x46, 0x8a, 0x29, 0xbe, 0x1b, 0xbb, 0x9d, 0x24, 0x84,
		0xaa, 0x1c, 0x29, 0xd9, 0x73, 0x94, 0x1f, 0x3b, 0xae, 0xf3, 0x51, 0x8b, 0xb7, 0x1f, 0x47, 0x6d,
		0xed, 0xd0, 0x8c, 0xdf, 0x1a, 0xcb, 0xb5, 0xec, 0xf2, 0xc8, 0x91, 0x22, 0x4c, 0x34, 0x70, 0x63,
		0x9f, 0x3b, 0xfd, 0xf0, 0x9a, 0xf3, 0x94, 0x0c, 0x15, 0x13, 0x13, 0xc8, 0x34, 0xc4, 0x31, 0x35,
		0x61, 0x4c, 0x4b, 0x14, 0x33, 0x13, 0xc4, 0xcc, 0xc4, 0x30, 0x0b, 0x21, 0xa4, 0x85, 0xca, 0xc4,
		0xc4, 0x6f, 0x3c, 0x5b, 0x91, 0x92, 0xc2, 0xef, 0x24, 0x99, 0xae, 0x78, 0xed, 0xd5, 0x0e, 0x0d,
		0xda, 0x17, 0xf7, 0xd9, 0x9d, 0xc7, 0xdd, 0xe4, 0xb6, 0x35, 0x7a, 0x70, 0xcd, 0x71, 0x3c, 0xe5,
		0x6d, 0xd6, 0xf3, 0x06, 0xf3, 0xd9, 0x5f, 0x0e, 0x30, 0x47, 0x98, 0xa3, 0x59, 0x73, 0xbc, 0x0b,
		0x02, 0x8f, 0x33, 0x3f, 0x8d, 0x3d, 0xd6, 0x0c, 0xda, 0xe3, 0x3d, 0x93, 0xee, 0x2f, 0x26, 0x79,
		0x25, 0x0c, 0xa4, 0x4a, 0x6e, 0x95, 0xb3, 0x8f, 0x6f, 0x86, 0x91, 0x25, 0xf8, 0x28, 0x9b, 0x65,
		0x66, 0x83, 0x0f, 0x6e, 0x9d, 0xa1, 0x79, 0x9c, 0xb5, 0x25, 0x6f, 0xa7, 0x31, 0xb4, 0x83, 0x04,
		0xcf, 0x5c, 0x8d, 0x29, 0xb1, 0x53, 0x09, 0x3d, 0xa6, 0xda, 0x81, 0xec, 0x1e, 0x3b, 0x41, 0x37,
		0x0c, 0x7c, 0xee, 0xab, 0x68, 0xf9, 0x8f, 0x67, 0x7e, 0x3a, 0x20, 0xb8, 0x06, 0x4d, 0x5b, 0xb4,
		0x85, 0xef, 0xf2, 0xc7, 0xe4, 0x46, 0x3d, 0x7a, 0x10, 0x3e, 0x13, 0x3e, 0xd3, 0xa8, 0x29, 0xf7,
		0x84, 0xaf, 0xf6, 0xea, 0x29, 0x2c, 0x39, 0x89, 0x21, 0xa7, 0x13, 0x28, 0x53, 0x28, 0xb1, 0x59,
		0x04, 0xc9, 0x8c, 0x6a, 0x59, 0x56, 0x01, 0x92, 0x42, 0x0a, 0x4b, 0x21, 0x38, 0x66, 0x12, 0x1a,
		0xa9, 0x86, 0xac, 0x51, 0x3f, 0x6a, 0x1c, 0x35, 0x0f, 0xea, 0x47, 0xfb, 0x39, 0x8e, 0x9d, 0x26,
		0x59, 0xaf, 0x65, 0xb9, 0xac, 0x97, 0xbd, 0x66, 0x55, 0x7e, 0xf2, 0xde, 0x3b, 0xa8, 0x9f, 0xd9,
		0xd5, 0x4f, 0x12, 0x62, 0x34, 0xac, 0x72, 0x7a, 0x1f, 0xfb, 0x81, 0x84, 0xe4, 0x68, 0xfa, 0x61,
		0x10, 0x24, 0x10, 0x24, 0xa3, 0x04, 0x29, 0x5d, 0x0d, 0xd3, 0x14, 0xdb, 0xb9, 0x59, 0x6b, 0x96,
		0x82, 0x65, 0x81, 0x65, 0xbd, 0x38, 0x64, 0x74, 0xdb, 0xb7, 0xe0, 0x5b, 0xe0, 0x5b, 0xe0, 0x5b,
		0x85, 0xe6, 0x5b, 0x41, 0x47, 0x38, 0xcc, 0x4b, 0xc1, 0xb5, 0xe2, 0x07, 0xc1, 0xb3, 0xc0, 0xb3,
		0x8c, 0xf2, 0x2c, 0xfd, 0x9b, 0x37, 0x80, 0x7c, 0x40, 0xfe, 0x46, 0x43, 0x7e, 0x10, 0xde, 0x31,
		0xe7, 0x67, 0xa5, 0x1b, 0xb8, 0x69, 0x82, 0xec, 0x99, 0xc7, 0x93, 0x6f, 0xf9, 0x0f, 0x06, 0x15,
		0x6e, 0x03, 0x6e, 0x63, 0xd3, 0xdc, 0x06, 0x89, 0x71, 0x76, 0x55, 0x2f, 0xb9, 0x49, 0xf6, 0x1f,
		0x82, 0x41, 0xc1, 0xa0, 0x8c, 0x1a, 0x54, 0x4f, 0xf8, 0xaa, 0xd6, 0x4c, 0x61, 0x4f, 0x4d, 0x48,
		0x55, 0x90, 0xaa, 0x88, 0x86, 0xac, 0xb9, 0xbf, 0xbf, 0xb7, 0xbd, 0xda, 0x14, 0x89, 0xc7, 0x89,
		0x73, 0xbb, 0x13, 0xba, 0x9c, 0xc1, 0x53, 0xf0, 0x39, 0xf0, 0x39, 0x46, 0x7d, 0x8e, 0x1d, 0x79,
		0xd4, 0xfd, 0xf8, 0xb3, 0x12, 0x29, 0xa6, 0x7a, 0x51, 0x72, 0xc3, 0x9a, 0x7e, 0x18, 0xf6, 0x05,
		0xfb, 0x32, 0x6a, 0x5f, 0xdc, 0xef, 0x75, 0x63, 0xed, 0x24, 0x8d, 0x91, 0x35, 0x12, 0x3c, 0x73,
		0xe6, 0xf7, 0xba, 0xfd, 0x97, 0x7c, 0x86, 0x26, 0x07, 0x4d, 0x6e, 0xeb, 0x35, 0xb9, 0xf0, 0xfe,
		0x29, 0x12, 0x0e, 0xf3, 0x06, 0x2b, 0xc8, 0xe7, 0x29, 0xf6, 0x63, 0x16, 0x5a, 0xd8, 0x0c, 0xe7,
		0xa1, 0x24, 0xf3, 0x23, 0x87, 0x8b, 0x07, 0x2e, 0xb7, 0xd2, 0x8b, 0x4c, 0x7f, 0x7e, 0xa4, 0xff,
		0xaf, 0x58, 0x62, 0x69, 0xd2, 0xff, 0xbf, 0xcf, 0xa7, 0xff, 0xff, 0xaf, 0xd3, 0x93, 0x92, 0xfb,
		0xea, 0xcd, 0xdb, 0xdd, 0xf7, 0xef, 0x77, 0x67, 0x87, 0xfe, 0x78, 0xea, 0xeb, 0xd6, 0x0b, 0xbf,
		0x9b, 0xff, 0xd5, 0xbc, 0x51, 0x46, 0xf3, 0x7f, 0x10, 0xff, 0x7c, 0xfe, 0xc7, 0xc3, 0x1c, 0x7f,
		0xd2, 0x59, 0xbc, 0x10, 0x91, 0x3a, 0x51, 0x2a, 0xd9, 0x05, 0xe4, 0xe5, 0x4b, 0xe1, 0x9f, 0xf5,
		0xfd, 0x9b, 0x3f, 0x70, 0xab, 0x7e, 0xcf, 0xf3, 0x12, 0xcc, 0xcb, 0x25, 0x7b, 0x4c, 0xff, 0xf0,
		0x17, 0xe9, 0x72, 0xc9, 0xdd, 0x0f, 0x4f, 0xf1, 0xa3, 0x06, 0xf9, 0xbb, 0x0a, 0x45, 0x8a, 0x43,
		0x90, 0x83, 0xa7, 0x92, 0x6f, 0x87, 0x04, 0x4e, 0xe5, 0xc1, 0x63, 0x7e, 0x45, 0x3d, 0x85, 0x3c,
		0x3a, 0xbe, 0xb9, 0x3a, 0x3f, 0xbd, 0xad, 0xfe, 0xeb, 0xb0, 0x56, 0xad, 0x6e, 0x08, 0x80, 0xf7,
		0x3f, 0xdc, 0x56, 0x22, 0xf7, 0xe0, 0x83, 0x5b, 0x07, 0xd9, 0xc2, 0xe5, 0xbe, 0x12, 0xea, 0x29,
		0x25, 0x6c, 0x27, 0xd0, 0xe2, 0xca, 0xe7, 0x71, 0x57, 0x1f, 0x58, 0xc4, 0xd3, 0x57, 0x8b, 0x1a,
		0x58, 0xcc, 0xcd, 0xbf, 0xaf, 0xce, 0xae, 0x93, 0x4e, 0xf8, 0x40, 0x43, 0x34, 0x7a, 0xd1, 0xf3,
		0xcc, 0x3b, 0x57, 0xff, 0x75, 0xd4, 0xb7, 0x72, 0x13, 0x52, 0x2d, 0xcd, 0xeb, 0x1e, 0xda, 0xf5,
		0xba, 0x47, 0x75, 0x8b, 0x5e, 0xf7, 0xe4, 0xf3, 0xbf, 0x6d, 0x5a, 0x09, 0x87, 0x27, 0x87, 0x05,
		0xba, 0x01, 0xdc, 0x24, 0x35, 0x98, 0xa2, 0xe3, 0xc9, 0x19, 0x42, 0xe2, 0x58, 0x06, 0xd1, 0x19,
		0xa2, 0x33, 0x44, 0x67, 0x4b, 0xa3, 0xb3, 0x30, 0x90, 0xea, 0x78, 0xa6, 0xc4, 0x41, 0x6b, 0xa6,
		0xa9, 0xa8, 0x77, 0xb7, 0xa2, 0x93, 0xe9, 0xdf, 0xe4, 0x7a, 0x08, 0x5c, 0x25, 0x99, 0xba, 0x09,
		0x8a, 0xf4, 0x9f, 0xc2, 0xce, 0x00, 0x76, 0x06, 0x10, 0x17, 0xbc, 0xf8, 0xc2, 0xa3, 0x52, 0x65,
		0x95, 0x04, 0x06, 0x53, 0x80, 0xd8, 0x40, 0x30, 0x9f, 0x55, 0x32, 0xbd, 0x3c, 0xc5, 0x87, 0xc8,
		0xf6, 0x61, 0x16, 0x3e, 0x14, 0x53, 0xdd, 0x8b, 0xf8, 0xbc, 0x40, 0x1e, 0x45, 0x32, 0x89, 0x3e,
		0x85, 0x68, 0x57, 0x3a, 0x91, 0x6f, 0xf3, 0x27, 0xe8, 0x86, 0xbc, 0x73, 0xd3, 0xe7, 0x2c, 0xc9,
		0xca, 0xc9, 0x14, 0xef, 0x83, 0x84, 0xae, 0x7f, 0xa6, 0xee, 0xb9, 0xbc, 0x08, 0x82, 0xb0, 0x66,
		0xf3, 0x07, 0x89, 0x5c, 0xcf, 0xb1, 0xda, 0x26, 0x38, 0xe7, 0x87, 0xd5, 0x7a, 0xad, 0xf9, 0xd7,
		0xe5, 0xc9, 0x67, 0x9b, 0x3f, 0x88, 0x6c, 0x3b, 0x87, 0x07, 0x07, 0x8f, 0xf5, 0x7d, 0xab, 0x67,
		0x23, 0x0a, 0x0e, 0x0f, 0xab, 0xf5, 0xc6, 0x4d, 0xf0, 0x93, 0xfb, 0x1f, 0x7a, 0x91, 0xd5, 0x13,
		0x12, 0xd5, 0xf7, 0xea, 0x36, 0x7f, 0x80, 0x07, 0x21, 0x55, 0x8f, 0x79, 0x37, 0x1d, 0xab, 0xf1,
		0x49, 0x84, 0xd7, 0xa2, 0xb3, 0x29, 0xae, 0xc2, 0xea, 0xf5, 0xc4, 0xbc, 0xde, 0x59, 0x18, 0x58,
		0xcd, 0x3f, 0xa2, 0xc0, 0xe7, 0x6a, 0x20, 0x08, 0x58, 0x0d, 0xb2, 0xae, 0xdd, 0x93, 0x20, 0x1e,
		0x6f, 0x82, 0x4f, 0x41, 0x4f, 0xda, 0xcd, 0xc5, 0xbf, 0xb5, 0xc5, 0x20, 0x9c, 0xb5, 0xdd, 0x1c,
		0xbe, 0xdd, 0xd8, 0xfc, 0x11, 0x1c, 0xdf, 0xee, 0x65, 0x14, 0x7e, 0x79, 0xe0, 0xf2, 0x44, 0x75,
		0x37, 0x80, 0xf5, 0xed, 0x7f, 0x12, 0x77, 0xdc, 0xea, 0xd9, 0x68, 0x4b, 0xd6, 0xe5, 0x5f, 0xb9,
		0xc7, 0x9e, 0x2e, 0xaf, 0xce, 0x6d, 0xfe, 0x20, 0xee, 0xc3, 0xdd, 0x57, 0xc7, 0xf9, 0x33, 0x8c,
		0x94, 0xe4, 0xcc, 0xea, 0xb5, 0xf5, 0x5f, 0xcf, 0xee, 0xf8, 0xb4, 0xd3, 0x0e, 0xad, 0x36, 0xed,
		0xbb, 0xee, 0xde, 0x41, 0x35, 0x64, 0xf2, 0xe3, 0x3d, 0xb3, 0x9a, 0x74, 0xdc, 0x09, 0x65, 0x75,
		0x34, 0xda, 0x39, 0x3a, 0x3a, 0xb4, 0x5a, 0x68, 0x7a, 0x3c, 0x6c, 0x5e, 0xb0, 0xd0, 0xea, 0x39,
		0xf0, 0x02, 0x87, 0x79, 0x37, 0xcc, 0xfb, 0x69, 0xf5, 0x42, 0x3a, 0xa8, 0xee, 0x31, 0xd5, 0x6c,
		0xd8, 0xfd, 0x21, 0x54, 0x68, 0xbd, 0x7b, 0x8e, 0x6e, 0xdc, 0x2e, 0xb3, 0x3a, 0x7a, 0xe8, 0xba,
		0xd1, 0xb9, 0x23, 0x42, 0xbb, 0x19, 0x5f, 0xbb, 0xd6, 0xbc, 0x6c, 0xcb, 0x0f, 0x3d, 0xdf, 0xf5,
		0xac, 0x8e, 0xe5, 0xee, 0x45, 0xc8, 0xa5, 0xc7, 0x7c, 0xab, 0x25, 0x26, 0x47, 0x44, 0x4e, 0x70,
		0x7e, 0x7d, 0x91, 0x2c, 0x77, 0xb5, 0xa8, 0xfc, 0xfb, 0x92, 0x39, 0x17, 0xec, 0xc9, 0xee, 0x90,
		0x48, 0x86, 0xd2, 0x76, 0xda, 0x64, 0xb7, 0xe8, 0x6a, 0xb7, 0x34, 0xc0, 0xda, 0x1e, 0xf3, 0xf9,
		0x61, 0xb5, 0xbe, 0xb7, 0x01, 0x9b, 0x8c, 0x7b, 0xcc, 0xbd, 0x60, 0x56, 0xef, 0x45, 0xb8, 0xa2,
		0x23, 0x14, 0xf3, 0xfe, 0x92, 0x2c, 0x0c, 0xb9, 0xfc, 0xf2, 0xc0, 0xe5, 0x3d, 0x67, 0xee, 0xc7,
		0xf8, 0xc4, 0x9e, 0xc5, 0x1f, 0xac, 0x17, 0xdd, 0x59, 0xed, 0xf7, 0x1c, 0x75, 0xd6, 0xed, 0x79,
		0xb6, 0xef, 0x4a, 0xf4, 0xac, 0xb6, 0x8d, 0xa8, 0x6a, 0x3f, 0x0b, 0x1c, 0x24, 0x6e, 0x79, 0x9c,
		0x3d, 0x58, 0xfd, 0x29, 0xba, 0xcc, 0xb9, 0xe6, 0xce, 0x9f, 0xbe, 0x13, 0xf8, 0x4a, 0x06, 0x9e,
		0xc7, 0xdd, 0xf3, 0x4f, 0x56, 0x0b, 0x07, 0x7b, 0x22, 0xb4, 0x9d, 0xd2, 0x76, 0x43, 0xcf, 0x6a,
		0xf1, 0xe6, 0xbf, 0x76, 0xeb, 0xe0, 0xf7, 0x22, 0x0c, 0xc5, 0xf8, 0xfa, 0x5b, 0xcb, 0x19, 0xed,
		0xe9, 0xa3, 0xb0, 0xf9, 0x13, 0xfc, 0xfa, 0xc5, 0xfc, 0xab, 0x2b, 0xbb, 0x73, 0x83, 0x02, 0xe1,
		0xf0, 0xb3, 0x0f, 0xd7, 0x56, 0x9b, 0xc4, 0x53, 0xc8, 0xa5, 0x63, 0x3f, 0x77, 0x8d, 0xf3, 0xb4,
		0xce, 0xc3, 0x13, 0xd7, 0x95, 0x3c, 0x8a, 0x36, 0x60, 0x2b, 0x78, 0xef, 0x63, 0xd4, 0x65, 0x8e,
		0x6b, 0x75, 0xda, 0x96, 0x0c, 0x14, 0x0f, 0xfc, 0x5a, 0xf5, 0xf2, 0x4e, 0x28, 0xdb, 0x1d, 0xf7,
		0x4d, 0xcf, 0x76, 0x23, 0x19, 0xe5, 0xf9, 0xee, 0x37, 0x36, 0x60, 0x51, 0x1d, 0x5a, 0xbf, 0xa8,
		0xdc, 0xc0, 0x89, 0x3e, 0xb2, 0x3b, 0x8f, 0x9f, 0x06, 0xbf, 0x7c, 0xfb, 0xb3, 0x0c, 0x98, 0xd7,
		0xfb, 0x23, 0x0c, 0xfc, 0x2f, 0x76, 0x47, 0xb0, 0x6d, 0x16, 0xa9, 0x41, 0xaa, 0xe9, 0xa7, 0x7f,
		0x59, 0x3d, 0x19, 0x6e, 0x64, 0xbd, 0x12, 0x62, 0x77, 0xe6, 0x3b, 0x67, 0xce, 0xfd, 0xe9, 0xf5,
		0xc5, 0x06, 0x24, 0x2b, 0x5f, 0xc5, 0x05, 0x90, 0xfe, 0xf4, 0xc5, 0x66, 0x24, 0xa6, 0xd9, 0xfc,
		0x29, 0x78, 0x1f, 0x9b, 0x7c, 0xae, 0xec, 0x27, 0x87, 0x4c, 0xb2, 0xd0, 0x72, 0x1e, 0x12, 0x7e,
		0xf4, 0xed, 0x16, 0x74, 0x06, 0xc9, 0xcb, 0x1b, 0xb4, 0x85, 0x11, 0x75, 0xdd, 0xc8, 0x72, 0x61,
		0xe4, 0x3e, 0x8a, 0x84, 0xfd, 0xdb, 0xf6, 0x9b, 0x41, 0x69, 0xa3, 0xa0, 0xad, 0x7e, 0x31, 0xc9,
		0x2f, 0xe2, 0xeb, 0x72, 0xac, 0x4e, 0xde, 0x8c, 0x1c, 0xbb, 0xcf, 0xd8, 0x3a, 0x56, 0x9b, 0x45,
		0x14, 0x1d, 0x5c, 0x8b, 0xce, 0x85, 0xf0, 0xad, 0x5e, 0x44, 0x61, 0xe0, 0x37, 0xeb, 0x1b, 0x20,
		0xda, 0x5e, 0x7e, 0xfa, 0xe3, 0xd4, 0xea, 0xbd, 0xee, 0x59, 0xd9, 0xe0, 0x6b, 0xfb, 0xca, 0xf6,
		0x5a, 0x00, 0xa1, 0xd5, 0x5c, 0xf0, 0x3e, 0xe8, 0xf2, 0xd0, 0xb7, 0x3a, 0x13, 0xb5, 0xed, 0x88,
		0xd0, 0x76, 0x78, 0x1a, 0x8b, 0x37, 0x56, 0x23, 0x94, 0xe5, 0xd2, 0xcd, 0x30, 0x31, 0x7b, 0x13,
		0xf2, 0x36, 0x47, 0x7a, 0xb9, 0xd5, 0x67, 0x46, 0x1e, 0xba, 0x7d, 0x06, 0xfb, 0x59, 0x38, 0x37,
		0x96, 0x93, 0xf1, 0xb1, 0x5c, 0x7e, 0xf9, 0xb1, 0xab, 0xa2, 0xcd, 0x08, 0x30, 0x46, 0xa7, 0x3e,
		0x3f, 0x7e, 0xfd, 0x74, 0x75, 0xee, 0x5b, 0xed, 0xc1, 0xa3, 0x7b, 0xcb, 0x71, 0x2b, 0xf2, 0xec,
		0x3e, 0x86, 0x11, 0xaf, 0xa5, 0xba, 0xe5, 0x87, 0x3d, 0x87, 0xa7, 0xb9, 0x3f, 0x7a, 0xec, 0x97,
		0xdd, 0x84, 0x30, 0x52, 0x57, 0xcc, 0xee, 0xcd, 0x7b, 0xbb, 0xd7, 0x11, 0x53, 0xdd, 0x4f, 0x3d,
		0xbb, 0x77, 0x2c, 0xfa, 0xfc, 0xa3, 0xb6, 0x77, 0xd4, 0xb0, 0x9c, 0x0d, 0x9e, 0x44, 0xe2, 0x4b,
		0x4f, 0x6d, 0xc0, 0x46, 0x58, 0x5c, 0xfe, 0xd0, 0xf6, 0x28, 0x69, 0x4c, 0xa4, 0x3e, 0xbb, 0xd2,
		0xf2, 0x6a, 0x6f, 0xb5, 0xc6, 0xa1, 0xd5, 0x87, 0x62, 0x14, 0xb7, 0x7d, 0x31, 0x75, 0x8e, 0x8e,
		0xec, 0x9e, 0x82, 0x8e, 0xe8, 0xb0, 0x3b, 0x31, 0x94, 0x0d, 0x7c, 0x6e, 0x77, 0x42, 0x51, 0x54,
		0xb3, 0x7d, 0x43, 0xf5, 0xdb, 0x30, 0x8f, 0xd3, 0xf6, 0x8f, 0xf1, 0xe1, 0xaf, 0x93, 0xb0, 0x7e,
		0x69, 0x75, 0x38, 0xf1, 0xb0, 0xd7, 0xb4, 0xf9, 0xf5, 0xfd, 0x36, 0xb3, 0x7a, 0x67, 0xbe, 0xfb,
		0x60, 0xb5, 0x11, 0x30, 0x47, 0x71, 0x4f, 0x44, 0x97, 0x5c, 0xb1, 0x8b, 0x2f, 0x5f, 0xae, 0x6c,
		0xb7, 0xe7, 0xbf, 0x84, 0xe4, 0x1e, 0x8f, 0xa2, 0xab, 0xfa, 0x95, 0xe5, 0x0e, 0xe2, 0xd3, 0xe9,
		0x85, 0xe5, 0x51, 0xdd, 0x5d, 0xe0, 0xdb, 0x1d, 0x57, 0xdb, 0x7d, 0x1a, 0xfd, 0x7e, 0xaf, 0xbe,
		0xf7, 0x07, 0x53, 0xfc, 0x27, 0xe7, 0xa1, 0xe5, 0x1b, 0x2d, 0x81, 0x70, 0xf8, 0xa7, 0x3f, 0x4e,
		0xbf, 0x5c, 0xdb, 0x0e, 0x4f, 0x97, 0x3d, 0x4f, 0x89, 0xd0, 0xe3, 0x8f, 0x81, 0xfd, 0x13, 0x72,
		0x7a, 0x6e, 0xf7, 0xce, 0xfc, 0x9d, 0xf7, 0x8d, 0x3b, 0x8a, 0x5d, 0x2b, 0x26, 0x37, 0x61, 0x67,
		0xe2, 0x54, 0x49, 0xcb, 0xfd, 0xc5, 0xb9, 0xdd, 0x15, 0xa2, 0xe2, 0x63, 0x15, 0x1b, 0x92, 0x84,
		0xed, 0x04, 0xed, 0x36, 0xb7, 0xfa, 0xe8, 0xad, 0x64, 0xae, 0x08, 0x2e, 0x4f, 0x3e, 0xda, 0xfc,
		0x19, 0x82, 0x50, 0xf5, 0xd7, 0xd2, 0x46, 0xdc, 0x22, 0x72, 0x6f, 0xf9, 0xe5, 0x1b, 0x4c, 0x3a,
		0x3e, 0x57, 0x57, 0x9e, 0xdd, 0x17, 0x3d, 0xf4, 0x59, 0xe1, 0x95, 0x0c, 0x1e, 0x9f, 0x2c, 0x37,
		0x6d, 0xbb, 0xb7, 0xb0, 0x95, 0xf5, 0x47, 0x54, 0x95, 0xac, 0x56, 0x0f, 0x2d, 0xaf, 0x80, 0x63,
		0xf7, 0x21, 0xa9, 0x53, 0xcf, 0x11, 0x67, 0xbe, 0x7b, 0xa5, 0x6c, 0x0f, 0x8a, 0x2c, 0x2f, 0x08,
		0xef, 0xb0, 0xf0, 0x17, 0x0b, 0x4f, 0x03, 0x55, 0xab, 0x5d, 0xc9, 0xa0, 0x2d, 0x2c, 0xaf, 0xa9,
		0xd4, 0x55, 0xd6, 0x47, 0xa6, 0x83, 0xbc, 0x14, 0x76, 0x67, 0xf7, 0x44, 0x8c, 0x37, 0x7f, 0x47,
		0x85, 0xed, 0x37, 0xe0, 0xd4, 0xd7, 0x50, 0xc8, 0xf9, 0xd7, 0x17, 0xdb, 0xb3, 0x7e, 0xeb, 0x1b,
		0xb1, 0xb0, 0xae, 0x1d, 0xc5, 0xf7, 0xf7, 0xdd, 0xfa, 0x69, 0xf4, 0x25, 0xb8, 0xdb, 0x90, 0x3c,
		0x89, 0xb6, 0xd5, 0x9f, 0xc3, 0xf5, 0xff, 0xb5, 0x11, 0x57, 0xe2, 0xed, 0x0f, 0xae, 0xc4, 0xfb,
		0x2a, 0xfc, 0xce, 0x66, 0x9c, 0x43, 0x1f, 0x94, 0x22, 0x73, 0x02, 0xdf, 0xe7, 0x8e, 0xd5, 0xde,
		0x51, 0x58, 0x5e, 0x96, 0x2f, 0x50, 0xfe, 0x17, 0xd5, 0xb3, 0xfb, 0x5c, 0x5e, 0x64, 0xfb, 0xb9,
		0x1d, 0xcb, 0x43, 0xef, 0xee, 0x93, 0x14, 0x96, 0xa7, 0x0f, 0x79, 0xdd, 0xd0, 0x72, 0xa9, 0xff,
		0xba, 0x77, 0xb7, 0x11, 0xe5, 0x1d, 0x23, 0xc5, 0xe4, 0x85, 0xdd, 0x98, 0xfa, 0x60, 0xf7, 0xa9,
		0xa9, 0x6e, 0x7b, 0x13, 0x4e, 0x6b, 0x87, 0xc3, 0x9d, 0x61, 0x4f, 0xf8, 0x3f, 0xed, 0x2f, 0xcb,
		0xac, 0x06, 0xbb, 0x15, 0xff, 0xb4, 0x5d, 0xee, 0xaf, 0xd5, 0x2f, 0xc3, 0xf0, 0xfa, 0x97, 0x50,
		0xce, 0xbd, 0xed, 0x9c, 0xc9, 0xb5, 0xbb, 0xd2, 0x9b, 0xeb, 0x8a, 0x0d, 0x11, 0x08, 0x3f, 0xd8,
		0x5d, 0xf0, 0x74, 0x78, 0x9d, 0x56, 0xbd, 0x6b, 0xb5, 0x5a, 0xe0, 0xb1, 0xd0, 0x6a, 0x95, 0x20,
		0x92, 0xa1, 0xdd, 0x89, 0x05, 0xdd, 0x30, 0x88, 0x84, 0xfd, 0x07, 0x2a, 0x64, 0x24, 0xef, 0x36,
		0xa0, 0xc0, 0x8a, 0xd5, 0x7a, 0x86, 0xe5, 0xb1, 0xe8, 0x63, 0x7d, 0x3f, 0xb4, 0x9b, 0xeb, 0x85,
		0x81, 0x5f, 0xdb, 0xdf, 0xb7, 0xff, 0xdc, 0xe3, 0xb9, 0xe5, 0x97, 0xcc, 0x87, 0x37, 0x56, 0x4b,
		0xad, 0x1d, 0xb9, 0x57, 0xdd, 0x3b, 0x3f, 0xbd, 0xd9, 0xa4, 0x7d, 0x95, 0xda, 0xa7, 0x5f, 0xae,
		0xe5, 0x1b, 0x2b, 0x91, 0xed, 0xf7, 0x5d, 0x7e, 0x0a, 0xe4, 0x2f, 0x26, 0x6d, 0x2f, 0xcd, 0x1f,
		0x9e, 0x06, 0x4e, 0x34, 0x3a, 0xd9, 0xb2, 0x19, 0xf5, 0x54, 0x1e, 0xf6, 0xac, 0x76, 0x1a, 0x21,
		0x93, 0xcc, 0xee, 0xda, 0x1d, 0x56, 0x57, 0xc8, 0x94, 0xc2, 0xed, 0x58, 0x4d, 0x9b, 0xbc, 0xba,
		0xed, 0x37, 0x64, 0x31, 0x66, 0x7f, 0x16, 0xc4, 0x97, 0xb6, 0xdb, 0xdd, 0x0c, 0x38, 0x1d, 0x5c,
		0x98, 0x65, 0xb5, 0x2a, 0x60, 0x7f, 0x72, 0x93, 0xd8, 0x00, 0xb1, 0xf8, 0xbf, 0xf5, 0xa3, 0x3d,
		0xab, 0xb7, 0x83, 0xee, 0x58, 0x24, 0x9c, 0xf3, 0xeb, 0xd3, 0xcf, 0x9b, 0x70, 0x75, 0xc0, 0x9e,
		0xf5, 0x17, 0xe7, 0x44, 0x7b, 0x96, 0x2b, 0xc5, 0xae, 0xdd, 0xd9, 0x58, 0xbd, 0x70, 0x03, 0xaa,
		0x39, 0x59, 0x7e, 0x51, 0x51, 0x97, 0xbb, 0x82, 0x5d, 0x32, 0xe1, 0x7d, 0x79, 0xe0, 0xf2, 0x3c,
		0xb4, 0x7b, 0x2f, 0xd1, 0xf2, 0x92, 0xbd, 0xc2, 0x6f, 0x0b, 0x5f, 0xdc, 0x31, 0xcb, 0x0b, 0x13,
		0xd8, 0x1d, 0xbe, 0x2d, 0x24, 0x20, 0xff, 0x69, 0x7b, 0x02, 0x32, 0x8b, 0x9e, 0xfc, 0x4d, 0xa8,
		0xe5, 0x69, 0x79, 0xca, 0xc6, 0x5d, 0x27, 0x0c, 0x03, 0x4f, 0x38, 0x4f, 0xcc, 0x71, 0x82, 0x9e,
		0xaf, 0x2c, 0xcf, 0x3f, 0x1e, 0x1e, 0x38, 0xb5, 0x9a, 0xc8, 0x46, 0x4e, 0x60, 0xb5, 0xca, 0xc1,
		0x43, 0x4f, 0x5a, 0x9d, 0xb1, 0xe1, 0xda, 0x7d, 0xb6, 0x6e, 0x5e, 0xfc, 0x1e, 0x9d, 0x85, 0xb2,
		0x7a, 0x4d, 0xd9, 0x6d, 0x12, 0xf7, 0xee, 0x7d, 0xed, 0xd0, 0xee, 0xab, 0x65, 0xba, 0x81, 0xc3,
		0xbe, 0x71, 0x19, 0x89, 0xc0, 0xaf, 0x6d, 0xc4, 0x61, 0x47, 0xbb, 0xa3, 0x8a, 0xc7, 0xfa, 0x7e,
		0xd7, 0x0b, 0xed, 0xae, 0x0e, 0x2b, 0xbb, 0x96, 0x17, 0x11, 0x57, 0x96, 0x73, 0xbf, 0x91, 0x9e,
		0xcf, 0x36, 0xc1, 0x45, 0xc4, 0xc7, 0xe8, 0x9a, 0x97, 0x76, 0xef, 0x11, 0x79, 0x2c, 0xbc, 0xb3,
		0x9d, 0x7d, 0x5c, 0x05, 0xc2, 0x57, 0x37, 0xc1, 0xe0, 0x7f, 0xd7, 0x5c, 0x0a, 0xbb, 0x4b, 0xde,
		0x32, 0xe6, 0xed, 0x5b, 0x7e, 0xde, 0xc6, 0xf9, 0x79, 0x13, 0x5c, 0x2b, 0xcb, 0xef, 0x78, 0xbc,
		0xb7, 0xfd, 0x10, 0x79, 0x5c, 0x98, 0x2a, 0xae, 0x49, 0xf0, 0x87, 0x0c, 0xec, 0x56, 0x9a, 0xdb,
		0xe2, 0x4e, 0xf2, 0x0d, 0x28, 0xb0, 0xf0, 0xeb, 0x17, 0xf3, 0xaf, 0xae, 0xec, 0xe6, 0xe6, 0x2e,
		0xef, 0xda, 0x7d, 0x9f, 0x7c, 0xa7, 0xe7, 0x31, 0x69, 0x7b, 0x8c, 0xc4, 0xda, 0x1e, 0xf3, 0xf9,
		0x61, 0xd5, 0xee, 0x7a, 0x04, 0xe3, 0x08, 0xe9, 0xd3, 0x46, 0xdc, 0x29, 0xdf, 0x66, 0x91, 0xda,
		0xa8, 0x9a, 0x36, 0x96, 0x1f, 0x63, 0xde, 0x80, 0x4b, 0x10, 0x46, 0xb5, 0x95, 0xcf, 0x4e, 0x3e,
		0x9f, 0x58, 0x1d, 0x32, 0xb5, 0xaf, 0x7e, 0xdd, 0x3c, 0x85, 0x9b, 0x51, 0xf2, 0xe9, 0x92, 0x39,
		0x9e, 0xed, 0x77, 0x72, 0x8e, 0xa1, 0xd7, 0xf2, 0xf2, 0x6e, 0x1d, 0xdb, 0x41, 0xd7, 0x13, 0x3e,
		0xef, 0xd8, 0x4e, 0xd0, 0x67, 0xe3, 0x8d, 0x8d, 0xf2, 0x81, 0xf6, 0xdf, 0x09, 0xee, 0x5b, 0x7e,
		0x4e, 0xc4, 0x15, 0x1d, 0xa1, 0x98, 0x77, 0x15, 0xfc, 0xe2, 0xb2, 0x6f, 0x2d, 0x9b, 0x70, 0x15,
		0xb2, 0xd5, 0xc1, 0x07, 0x77, 0x02, 0xcb, 0x77, 0xbe, 0x99, 0xed, 0x02, 0x4f, 0x64, 0xf9, 0xd1,
		0x5a, 0xe6, 0xf5, 0xce, 0x2e, 0xae, 0x36, 0x69, 0xef, 0x7b, 0x13, 0x48, 0xa1, 0xfb, 0x70, 0x77,
		0xe3, 0x6e, 0x40, 0xb5, 0xdf, 0xbf, 0xd4, 0xe8, 0x02, 0xbc, 0xaf, 0xcc, 0x15, 0x81, 0xd5, 0x1f,
		0x88, 0x47, 0x76, 0x67, 0xae, 0x6d, 0xc0, 0x19, 0xcf, 0x61, 0x29, 0x06, 0xdf, 0x61, 0x56, 0xd3,
		0xa8, 0x4e, 0x68, 0x77, 0x66, 0x8b, 0xeb, 0x45, 0x56, 0x5f, 0x65, 0xce, 0x6b, 0x9b, 0x51, 0x6d,
		0xf5, 0x9a, 0xcb, 0x07, 0xe1, 0xf0, 0x8d, 0xaa, 0x05, 0xf0, 0x95, 0x2b, 0xdb, 0x6b, 0x01, 0xd8,
		0x4e, 0xc9, 0x07, 0x35, 0x26, 0xbe, 0xda, 0x5d, 0x63, 0xc2, 0xdb, 0x13, 0xe1, 0xa3, 0xf5, 0x47,
		0x87, 0x55, 0xd7, 0x7a, 0xd6, 0xd4, 0x65, 0xce, 0x35, 0x77, 0x3e, 0x06, 0xbe, 0x92, 0x81, 0xe7,
		0x71, 0xf7, 0xfc, 0x93, 0xd5, 0x9f, 0x26, 0xb4, 0xbb, 0x54, 0xe3, 0x83, 0x70, 0xc4, 0x97, 0xa1,
		0x42, 0x78, 0x66, 0xfb, 0x11, 0xa5, 0x87, 0xbd, 0x03, 0xbb, 0xa3, 0x56, 0xd1, 0x65, 0xf2, 0xc9,
		0xf6, 0x23, 0xb8, 0x0f, 0xdd, 0x5f, 0x4c, 0xf2, 0x38, 0xc6, 0xfb, 0x2c, 0xec, 0x4e, 0x8d, 0x74,
		0xac, 0x76, 0x17, 0x3d, 0x4f, 0xd9, 0x5d, 0x6c, 0xa5, 0x6b, 0xbd, 0x96, 0xa6, 0xba, 0xdf, 0x36,
		0xe0, 0xae, 0xa9, 0xc7, 0xbb, 0xe0, 0x71, 0x24, 0xa6, 0xd9, 0x9d, 0x2f, 0x5f, 0xdb, 0xb3, 0x5e,
		0x1b, 0x0f, 0x2d, 0xbf, 0x47, 0xb1, 0x2b, 0x82, 0xc7, 0x0d, 0xc8, 0x8d, 0xfa, 0xf4, 0xaf, 0x6b,
		0xcb, 0x8f, 0x8e, 0xdc, 0xf7, 0x7c, 0x95, 0x35, 0xff, 0x34, 0xd5, 0x93, 0xad, 0x1d, 0x03, 0xe3,
		0x95, 0x6e, 0x9c, 0xa6, 0x91, 0xfb, 0x22, 0xe8, 0xf4, 0x79, 0x71, 0xd9, 0x82, 0xb7, 0x15, 0xed,
		0x4a, 0x27, 0xf2, 0x6d, 0x78, 0xd3, 0x6e, 0xc8, 0x3b, 0x19, 0x2e, 0xe5, 0x35, 0xff, 0xc2, 0xa1,
		0xeb, 0x0f, 0x22, 0xa3, 0x8b, 0x20, 0x08, 0x6b, 0x36, 0xbc, 0x70, 0x94, 0xea, 0x3c, 0x52, 0x0e,
		0x6b, 0x36, 0xde, 0x6f, 0x6f, 0xfe, 0x75, 0x79, 0xf2, 0xd9, 0x86, 0x17, 0x96, 0x6d, 0xe7, 0xf0,
		0xe0, 0x20, 0x95, 0xef, 0xca, 0x61, 0x74, 0x87, 0x07, 0xa1, 0x1a, 0x83, 0xfb, 0xc4, 0x3e, 0xa4,
		0x61, 0x0c, 0x39, 0x0c, 0x70, 0x54, 0xdf, 0xab, 0xdb, 0xf0, 0xa2, 0x0f, 0xc3, 0xe8, 0x36, 0x4d,
		0xe5, 0xe0, 0x1c, 0xf0, 0x40, 0x84, 0xd7, 0xa2, 0x63, 0x1b, 0xd4, 0x5a, 0xb1, 0x0e, 0xe2, 0x32,
		0x4b, 0x56, 0xac, 0x82, 0xc0, 0xe7, 0xea, 0x8a, 0xa9, 0x7b, 0x3b, 0xc0, 0xcb, 0xb5, 0x63, 0x50,
		0xc5, 0xe3, 0x4d, 0xf0, 0x29, 0xe8, 0x49, 0x3b, 0x38, 0xe2, 0xb7, 0xb6, 0x48, 0x97, 0xe8, 0x9d,
		0xd3, 0x72, 0xfd, 0x76, 0x63, 0xc3, 0xab, 0x3a, 0xbe, 0x1d, 0xd3, 0x1f, 0xa6, 0x4e, 0x29, 0xcf,
		0x8d, 0xbd, 0xec, 0x7f, 0x12, 0x77, 0xdc, 0x8a, 0xd1, 0x9d, 0xec, 0xc1, 0x5f, 0x5e, 0x9d, 0xdb,
		0xf0, 0xc2, 0xee, 0xc3, 0xdd, 0x57, 0xc7, 0x49, 0x7f, 0x9a, 0xc8, 0xfc, 0x1b, 0xff, 0xd7, 0xb3,
		0x23, 0xae, 0xe9, 0xb4, 0x43, 0x2b, 0x4c, 0xec, 0xae, 0xbb, 0x77, 0x50, 0x0d, 0x99, 0xfc, 0x78,
		0xcf, 0xac, 0x70, 0xb6, 0x77, 0x42, 0x59, 0x11, 0xc5, 0x74, 0x8e, 0x8e, 0x0e, 0xad, 0x10, 0x0a,
		0x1e, 0x0f, 0x9b, 0x17, 0x2c, 0xb4, 0x62, 0x4c, 0xbd, 0xc0, 0x61, 0xde, 0x0d, 0xf3, 0x7e, 0x5a,
		0xb1, 0x00, 0x06, 0x77, 0xbd, 0x35, 0x1b, 0x76, 0xbc, 0xac, 0x0a, 0xad, 0x71, 0x57, 0xd1, 0x8d,
		0xdb, 0x65, 0x56, 0xb0, 0xd7, 0xae, 0x1b, 0x9d, 0x3b, 0x22, 0xb4, 0x83, 0xb9, 0xb4, 0x6b, 0xcd,
		0xcb, 0xb6, 0x4c, 0x7b, 0x7b, 0xaa, 0xf9, 0x37, 0xbe, 0x17, 0x21, 0x97, 0x1e, 0xf3, 0xad, 0x90,
		0x08, 0x1c, 0x11, 0x39, 0xc1, 0xf9, 0xf5, 0x45, 0xba, 0xd4, 0xb3, 0xbc, 0x78, 0xe1, 0x25, 0x73,
		0x2e, 0xd2, 0x9d, 0x98, 0xc8, 0x41, 0x35, 0x0c, 0xa5, 0x2d, 0xb4, 0xc0, 0x0e, 0x51, 0xcb, 0x8e,
		0x10, 0x71, 0x5c, 0x66, 0x63, 0xcf, 0xa2, 0xcd, 0x8e, 0x3d, 0xe6, 0x5e, 0x30, 0x2b, 0xb4, 0xd8,
		0xf8, 0x64, 0xe7, 0x5f, 0x92, 0x85, 0x21, 0x97, 0x5f, 0x1e, 0xb8, 0xbc, 0xe7, 0xcc, 0x4d, 0x7d,
		0x8a, 0xd8, 0xfc, 0x07, 0xe8, 0x45, 0x77, 0x56, 0xf8, 0x07, 0x47, 0x9d, 0x75, 0x7b, 0x9e, 0x2d,
		0xaa, 0x6c, 0xcf, 0x8a, 0xb5, 0x1b, 0x55, 0xed, 0x61, 0x33, 0xc2, 0x57, 0x5c, 0x7a, 0x9c, 0x3d,
		0x58, 0xf1, 0xb6, 0xc3, 0xec, 0xed, 0x3f, 0x7d, 0x27, 0x53, 0xfe, 0x76, 0x0e, 0x01, 0xe4, 0x9e,
		0x08, 0x6d, 0xa1, 0x60, 0xdd, 0xd0, 0xb3, 0x22, 0x28, 0xff, 0xaf, 0x1d, 0xba, 0xe1, 0xe0, 0x86,
		0xaf, 0xf3, 0xbe, 0x95, 0xb5, 0x99, 0xc3, 0x2d, 0x61, 0x60, 0xa7, 0x8f, 0xc2, 0x86, 0x37, 0x1d,
		0x56, 0xcd, 0xb3, 0x63, 0xcf, 0x7e, 0x70, 0x52, 0xf4, 0xc3, 0xb5, 0x15, 0x4b, 0xf6, 0x29, 0xe4,
		0xd2, 0xb1, 0x87, 0x6b, 0xc5, 0xf9, 0x10, 0xe7, 0xe1, 0x89, 0xeb, 0xca, 0x54, 0x39, 0xc2, 0xb9,
		0x6d, 0x31, 0xed, 0x7d, 0x8c, 0xba, 0xcc, 0x71, 0xad, 0x48, 0x8f, 0x90, 0x81, 0xe2, 0x81, 0x5f,
		0xab, 0xa6, 0xbb, 0xdc, 0x2c, 0x1f, 0x47, 0x76, 0xd3, 0xb3, 0x65, 0x11, 0x8f, 0xf2, 0xd1, 0xf6,
		0x1b, 0x16, 0x2d, 0x86, 0x43, 0x6b, 0x16, 0xc3, 0xf8, 0x60, 0x6f, 0x96, 0x7b, 0x43, 0x73, 0x49,
		0xf1, 0xf9, 0x23, 0xed, 0x4d, 0x6a, 0x39, 0x88, 0xb9, 0x2c, 0x52, 0x83, 0x14, 0xaa, 0x4f, 0xff,
		0xb2, 0x62, 0x70, 0x53, 0x1d, 0xef, 0xc9, 0x27, 0xf2, 0xb5, 0x23, 0x83, 0x92, 0x33, 0xe7, 0xfe,
		0xf4, 0xfa, 0xc2, 0xa2, 0xe4, 0xb9, 0xab, 0xfb, 0xa7, 0x48, 0x38, 0xcc, 0xfb, 0xd3, 0x17, 0x76,
		0x25, 0x7a, 0xd8, 0xf0, 0xb6, 0xa3, 0xfb, 0x50, 0xed, 0x21, 0x39, 0x4c, 0xb2, 0xd0, 0x12, 0xff,
		0x1b, 0x7e, 0xf4, 0xed, 0x08, 0xd4, 0x07, 0xc9, 0x74, 0x16, 0x4a, 0xb8, 0x51, 0xd7, 0x8d, 0x2c,
		0x09, 0x84, 0xef, 0xa3, 0x48, 0xd8, 0xb3, 0xbd, 0x67, 0x17, 0x05, 0x8b, 0x82, 0xb6, 0xfa, 0xc5,
		0x24, 0xbf, 0x08, 0x82, 0xf0, 0x2e, 0xd5, 0xf5, 0x15, 0x39, 0x24, 0x2b, 0x45, 0x8e, 0x1d, 0x67,
		0x85, 0x1c, 0x2b, 0x96, 0x6d, 0x14, 0x1d, 0x5c, 0x8b, 0xce, 0x85, 0xf0, 0xad, 0x98, 0xfc, 0x30,
		0xf0, 0x9b, 0x75, 0x8b, 0x44, 0xb1, 0xcb, 0x4f, 0x7f, 0x9c, 0x5a, 0xb1, 0x57, 0x36, 0x1b, 0x3e,
		0xa6, 0x2d, 0xff, 0x9b, 0xc3, 0x82, 0x08, 0xad, 0xe0, 0x34, 0xf7, 0x41, 0x97, 0x87, 0xbe, 0x15,
		0x19, 0x56, 0x6d, 0x47, 0x84, 0xb6, 0xc0, 0xc1, 0x38, 0x28, 0xb7, 0x02, 0x11, 0x2c, 0x09, 0xc9,
		0x87, 0x09, 0x81, 0x36, 0xe5, 0x29, 0x8d, 0xf4, 0x45, 0x2b, 0x72, 0x83, 0x87, 0x55, 0x7c, 0x3e,
		0x0b, 0xe7, 0xc6, 0x12, 0x92, 0x38, 0xb9, 0x01, 0xe2, 0x63, 0x57, 0x45, 0x76, 0x11, 0xdc, 0xd1,
		0x69, 0x97, 0x8f, 0x5f, 0x3f, 0x5d, 0x9d, 0xfb, 0x56, 0x78, 0xb4, 0xe8, 0xde, 0x12, 0x9c, 0x88,
		0x3c, 0x3b, 0xd2, 0x70, 0xe3, 0x35, 0x50, 0xb7, 0xe4, 0x90, 0x4b, 0x7c, 0xed, 0xbd, 0xc7, 0x7e,
		0xd9, 0x41, 0x6c, 0x22, 0x95, 0xea, 0x96, 0xd9, 0x1c, 0xa8, 0xa2, 0x1d, 0xf3, 0xcf, 0x54, 0xf7,
		0x53, 0xcf, 0x0e, 0xc5, 0xb6, 0xef, 0x77, 0x6b, 0x7b, 0x47, 0x0d, 0x4b, 0x58, 0xcd, 0x49, 0x24,
		0xbe, 0xf4, 0x94, 0x45, 0x02, 0x7e, 0x5c, 0x26, 0xc7, 0x16, 0x36, 0x3e, 0x26, 0x0a, 0x9f, 0x5d,
		0x69, 0x49, 0xd5, 0x91, 0x5a, 0xe3, 0xd0, 0x8a, 0x24, 0x67, 0xc5, 0x6d, 0x59, 0x04, 0x9d, 0xa3,
		0x23, 0x3b, 0x86, 0xb4, 0x23, 0x3a, 0xec, 0x4e, 0x0c, 0xc3, 0xc7, 0x54, 0x55, 0xa4, 0xf3, 0xc8,
		0xbe, 0xad, 0xd9, 0xb2, 0x81, 0x93, 0xfa, 0x16, 0xc2, 0x7c, 0x5e, 0xf7, 0xc3, 0x5f, 0x27, 0x61,
		0xfd, 0xd2, 0x0a, 0x3a, 0xfb, 0xb0, 0xd7, 0xb4, 0xe1, 0x35, 0xfd, 0x36, 0xb3, 0x62, 0x07, 0xaf,
		0xfb, 0x60, 0xc5, 0x22, 0x65, 0x8e, 0xe2, 0x9e, 0x88, 0x2e, 0xb9, 0x62, 0x17, 0x5f, 0xbe, 0x5c,
		0xd9, 0x62, 0x57, 0xa3, 0xd2, 0xa6, 0x57, 0xf5, 0x2b, 0x4b, 0x00, 0xf6, 0xd3, 0xe9, 0x85, 0x25,
		0x51, 0xc2, 0x5d, 0xe0, 0xdb, 0x11, 0x77, 0xd9, 0x71, 0xea, 0xed, 0x7e, 0xaf, 0xbe, 0xf7, 0x07,
		0x53, 0xfc, 0x27, 0xe7, 0xa1, 0x25, 0x82, 0x72, 0x7c, 0x4d, 0xee, 0x97, 0x6b, 0x5b, 0xe0, 0xe0,
		0xb2, 0xe7, 0x29, 0x11, 0x7a, 0xfc, 0x31, 0xb0, 0x67, 0x80, 0x4f, 0xcf, 0xed, 0xd8, 0xc1, 0xbb,
		0xf3, 0xbe, 0x71, 0x47, 0xb1, 0x6b, 0xc5, 0xa4, 0x4d, 0xca, 0xec, 0xa9, 0x92, 0x96, 0xe0, 0xed,
		0xb9, 0x1d, 0x15, 0x12, 0xe2, 0xb4, 0x5a, 0xcb, 0x92, 0xff, 0x9c, 0xa0, 0xdd, 0xe6, 0x56, 0x1c,
		0x21, 0x92, 0xcc, 0x15, 0xc1, 0xe5, 0xc9, 0x47, 0x1b, 0xde, 0x35, 0xbe, 0xa1, 0xd8, 0xaa, 0xaa,
		0xc0, 0xf7, 0x96, 0x14, 0xd9, 0x65, 0xd2, 0xf1, 0xb9, 0xba, 0xf2, 0xec, 0x28, 0x00, 0xdb, 0x67,
		0x37, 0x57, 0x32, 0x78, 0x7c, 0xb2, 0xc4, 0xc4, 0xec, 0xd8, 0x02, 0x53, 0xd6, 0x1c, 0xc1, 0x51,
		0xb2, 0x5a, 0x3d, 0xb4, 0xe4, 0x84, 0xb9, 0x1d, 0xc9, 0xea, 0xa7, 0x5e, 0xea, 0xeb, 0x47, 0xf2,
		0x21, 0xdf, 0x96, 0x14, 0xa8, 0x1c, 0x5e, 0x66, 0x7b, 0x1a, 0xa8, 0x5a, 0xed, 0x4a, 0x06, 0x6d,
		0x61, 0x49, 0xad, 0x81, 0xae, 0xb2, 0x26, 0xa2, 0x19, 0xec, 0x2f, 0xb3, 0x3b, 0x3b, 0x06, 0x76,
		0xbc, 0xa9, 0x34, 0x2a, 0xa8, 0x69, 0x51, 0x96, 0x7d, 0x7c, 0x9b, 0xc9, 0x17, 0x5b, 0xb2, 0xd3,
		0xea, 0x56, 0x2d, 0x88, 0xf8, 0x1a, 0xd3, 0xfa, 0x69, 0x94, 0xea, 0x16, 0xd3, 0x5c, 0xf7, 0x47,
		0xdb, 0x56, 0xbc, 0xaf, 0xeb, 0xff, 0xcb, 0xaa, 0x2b, 0x19, 0xf6, 0x07, 0x57, 0x32, 0x7c, 0x15,
		0x7e, 0xc7, 0xae, 0xf3, 0x6e, 0x83, 0x12, 0x1a, 0x4e, 0xe0, 0xfb, 0xdc, 0xb1, 0xc2, 0x8b, 0x08,
		0x4b, 0xca, 0xbd, 0x04, 0xca, 0xff, 0xa2, 0x7a, 0x76, 0x9c, 0x6b, 0x88, 0x6c, 0xc9, 0xb7, 0xb6,
		0x24, 0x34, 0xeb, 0x3e, 0x49, 0x61, 0xc9, 0xb6, 0xbe, 0xd7, 0x0d, 0x2d, 0x91, 0x40, 0xaf, 0x7b,
		0x77, 0x56, 0x95, 0xfb, 0x89, 0x14, 0x93, 0x17, 0x76, 0x60, 0xd5, 0x83, 0x1d, 0xd9, 0xeb, 0xdd,
		0xb6, 0x4d, 0xa7, 0xc5, 0xc2, 0xe1, 0x8e, 0x93, 0x27, 0xfc, 0x9f, 0xf6, 0x94, 0xad, 0x53, 0x03,
		0xb5, 0xf6, 0x9f, 0xb6, 0xc8, 0xa0, 0xb5, 0xfa, 0x65, 0x18, 0x5e, 0xff, 0x12, 0xca, 0xb9, 0xb7,
		0x85, 0x13, 0xb8, 0x76, 0x54, 0x1c, 0x71, 0x5d, 0x61, 0x99, 0x60, 0xf3, 0xc1, 0x8e, 0x02, 0x55,
		0xc3, 0x32, 0xf2, 0xf5, 0xae, 0x15, 0x51, 0xa3, 0xc7, 0x42, 0x2b, 0xa2, 0xc5, 0x48, 0x86, 0x76,
		0x6c, 0x34, 0x76, 0xc3, 0x20, 0x12, 0xf6, 0x24, 0xd4, 0xca, 0x48, 0xde, 0x59, 0x74, 0xe0, 0xd9,
		0x8a, 0xf8, 0xd5, 0x92, 0x18, 0xe6, 0xb1, 0xbe, 0x1f, 0xda, 0xc1, 0x59, 0xc2, 0xc0, 0xaf, 0xed,
		0xef, 0xdb, 0x73, 0x0e, 0xe4, 0xdc, 0x92, 0x4b, 0xf0, 0x42, 0x3b, 0x2e, 0xc2, 0xec, 0xc8, 0xbd,
		0xea, 0xde, 0xf9, 0xe9, 0x8d, 0x8d, 0xfa, 0x71, 0xed, 0xd3, 0x2f, 0xd7, 0x12, 0x01, 0x39, 0xb2,
		0xe5, 0xde, 0x93, 0x4f, 0x81, 0xfc, 0xc5, 0xa4, 0x2d, 0xa5, 0x3f, 0xc3, 0xd3, 0xc0, 0x89, 0x46,
		0x99, 0xca, 0x76, 0x9d, 0x6f, 0x7e, 0xd8, 0xb3, 0x02, 0x74, 0x43, 0x26, 0x99, 0x1d, 0x67, 0x6f,
		0xad, 0xa8, 0x80, 0x24, 0x85, 0xdb, 0xb1, 0x82, 0x16, 0x78, 0x75, 0x5b, 0x2a, 0xc3, 0x33, 0x66,
		0xcf, 0xee, 0xe7, 0x97, 0xb6, 0xdb, 0xb5, 0x0b, 0xa6, 0x06, 0x85, 0xe2, 0xad, 0x88, 0x0e, 0xed,
		0x49, 0x2e, 0x10, 0x16, 0x89, 0x6e, 0xff, 0xad, 0x1f, 0xed, 0x59, 0x21, 0x6f, 0xdf, 0xb1, 0x48,
		0x38, 0xe7, 0xd7, 0xa7, 0x9f, 0x6d, 0x2a, 0x41, 0xba, 0x67, 0x4d, 0xa1, 0xea, 0x68, 0xcf, 0x12,
		0xc5, 0xcd, 0xb5, 0x23, 0xeb, 0xa1, 0x17, 0x5a, 0x54, 0xcd, 0xc0, 0x92, 0x42, 0xdf, 0x5d, 0xee,
		0x0a, 0x76, 0xc9, 0x84, 0xf7, 0xe5, 0x81, 0xcb, 0xf3, 0xd0, 0x8e, 0x3d, 0x0d, 0x4b, 0x4a, 0xa0,
		0x09, 0xbf, 0x2d, 0x7c, 0x71, 0xc7, 0x2c, 0x39, 0xb8, 0x68, 0x47, 0x38, 0xb0, 0x90, 0x10, 0xf7,
		0xa7, 0x2d, 0x09, 0x71, 0x2c, 0x7a, 0xf2, 0x6d, 0xaa, 0xc9, 0x64, 0xc9, 0x96, 0xec, 0x5d, 0x27,
		0x0c, 0x03, 0x4f, 0x38, 0x4f, 0xcc, 0x71, 0x82, 0x9e, 0xaf, 0x2c, 0xc9, 0x87, 0x1b, 0x1e, 0xa8,
		0xb1, 0x82, 0x78, 0x45, 0x4e, 0x60, 0x45, 0x54, 0xcb, 0x43, 0x4f, 0x5a, 0xb1, 0x23, 0xeb, 0xda,
		0x71, 0x36, 0x61, 0x5e, 0x2c, 0x1c, 0xe5, 0xa4, 0x5b, 0xb1, 0x16, 0xec, 0x58, 0xb2, 0xf7, 0xee,
		0x7d, 0xed, 0xd0, 0x8e, 0x12, 0xcf, 0xdd, 0xc0, 0x61, 0xdf, 0xb8, 0x8c, 0x44, 0xe0, 0xd7, 0xac,
		0x3a, 0xfc, 0x61, 0x07, 0xab, 0x7d, 0xac, 0xef, 0x77, 0xbd, 0xd0, 0x8e, 0xea, 0x5c, 0xb2, 0x6b,
		0x49, 0x11, 0x44, 0x65, 0x09, 0x87, 0x19, 0xe9, 0x9c, 0xcc, 0x26, 0x88, 0x8d, 0x8f, 0x21, 0x34,
		0x2f, 0xed, 0xd0, 0xbc, 0x3d, 0x16, 0xde, 0xd9, 0xe2, 0x75, 0xaf, 0x02, 0xe1, 0xab, 0x9b, 0x60,
		0xf0, 0xbf, 0x6b, 0x2e, 0x85, 0x1d, 0xa5, 0xc5, 0x18, 0xf3, 0xf6, 0x2d, 0xc9, 0x93, 0x76, 0x7e,
		0xde, 0x04, 0xd7, 0xca, 0x92, 0x3b, 0x40, 0xee, 0x6d, 0x39, 0xac, 0x16, 0x17, 0x60, 0x88, 0xcf,
		0x2c, 0xfe, 0x21, 0x03, 0x3b, 0x14, 0xbb, 0xb6, 0xb8, 0x93, 0xdc, 0xa2, 0x83, 0x96, 0xc3, 0xcb,
		0x72, 0xed, 0xe0, 0x8c, 0x2e, 0xef, 0xda, 0x71, 0xdf, 0x5d, 0xa7, 0xe7, 0x31, 0x69, 0x0b, 0x17,
		0x67, 0x6d, 0x8f, 0xf9, 0xfc, 0xb0, 0x6a, 0xc7, 0x79, 0xc5, 0x31, 0x13, 0xff, 0x64, 0xd5, 0x9d,
		0x77, 0x6d, 0x16, 0x29, 0x2b, 0xcf, 0x8c, 0x5b, 0x72, 0xbc, 0xca, 0xa2, 0xa2, 0xa9, 0xa3, 0xda,
		0x73, 0x67, 0x27, 0x9f, 0x4f, 0xac, 0xa0, 0xe6, 0xed, 0xab, 0x5f, 0x37, 0x4f, 0xa1, 0x5d, 0x25,
		0x0f, 0x2e, 0x99, 0xe3, 0xd9, 0x72, 0x07, 0xcb, 0x18, 0xd2, 0x2c, 0x29, 0x33, 0xd2, 0xb1, 0x05,
		0xcc, 0x3c, 0xe1, 0xf3, 0x8e, 0x2d, 0xc4, 0x71, 0x96, 0xef, 0x5a, 0xe9, 0x2b, 0xec, 0xb9, 0xfb,
		0xcc, 0xb7, 0x24, 0x1f, 0xd8, 0x15, 0x1d, 0xa1, 0x98, 0x77, 0x15, 0xfc, 0xe2, 0xb2, 0xbf, 0x9a,
		0x6d, 0xba, 0x52, 0xca, 0x0a, 0xf2, 0xcb, 0x9d, 0xc0, 0x92, 0x9d, 0x33, 0x66, 0x4b, 0xe0, 0x1e,
		0x59, 0x72, 0x44, 0x88, 0x79, 0xbd, 0xb3, 0x8b, 0x2b, 0x1b, 0xf7, 0xce, 0x6c, 0x22, 0x37, 0xee,
		0xc3, 0xdd, 0x8d, 0x6b, 0x51, 0xf5, 0xb4, 0xbf, 0xd4, 0xe8, 0x02, 0x86, 0xaf, 0xcc, 0x15, 0x81,
		0x15, 0x2f, 0xce, 0x23, 0x3b, 0x32, 0x41, 0x2c, 0x3a, 0xdb, 0x32, 0x3c, 0x92, 0xe9, 0x3b, 0x76,
		0xdc, 0xfb, 0xde, 0x09, 0xed, 0xd8, 0xa1, 0x76, 0xbd, 0xc8, 0x8a, 0xab, 0xd9, 0x78, 0xcd, 0xae,
		0x2a, 0x58, 0xd7, 0x5c, 0x3e, 0x08, 0x87, 0x5b, 0x79, 0x86, 0xf0, 0x2b, 0x57, 0xb6, 0x9c, 0x21,
		0xb4, 0x85, 0x2a, 0x0e, 0xce, 0x94, 0x7e, 0xb5, 0xe3, 0x4c, 0xa9, 0xb7, 0x27, 0xc2, 0x47, 0x6b,
		0x8e, 0x3a, 0xa9, 0xae, 0x35, 0xac, 0xa0, 0xcb, 0x9c, 0x6b, 0xee, 0x7c, 0x0c, 0x7c, 0x25, 0x03,
		0xcf, 0xe3, 0xee, 0xf9, 0x27, 0x2b, 0xde, 0x3a, 0xb4, 0xa3, 0x74, 0xcf, 0x83, 0x70, 0xc4, 0x97,
		0xa1, 0x62, 0x63, 0xcf, 0x2d, 0xda, 0x7b, 0x07, 0x76, 0x44, 0x3b, 0xa2, 0xcb, 0xe4, 0x93, 0x2d,
		0x47, 0x89, 0x86, 0x97, 0x52, 0xc7, 0x31, 0xc3, 0x67, 0x61, 0x47, 0x8a, 0x90, 0x63, 0x05, 0xdc,
		0xf6, 0x3c, 0x65, 0xc7, 0xe1, 0xe7, 0xae, 0x35, 0x9a, 0x87, 0xea, 0x7e, 0xb3, 0xa8, 0xf6, 0xfa,
		0xe3, 0x5d, 0xf0, 0x38, 0x12, 0x3d, 0xec, 0xc8, 0xbb, 0xac, 0xed, 0x59, 0xa3, 0x25, 0x86, 0x96,
		0xdc, 0xbf, 0xd1, 0x15, 0xc1, 0xa3, 0x45, 0xb9, 0x09, 0x9f, 0xfe, 0x75, 0x6d, 0x49, 0x8a, 0xf0,
		0x7d, 0xcf, 0x57, 0x69, 0xf3, 0xaa, 0x12, 0x3d, 0xd1, 0xda, 0xa1, 0x6d, 0xf7, 0xf5, 0xbf, 0x7a,
		0xf9, 0x2f, 0x5e, 0x19, 0xed, 0xf2, 0x49, 0xaf, 0xd3, 0xe5, 0xbe, 0xe2, 0x6e, 0xf9, 0xb8, 0xf4,
		0x7d, 0x87, 0x66, 0x22, 0xc6, 0x03, 0xbf, 0x1b, 0x38, 0x15, 0xd1, 0x3e, 0x16, 0xa3, 0x62, 0xb0,
		0xd1, 0xfc, 0x0f, 0xe2, 0xef, 0x23, 0xc5, 0x14, 0x2f, 0xaf, 0xb7, 0x2e, 0xca, 0xa7, 0x3c, 0x72,
		0xa4, 0x08, 0x95, 0x08, 0xfc, 0x7e, 0x1f, 0x27, 0xae, 0x1b, 0x95, 0x58, 0x49, 0xf2, 0x36, 0x97,
		0xdc, 0x77, 0x78, 0xa9, 0x2d, 0x83, 0x6e, 0x49, 0xdd, 0xf3, 0xd2, 0x1d, 0x8b, 0x78, 0x69, 0xdc,
		0x55, 0x49, 0x05, 0x83, 0x9f, 0x3a, 0x81, 0x94, 0x3c, 0x0a, 0x03, 0xdf, 0x15, 0x7e, 0xe7, 0x87,
		0x1f, 0x06, 0x52, 0x95, 0x06, 0xd5, 0xde, 0x7c, 0xee, 0xab, 0x92, 0xf0, 0x07, 0x7f, 0xe4, 0xf2,
		0x07, 0xe1, 0xf4, 0x1f, 0x7e, 0xe0, 0xbe, 0x0a, 0xe4, 0xd3, 0xfb, 0x75, 0x5f, 0xee, 0xff, 0x0a,
		0xbf, 0x3f, 0x92, 0xb5, 0x35, 0xff, 0xfc, 0x63, 0xe0, 0xb7, 0x45, 0xa7, 0x7c, 0x5c, 0xaa, 0xae,
		0xf9, 0xc0, 0x95, 0xe4, 0x6d, 0xf1, 0x58, 0x3e, 0x4e, 0x60, 0x12, 0x93, 0x5d, 0x57, 0xa7, 0x32,
		0xb8, 0xdd, 0x69, 0x7d, 0xfb, 0x2b, 0x5f, 0x07, 0x3d, 0xe9, 0xf0, 0x44, 0xdd, 0x0d, 0x87, 0x81,
		0x3f, 0xfd, 0x0a, 0xa4, 0x3b, 0xa4, 0xb8, 0x83, 0x37, 0x4e, 0x66, 0xf4, 0xe5, 0x7f, 0xb2, 0xe8,
		0x44, 0x76, 0x7a, 0xfd, 0xa5, 0x59, 0x3e, 0x2e, 0x29, 0xd9, 0xe3, 0x09, 0x1b, 0x98, 0x7a, 0x7a,
		0xfc, 0xc1, 0xa9, 0x4d, 0x73, 0xdd, 0x05, 0x2b, 0x64, 0xb2, 0x09, 0xbb, 0x67, 0xd2, 0xed, 0x13,
		0xed, 0xe1, 0x5b, 0x27, 0x1e, 0xfc, 0x71, 0xfa, 0xeb, 0x4c, 0x33, 0x09, 0xc7, 0x6f, 0xce, 0xca,
		0x3e, 0x05, 0xb2, 0xe4, 0x07, 0x7e, 0x25, 0xae, 0x7c, 0x21, 0xfe, 0x1f, 0x77, 0x27, 0xa6, 0x15,
		0xbd, 0x9b, 0x98, 0x5f, 0x34, 0xb0, 0x9f, 0x51, 0xd7, 0xa5, 0x7e, 0xd7, 0x3f, 0xfc, 0x19, 0x9b,
		0x1b, 0x19, 0xe2, 0xac, 0x79, 0xbe, 0x4f, 0xfa, 0x82, 0xb1, 0xa5, 0x55, 0x13, 0x3e, 0x96, 0xd4,
		0xe2, 0xb2, 0x58, 0x1e, 0x81, 0x05, 0x66, 0xb5, 0x44, 0x32, 0x8b, 0x24, 0xb3, 0x4c, 0x1a, 0x0b,
		0x4d, 0xe7, 0x9c, 0x13, 0x52, 0x8f, 0xf2, 0x20, 0x15, 0x2c, 0xd3, 0x8c, 0x7b, 0x9c, 0xb5, 0x25,
		0x6f, 0xa7, 0x99, 0xf1, 0x91, 0x2b, 0x39, 0x48, 0xf1, 0xec, 0x15, 0x53, 0xf7, 0x23, 0x07, 0x1c,
		0x7a, 0x4c, 0xb5, 0x03, 0xd9, 0x3d, 0x1e, 0x7b, 0xb9, 0x68, 0xf9, 0x8f, 0x67, 0x7e, 0xea, 0xf7,
		0x3f, 0xc0, 0x8e, 0x9e, 0xa9, 0x20, 0x63, 0x3e, 0xef, 0xac, 0x25, 0x2c, 0x37, 0x57, 0xe7, 0xa7,
		0xa5, 0xdd, 0xd2, 0xa0, 0x36, 0x8b, 0x7a, 0x0a, 0x79, 0x29, 0x08, 0x07, 0x6d, 0x96, 0xda, 0x81,
		0x5c, 0x82, 0x8e, 0x1b, 0x42, 0x3f, 0x06, 0xda, 0xf7, 0x36, 0xd2, 0x8f, 0x64, 0xa2, 0x7f, 0xce,
		0xf4, 0x43, 0x85, 0xc2, 0x4d, 0xcf, 0x3a, 0x06, 0x4f, 0x67, 0x23, 0x1b, 0x5f, 0x06, 0x5f, 0x31,
		0xcf, 0x7b, 0x2a, 0x45, 0x5c, 0x0d, 0xcc, 0x41, 0xb1, 0x4e, 0x29, 0x94, 0x81, 0x0a, 0x9c, 0xc0,
		0x2b, 0x09, 0x97, 0xfb, 0x4a, 0xb4, 0x05, 0x97, 0xa5, 0xb6, 0xe0, 0x9e, 0x5b, 0x7a, 0xd3, 0x37,
		0xa7, 0xb7, 0x25, 0x75, 0xcf, 0xd4, 0x0f, 0x5f, 0x44, 0x25, 0xe6, 0x38, 0x3c, 0x54, 0xdc, 0x2d,
		0x05, 0x43, 0x3a, 0xff, 0xed, 0xe2, 0xe4, 0x73, 0xf2, 0x77, 0x6a, 0xb3, 0x9e, 0x37, 0x3d, 0x81,
		0x95, 0xbe, 0xa1, 0x46, 0xc7, 0xfd, 0xbe, 0x6e, 0xab, 0xff, 0x3a, 0xac, 0x55, 0xab, 0x5b, 0xc2,
		0x59, 0x12, 0x9a, 0xed, 0xf6, 0x70, 0x96, 0x94, 0x7b, 0x79, 0x05, 0xe7, 0x2c, 0x43, 0xf3, 0x52,
		0x4f, 0x19, 0x79, 0xcb, 0x7e, 0x8a, 0x67, 0xcf, 0xe3, 0xae, 0x3f, 0xb0, 0x28, 0xc3, 0xba, 0x19,
		0x7d, 0x90, 0x81, 0xa5, 0xde, 0xfc, 0xfb, 0xea, 0xec, 0x3a, 0xed, 0xc2, 0xf9, 0xc6, 0xbc, 0x1e,
		0x8f, 0xd6, 0x92, 0x46, 0x68, 0xb5, 0xab, 0xe5, 0x9f, 0xa5, 0xfa, 0xaf, 0xa3, 0x3e, 0xea, 0xa4,
		0x6e, 0xf1, 0xf9, 0x5d, 0x41, 0x3e, 0xc6, 0xe1, 0x66, 0x7c, 0x8c, 0xa3, 0xfa, 0x06, 0x7c, 0x8c,
		0x93, 0xcf, 0xff, 0xde, 0x84, 0x15, 0x75, 0x78, 0x72, 0x98, 0xe1, 0x63, 0xa4, 0x7a, 0xb2, 0xa5,
		0x1b, 0xfa, 0x11, 0x51, 0x65, 0x90, 0x80, 0x99, 0xff, 0xaa, 0xf8, 0x3b, 0xb8, 0x43, 0xc9, 0xe1,
		0xe2, 0x81, 0xcb, 0x89, 0x06, 0xbc, 0x29, 0x5a, 0xef, 0xd4, 0x87, 0xdb, 0xca, 0x98, 0x6b, 0xfa,
		0xf3, 0x5b, 0x13, 0x7a, 0x4d, 0xbd, 0x73, 0xfa, 0x08, 0x2c, 0xd5, 0xc4, 0x2f, 0x33, 0xac, 0x2b,
		0x19, 0x3c, 0x08, 0x97, 0xcf, 0x1a, 0x57, 0x6c, 0x4a, 0xd3, 0xb6, 0x13, 0xf5, 0xee, 0x26, 0x5b,
		0x28, 0xc3, 0x28, 0x6c, 0x62, 0x69, 0xd1, 0xe8, 0x89, 0xf0, 0xfe, 0x29, 0x12, 0x0e, 0xf3, 0x4a,
		0x73, 0x7b, 0x2e, 0x43, 0xc9, 0x43, 0x44, 0x53, 0x62, 0xf0, 0x0f, 0xff, 0x66, 0xb2, 0x0b, 0xd3,
		0xed, 0x45, 0xaa, 0x14, 0xf8, 0xde, 0x53, 0x29, 0x0c, 0xc2, 0x9e, 0xc7, 0x14, 0x1f, 0xfe, 0xb9,
		0xc7, 0x59, 0xbb, 0xf4, 0x4b, 0xa8, 0xfb, 0xb9, 0xd7, 0xfb, 0xe1, 0xb3, 0xa9, 0xd6, 0x83, 0x76,
		0x69, 0x20, 0xb0, 0xdc, 0x7c, 0x3d, 0xf9, 0x7c, 0xfd, 0xf1, 0xec, 0xfc, 0xdb, 0xd9, 0xd7, 0x6d,
		0xd1, 0x9a, 0xd3, 0x2f, 0x84, 0xed, 0x08, 0xdf, 0x52, 0x21, 0x04, 0x94, 0x67, 0x7a, 0xe5, 0xf9,
		0xfb, 0xbc, 0xf2, 0xfc, 0xbf, 0x4e, 0x4f, 0x4a, 0xee, 0xab, 0x37, 0x6f, 0x77, 0xdf, 0xbf, 0xdf,
		0x8d, 0x77, 0x07, 0x8e, 0x67, 0x36, 0xb4, 0x5a, 0x33, 0x4d, 0x4d, 0x23, 0x50, 0xb4, 0xf2, 0x37,
		0x50, 0xb8, 0x0b, 0xb7, 0x25, 0x2f, 0x54, 0xb4, 0xb0, 0x25, 0x3f, 0xf2, 0x13, 0xf1, 0x66, 0x63,
		0x04, 0x46, 0x06, 0x46, 0x96, 0x17, 0x23, 0x1b, 0x2d, 0xc6, 0xd1, 0xce, 0x77, 0x7a, 0x5a, 0xb6,
		0xd0, 0x52, 0xf6, 0x1d, 0x79, 0x56, 0x5a, 0xba, 0x1f, 0xff, 0xae, 0xe4, 0x89, 0x68, 0xc0, 0x7c,
		0xa6, 0xb7, 0xe5, 0x07, 0x24, 0x6c, 0x89, 0x75, 0x95, 0xde, 0x78, 0xcc, 0xe7, 0xd1, 0xdb, 0xd2,
		0xd2, 0x5d, 0xfa, 0x79, 0x4e, 0xb6, 0xf8, 0x38, 0x93, 0xbc, 0xc4, 0x3d, 0xde, 0x9f, 0xe7, 0xa8,
		0xdf, 0x27, 0x2b, 0x2d, 0x0d, 0xab, 0x7e, 0xf8, 0x71, 0x6e, 0xcd, 0x08, 0x80, 0x4b, 0xdd, 0xc0,
		0xe5, 0x1e, 0xb8, 0x18, 0xb8, 0x18, 0xb8, 0x98, 0x55, 0x5c, 0x6c, 0x6a, 0xaa, 0x8e, 0xa7, 0xbe,
		0x6e, 0xbd, 0xf0, 0xbb, 0xf9, 0x5f, 0xcd, 0x63, 0x61, 0x34, 0xff, 0x07, 0xf1, 0xcf, 0xe7, 0x7f,
		0x2c, 0x7c, 0x97, 0x3f, 0x96, 0xb5, 0xce, 0xf6, 0x85, 0x88, 0xd4, 0x89, 0x52, 0x32, 0xdd, 0x8c,
		0x5f, 0x0a, 0xff, 0x2c, 0xc6, 0xc2, 0xf2, 0x71, 0xc9, 0xef, 0x79, 0x5e, 0x8a, 0x79, 0xbb, 0x64,
		0x8f, 0xd9, 0x1b, 0xf9, 0x22, 0x5d, 0x2e, 0xb9, 0xfb, 0xe1, 0x29, 0x6e, 0xa2, 0xe8, 0x4c, 0xf7,
		0xc5, 0xbf, 0x68, 0xbd, 0x96, 0xc5, 0xea, 0xfb, 0x81, 0x62, 0xb1, 0x6b, 0x7c, 0x7d, 0xda, 0xca,
		0x91, 0x73, 0xcf, 0xbb, 0x2c, 0x1c, 0xdb, 0x47, 0xc8, 0x7d, 0x67, 0xe0, 0x20, 0x2a, 0x53, 0xc4,
		0x78, 0xd9, 0x97, 0xbb, 0x43, 0x5e, 0xbc, 0x93, 0xee, 0xa3, 0xbc, 0xb0, 0x16, 0xcb, 0x51, 0xef,
		0x6e, 0xd2, 0xe1, 0xab, 0x9f, 0x62, 0x72, 0x50, 0x73, 0xe6, 0xb1, 0x57, 0x86, 0x69, 0x3d, 0x7e,
		0xbc, 0xb6, 0xaf, 0x4c, 0xe2, 0x1b, 0xa7, 0x7d, 0xa1, 0x58, 0x07, 0x09, 0x93, 0xba, 0xbc, 0xd4,
		0x2e, 0x2e, 0xb5, 0x4b, 0x9b, 0x77, 0x61, 0x62, 0x8d, 0x0b, 0xb8, 0xb3, 0x25, 0x6b, 0xaf, 0xcb,
		0x5e, 0x67, 0x56, 0xc5, 0xfa, 0x23, 0xb8, 0x6c, 0x4d, 0x6d, 0x48, 0xe8, 0x25, 0xda, 0x5b, 0x19,
		0x71, 0x89, 0xb6, 0x35, 0x81, 0x96, 0x33, 0x5a, 0x11, 0x29, 0xc3, 0xab, 0xf8, 0xf9, 0x74, 0xd1,
		0x44, 0xcd, 0xb2, 0x68, 0x42, 0xb4, 0x11, 0x44, 0x64, 0x5c, 0xee, 0x66, 0x62, 0x87, 0xa4, 0x66,
		0x30, 0x7e, 0xd0, 0x9d, 0x89, 0xf6, 0xb3, 0x9e, 0x81, 0x9d, 0x6a, 0x2c, 0xe5, 0x48, 0xa7, 0x0b,
		0xbb, 0x33, 0x1b, 0x0c, 0x85, 0xe1, 0x90, 0x19, 0x10, 0x95, 0x21, 0x91, 0x1b, 0x14, 0xb9, 0x61,
		0x51, 0x1a, 0x58, 0x3a, 0x43, 0x4b, 0x69, 0x70, 0xd9, 0x83, 0xf6, 0x45, 0x36, 0xa4, 0xa4, 0xf0,
		0x3b, 0x59, 0x96, 0xcb, 0xc8, 0xc9, 0x1c, 0xee, 0x98, 0x19, 0xb7, 0x14, 0x63, 0x56, 0xe6, 0x3e,
		0xbb, 0xf3, 0xb8, 0x9b, 0x1d, 0x6b, 0x46, 0x0d, 0xa5, 0x9c, 0xb7, 0xa9, 0xb4, 0xdb, 0xfe, 0xf2,
		0x05, 0x5c, 0x01, 0xae, 0x00, 0x57, 0x49, 0x56, 0xcb, 0x5d, 0x10, 0x78, 0x9c, 0xf9, 0x14, 0x78,
		0x55, 0x2b, 0x30, 0x5e, 0x0d, 0x95, 0xc0, 0xe3, 0xec, 0x57, 0x8d, 0xf6, 0x9b, 0xc9, 0x8e, 0x55,
		0x55, 0x00, 0x15, 0x80, 0x0a, 0x40, 0x95, 0x64, 0xb5, 0xf4, 0x84, 0xaf, 0xf6, 0xea, 0x04, 0x38,
		0x75, 0x90, 0xa1, 0x89, 0xaf, 0xcc, 0xef, 0xf0, 0x4c, 0xf9, 0xfd, 0xa5, 0xcc, 0xa9, 0xcc, 0xa5,
		0x78, 0xe3, 0x20, 0xf3, 0xba, 0x27, 0x02, 0x95, 0x85, 0xe6, 0x06, 0xa7, 0x20, 0x08, 0xdb, 0xfb,
		0x24, 0x99, 0xd3, 0x8f, 0x45, 0x4f, 0x45, 0x47, 0x0c, 0xb6, 0x38, 0xaa, 0x99, 0xdb, 0x7d, 0x7e,
		0x47, 0x30, 0x05, 0xec, 0xb1, 0xf0, 0x53, 0xd0, 0xa8, 0x1f, 0x35, 0x8e, 0x9a, 0x07, 0xf5, 0xa3,
		0xfd, 0x02, 0xcf, 0xc5, 0x4e, 0x3e, 0x4f, 0xb7, 0x4c, 0xd1, 0x15, 0xad, 0x8a, 0xd1, 0xd9, 0xa3,
		0x4a, 0x77, 0xe0, 0x28, 0xbb, 0xa8, 0x17, 0x38, 0x15, 0xfe, 0xa8, 0x8e, 0xd5, 0x20, 0x9b, 0x43,
		0xc9, 0xa7, 0x4a, 0x5c, 0xf0, 0xa1, 0xc3, 0x69, 0x84, 0xbe, 0x36, 0xf3, 0x22, 0x0a, 0xa5, 0x4f,
		0x7b, 0x0d, 0x9f, 0xa4, 0xa2, 0x7b, 0xb2, 0xdd, 0xc7, 0x85, 0xe7, 0x33, 0xec, 0x46, 0x4e, 0xef,
		0xfe, 0xcd, 0x7c, 0xb7, 0x1b, 0xeb, 0xe1, 0xba, 0xb6, 0x7d, 0x13, 0xec, 0xa6, 0xa4, 0xa3, 0xea,
		0x99, 0x28, 0xba, 0xad, 0x59, 0x42, 0xd0, 0xf5, 0xc9, 0xe8, 0x31, 0x72, 0x82, 0x96, 0x2f, 0xd4,
		0x18, 0x65, 0xde, 0xbf, 0x8f, 0x11, 0x62, 0x37, 0x4d, 0x4e, 0x8d, 0x1e, 0x9c, 0x08, 0x1f, 0x1a,
		0x19, 0x60, 0xa2, 0xff, 0xf4, 0x96, 0xec, 0xfe, 0x85, 0x40, 0x89, 0x65, 0x28, 0x11, 0x6e, 0xcc,
		0xee, 0x1f, 0x73, 0x5d, 0xc9, 0xa3, 0x68, 0x8d, 0x44, 0xa0, 0x57, 0xd7, 0xcb, 0xa4, 0xa9, 0x6c,
		0x0a, 0x55, 0x6d, 0x53, 0x14, 0xaa, 0x10, 0x0a, 0x95, 0x21, 0xe3, 0xca, 0x47, 0xa1, 0x4a, 0x6b,
		0x74, 0xf3, 0xc6, 0x97, 0x7d, 0x92, 0xe7, 0x4c, 0x30, 0xeb, 0x14, 0x67, 0x33, 0x44, 0x32, 0x83,
		0xa4, 0x34, 0x4c, 0x72, 0x03, 0xa5, 0x36, 0x54, 0x6d, 0x06, 0xab, 0xcd, 0x70, 0x75, 0x18, 0x30,
		0x91, 0xb2, 0x93, 0x71, 0xbd, 0x65, 0x35, 0xec, 0x71, 0x43, 0x29, 0x53, 0xcd, 0x5e, 0x5d, 0xbc,
		0xa9, 0x52, 0xd0, 0x34, 0x9b, 0x3b, 0xb9, 0xd9, 0xeb, 0x30, 0x7f, 0x6d, 0x30, 0xa0, 0x0b, 0x0e,
		0xb4, 0xc3, 0x82, 0x76, 0x78, 0xd0, 0x09, 0x13, 0x34, 0x70, 0x41, 0x04, 0x1b, 0xe4, 0xf0, 0x31,
		0x15, 0xaf, 0xd2, 0xaf, 0xa7, 0x49, 0x34, 0x4b, 0xbd, 0x90, 0x68, 0x37, 0x24, 0xb4, 0xc1, 0x8a,
		0x4e, 0x78, 0xd1, 0x0e, 0x33, 0xba, 0xe1, 0xc6, 0x18, 0xec, 0x18, 0x83, 0x1f, 0x13, 0x30, 0x44,
		0x0b, 0x47, 0xc4, 0xb0, 0x94, 0x5d, 0x51, 0x4c, 0xa4, 0x90, 0x55, 0x68, 0x62, 0x91, 0x17, 0x09,
		0xcb, 0xa1, 0x86, 0xb6, 0xaf, 0x98, 0x52, 0x5c, 0xfa, 0x99, 0x77, 0xea, 0x57, 0x76, 0xf0, 0x9f,
		0x37, 0x6f, 0xbe, 0x57, 0x2b, 0x47, 0xad, 0xdf, 0xdf, 0x6b, 0x95, 0xa3, 0xd6, 0xf0, 0xcb, 0xda,
		0xe0, 0x7f, 0xc3, 0xaf, 0xeb, 0xdf, 0xab, 0x95, 0xc6, 0xe8, 0xeb, 0xfd, 0xef, 0xd5, 0xca, 0x7e,
		0xeb, 0xed, 0x8f, 0x1f, 0xef, 0xdf, 0xfe, 0xbd, 0xf7, 0x9c, 0xfc, 0xc1, 0x7f, 0xd0, 0x2f, 0xee,
		0xd6, 0x4e, 0x31, 0x4d, 0x85, 0xd0, 0x4c, 0x62, 0xa8, 0xab, 0x78, 0xdc, 0xef, 0x0c, 0x44, 0x6c,
		0x4d, 0xbe, 0x77, 0xb6, 0x1b, 0xb8, 0x61, 0xb8, 0x61, 0xb8, 0x61, 0xb8, 0x61, 0xb2, 0xd5, 0xde,
		0x13, 0xbe, 0x3a, 0xd4, 0xe8, 0x7f, 0xf7, 0x35, 0x34, 0x4d, 0x93, 0x26, 0xb7, 0xea, 0x9f, 0x1e,
		0xeb, 0x2c, 0x51, 0xa7, 0xd5, 0x19, 0xc6, 0xf4, 0x85, 0x6e, 0x88, 0xd3, 0xf0, 0x56, 0xf6, 0xa3,
		0x21, 0x25, 0xcc, 0x90, 0xf5, 0xce, 0x4e, 0x3d, 0x7b, 0xdc, 0xb8, 0xa9, 0xdf, 0xab, 0x6f, 0xd0,
		0xdc, 0xef, 0xd8, 0xd1, 0x6a, 0x61, 0x99, 0x75, 0xa1, 0xd4, 0xb5, 0x8c, 0x39, 0x70, 0x2b, 0xdb,
		0xd5, 0x92, 0x1b, 0xd7, 0x8f, 0x84, 0x77, 0xc7, 0x1b, 0xe3, 0xa3, 0xaf, 0x52, 0xa5, 0xcc, 0xe9,
		0x9b, 0x1d, 0x8a, 0x94, 0x66, 0x42, 0x89, 0x92, 0x5e, 0x9a, 0xa4, 0xce, 0x91, 0xc6, 0x0e, 0x07,
		0x76, 0x38, 0x0c, 0xc7, 0x34, 0xc5, 0xc2, 0x60, 0xf2, 0xd8, 0x85, 0x20, 0x59, 0xf1, 0x35, 0xe3,
		0xaf, 0x1d, 0x10, 0xb6, 0xb9, 0x24, 0xb9, 0x31, 0xdc, 0x24, 0x38, 0x1f, 0x16, 0x9f, 0x22, 0x47,
		0xf4, 0x24, 0xb5, 0x5e, 0xd7, 0x9e, 0x57, 0x6a, 0x50, 0xaf, 0x03, 0xd4, 0x01, 0xea, 0x5b, 0x08,
		0xea, 0xd8, 0xb6, 0x86, 0x5e, 0xae, 0x19, 0x66, 0x74, 0xc3, 0x8d, 0x31, 0xd8, 0x31, 0x06, 0x3f,
		0x26, 0x60, 0x48, 0x8f, 0xa2, 0x81, 0x6d, 0xeb, 0x55, 0x84, 0x05, 0xdb, 0xd6, 0xd8, 0xb6, 0xd6,
		0x61, 0x26, 0xe5, 0x40, 0x8a, 0x8e, 0x86, 0x6d, 0x88, 0x89, 0x3b, 0x18, 0xb6, 0x0f, 0xc7, 0x0b,
		0xc7, 0x0b, 0xc7, 0x0b, 0xc7, 0x4b, 0xe8, 0x78, 0x47, 0x6e, 0xb7, 0xa2, 0x05, 0x62, 0x66, 0xbc,
		0x6f, 0x43, 0x43, 0xdb, 0x67, 0x7e, 0xaf, 0xdb, 0x1f, 0xa2, 0x67, 0xe4, 0x46, 0x51, 0xad, 0x09,
		0xe4, 0x46, 0xc1, 0xe5, 0xc0, 0xe5, 0xc0, 0xe5, 0x68, 0x5a, 0xed, 0xc8, 0x8d, 0x9a, 0xff, 0x87,
		0xdc, 0xa8, 0xb5, 0xba, 0x41, 0x6e, 0x54, 0xb2, 0xa9, 0x47, 0x6e, 0x54, 0xb1, 0xe7, 0x1e, 0xb9,
		0x51, 0x05, 0x68, 0x09, 0xb9, 0x51, 0x93, 0xdc, 0xa8, 0x35, 0xee, 0x3d, 0x32, 0x37, 0x39, 0x14,
		0x7b, 0xe9, 0x0f, 0x52, 0x6a, 0x48, 0x8e, 0x1a, 0xb4, 0x8a, 0x03, 0xe0, 0x85, 0x0b, 0x7b, 0xb0,
		0x93, 0x9e, 0x47, 0x58, 0xb3, 0xe1, 0x3b, 0xe9, 0x7d, 0x63, 0xaf, 0x74, 0x64, 0xd0, 0xd3, 0xb8,
		0xa3, 0x3e, 0xd5, 0x87, 0x1e, 0xb5, 0xa5, 0x06, 0xb5, 0x05, 0x6a, 0x0b, 0xd4, 0x96, 0xe2, 0xa9,
		0x2d, 0xd4, 0x70, 0x35, 0x6e, 0x98, 0xb8, 0xfc, 0xcd, 0x4a, 0x63, 0x22, 0x2d, 0x87, 0x63, 0x08,
		0xbe, 0xb4, 0xc3, 0x98, 0x09, 0x38, 0x33, 0x06, 0x6b, 0xa6, 0xe0, 0xcd, 0x38, 0xcc, 0x19, 0x87,
		0x3b, 0x93, 0xb0, 0xa7, 0x59, 0x64, 0xd0, 0x64, 0x2f, 0xba, 0xe0, 0x70, 0xdc, 0x01, 0x73, 0x1c,
		0x1e, 0xaa, 0x4a, 0x37, 0x70, 0x0d, 0x2c, 0xe4, 0x71, 0x69, 0xc0, 0xa9, 0x4e, 0x35, 0xaf, 0xac,
		0xa9, 0xdb, 0x6a, 0x06, 0x85, 0xd8, 0x75, 0xf7, 0x67, 0x48, 0xfe, 0xd3, 0x0d, 0xd4, 0x26, 0x01,
		0xdb, 0x38, 0x70, 0x9b, 0x06, 0xf0, 0xdc, 0x80, 0x3c, 0x37, 0x40, 0xcf, 0x03, 0xd8, 0xf5, 0x02,
		0xbc, 0x66, 0xa0, 0x1f, 0x0f, 0x98, 0xb6, 0xdd, 0xc6, 0x95, 0xd6, 0x96, 0xfd, 0xea, 0xb4, 0xc4,
		0xec, 0xb5, 0xb6, 0x63, 0xe7, 0x02, 0xd0, 0xb9, 0x39, 0xc5, 0xdc, 0x07, 0x2e, 0x95, 0x88, 0x78,
		0xdf, 0x5c, 0x86, 0x52, 0xf6, 0x03, 0xf3, 0x0c, 0xfa, 0xe4, 0xe5, 0xfd, 0x9b, 0x73, 0xcf, 0xb5,
		0x6a, 0x15, 0xce, 0x19, 0xce, 0x19, 0xce, 0x19, 0xce, 0x19, 0xce, 0x79, 0x3a, 0x35, 0xa8, 0xd6,
		0x34, 0xe8, 0x9b, 0x9b, 0x06, 0xba, 0xd2, 0x9b, 0x3b, 0x34, 0xff, 0xcf, 0x0c, 0x7c, 0x94, 0x4c,
		0xe5, 0x16, 0xe5, 0xe4, 0xd4, 0x16, 0xba, 0x1d, 0x25, 0xa0, 0xd4, 0x0c, 0xf7, 0x6b, 0x30, 0x1f,
		0xc5, 0x30, 0xbc, 0xcc, 0x2e, 0x25, 0xf6, 0xb8, 0x75, 0x4b, 0xa9, 0x51, 0x3d, 0xda, 0xdf, 0xa2,
		0xd5, 0xb4, 0xb3, 0x19, 0xbd, 0xb4, 0x10, 0xcc, 0x2d, 0x2c, 0xab, 0x50, 0x72, 0xde, 0x0d, 0x95,
		0xb9, 0xe8, 0x6d, 0xd4, 0xa1, 0xb9, 0x70, 0xad, 0xcf, 0x53, 0x11, 0xaf, 0x21, 0x5e, 0x43, 0xbc,
		0x86, 0x78, 0x0d, 0xf1, 0x1a, 0xc4, 0xd4, 0x22, 0xfa, 0xdf, 0x8a, 0xcb, 0x3d, 0xf6, 0x64, 0xdc,
		0x0b, 0xc7, 0xdd, 0x9a, 0xf3, 0xc5, 0x10, 0x4e, 0xe1, 0x88, 0xe1, 0x88, 0xe1, 0x88, 0xe1, 0x88,
		0x21, 0x9c, 0xd2, 0xfd, 0x83, 0x70, 0xaa, 0xa5, 0x5b, 0x43, 0x87, 0x36, 0x17, 0xfa, 0x85, 0x70,
		0xba, 0xb1, 0x4b, 0x69, 0xaf, 0x59, 0xad, 0x42, 0x38, 0xb5, 0xad, 0x17, 0x08, 0xa7, 0xcb, 0x02,
		0x37, 0x11, 0x48, 0xa1, 0x8c, 0xc6, 0x6c, 0x71, 0x8f, 0xc8, 0x74, 0x41, 0xc0, 0x86, 0x80, 0x0d,
		0x01, 0x1b, 0x02, 0xb6, 0xdc, 0x02, 0xb6, 0x43, 0x83, 0xf1, 0xda, 0x3e, 0xe2, 0x35, 0xc4, 0x6b,
		0x49, 0x48, 0x36, 0x12, 0x5d, 0x10, 0xaf, 0x11, 0x2d, 0xa5, 0xfa, 0x7e, 0x03, 0xe1, 0x1a, 0xc2,
		0x35, 0xfb, 0xc3, 0xb5, 0x07, 0x21, 0x55, 0x8f, 0x79, 0xe3, 0x42, 0xe5, 0xc6, 0xa2, 0xb6, 0xf9,
		0x8e, 0x11, 0x4e, 0x21, 0x9c, 0x42, 0x38, 0x85, 0x70, 0x0a, 0xe1, 0xd4, 0x42, 0x19, 0x6b, 0x93,
		0xb9, 0x28, 0x47, 0x06, 0xfa, 0x8a, 0xc7, 0x72, 0xe3, 0x62, 0x2a, 0x43, 0x37, 0x7f, 0xbc, 0x3a,
		0x87, 0x87, 0x06, 0xfb, 0xd4, 0x7d, 0x53, 0xc8, 0xca, 0x8e, 0x6d, 0xbf, 0x41, 0x24, 0x1f, 0x92,
		0x6a, 0x38, 0x3e, 0xcc, 0xc7, 0xf8, 0x9a, 0x30, 0x3e, 0x33, 0xc6, 0xc7, 0x2a, 0xed, 0x93, 0xca,
		0xa7, 0xd6, 0xdf, 0xb5, 0x77, 0x8d, 0xe7, 0xe3, 0xb7, 0x7f, 0x1f, 0x3c, 0xcf, 0xff, 0xf0, 0xf7,
		0xb2, 0x3f, 0xab, 0xbd, 0x3b, 0x78, 0x3e, 0x5e, 0xf1, 0x9b, 0xe6, 0xf3, 0xf1, 0x9a, 0x6d, 0xec,
		0x3f, 0xbf, 0x59, 0xf8, 0xd3, 0xfe, 0xcf, 0xeb, 0xab, 0x1e, 0x68, 0xac, 0x78, 0x60, 0x6f, 0xd5,
		0x03, 0x7b, 0x2b, 0x1e, 0x58, 0xf9, 0x4a, 0xf5, 0x15, 0x0f, 0xec, 0x3f, 0xff, 0x5e, 0xf8, 0xfb,
		0x37, 0xcb, 0xff, 0xb4, 0xf9, 0xfc, 0xf6, 0xf7, 0xaa, 0xdf, 0x1d, 0x3c, 0xff, 0x3e, 0x7e, 0xbb,
		0x81, 0x50, 0x64, 0x7b, 0xdc, 0xaf, 0x99, 0x79, 0x5e, 0x88, 0x48, 0x9d, 0x28, 0x25, 0xcd, 0xb0,
		0xcf, 0x4b, 0xe1, 0x9f, 0x79, 0x83, 0x0a, 0x02, 0x51, 0xf9, 0xb8, 0xe4, 0xf7, 0x3c, 0xcf, 0x00,
		0x21, 0xbc, 0x64, 0x8f, 0xe6, 0x3b, 0xfd, 0x22, 0x5d, 0x2e, 0xb9, 0xfb, 0xe1, 0x29, 0xee, 0x12,
		0xe2, 0xd0, 0x4a, 0x71, 0x48, 0x06, 0x3d, 0xc5, 0x65, 0x45, 0xb8, 0xe6, 0xe5, 0xa1, 0x49, 0xd7,
		0x10, 0x88, 0x20, 0x10, 0x41, 0x20, 0x82, 0x40, 0x04, 0x81, 0x08, 0xfb, 0xed, 0xf6, 0x85, 0xa7,
		0xd8, 0x6f, 0xd7, 0xdf, 0x2f, 0xf6, 0xdb, 0x37, 0x76, 0x29, 0xd5, 0xf7, 0x51, 0x57, 0x02, 0x71,
		0xb7, 0xa9, 0x90, 0xca, 0xaa, 0x02, 0xc3, 0x9a, 0x6e, 0xe9, 0x59, 0xe8, 0xc7, 0xe4, 0xad, 0x3d,
		0x0f, 0x52, 0x86, 0xbb, 0x93, 0x2b, 0x24, 0x76, 0xe3, 0x92, 0xec, 0x96, 0xdc, 0x2e, 0xa5, 0x61,
		0xa6, 0xcb, 0xe3, 0x21, 0xab, 0x28, 0xc9, 0x9c, 0x9f, 0xc2, 0x37, 0x50, 0x08, 0x7f, 0x49, 0x9f,
		0x28, 0x8a, 0x9f, 0x57, 0xb0, 0x8d, 0xa2, 0xf8, 0xd6, 0x05, 0xd3, 0x28, 0x8a, 0xbf, 0x6a, 0x60,
		0xb4, 0x17, 0xc5, 0xd7, 0x7c, 0x57, 0xc8, 0x82, 0x51, 0x6a, 0xbd, 0x33, 0xc4, 0x10, 0x4c, 0x1a,
		0x83, 0x4b, 0x93, 0xb0, 0x69, 0x1c, 0x3e, 0x4d, 0xc3, 0x68, 0x6e, 0x70, 0x9a, 0x1b, 0xac, 0xe6,
		0x01, 0xaf, 0x66, 0x82, 0x26, 0xdd, 0x1a, 0xa5, 0x6e, 0xd8, 0x1d, 0x77, 0x34, 0x3a, 0x92, 0x59,
		0x71, 0xb9, 0x23, 0x79, 0x3c, 0x47, 0x86, 0xec, 0x60, 0xfe, 0x58, 0xe8, 0xd4, 0x3b, 0x18, 0x5a,
		0x97, 0x06, 0xeb, 0xfa, 0xe4, 0xa4, 0xcf, 0x18, 0x73, 0x11, 0x79, 0xb8, 0x8a, 0xdc, 0x5c, 0x46,
		0x5e, 0xae, 0x23, 0x77, 0x17, 0x92, 0xbb, 0x2b, 0xc9, 0xd3, 0xa5, 0x98, 0x71, 0x2d, 0x86, 0x5c,
		0xcc, 0x78, 0x20, 0x8d, 0x6d, 0x87, 0x2d, 0x58, 0xab, 0xa9, 0x6d, 0xb1, 0x79, 0xe8, 0x35, 0x28,
		0x50, 0x1b, 0xde, 0x26, 0x1b, 0xfd, 0x33, 0x8b, 0x46, 0xa5, 0xbc, 0xb6, 0xcd, 0x72, 0xf2, 0xa9,
		0x0b, 0xdd, 0xe7, 0x54, 0x66, 0x68, 0xdc, 0x7f, 0x8e, 0x3b, 0x20, 0x86, 0xd1, 0x6a, 0x76, 0xc9,
		0xe5, 0xb0, 0xbd, 0x56, 0xb4, 0x25, 0x67, 0xfc, 0x78, 0x6b, 0xa1, 0x16, 0xdd, 0xce, 0x66, 0xf6,
		0xb6, 0x29, 0xe9, 0xbc, 0x06, 0x40, 0xa1, 0x3c, 0xd8, 0xf0, 0x98, 0x6c, 0x6c, 0x99, 0x8f, 0x5e,
		0xe7, 0x5f, 0x00, 0x61, 0x24, 0xc2, 0x48, 0x84, 0x91, 0x08, 0x23, 0x11, 0x46, 0x1a, 0xb2, 0x56,
		0x8f, 0xb3, 0xb6, 0xe4, 0xed, 0x3c, 0x8e, 0x90, 0x1d, 0x98, 0x3d, 0x42, 0x16, 0xe7, 0x73, 0x38,
		0x15, 0xd1, 0x3e, 0x9e, 0xca, 0xd3, 0x98, 0xfb, 0x41, 0xfc, 0xbd, 0xdf, 0x1f, 0x9e, 0x8d, 0x5a,
		0x62, 0x46, 0xcf, 0xd7, 0x4c, 0x07, 0xb6, 0xc6, 0x8f, 0xbc, 0x4c, 0x87, 0x38, 0xf9, 0x75, 0x6e,
		0xf4, 0xdc, 0x8d, 0x41, 0x56, 0x6a, 0xf5, 0xce, 0x90, 0xa1, 0x24, 0xb2, 0x71, 0x7f, 0x79, 0x26,
		0x93, 0x2d, 0xa6, 0x35, 0x69, 0xcd, 0x2f, 0xd3, 0xbf, 0x40, 0x74, 0x1e, 0x01, 0x8b, 0x14, 0x53,
		0xdc, 0x5c, 0x1e, 0xc5, 0xb0, 0xbb, 0x0d, 0x4b, 0xa3, 0xa8, 0x23, 0x8d, 0xc2, 0x9a, 0x20, 0x06,
		0x69, 0x14, 0x48, 0xa3, 0x78, 0x6d, 0xc0, 0x90, 0x46, 0x61, 0xe4, 0x0d, 0x90, 0x46, 0x01, 0xfd,
		0x0b, 0xfa, 0x17, 0xf4, 0x2f, 0xe8, 0x5f, 0x48, 0xa3, 0xd0, 0xd3, 0x25, 0xd2, 0x28, 0x36, 0xcf,
		0xa7, 0x2e, 0x74, 0x8f, 0x34, 0x0a, 0xa4, 0x51, 0xe4, 0xb4, 0xe4, 0x90, 0x46, 0xb1, 0x81, 0xbd,
		0x21, 0x8d, 0x62, 0xfd, 0x65, 0x88, 0x34, 0x0a, 0x84, 0x91, 0x08, 0x23, 0x11, 0x46, 0x22, 0x8c,
		0xdc, 0xd6, 0x30, 0x12, 0x69, 0x14, 0x48, 0xa3, 0xd0, 0x1b, 0xd8, 0x22, 0x8d, 0x02, 0x69, 0x14,
		0x05, 0x31, 0x86, 0x6d, 0x4f, 0xa3, 0x18, 0xee, 0xde, 0xa3, 0xea, 0x93, 0xfe, 0x15, 0xb7, 0x15,
		0x55, 0x9f, 0x8c, 0xd5, 0x1f, 0x1a, 0x7e, 0x52, 0x25, 0x7b, 0x8e, 0xf2, 0x63, 0xde, 0x72, 0x3e,
		0xea, 0xfb, 0xf6, 0x7a, 0xea, 0xcd, 0x6f, 0xcf, 0xc3, 0x87, 0xc6, 0xed, 0xc9, 0xf0, 0x7d, 0x6f,
		0xbf, 0x49, 0x19, 0xfe, 0xd1, 0x7f, 0xd3, 0xdb, 0xf1, 0x5f, 0xdf, 0x8c, 0x5e, 0x74, 0x8b, 0x4b,
		0x55, 0xe9, 0x4d, 0x19, 0x32, 0x92, 0x2a, 0x64, 0xac, 0x20, 0x55, 0x1d, 0x05, 0xa9, 0x0a, 0x13,
		0x80, 0xa3, 0x20, 0xd5, 0xf6, 0xba, 0x53, 0xed, 0x05, 0xa9, 0x98, 0xe3, 0xf0, 0x50, 0x55, 0xba,
		0x81, 0x6b, 0x30, 0x9b, 0x72, 0xba, 0x53, 0x73, 0x97, 0xe3, 0xb7, 0x99, 0x17, 0x71, 0x94, 0xeb,
		0x2f, 0x1c, 0x60, 0x1b, 0x07, 0x6e, 0xd3, 0x00, 0x9e, 0x1b, 0x90, 0xe7, 0x06, 0xe8, 0x79, 0x00,
		0xfb, 0x66, 0x44, 0xea, 0xe6, 0xcb, 0xf5, 0xdf, 0x05, 0x81, 0xc7, 0x99, 0x6f, 0xf2, 0x32, 0xc7,
		0x1a, 0x0e, 0x34, 0x2c, 0x3a, 0x62, 0xf7, 0x81, 0x4b, 0x25, 0xa2, 0x81, 0x6e, 0x37, 0x0c, 0x62,
		0x1f, 0x98, 0x67, 0xd0, 0x27, 0x2f, 0xef, 0xdf, 0x9c, 0x7b, 0xae, 0x55, 0xab, 0x70, 0xce, 0x70,
		0xce, 0x70, 0xce, 0x70, 0xce, 0x70, 0xce, 0xd3, 0xd9, 0xae, 0xb5, 0xa6, 0x41, 0xdf, 0xdc, 0xc4,
		0x65, 0x3a, 0xe9, 0x3f, 0x18, 0x2e, 0xd3, 0xd1, 0xdf, 0x2f, 0x2e, 0xd3, 0xd9, 0xd8, 0xa5, 0xd4,
		0xa8, 0x1e, 0xe1, 0x36, 0x1d, 0xeb, 0x7a, 0x69, 0x21, 0x98, 0x5b, 0x58, 0x56, 0x4e, 0x4f, 0xca,
		0x7e, 0x18, 0x35, 0x3a, 0xa4, 0x68, 0xb0, 0xe0, 0xff, 0x7c, 0xcf, 0x08, 0xa9, 0x10, 0x52, 0x21,
		0xa4, 0x42, 0x48, 0x85, 0x90, 0x0a, 0xd7, 0x93, 0x22, 0xa2, 0xb2, 0x81, 0x06, 0x57, 0x11, 0x51,
		0x21, 0xa2, 0xa2, 0x59, 0x4a, 0xb8, 0x9e, 0x14, 0x01, 0xd5, 0x46, 0x04, 0x54, 0xa1, 0xe4, 0xbc,
		0x1b, 0x2a, 0x73, 0x71, 0xd4, 0xa8, 0x43, 0x73, 0xfb, 0x5f, 0x7d, 0x96, 0x8a, 0x68, 0x0d, 0xd1,
		0x1a, 0xa2, 0x35, 0x44, 0x6b, 0x88, 0xd6, 0x90, 0x9d, 0x52, 0x44, 0xff, 0x5b, 0x71, 0xb9, 0xc7,
		0x9e, 0x8c, 0x7b, 0xe1, 0xb8, 0x5b, 0x73, 0xbe, 0x18, 0x99, 0x28, 0x70, 0xc4, 0x70, 0xc4, 0x70,
		0xc4, 0x70, 0xc4, 0xc8, 0x44, 0xa1, 0xfb, 0x07, 0xdd, 0x54, 0x4b, 0xb7, 0xd0, 0x4d, 0xf5, 0x2e,
		0xa5, 0x2d, 0xd4, 0x4d, 0xf7, 0x9a, 0xd5, 0x2a, 0x84, 0x53, 0xdb, 0x7a, 0x81, 0x70, 0xba, 0x2c,
		0x70, 0x33, 0x9d, 0x81, 0x62, 0x2a, 0xf3, 0x04, 0x47, 0x07, 0x10, 0xb0, 0x21, 0x60, 0x43, 0xc0,
		0x86, 0x80, 0x6d, 0x75, 0xc0, 0x86, 0x3c, 0x17, 0xc4, 0x6b, 0x85, 0x25, 0xd9, 0x38, 0x39, 0x80,
		0x78, 0x8d, 0x68, 0x29, 0x19, 0x2f, 0x68, 0x8d, 0x70, 0x0d, 0xe1, 0x9a, 0x8e, 0x65, 0xf5, 0x20,
		0xa4, 0xea, 0x31, 0xaf, 0x12, 0x97, 0x1e, 0x33, 0x17, 0xb5, 0xcd, 0x77, 0x8c, 0x70, 0x0a, 0xe1,
		0x14, 0xc2, 0x29, 0x84, 0x53, 0x08, 0xa7, 0x62, 0x6b, 0x13, 0xa1, 0x21, 0x6c, 0x9c, 0xc6, 0xc7,
		0xda, 0x91, 0x81, 0xbe, 0xe2, 0xb1, 0xdc, 0xb8, 0x98, 0x6a, 0x32, 0x73, 0x0f, 0x0d, 0x83, 0x73,
		0xb7, 0x30, 0x87, 0x87, 0x66, 0xeb, 0x7d, 0x2b, 0x2e, 0x7d, 0xe3, 0x77, 0x47, 0x95, 0xff, 0xf3,
		0xe6, 0xcd, 0xf7, 0x6a, 0xe5, 0xa8, 0xf5, 0xfb, 0x7b, 0xad, 0x72, 0xd4, 0x1a, 0x7e, 0x59, 0x1b,
		0xfc, 0x6f, 0xf8, 0x75, 0xfd, 0x7b, 0xb5, 0xd2, 0x18, 0x7d, 0xbd, 0xff, 0xbd, 0x5a, 0xd9, 0x6f,
		0xbd, 0xfd, 0xf1, 0xe3, 0xfd, 0xdb, 0xbf, 0xf7, 0x9e, 0x93, 0x3f, 0xf8, 0x8f, 0xf2, 0xa6, 0xdd,
		0xaa, 0xf2, 0x6e, 0x83, 0x8d, 0xaf, 0x09, 0xe3, 0x33, 0x63, 0x7c, 0xac, 0xd2, 0x3e, 0xa9, 0x7c,
		0x6a, 0xfd, 0x5d, 0x7b, 0xd7, 0x78, 0x3e, 0x7e, 0xfb, 0xf7, 0xc1, 0xf3, 0xfc, 0x0f, 0x7f, 0x2f,
		0xfb, 0xb3, 0xda, 0xbb, 0x83, 0xe7, 0xe3, 0x15, 0xbf, 0x69, 0x3e, 0x1f, 0xaf, 0xd9, 0xc6, 0xfe,
		0xf3, 0x9b, 0x85, 0x3f, 0xed, 0xff, 0xbc, 0xbe, 0xea, 0x81, 0xc6, 0x8a, 0x07, 0xf6, 0x56, 0x3d,
		0xb0, 0xb7, 0xe2, 0x81, 0x95, 0xaf, 0x54, 0x5f, 0xf1, 0xc0, 0xfe, 0xf3, 0xef, 0x85, 0xbf, 0x7f,
		0xb3, 0xfc, 0x4f, 0x9b, 0xcf, 0x6f, 0x7f, 0xaf, 0xfa, 0xdd, 0xc1, 0xf3, 0xef, 0xe3, 0xb7, 0x1b,
		0x08, 0x45, 0xb6, 0xc7, 0xfd, 0x9a, 0x99, 0xa7, 0xd1, 0xfb, 0x24, 0x72, 0xb9, 0x47, 0x22, 0x97,
		0xfb, 0x23, 0xcc, 0xde, 0x1b, 0x61, 0xb7, 0x38, 0x24, 0x83, 0x9e, 0xe2, 0xb2, 0x22, 0x5c, 0xf3,
		0xf2, 0xd0, 0xa4, 0x6b, 0x08, 0x44, 0x10, 0x88, 0x20, 0x10, 0x41, 0x20, 0x82, 0x40, 0x84, 0xfd,
		0x76, 0xfb, 0xc2, 0x53, 0xec, 0xb7, 0xeb, 0xef, 0x17, 0xfb, 0xed, 0x1b, 0xbb, 0x94, 0x50, 0x57,
		0x02, 0x71, 0xb7, 0xb9, 0x90, 0x0a, 0x17, 0xa0, 0x2d, 0xe9, 0x27, 0xcf, 0x0b, 0xd0, 0x34, 0xde,
		0xa7, 0x67, 0xc7, 0x55, 0x62, 0xe6, 0x22, 0x71, 0xe3, 0x11, 0xb8, 0x66, 0xd7, 0xa2, 0x3d, 0xe2,
		0xc6, 0x15, 0x63, 0x36, 0x44, 0xd4, 0xb8, 0x62, 0xac, 0x30, 0x0e, 0x4b, 0x7b, 0xa4, 0x6c, 0xf0,
		0xce, 0x6d, 0x13, 0x77, 0x6c, 0x8f, 0xef, 0xd4, 0x7e, 0xff, 0x7e, 0x77, 0xe8, 0x71, 0x77, 0x17,
		0xb1, 0xd9, 0x16, 0xdf, 0xb8, 0x53, 0xe0, 0x15, 0xda, 0x07, 0x25, 0x13, 0x9e, 0x4f, 0xef, 0x96,
		0x8e, 0x91, 0x2d, 0x1c, 0x23, 0x5b, 0x36, 0x7a, 0xb7, 0x68, 0xa8, 0x17, 0x8f, 0x66, 0x1e, 0x9e,
		0x27, 0xff, 0x2e, 0x6b, 0xb9, 0x1c, 0x37, 0xf5, 0x2d, 0xc3, 0xb4, 0x60, 0x47, 0x07, 0x49, 0x34,
		0x2d, 0x11, 0xad, 0x4b, 0x5d, 0xeb, 0xd1, 0xf8, 0x3a, 0xa4, 0x99, 0xed, 0xec, 0x73, 0x93, 0xad,
		0x85, 0x8c, 0xb3, 0x3a, 0x72, 0x4d, 0x99, 0xc9, 0x3f, 0xad, 0xef, 0xd1, 0xe2, 0x6b, 0xb4, 0xf8,
		0x16, 0x5a, 0x5f, 0x92, 0x75, 0x36, 0x4f, 0x7a, 0x9d, 0xfe, 0xc7, 0xe3, 0x2e, 0xc9, 0x56, 0x07,
		0x8d, 0x71, 0x8f, 0x59, 0xf3, 0x6e, 0x3f, 0x5a, 0x69, 0x1f, 0x4f, 0x99, 0xea, 0xdc, 0x0f, 0xe2,
		0xef, 0x67, 0xcd, 0x79, 0xf1, 0x67, 0x83, 0x1f, 0x85, 0xc7, 0x03, 0xd3, 0x1e, 0x7e, 0x39, 0x31,
		0xf0, 0x99, 0xef, 0x89, 0xdc, 0x4b, 0xf9, 0x94, 0x47, 0x8e, 0x14, 0x61, 0x0c, 0x79, 0xe5, 0x13,
		0xd7, 0x15, 0xfd, 0xaf, 0x99, 0x57, 0x3a, 0xbf, 0x2a, 0xf5, 0xfb, 0x2a, 0xb5, 0x59, 0x57, 0x78,
		0x4f, 0xa5, 0x21, 0x5e, 0xf5, 0xe4, 0x00, 0x1d, 0x4b, 0xed, 0x40, 0xfe, 0xf0, 0x27, 0x9f, 0x84,
		0xea, 0x6d, 0x68, 0x6f, 0x4e, 0x27, 0x97, 0x31, 0x74, 0xc8, 0x16, 0xda, 0x64, 0x0a, 0x5d, 0xb2,
		0x84, 0x76, 0x19, 0x42, 0xbb, 0xec, 0xa0, 0x53, 0x66, 0x28, 0x16, 0x9f, 0xa1, 0xbe, 0x99, 0xbc,
		0x3c, 0x20, 0x17, 0xe4, 0x2b, 0x6a, 0x2c, 0x9f, 0xf6, 0x5b, 0x27, 0x9e, 0xeb, 0x39, 0x80, 0x3b,
		0xf3, 0x1d, 0x2f, 0x88, 0x84, 0xdf, 0xe9, 0x03, 0x9a, 0x62, 0xc2, 0xe7, 0xb2, 0x0f, 0x66, 0xa5,
		0x6f, 0x5f, 0xbf, 0x5e, 0x95, 0x06, 0xc4, 0x3d, 0x2a, 0xdd, 0x33, 0xdf, 0xf5, 0xb8, 0x5b, 0xba,
		0x7b, 0x2a, 0xa9, 0x7b, 0x11, 0xfd, 0xf0, 0xcf, 0xaf, 0x4a, 0x63, 0xac, 0xa3, 0x7e, 0x3f, 0x5a,
		0xc8, 0xd3, 0x06, 0x7d, 0x3a, 0x21, 0x50, 0x3b, 0x14, 0xea, 0x86, 0x44, 0x63, 0xd0, 0x68, 0x0c,
		0x22, 0x4d, 0x40, 0xa5, 0x26, 0x7d, 0xab, 0x68, 0x50, 0x9e, 0x73, 0x10, 0xd5, 0xca, 0x4a, 0xbb,
		0x69, 0x43, 0x62, 0x93, 0xa1, 0x30, 0x81, 0xf1, 0x25, 0x97, 0x5c, 0xb2, 0xd9, 0x47, 0xfa, 0xb9,
		0x4e, 0xf7, 0x64, 0x4a, 0xa2, 0x41, 0xb5, 0x2a, 0x4c, 0xac, 0x86, 0x74, 0x13, 0x92, 0x7c, 0x38,
		0x53, 0x0c, 0x65, 0xd9, 0x19, 0x79, 0xe9, 0x74, 0x43, 0x38, 0xb9, 0x50, 0x70, 0xd8, 0x4e, 0xca,
		0xc9, 0xcc, 0x46, 0x41, 0x32, 0x53, 0x0d, 0x0a, 0x4a, 0x41, 0x46, 0x1d, 0xa8, 0x28, 0x02, 0x39,
		0x15, 0x20, 0x77, 0xf9, 0x94, 0xae, 0xdd, 0x2c, 0xf8, 0x64, 0x8d, 0x6a, 0xca, 0xee, 0xbd, 0x13,
		0x56, 0x1c, 0x4f, 0x0c, 0x3f, 0x7c, 0xc6, 0x89, 0x1e, 0xad, 0xbc, 0xe9, 0x46, 0x33, 0xce, 0xcc,
		0x54, 0xd5, 0xc4, 0x36, 0xf3, 0xa2, 0xac, 0x31, 0x07, 0x51, 0xb6, 0x08, 0x59, 0x4c, 0x41, 0x19,
		0x43, 0x90, 0xc7, 0x0c, 0xd4, 0x31, 0x82, 0xb6, 0x98, 0x40, 0x5b, 0x0c, 0xa0, 0x83, 0xf3, 0xe7,
		0xbb, 0x11, 0x40, 0x96, 0x3d, 0xa1, 0xe1, 0xc6, 0x13, 0xa2, 0x1b, 0x4d, 0x32, 0x10, 0xc7, 0x0c,
		0xce, 0x92, 0xfb, 0xec, 0xce, 0xe3, 0x2e, 0x1d, 0x88, 0x8e, 0x1a, 0xa4, 0x03, 0x50, 0x82, 0x1b,
		0xbb, 0x80, 0x9f, 0xc0, 0x4f, 0xe0, 0x27, 0xf0, 0x93, 0x1e, 0x3f, 0xbb, 0xaa, 0x47, 0x87, 0x9d,
		0xfd, 0xc6, 0x00, 0x74, 0x00, 0x3a, 0x00, 0x5d, 0x81, 0x80, 0x8e, 0xec, 0x46, 0x1e, 0xc2, 0x1b,
		0x77, 0x88, 0x4f, 0x8c, 0x12, 0x6e, 0x2f, 0xea, 0x38, 0xf1, 0xa9, 0xe9, 0xac, 0xc4, 0xf8, 0x98,
		0x5d, 0x93, 0xb8, 0x7a, 0x91, 0xce, 0x53, 0x74, 0x84, 0xf9, 0x9b, 0x5a, 0x8e, 0x54, 0x8e, 0xe6,
		0x6a, 0x4f, 0xd3, 0x5c, 0x55, 0x2d, 0x9a, 0xaa, 0x82, 0xec, 0x3e, 0xb5, 0xb0, 0x9f, 0x91, 0xa0,
		0x1d, 0x7d, 0xfb, 0x19, 0xb1, 0xc4, 0x5f, 0xe0, 0xcd, 0x0c, 0x9f, 0x8b, 0xce, 0xfd, 0x5d, 0x20,
		0xa3, 0xec, 0xfb, 0x19, 0x93, 0xa6, 0xb0, 0xa5, 0x81, 0x2d, 0x8d, 0x5c, 0x08, 0xa9, 0x65, 0x5b,
		0x1a, 0x23, 0x8b, 0xa1, 0x0b, 0x27, 0xc7, 0x2d, 0xd2, 0xc4, 0x94, 0x35, 0xc4, 0x94, 0x88, 0x29,
		0xb7, 0x31, 0xa6, 0xa4, 0xca, 0xc1, 0xcc, 0x9a, 0x2c, 0xb0, 0x72, 0xf1, 0x66, 0x4a, 0x1e, 0xd0,
		0x64, 0xee, 0xe4, 0x66, 0xaf, 0xc3, 0xfc, 0xb5, 0xc1, 0x80, 0x2e, 0x38, 0xd0, 0x0e, 0x0b, 0xda,
		0xe1, 0x41, 0x27, 0x4c, 0x10, 0x47, 0x5e, 0x45, 0x4d, 0xe1, 0x16, 0x1a, 0x13, 0xb8, 0xc9, 0xb3,
		0x76, 0x75, 0x89, 0x37, 0x48, 0x8f, 0x36, 0x08, 0x37, 0xc6, 0x60, 0xc7, 0x18, 0xfc, 0x98, 0x80,
		0x21, 0x5a, 0x38, 0xd2, 0xa0, 0x00, 0x96, 0xb4, 0x16, 0xa6, 0x30, 0x75, 0x33, 0x84, 0xce, 0x22,
		0xf4, 0xda, 0x8b, 0xcd, 0x5b, 0x7f, 0xa3, 0x43, 0xab, 0xa8, 0xb9, 0xff, 0x84, 0x24, 0xce, 0x13,
		0xfe, 0xcf, 0x8a, 0xc7, 0x9e, 0xb8, 0xd4, 0x76, 0x63, 0xd8, 0xa4, 0x7a, 0xcb, 0x62, 0x5f, 0x70,
		0xc8, 0x70, 0xc8, 0x70, 0xc8, 0x70, 0xc8, 0x64, 0xab, 0x3d, 0xbc, 0x7f, 0x8a, 0xe0, 0x90, 0x57,
		0x3a, 0xe4, 0xe9, 0x6b, 0x48, 0xe6, 0x6f, 0x37, 0xa9, 0x3f, 0xbf, 0xfd, 0x9f, 0xb7, 0xff, 0x67,
		0x9b, 0xfc, 0x28, 0xca, 0xbb, 0x64, 0xda, 0xf5, 0x1b, 0x6f, 0x84, 0x8d, 0xbf, 0xca, 0xb4, 0x11,
		0x48, 0x3f, 0x3d, 0x04, 0x53, 0x43, 0xa9, 0x48, 0xd0, 0x2b, 0x11, 0xc4, 0x84, 0x07, 0x82, 0x26,
		0x04, 0x4d, 0xd3, 0xc4, 0xa5, 0x58, 0x20, 0x4c, 0x4e, 0x50, 0x34, 0x96, 0xae, 0xd4, 0x51, 0xaa,
		0x72, 0x49, 0x69, 0x4a, 0x11, 0x6e, 0x12, 0x9c, 0x0f, 0x0b, 0x4f, 0x93, 0x23, 0xfa, 0xb0, 0xd9,
		0x82, 0xef, 0x52, 0xd5, 0x01, 0xea, 0x00, 0xf5, 0x2d, 0x04, 0x75, 0xec, 0x52, 0x41, 0x14, 0x83,
		0x28, 0x06, 0x51, 0x6c, 0x6b, 0x45, 0x31, 0xec, 0x52, 0xbd, 0x28, 0x8a, 0x61, 0x97, 0x4a, 0x8b,
		0xba, 0x86, 0x5d, 0x2a, 0x38, 0x64, 0x38, 0x64, 0x38, 0x64, 0x38, 0xe4, 0x85, 0xd5, 0x8e, 0x5d,
		0xaa, 0x17, 0x1d, 0x32, 0x76, 0xa9, 0x34, 0xf9, 0xd1, 0x40, 0x8a, 0x8e, 0x8e, 0x53, 0xac, 0x63,
		0x14, 0x1f, 0xb6, 0x0f, 0x7f, 0x09, 0x7f, 0x09, 0x7f, 0x09, 0x7f, 0x49, 0xb6, 0xda, 0x47, 0xfb,
		0xcb, 0x15, 0x2d, 0x00, 0x33, 0xe3, 0x32, 0x1b, 0x1a, 0xda, 0x3e, 0xf3, 0x7b, 0xdd, 0xfe, 0x00,
		0x3d, 0x23, 0x11, 0x62, 0x1d, 0x7b, 0xda, 0x84, 0x44, 0x08, 0xc2, 0x0b, 0x4e, 0x71, 0xd3, 0x4d,
		0xdc, 0x10, 0x6e, 0xba, 0x29, 0xc2, 0x4d, 0x37, 0xd6, 0x94, 0xdc, 0x5e, 0xb4, 0x4a, 0xb3, 0x35,
		0xb7, 0x3f, 0x8f, 0x7a, 0x45, 0x91, 0x8a, 0x62, 0xad, 0x87, 0x22, 0xd7, 0xa9, 0x08, 0x65, 0xf0,
		0xf8, 0x54, 0x61, 0x19, 0x2e, 0x32, 0x99, 0x88, 0x0c, 0xe3, 0xa6, 0x50, 0xa7, 0x02, 0x75, 0x2a,
		0x72, 0x89, 0x67, 0x2c, 0xab, 0x53, 0x41, 0x74, 0x88, 0x9d, 0xf6, 0xf0, 0x3a, 0x6a, 0x54, 0xe4,
		0x28, 0x5f, 0xa0, 0x46, 0x45, 0x69, 0x73, 0x6a, 0x54, 0x74, 0x03, 0x57, 0x43, 0xea, 0xdf, 0xa0,
		0x55, 0xb2, 0x0b, 0x0f, 0xc7, 0xa5, 0xa1, 0x4f, 0xcf, 0xaf, 0x4f, 0x3e, 0x5c, 0x9c, 0x21, 0x51,
		0xbc, 0x78, 0x5a, 0x29, 0x72, 0x0a, 0xf3, 0xd0, 0x42, 0xb7, 0x25, 0x51, 0x9c, 0xfb, 0xbd, 0x2e,
		0x1f, 0xde, 0x64, 0xaa, 0x23, 0x59, 0x9c, 0x50, 0xdf, 0x24, 0xd6, 0x35, 0x6d, 0xd7, 0xb9, 0xec,
		0x51, 0x46, 0xc6, 0x91, 0x21, 0xc9, 0x79, 0xad, 0x7c, 0xaa, 0x93, 0xd3, 0x24, 0xf2, 0x93, 0x26,
		0xf0, 0x93, 0x33, 0xf5, 0x3a, 0x98, 0x3a, 0x98, 0x3a, 0x98, 0x3a, 0x98, 0x3a, 0x98, 0x3a, 0x98,
		0x3a, 0x98, 0x3a, 0x98, 0x3a, 0x98, 0xfa, 0xd6, 0x32, 0x75, 0x82, 0x84, 0x02, 0x6c, 0x25, 0x92,
		0x4f, 0x4b, 0x39, 0x53, 0x04, 0xb3, 0xee, 0x4e, 0xf2, 0x55, 0xbf, 0xbb, 0x13, 0x19, 0x16, 0x79,
		0xe3, 0x32, 0x5b, 0x3c, 0x46, 0x12, 0x87, 0x91, 0x6d, 0x58, 0xd6, 0xb1, 0x61, 0xa9, 0x8f, 0xea,
		0x60, 0xc3, 0x92, 0x2c, 0x5e, 0x2a, 0x3b, 0x41, 0xaf, 0x8f, 0x14, 0x11, 0xe5, 0x96, 0x65, 0xdc,
		0x22, 0x36, 0x2d, 0x21, 0x85, 0x40, 0x0a, 0xc9, 0x5f, 0x0a, 0x11, 0x7e, 0xc5, 0x15, 0x91, 0xc3,
		0xa4, 0xcb, 0xdd, 0x4a, 0xf8, 0x53, 0x45, 0x1a, 0xca, 0x51, 0x2d, 0x74, 0x01, 0x29, 0x03, 0x52,
		0x06, 0xa4, 0x8c, 0x2d, 0x92, 0x32, 0x62, 0xb7, 0xdf, 0x6c, 0x68, 0x10, 0x32, 0x08, 0x0f, 0x21,
		0x12, 0x5f, 0x0e, 0x39, 0xfa, 0xa7, 0xe1, 0xe4, 0x8a, 0x8e, 0xcb, 0x22, 0x35, 0xe1, 0xea, 0x42,
		0xf3, 0x9a, 0x2e, 0x24, 0x1c, 0xb7, 0xaf, 0xf1, 0x62, 0x42, 0x62, 0x8b, 0x9b, 0x9d, 0x52, 0xf6,
		0x68, 0xfd, 0x94, 0xd6, 0x0e, 0x1b, 0x8d, 0xe6, 0x41, 0xa3, 0x51, 0x3d, 0xd8, 0x3b, 0xa8, 0x1e,
		0xed, 0xef, 0xd7, 0x9a, 0xb5, 0x7d, 0x8b, 0x67, 0xb9, 0xa0, 0xe7, 0xa9, 0x5a, 0x9b, 0x54, 0xff,
		0xd4, 0xaf, 0x70, 0x29, 0x03, 0xa9, 0x8f, 0x7b, 0x4e, 0x35, 0x0f, 0xde, 0x09, 0xde, 0x09, 0xde,
		0x09, 0xde, 0x09, 0xde, 0x09, 0xde, 0x09, 0xde, 0x09, 0xde, 0x09, 0xde, 0xb9, 0xcd, 0xbc, 0xb3,
		0x1d, 0xc8, 0x5f, 0x43, 0x51, 0x32, 0x70, 0x14, 0xd7, 0xc4, 0x3e, 0x17, 0x3a, 0x01, 0x07, 0x05,
		0x07, 0x05, 0x07, 0x05, 0x07, 0x05, 0x07, 0x05, 0x07, 0x05, 0x07, 0x05, 0x07, 0x05, 0x07, 0x05,
		0x07, 0xd5, 0xba, 0xf7, 0x3e, 0xd7, 0x05, 0xf8, 0x27, 0xf8, 0x27, 0xf8, 0x27, 0xf8, 0x27, 0xf8,
		0x27, 0xf8, 0x27, 0xf8, 0x27, 0xf8, 0x27, 0xf8, 0xe7, 0x36, 0xf3, 0x4f, 0x8d, 0xca, 0x27, 0xf4,
		0x4e, 0xf0, 0x4d, 0xf0, 0x4d, 0xf0, 0x4d, 0xf0, 0x4d, 0xf0, 0x4d, 0xf0, 0x4d, 0xf0, 0x4d, 0xf0,
		0x4d, 0xf0, 0x4d, 0x7d, 0x2a, 0x27, 0xb4, 0x4d, 0x70, 0x4d, 0x70, 0x4d, 0x70, 0x4d, 0x70, 0x4d,
		0x70, 0x4d, 0x70, 0x4d, 0x70, 0x4d, 0x70, 0xcd, 0xed, 0xe6, 0x9a, 0x41, 0x4f, 0x69, 0x3f, 0xd8,
		0xbe, 0xa4, 0x0f, 0x30, 0x50, 0x30, 0x50, 0x30, 0x50, 0x30, 0x50, 0x30, 0x50, 0x30, 0x50, 0x30,
		0x50, 0x30, 0x50, 0x30, 0xd0, 0xad, 0x66, 0xa0, 0x3a, 0x8f, 0xb6, 0xcf, 0xb5, 0x0f, 0xe6, 0x09,
		0xe6, 0x09, 0xe6, 0x09, 0xe6, 0x09, 0xe6, 0x09, 0xe6, 0x09, 0xe6, 0x09, 0xe6, 0x09, 0xe6, 0xb9,
		0xd5, 0xcc, 0x53, 0xff, 0xe1, 0xf6, 0xa5, 0xbd, 0x80, 0x85, 0x82, 0x85, 0x82, 0x85, 0x82, 0x85,
		0x82, 0x85, 0x82, 0x85, 0x82, 0x85, 0x82, 0x85, 0x82, 0x85, 0x82, 0x85, 0x6a, 0xde, 0x81, 0xc7,
		0xf9, 0x76, 0x30, 0x50, 0x30, 0x50, 0x30, 0x50, 0x30, 0x50, 0x30, 0x50, 0x30, 0x50, 0x30, 0x50,
		0x30, 0x50, 0x30, 0xd0, 0x09, 0x03, 0xd5, 0xa9, 0x7e, 0x42, 0xf3, 0x04, 0xe3, 0x04, 0xe3, 0x04,
		0xe3, 0x04, 0xe3, 0x04, 0xe3, 0x04, 0xe3, 0x04, 0xe3, 0x04, 0xe3, 0x04, 0xe3, 0x54, 0x1a, 0x95,
		0x4e, 0xe8, 0x9b, 0x60, 0x9b, 0x60, 0x9b, 0x60, 0x9b, 0x60, 0x9b, 0x60, 0x9b, 0x60, 0x9b, 0x60,
		0x9b, 0x60, 0x9b, 0x16, 0xb3, 0xcd, 0x5c, 0xaf, 0x8f, 0x3f, 0xf1, 0xfd, 0x40, 0xb1, 0xfe, 0x12,
		0xa0, 0xb9, 0x45, 0x3e, 0x72, 0xee, 0x79, 0x97, 0x85, 0x4c, 0xdd, 0xf7, 0x3d, 0xd6, 0x6e, 0x10,
		0x72, 0xdf, 0x19, 0x30, 0xc2, 0x8a, 0xe8, 0xfb, 0xae, 0x36, 0x73, 0x78, 0xb4, 0xbb, 0xec, 0xcb,
		0xdd, 0xa8, 0x77, 0x37, 0xf5, 0xf3, 0xe9, 0xef, 0x76, 0x45, 0xf8, 0xd0, 0xd8, 0x8d, 0x14, 0x53,
		0x7c, 0x37, 0xf6, 0x81, 0x14, 0xec, 0xb7, 0x1c, 0x29, 0xd9, 0x73, 0x94, 0x1f, 0x7b, 0xd7, 0xf3,
		0x51, 0x77, 0xb7, 0xd7, 0x53, 0x7d, 0xdf, 0x9e, 0x87, 0x0f, 0x8d, 0xdb, 0x8f, 0xa3, 0x5e, 0x77,
		0xf2, 0x99, 0xe9, 0x0c, 0xb3, 0x5c, 0x76, 0xef, 0x9d, 0xb0, 0xe2, 0x78, 0x62, 0xc8, 0xbd, 0xb2,
		0x4d, 0xf1, 0x98, 0x8a, 0x4c, 0x37, 0x9a, 0x71, 0x05, 0x9e, 0xf2, 0x36, 0xeb, 0x79, 0x03, 0x5e,
		0xd8, 0x66, 0x5e, 0xc4, 0xb3, 0xb6, 0x47, 0x03, 0xd2, 0x64, 0x71, 0x0c, 0x65, 0xfc, 0x42, 0x1e,
		0xb7, 0x50, 0xc7, 0x2b, 0xda, 0xe2, 0x14, 0x6d, 0xf1, 0x89, 0x8e, 0xb8, 0x24, 0x5f, 0x44, 0x27,
		0x8b, 0x3f, 0xc6, 0xab, 0xed, 0x2e, 0x08, 0x3c, 0xce, 0x7c, 0x8a, 0xf5, 0x16, 0x1b, 0x67, 0xad,
		0x66, 0x21, 0x90, 0x72, 0x9f, 0xdd, 0x79, 0xdc, 0xa5, 0x03, 0xd1, 0x51, 0x83, 0x74, 0x00, 0xda,
		0xb7, 0x0b, 0xe0, 0x27, 0xf0, 0x13, 0xf8, 0x09, 0xfc, 0x2c, 0x1c, 0x7e, 0x76, 0x55, 0x8f, 0x0e,
		0x3b, 0xfb, 0x8d, 0x01, 0xe8, 0x00, 0x74, 0x00, 0xba, 0x02, 0x01, 0x5d, 0x4f, 0xf8, 0xaa, 0xd6,
		0x24, 0xc4, 0xb9, 0x26, 0x41, 0x53, 0xb4, 0x6a, 0x34, 0xa1, 0xac, 0xaf, 0x43, 0x7d, 0xd6, 0x24,
		0x51, 0x8e, 0xa5, 0xc9, 0xe6, 0x21, 0x71, 0xc3, 0x1a, 0x05, 0x48, 0x42, 0x79, 0x59, 0x8b, 0xac,
		0x3c, 0x9a, 0xab, 0x3d, 0x4d, 0x73, 0x55, 0xb5, 0x68, 0xaa, 0x0a, 0xa2, 0xc5, 0xb6, 0xf2, 0xa2,
		0x55, 0x3b, 0x06, 0x17, 0x38, 0x95, 0xe6, 0xab, 0x5b, 0xeb, 0x4d, 0xe7, 0x5f, 0x93, 0x0f, 0x65,
		0x8a, 0x61, 0x2c, 0xf7, 0x7c, 0xbf, 0xd7, 0xbd, 0xe3, 0x32, 0x83, 0x1c, 0x30, 0xf1, 0x9a, 0x93,
		0xb6, 0x52, 0x4e, 0xe8, 0x28, 0x2a, 0x48, 0xf9, 0x78, 0x56, 0x06, 0x4b, 0xc1, 0x5c, 0x67, 0x18,
		0x6b, 0x3b, 0x03, 0x85, 0xa0, 0x62, 0xaa, 0xe4, 0x0c, 0x95, 0x9c, 0x99, 0x2e, 0x30, 0xd2, 0x76,
		0xd9, 0x12, 0x00, 0x3a, 0x15, 0x32, 0xdb, 0x62, 0x71, 0x46, 0x2b, 0x96, 0x28, 0x9a, 0x8c, 0xdb,
		0xa3, 0x09, 0x28, 0x6b, 0x9b, 0x1e, 0x50, 0xb6, 0x11, 0x50, 0xea, 0x08, 0x28, 0xdb, 0xb6, 0x07,
		0x94, 0x59, 0xcd, 0x7a, 0xdc, 0x10, 0x95, 0xd2, 0xbe, 0xb0, 0x7a, 0x69, 0x14, 0xf7, 0xc9, 0x07,
		0xa6, 0xdd, 0xba, 0xd4, 0x14, 0xc4, 0xd9, 0x97, 0x92, 0xd9, 0x46, 0x4a, 0x66, 0x1e, 0x29, 0x99,
		0x6d, 0xa4, 0x64, 0x26, 0x5d, 0xad, 0x74, 0xd2, 0xfe, 0x02, 0x8b, 0xa8, 0x21, 0x3f, 0xa9, 0x54,
		0x2a, 0x9f, 0x3d, 0x0e, 0xa4, 0x86, 0xec, 0xe2, 0x1d, 0x3d, 0xcd, 0x08, 0x9c, 0x0a, 0x7f, 0x54,
		0xc7, 0x8a, 0x7b, 0xbc, 0xcb, 0x95, 0x7c, 0xaa, 0x04, 0x7e, 0xc5, 0xb9, 0x1f, 0xa8, 0x8d, 0x5a,
		0xa8, 0xc7, 0xc0, 0xc5, 0x68, 0xe0, 0x1e, 0x79, 0xd3, 0x8e, 0xd6, 0xd6, 0xa4, 0xb0, 0x4d, 0x22,
		0xfd, 0xdd, 0x38, 0xe2, 0xb0, 0x70, 0x1b, 0x6f, 0xfc, 0x99, 0x2a, 0x92, 0xb7, 0xe9, 0x42, 0xb0,
		0xd9, 0x66, 0x11, 0x89, 0x21, 0x12, 0x43, 0x24, 0x96, 0x7f, 0x24, 0x46, 0x24, 0xb4, 0xe8, 0x11,
		0x5c, 0x88, 0xcd, 0x1d, 0xf1, 0x12, 0xe2, 0x25, 0xc4, 0x4b, 0x94, 0xf0, 0xb1, 0xc8, 0x19, 0xe8,
		0x97, 0xd5, 0x02, 0x7f, 0xa0, 0x5e, 0x56, 0x9a, 0x76, 0xd4, 0xa9, 0x41, 0x46, 0x27, 0xd8, 0x68,
		0x07, 0x1d, 0xdd, 0xe0, 0x63, 0x0c, 0x84, 0x8c, 0x81, 0x91, 0x09, 0x50, 0xa2, 0x05, 0x27, 0x62,
		0x90, 0xd2, 0x27, 0xee, 0x2c, 0xac, 0x76, 0x8f, 0xb3, 0x76, 0xf6, 0xa0, 0xe4, 0x45, 0xe6, 0x72,
		0xa0, 0xa1, 0xed, 0xab, 0x71, 0x04, 0xdb, 0x5f, 0x16, 0xc7, 0x53, 0x91, 0xe9, 0xdc, 0x0f, 0xe2,
		0xef, 0x07, 0x07, 0xa1, 0x0a, 0x7a, 0x58, 0x8f, 0x32, 0x97, 0x67, 0x3a, 0x2e, 0xd7, 0xe7, 0x8f,
		0x66, 0x7a, 0x81, 0x4b, 0x82, 0x4b, 0x82, 0x4b, 0x82, 0x4b, 0x82, 0x4b, 0x5a, 0xd3, 0x25, 0x7d,
		0x9f, 0xb8, 0xa4, 0xff, 0x75, 0x7a, 0x52, 0x72, 0x5f, 0xbd, 0x79, 0xbb, 0xfb, 0xfe, 0xfd, 0x44,
		0x6c, 0x6d, 0xc5, 0x8f, 0xcc, 0x6a, 0xae, 0x8b, 0x3f, 0x1b, 0xb7, 0xec, 0xf2, 0xc7, 0xc2, 0x7a,
		0xb7, 0x42, 0x45, 0x7f, 0x64, 0x5b, 0x2e, 0xa3, 0x7f, 0xfa, 0x84, 0x04, 0xed, 0x5b, 0x30, 0x2b,
		0xc0, 0x93, 0x70, 0x2b, 0x66, 0x29, 0x6a, 0x16, 0x4d, 0x58, 0x68, 0x51, 0x09, 0xad, 0xb4, 0x5b,
		0x35, 0x13, 0x4a, 0x67, 0x62, 0xcb, 0x66, 0x66, 0x87, 0x82, 0x64, 0x03, 0x87, 0x6e, 0x92, 0x9e,
		0x49, 0xca, 0x21, 0x30, 0xc5, 0xe9, 0xa5, 0xde, 0x61, 0xb3, 0x05, 0x57, 0x7a, 0xeb, 0x50, 0x7a,
		0xed, 0x61, 0xb4, 0x50, 0x7a, 0xa1, 0xf4, 0x22, 0xac, 0x46, 0x58, 0x8d, 0xb0, 0x1a, 0x61, 0x35,
		0xc2, 0x6a, 0x28, 0xbd, 0xab, 0x19, 0x2d, 0x94, 0x5e, 0xb8, 0x24, 0xb8, 0x24, 0xb8, 0x24, 0xb8,
		0xa4, 0xc2, 0xba, 0x24, 0x28, 0xbd, 0xf9, 0x45, 0x7f, 0x1b, 0x24, 0xc7, 0x65, 0x38, 0x31, 0xae,
		0x41, 0x8d, 0x43, 0x49, 0xd7, 0x4c, 0xb3, 0x69, 0xb6, 0xb8, 0xeb, 0x9f, 0xe3, 0xb7, 0xb8, 0x1d,
		0xff, 0xd9, 0x57, 0xde, 0xb6, 0x31, 0x37, 0x9f, 0x46, 0xc2, 0x25, 0x95, 0x6e, 0xc9, 0x73, 0xf1,
		0xeb, 0xc8, 0xc5, 0xcf, 0x9f, 0x72, 0x22, 0x17, 0x7f, 0xed, 0x0f, 0x84, 0x53, 0xd1, 0x38, 0x15,
		0x5d, 0xb8, 0x98, 0x17, 0x7b, 0x3f, 0x79, 0xc4, 0xb4, 0x38, 0x15, 0x9d, 0x99, 0x45, 0xe0, 0x54,
		0xb4, 0xb5, 0x14, 0x9f, 0x20, 0x44, 0x43, 0x85, 0x35, 0xfa, 0x79, 0x29, 0x67, 0x8a, 0x37, 0x92,
		0x07, 0x59, 0xc6, 0xca, 0xba, 0xed, 0x68, 0x9c, 0xe9, 0xac, 0x33, 0xac, 0x6f, 0x66, 0x53, 0x4c,
		0xe7, 0xfa, 0xd3, 0x98, 0x6c, 0xee, 0xd6, 0x9f, 0x81, 0x04, 0xa3, 0x5f, 0x16, 0xe1, 0x43, 0x33,
		0xf1, 0x98, 0x4f, 0x92, 0x07, 0xfa, 0x4f, 0x27, 0x9c, 0xeb, 0x74, 0x11, 0x6c, 0x6a, 0x82, 0x99,
		0x85, 0x48, 0x66, 0x2e, 0xfc, 0x9c, 0x95, 0x18, 0x92, 0x11, 0x40, 0x32, 0xa2, 0x47, 0x51, 0xb8,
		0x59, 0x2f, 0x96, 0xa4, 0x8d, 0x10, 0xcb, 0xcc, 0x75, 0x25, 0x8f, 0x22, 0x1e, 0x65, 0x2f, 0x42,
		0x39, 0x69, 0x0a, 0x35, 0x28, 0x33, 0x57, 0x4d, 0xdf, 0xe2, 0x1a, 0x94, 0xe1, 0xd6, 0xd4, 0xa0,
		0x8c, 0x2d, 0x86, 0x4e, 0x6d, 0x1d, 0x35, 0x88, 0xda, 0x27, 0xda, 0x0d, 0x14, 0x7a, 0xab, 0x0e,
		0x03, 0xde, 0x30, 0xbd, 0x15, 0xb5, 0x4f, 0x6c, 0x50, 0x45, 0x71, 0x7d, 0x37, 0xae, 0xef, 0x2e,
		0x15, 0x3a, 0x23, 0x3e, 0xd4, 0x98, 0x0a, 0x1f, 0x22, 0xe1, 0xd0, 0x4c, 0xc2, 0x61, 0x88, 0x84,
		0xc3, 0x1c, 0xe1, 0xc7, 0x04, 0x0c, 0xd1, 0xc2, 0x11, 0x31, 0x2c, 0x8d, 0x07, 0x40, 0x7f, 0xc2,
		0xa1, 0x08, 0x1f, 0x9a, 0x15, 0x9a, 0x58, 0xe4, 0x45, 0xc2, 0x72, 0xa8, 0x27, 0xeb, 0x50, 0x71,
		0xe9, 0x93, 0x9e, 0x5e, 0x9e, 0xe9, 0xe0, 0x3f, 0x6f, 0xde, 0x7c, 0xaf, 0x56, 0x8e, 0x58, 0xa5,
		0x7d, 0x52, 0xf9, 0xd4, 0xfa, 0xbb, 0xf6, 0xae, 0xf1, 0x7c, 0xfc, 0xf6, 0xef, 0x83, 0xe7, 0xf9,
		0x1f, 0xfe, 0x5e, 0xf6, 0x67, 0xb5, 0x77, 0x07, 0xcf, 0xc7, 0x2b, 0x7e, 0xd3, 0x7c, 0x3e, 0x5e,
		0xb3, 0x8d, 0xfd, 0xe7, 0x37, 0x0b, 0x7f, 0xda, 0xff, 0x79, 0x7d, 0xd5, 0x03, 0x8d, 0x15, 0x0f,
		0xec, 0xad, 0x7a, 0x60, 0x6f, 0xc5, 0x03, 0x2b, 0x5f, 0xa9, 0xbe, 0xe2, 0x81, 0xfd, 0xe7, 0xdf,
		0x0b, 0x7f, 0xff, 0x66, 0xf9, 0x9f, 0x36, 0x9f, 0xdf, 0xfe, 0x5e, 0xf5, 0xbb, 0x83, 0xe7, 0xdf,
		0xc7, 0x6f, 0xdf, 0xfe, 0x83, 0xde, 0xd4, 0x5b, 0x5b, 0x70, 0x06, 0x62, 0x08, 0xfc, 0x15, 0x8f,
		0xfb, 0x9d, 0xc1, 0x5e, 0x83, 0x26, 0x26, 0x32, 0xdb, 0x0d, 0x48, 0x09, 0x48, 0x09, 0x48, 0x09,
		0x48, 0x09, 0xd9, 0x6a, 0xef, 0x09, 0x5f, 0x1d, 0x6a, 0x64, 0x23, 0xfb, 0x1a, 0x9a, 0xa6, 0xbd,
		0x78, 0x72, 0xfe, 0x9f, 0x1e, 0xeb, 0x2c, 0xe9, 0xba, 0x98, 0xd2, 0x10, 0xa6, 0x2f, 0x74, 0xa3,
		0xe9, 0x32, 0xc4, 0x85, 0x7e, 0x34, 0x5e, 0x8e, 0xa8, 0xd9, 0x7a, 0x67, 0xa7, 0x9e, 0x3d, 0x6e,
		0xdc, 0xd4, 0xd7, 0xea, 0x87, 0x1b, 0x34, 0xf9, 0x3b, 0x76, 0xb4, 0xda, 0xc2, 0x01, 0xac, 0x75,
		0x98, 0x83, 0x65, 0x07, 0xb0, 0x9a, 0xbb, 0xe3, 0x3c, 0x81, 0xd1, 0x57, 0x1b, 0x58, 0x08, 0x89,
		0x50, 0xb1, 0xa5, 0x57, 0x6a, 0xb7, 0x3e, 0x0d, 0x1e, 0x1b, 0x3e, 0xd8, 0xf0, 0x29, 0x59, 0x91,
		0x06, 0x4f, 0x7f, 0x74, 0x5b, 0xc7, 0x91, 0xed, 0xf1, 0x51, 0xed, 0xf7, 0xef, 0x63, 0x2c, 0xdf,
		0xa5, 0x9a, 0x6c, 0xd4, 0xb5, 0x4b, 0x3a, 0xaf, 0xdb, 0x5a, 0xd7, 0x0e, 0xa0, 0x0e, 0x50, 0x2f,
		0x61, 0x17, 0xbf, 0xd8, 0x11, 0x36, 0x04, 0x73, 0x93, 0x70, 0x63, 0x0c, 0x76, 0x8c, 0xc1, 0x8f,
		0x09, 0x18, 0xd2, 0xa3, 0x68, 0x60, 0x17, 0x7f, 0x15, 0x61, 0xc1, 0x2e, 0x3e, 0x76, 0xf1, 0xb1,
		0x8b, 0xaf, 0x1b, 0x34, 0xca, 0x81, 0x14, 0x1d, 0x0d, 0xbb, 0x32, 0x13, 0xe7, 0x38, 0x6c, 0x1f,
		0x34, 0x04, 0x34, 0x04, 0x34, 0x04, 0x34, 0x84, 0x90, 0x86, 0x8c, 0x48, 0x48, 0x45, 0x0b, 0xc4,
		0xcc, 0x70, 0x91, 0x86, 0x86, 0xb6, 0xcf, 0xfc, 0x5e, 0xb7, 0x3f, 0x44, 0xcf, 0x48, 0x15, 0xa3,
		0x5a, 0x13, 0x48, 0x15, 0x83, 0xcb, 0x81, 0xcb, 0x81, 0xcb, 0xd1, 0xb4, 0xda, 0x91, 0x2a, 0x36,
		0xff, 0x0f, 0xa9, 0x62, 0x6b, 0x75, 0x83, 0x54, 0xb1, 0x64, 0x53, 0x8f, 0x54, 0xb1, 0x82, 0x4f,
		0x3e, 0x52, 0xc5, 0x0a, 0x43, 0xad, 0x23, 0xc5, 0x54, 0x2f, 0xd2, 0x78, 0x07, 0xc5, 0xb0, 0x7d,
		0x90, 0x69, 0x90, 0x69, 0x90, 0x69, 0x90, 0x69, 0xb2, 0xd5, 0xce, 0xfd, 0x5e, 0x97, 0xcb, 0x61,
		0x86, 0x2a, 0x94, 0x1b, 0x64, 0x22, 0x27, 0x77, 0x7c, 0x06, 0x33, 0x91, 0x8b, 0x75, 0x07, 0x04,
		0x41, 0xe6, 0xda, 0x83, 0x94, 0x1a, 0x52, 0x91, 0x07, 0xad, 0xa2, 0xfa, 0x4c, 0xe1, 0x98, 0x00,
		0xf2, 0xd6, 0xf2, 0xf0, 0xf4, 0x1b, 0x9e, 0xb7, 0xd6, 0x37, 0xf6, 0x4a, 0x47, 0x06, 0x3d, 0x8d,
		0xf9, 0x6b, 0x53, 0x7d, 0xe8, 0x09, 0x40, 0x6a, 0x08, 0x40, 0x10, 0x80, 0x20, 0x00, 0x29, 0x5e,
		0x00, 0x42, 0x0d, 0x57, 0xe3, 0x86, 0x89, 0x6b, 0xef, 0xad, 0x34, 0x26, 0xd2, 0x5a, 0x7c, 0x86,
		0xe0, 0x4b, 0x3b, 0x8c, 0x99, 0x80, 0x33, 0x63, 0xb0, 0x66, 0x0a, 0xde, 0x8c, 0xc3, 0x9c, 0x71,
		0xb8, 0x33, 0x09, 0x7b, 0x7a, 0xe0, 0x4f, 0x13, 0x0c, 0x6a, 0x87, 0xc3, 0x71, 0x07, 0xcc, 0x71,
		0x78, 0xa8, 0x2a, 0xdd, 0xc0, 0x35, 0xb0, 0x90, 0xc7, 0x75, 0x89, 0xa7, 0x3a, 0xd5, 0xbc, 0xb2,
		0x34, 0x5d, 0x1d, 0xf5, 0x1a, 0x40, 0xeb, 0xde, 0x5e, 0xd2, 0x0d, 0xd4, 0x26, 0x01, 0xdb, 0x38,
		0x70, 0x9b, 0x06, 0xf0, 0xdc, 0x80, 0x3c, 0x37, 0x40, 0xcf, 0x03, 0xd8, 0xf5, 0x02, 0xbc, 0x66,
		0xa0, 0x1f, 0x0f, 0x98, 0x36, 0x01, 0x7e, 0xa5, 0xb5, 0xd1, 0x5f, 0xad, 0xf5, 0x2a, 0x7b, 0xad,
		0xed, 0xd8, 0xb9, 0x00, 0x74, 0x26, 0x3f, 0x30, 0xf7, 0x81, 0x4b, 0x25, 0x22, 0xde, 0x37, 0x97,
		0xa1, 0x94, 0xfd, 0xc0, 0x3c, 0x83, 0x3e, 0x79, 0x79, 0xff, 0xe6, 0xdc, 0x73, 0xad, 0x5a, 0x85,
		0x73, 0x86, 0x73, 0x86, 0x73, 0x86, 0x73, 0x86, 0x73, 0x9e, 0x4e, 0x3d, 0xad, 0x35, 0x0d, 0xfa,
		0xe6, 0xa6, 0x81, 0xae, 0xf4, 0xe6, 0xa6, 0xce, 0xff, 0x33, 0x03, 0x1f, 0x25, 0x53, 0xb9, 0xab,
		0x39, 0x39, 0xb5, 0x85, 0x6e, 0xc7, 0x09, 0x8e, 0x86, 0xfb, 0x35, 0x98, 0xee, 0x68, 0x18, 0x5e,
		0x66, 0x97, 0x12, 0x7b, 0xdc, 0xba, 0xa5, 0xd4, 0xa8, 0x1e, 0xed, 0x6f, 0xd1, 0x6a, 0xda, 0xd9,
		0x8c, 0x5e, 0x5a, 0x08, 0xe6, 0x16, 0x96, 0x55, 0x28, 0x39, 0xef, 0x86, 0xca, 0x5c, 0xf4, 0x36,
		0xea, 0xd0, 0x5c, 0xb8, 0xd6, 0xe7, 0xa9, 0x88, 0xd7, 0x10, 0xaf, 0x21, 0x5e, 0x43, 0xbc, 0x86,
		0x78, 0x0d, 0x62, 0x6a, 0x11, 0xfd, 0x6f, 0xc5, 0xe5, 0x1e, 0x7b, 0x32, 0xee, 0x85, 0xe3, 0x6e,
		0xcd, 0xf9, 0x62, 0x08, 0xa7, 0x70, 0xc4, 0x70, 0xc4, 0x70, 0xc4, 0x70, 0xc4, 0x10, 0x4e, 0xe9,
		0xfe, 0x41, 0x38, 0xd5, 0xd2, 0xad, 0xa1, 0xa2, 0x00, 0x0b, 0xfd, 0x42, 0x38, 0xdd, 0xd8, 0xa5,
		0xb4, 0xd7, 0xac, 0x56, 0x21, 0x9c, 0xda, 0xd6, 0x0b, 0x84, 0xd3, 0x65, 0x81, 0x9b, 0x08, 0xa4,
		0x50, 0x46, 0x63, 0xb6, 0xb8, 0x47, 0x64, 0xba, 0x20, 0x60, 0x43, 0xc0, 0x86, 0x80, 0x0d, 0x01,
		0x5b, 0x6e, 0x01, 0xdb, 0xa1, 0xc1, 0x78, 0x6d, 0x1f, 0xf1, 0x1a, 0xe2, 0xb5, 0x24, 0x24, 0x1b,
		0x89, 0x2e, 0x88, 0xd7, 0x88, 0x96, 0x52, 0x7d, 0xbf, 0x81, 0x70, 0x0d, 0xe1, 0x9a, 0xfd, 0xe1,
		0xda, 0x83, 0x90, 0xaa, 0xc7, 0xbc, 0xf1, 0xb5, 0x20, 0xc6, 0xa2, 0xb6, 0xf9, 0x8e, 0x11, 0x4e,
		0x21, 0x9c, 0x42, 0x38, 0x85, 0x70, 0x0a, 0xe1, 0xd4, 0xc2, 0x35, 0x09, 0x26, 0x73, 0x51, 0x8e,
		0x0c, 0xf4, 0x15, 0x8f, 0xe5, 0xc6, 0xc5, 0x54, 0x53, 0xf7, 0x6c, 0x35, 0x0c, 0xce, 0xdd, 0xc2,
		0x1c, 0x1e, 0x1a, 0xec, 0x53, 0xf7, 0xbd, 0x5c, 0x2b, 0x3b, 0x8e, 0xef, 0xeb, 0x6a, 0xfd, 0xfe,
		0x5e, 0xab, 0x1c, 0xb5, 0x86, 0x5f, 0xd6, 0x06, 0xff, 0x1b, 0x7e, 0x5d, 0xff, 0x5e, 0xad, 0x34,
		0x46, 0x5f, 0xef, 0x7f, 0xaf, 0x56, 0xf6, 0x5b, 0x6f, 0x7f, 0xfc, 0x78, 0xff, 0xf6, 0xef, 0xbd,
		0xe7, 0xe4, 0x0f, 0xfe, 0xa3, 0x6c, 0xec, 0xc3, 0xb5, 0x76, 0x36, 0x28, 0x3e, 0xcc, 0xc7, 0xf8,
		0x9a, 0x30, 0x3e, 0x33, 0xc6, 0x87, 0xcb, 0xf2, 0x36, 0xe2, 0xb2, 0xbc, 0x9c, 0xa1, 0xc8, 0xf6,
		0xb8, 0x5f, 0x33, 0xf3, 0xbc, 0x10, 0x91, 0x3a, 0x51, 0x4a, 0x9a, 0x61, 0x9f, 0x97, 0xc2, 0x3f,
		0xf3, 0x06, 0x15, 0x04, 0xa2, 0xf2, 0x71, 0xc9, 0xef, 0x79, 0x9e, 0x01, 0x42, 0x78, 0xc9, 0x1e,
		0xcd, 0x77, 0xfa, 0x45, 0xba, 0x5c, 0x72, 0xf7, 0xc3, 0x53, 0xdc, 0x25, 0xc4, 0xa1, 0x95, 0xe2,
		0x90, 0x27, 0xfc, 0x9f, 0x15, 0x2f, 0x70, 0x4c, 0x56, 0xb3, 0x58, 0xd2, 0x37, 0x24, 0x22, 0x48,
		0x44, 0x90, 0x88, 0x20, 0x11, 0x41, 0x22, 0x82, 0x44, 0x04, 0x89, 0x08, 0x51, 0x2a, 0x24, 0x22,
		0x48, 0x44, 0x90, 0x88, 0x20, 0x11, 0x41, 0x22, 0x82, 0x44, 0x54, 0x6c, 0x89, 0xc8, 0xea, 0xe8,
		0x5f, 0x06, 0x3d, 0xc5, 0x65, 0x45, 0xb8, 0xe6, 0x83, 0xff, 0x49, 0xd7, 0x88, 0xfd, 0x11, 0xfb,
		0x23, 0xf6, 0x47, 0xec, 0x8f, 0xd8, 0x1f, 0xd9, 0xf6, 0xf6, 0x45, 0x1e, 0xc8, 0xb6, 0xd7, 0xdf,
		0x2f, 0xb2, 0xed, 0x37, 0x76, 0x29, 0xd5, 0xf7, 0x51, 0x55, 0x12, 0x21, 0x95, 0xa9, 0x90, 0xca,
		0xaa, 0xeb, 0x85, 0x4e, 0x7a, 0x9d, 0x3e, 0x51, 0xe3, 0xae, 0x56, 0xb7, 0x69, 0x28, 0xec, 0xdb,
		0xed, 0x73, 0xcd, 0xf6, 0xf1, 0xd4, 0x15, 0xbf, 0x73, 0x3f, 0x88, 0xbf, 0x9f, 0xbd, 0x06, 0x78,
		0xf1, 0x67, 0x83, 0x1f, 0x85, 0xc7, 0x83, 0x2b, 0x81, 0x87, 0x5f, 0x4e, 0x2e, 0x06, 0x9e, 0xf9,
		0x7e, 0xf7, 0x41, 0xca, 0x70, 0x77, 0x72, 0x57, 0xe5, 0xae, 0xd6, 0xbb, 0xdf, 0xc6, 0x9f, 0xf7,
		0x94, 0x47, 0x8e, 0x14, 0x61, 0x7c, 0xb3, 0x72, 0xf9, 0xc4, 0x75, 0x45, 0xff, 0x6b, 0xe6, 0x95,
		0xbe, 0x7d, 0xfd, 0x7a, 0x55, 0x72, 0x99, 0x62, 0xa5, 0x76, 0x20, 0x4b, 0xe7, 0x57, 0x0f, 0xcd,
		0xd2, 0xe4, 0x93, 0x1a, 0x0a, 0x82, 0x6b, 0x08, 0x82, 0x11, 0x04, 0x23, 0x08, 0x46, 0x10, 0x9c,
		0x18, 0xd6, 0x84, 0xa1, 0x24, 0xb5, 0x1c, 0xf2, 0x92, 0x16, 0x0c, 0xdd, 0x78, 0x7e, 0xd2, 0x2a,
		0xef, 0xf1, 0x29, 0x90, 0x43, 0xb7, 0x11, 0xf8, 0xf3, 0x0e, 0xe3, 0x5d, 0x29, 0xe2, 0x2a, 0x2a,
		0xa9, 0x7b, 0x5e, 0x8a, 0x5f, 0xb7, 0xd4, 0x7f, 0xdd, 0xd2, 0xe0, 0x75, 0x7f, 0xf8, 0x66, 0xb7,
		0xc0, 0x0c, 0x07, 0x11, 0xc6, 0xdc, 0x4c, 0x1e, 0xee, 0x26, 0x37, 0xb7, 0x93, 0x97, 0xfb, 0xc9,
		0xdd, 0x0d, 0xe5, 0xee, 0x8e, 0xf2, 0x74, 0x4b, 0x86, 0x43, 0x53, 0x43, 0xf6, 0x6a, 0x4c, 0xb3,
		0x5d, 0xb0, 0x56, 0xa3, 0x79, 0x5b, 0x0b, 0xf4, 0xfe, 0xc8, 0x60, 0x9f, 0x46, 0xf3, 0xb8, 0xcc,
		0x44, 0xab, 0xaf, 0xcc, 0x6c, 0x2e, 0x79, 0x5d, 0x0b, 0x73, 0x7c, 0x98, 0x43, 0xdf, 0x79, 0xa5,
		0x9a, 0x8c, 0x5f, 0x60, 0x53, 0xf3, 0xbd, 0xcc, 0x28, 0x6a, 0x39, 0xc1, 0x70, 0x31, 0x8c, 0xb6,
		0x09, 0xa3, 0xcd, 0xd7, 0x68, 0x91, 0x27, 0xb6, 0xd1, 0x79, 0x62, 0x39, 0x41, 0x18, 0xf2, 0xe0,
		0x8a, 0x25, 0x40, 0x59, 0xb6, 0x69, 0xd3, 0xd2, 0xb5, 0x69, 0xe3, 0xfb, 0x81, 0x62, 0xb1, 0x80,
		0xa3, 0xcf, 0xf1, 0x95, 0x23, 0xe7, 0x9e, 0x77, 0x59, 0xc8, 0xd4, 0xfd, 0x70, 0x77, 0x25, 0xe4,
		0xfe, 0x70, 0x83, 0xa3, 0x32, 0xb5, 0x7d, 0xb2, 0xec, 0xcb, 0xdd, 0xd9, 0x1d, 0x96, 0x99, 0xbd,
		0x95, 0xc1, 0xae, 0xca, 0x64, 0x3f, 0xe5, 0x95, 0x9d, 0x94, 0x1d, 0x3b, 0x66, 0x5b, 0x03, 0xd9,
		0x29, 0x8f, 0x87, 0xac, 0xa2, 0x24, 0x73, 0x7e, 0x0a, 0xbf, 0xa3, 0x6d, 0xb6, 0x27, 0x54, 0x66,
		0xb1, 0x4f, 0x4d, 0x6b, 0x58, 0xef, 0x66, 0x91, 0x76, 0xf5, 0xce, 0x84, 0x5a, 0x67, 0x4c, 0x9d,
		0x33, 0xa5, 0xc6, 0x19, 0x57, 0xdf, 0x8c, 0xab, 0x6d, 0x26, 0xd5, 0x35, 0xbb, 0x12, 0x0d, 0x74,
		0x6f, 0xee, 0x94, 0x9d, 0x91, 0xc5, 0x1b, 0x4a, 0x36, 0x30, 0xb3, 0xd5, 0x8f, 0x3d, 0xf5, 0xe2,
		0xc3, 0xa7, 0x69, 0x18, 0xcd, 0x0d, 0x4e, 0x73, 0x83, 0xd5, 0x3c, 0xe0, 0xd5, 0x50, 0x48, 0xb3,
		0x29, 0x7b, 0xea, 0xa3, 0x5b, 0x34, 0x2a, 0x2e, 0x77, 0x24, 0x8f, 0xe7, 0xc8, 0xf0, 0x9e, 0xfa,
		0x92, 0x77, 0x30, 0xb6, 0xa7, 0x6e, 0xec, 0x2a, 0xc6, 0x79, 0xd7, 0x80, 0xfd, 0x70, 0x8b, 0x5d,
		0x46, 0x5e, 0xae, 0x23, 0x77, 0x17, 0x92, 0xbb, 0x2b, 0xc9, 0xd3, 0xa5, 0x98, 0x71, 0x2d, 0x86,
		0x5c, 0xcc, 0x78, 0x20, 0xf3, 0xdb, 0x0f, 0x37, 0x75, 0x96, 0x69, 0x1e, 0x7a, 0x0d, 0x9e, 0x2a,
		0x30, 0x7c, 0xb6, 0x69, 0xf4, 0x2f, 0x87, 0x5d, 0xb5, 0x3c, 0xce, 0x3a, 0xe5, 0xe4, 0x53, 0x17,
		0xba, 0xcf, 0xe9, 0x66, 0xc8, 0x71, 0xff, 0x39, 0x1e, 0x5b, 0x31, 0x8c, 0x56, 0xb3, 0x4b, 0x2e,
		0x87, 0x33, 0x51, 0x45, 0x5b, 0x72, 0xc6, 0x6f, 0x24, 0x29, 0xd4, 0xa2, 0xc3, 0xb6, 0x62, 0xa1,
		0x3f, 0x8f, 0x01, 0x50, 0x28, 0x0f, 0x36, 0x3c, 0x26, 0x1b, 0x5b, 0xe6, 0xa3, 0xd7, 0xf9, 0x17,
		0x40, 0x18, 0x89, 0x30, 0x12, 0x61, 0x24, 0xc2, 0x48, 0x84, 0x91, 0x86, 0xac, 0xd5, 0xe3, 0xac,
		0x2d, 0x79, 0x3b, 0x8f, 0x9c, 0xea, 0x03, 0xb3, 0x25, 0xdd, 0xee, 0x93, 0x9c, 0x96, 0xf5, 0xfb,
		0xc3, 0xb3, 0x51, 0x4b, 0xcc, 0x68, 0x49, 0xf4, 0xe9, 0xc0, 0xd6, 0x78, 0x95, 0xf2, 0xe9, 0x10,
		0x27, 0xbf, 0xce, 0x8d, 0x96, 0x4a, 0x37, 0xc8, 0x4a, 0xad, 0xde, 0x19, 0x32, 0x94, 0x44, 0x36,
		0xee, 0x2f, 0xcf, 0x64, 0xb2, 0xc5, 0xb4, 0x26, 0xad, 0xf9, 0x65, 0xfa, 0x17, 0x88, 0xce, 0xba,
		0x7d, 0x91, 0x62, 0x8a, 0x9b, 0xcb, 0xa3, 0x18, 0x76, 0xb7, 0x61, 0x69, 0x14, 0x75, 0xa4, 0x51,
		0x58, 0x13, 0xc4, 0x20, 0x8d, 0x02, 0x69, 0x14, 0xaf, 0x0d, 0x18, 0xd2, 0x28, 0x8c, 0xbc, 0x01,
		0xd2, 0x28, 0xa0, 0x7f, 0x41, 0xff, 0x82, 0xfe, 0x05, 0xfd, 0x0b, 0x69, 0x14, 0x7a, 0xba, 0x44,
		0x1a, 0xc5, 0xe6, 0xf9, 0xd4, 0x85, 0xee, 0x91, 0x46, 0x81, 0x34, 0x8a, 0x9c, 0x96, 0x1c, 0xd2,
		0x28, 0x36, 0xb0, 0x37, 0xa4, 0x51, 0xac, 0xbf, 0x0c, 0x91, 0x46, 0x81, 0x30, 0x12, 0x61, 0x24,
		0xc2, 0x48, 0x84, 0x91, 0xdb, 0x1a, 0x46, 0x22, 0x8d, 0x02, 0x69, 0x14, 0x7a, 0x03, 0x5b, 0xa4,
		0x51, 0x20, 0x8d, 0xa2, 0x20, 0xc6, 0xb0, 0xed, 0x69, 0x14, 0xc3, 0xdd, 0x7b, 0x54, 0x7d, 0xd2,
		0xbf, 0xe2, 0xb6, 0xa2, 0xea, 0x93, 0xb1, 0xfa, 0x43, 0xc3, 0x4f, 0xaa, 0x64, 0xcf, 0x51, 0x7e,
		0xcc, 0x5b, 0xce, 0x47, 0x7d, 0xdf, 0x5e, 0x4f, 0xbd, 0xf9, 0xed, 0x79, 0xf8, 0xd0, 0xbc, 0x3d,
		0x19, 0xbe, 0xef, 0xed, 0x37, 0x29, 0xc3, 0x3f, 0xfa, 0x6f, 0x7a, 0x3b, 0xfe, 0xeb, 0x9b, 0xd1,
		0x8b, 0x6e, 0x71, 0xa9, 0x2a, 0xbd, 0x29, 0x43, 0x46, 0x52, 0x85, 0x8c, 0x15, 0xa4, 0xaa, 0xa3,
		0x20, 0x55, 0x61, 0x02, 0x70, 0x14, 0xa4, 0xda, 0x5e, 0x77, 0xaa, 0xbd, 0x20, 0x15, 0x73, 0x1c,
		0x1e, 0xaa, 0x4a, 0x37, 0x70, 0x0d, 0x66, 0x53, 0x4e, 0x77, 0xaa, 0xfd, 0x16, 0xaa, 0x71, 0xb2,
		0x4e, 0x9b, 0x79, 0x11, 0xc7, 0x1d, 0xcb, 0x85, 0x03, 0x6c, 0xe3, 0xc0, 0x6d, 0x1a, 0xc0, 0x73,
		0x03, 0xf2, 0xdc, 0x00, 0x3d, 0x0f, 0x60, 0xdf, 0x8c, 0x48, 0xdd, 0xfc, 0x1d, 0xcb, 0x77, 0x41,
		0xe0, 0x71, 0xe6, 0x1b, 0xbc, 0x65, 0xb9, 0x56, 0xc3, 0x81, 0x86, 0x45, 0x47, 0xec, 0x3e, 0x70,
		0xa9, 0x44, 0x34, 0xd0, 0xed, 0x86, 0x41, 0xec, 0x83, 0x81, 0x2b, 0xbf, 0x26, 0x3e, 0x79, 0x79,
		0xff, 0xe6, 0xdc, 0x73, 0xad, 0x5a, 0x85, 0x73, 0x86, 0x73, 0x86, 0x73, 0x86, 0x73, 0x86, 0x73,
		0x9e, 0xce, 0x76, 0xad, 0x35, 0x0d, 0xfa, 0xe6, 0xa6, 0x81, 0xae, 0xcc, 0xa6, 0xb7, 0x9a, 0xdd,
		0xf5, 0xdb, 0xba, 0x6b, 0xeb, 0x6b, 0x5b, 0x74, 0x69, 0xbd, 0xd9, 0x3d, 0xdc, 0xad, 0x5b, 0x4a,
		0x8d, 0xea, 0xd1, 0xfe, 0x16, 0xad, 0xa6, 0x0d, 0xd9, 0x19, 0x6f, 0x21, 0x98, 0x5b, 0x58, 0x56,
		0x4e, 0x4f, 0xca, 0x7e, 0x18, 0x35, 0x3a, 0xa4, 0x68, 0xb0, 0xe0, 0xff, 0x7c, 0xcf, 0x08, 0xa9,
		0x10, 0x52, 0x21, 0xa4, 0x42, 0x48, 0x85, 0x90, 0xca, 0xf0, 0x01, 0x42, 0x83, 0x07, 0x07, 0x11,
		0x51, 0x6d, 0x12, 0x0d, 0xae, 0x22, 0xa2, 0x42, 0x44, 0x45, 0xb3, 0x94, 0xea, 0xfb, 0x08, 0xa8,
		0x10, 0x50, 0x6d, 0x40, 0x40, 0x15, 0x4a, 0xce, 0xbb, 0xa1, 0x32, 0x17, 0x47, 0x8d, 0x3a, 0x34,
		0xb7, 0xff, 0xd5, 0x67, 0xa9, 0x88, 0xd6, 0x10, 0xad, 0x21, 0x5a, 0x43, 0xb4, 0x86, 0x68, 0x0d,
		0xd9, 0x29, 0x45, 0xf4, 0xbf, 0x15, 0x97, 0x7b, 0xec, 0xc9, 0xb8, 0x17, 0x8e, 0xbb, 0x35, 0xe7,
		0x8b, 0x91, 0x89, 0x02, 0x47, 0x0c, 0x47, 0x0c, 0x47, 0x0c, 0x47, 0x8c, 0x4c, 0x14, 0xba, 0x7f,
		0xd0, 0x4d, 0xb5, 0x74, 0x0b, 0xdd, 0x54, 0xef, 0x52, 0xda, 0x42, 0xdd, 0x74, 0xaf, 0x59, 0xad,
		0x42, 0x38, 0xb5, 0xad, 0x17, 0x08, 0xa7, 0xcb, 0x02, 0x37, 0xd3, 0x19, 0x28, 0xa6, 0x32, 0x4f,
		0x70, 0x74, 0x00, 0x01, 0x1b, 0x02, 0x36, 0x04, 0x6c, 0x08, 0xd8, 0x56, 0x07, 0x6c, 0xc8, 0x73,
		0x41, 0xbc, 0x56, 0x58, 0x92, 0x8d, 0x93, 0x03, 0x88, 0xd7, 0x88, 0x96, 0x92, 0xf1, 0x82, 0xd6,
		0x08, 0xd7, 0x10, 0xae, 0xe9, 0x58, 0x56, 0x0f, 0x42, 0xaa, 0x1e, 0xf3, 0x2a, 0x71, 0xe9, 0x31,
		0x73, 0x51, 0xdb, 0x7c, 0xc7, 0x08, 0xa7, 0x10, 0x4e, 0x21, 0x9c, 0x42, 0x38, 0x85, 0x70, 0x2a,
		0xb6, 0x36, 0x11, 0x1a, 0xc2, 0xc6, 0x69, 0x7c, 0xac, 0x1d, 0x19, 0xe8, 0x2b, 0x1e, 0xcb, 0x8d,
		0x8b, 0xa9, 0x26, 0x33, 0xf7, 0xd0, 0x30, 0x38, 0x77, 0x0b, 0x73, 0x78, 0x68, 0xb6, 0xde, 0xb7,
		0xe2, 0xd2, 0x37, 0x7e, 0x77, 0x54, 0xf9, 0x3f, 0x6f, 0xde, 0x7c, 0xaf, 0x56, 0x8e, 0x5a, 0xbf,
		0xbf, 0xd7, 0x2a, 0x47, 0xad, 0xe1, 0x97, 0xb5, 0xc1, 0xff, 0x86, 0x5f, 0xd7, 0xbf, 0x57, 0x2b,
		0x8d, 0xd1, 0xd7, 0xfb, 0xdf, 0xab, 0x95, 0xfd, 0xd6, 0xdb, 0x1f, 0x3f, 0xde, 0xbf, 0xfd, 0x7b,
		0xef, 0x39, 0xf9, 0x83, 0xff, 0x28, 0x6f, 0xda, 0xad, 0x2a, 0xef, 0x36, 0xd8, 0xf8, 0x9a, 0x30,
		0x3e, 0x33, 0xc6, 0xc7, 0x2a, 0xed, 0x93, 0xca, 0xa7, 0xd6, 0xdf, 0xb5, 0x77, 0x8d, 0xe7, 0xe3,
		0xb7, 0x7f, 0x1f, 0x3c, 0xcf, 0xff, 0xf0, 0xf7, 0xb2, 0x3f, 0xab, 0xbd, 0x3b, 0x78, 0x3e, 0x5e,
		0xf1, 0x9b, 0xe6, 0xf3, 0xf1, 0x9a, 0x6d, 0xec, 0x3f, 0xbf, 0x59, 0xf8, 0xd3, 0xfe, 0xcf, 0xeb,
		0xab, 0x1e, 0x68, 0xac, 0x78, 0x60, 0x6f, 0xd5, 0x03, 0x7b, 0x2b, 0x1e, 0x58, 0xf9, 0x4a, 0xf5,
		0x15, 0x0f, 0xec, 0x3f, 0xff, 0x5e, 0xf8, 0xfb, 0x37, 0xcb, 0xff, 0xb4, 0xf9, 0xfc, 0xf6, 0xf7,
		0xaa, 0xdf, 0x1d, 0x3c, 0xff, 0x3e, 0x7e, 0xbb, 0x81, 0x50, 0x64, 0x7b, 0xdc, 0xaf, 0x99, 0x79,
		0x1a, 0xbd, 0x4f, 0x22, 0x97, 0x7b, 0x24, 0x72, 0xb9, 0x3f, 0xc2, 0xec, 0xbd, 0x11, 0x76, 0x8b,
		0x43, 0x9e, 0xf0, 0x7f, 0x56, 0xbc, 0xc0, 0x31, 0x59, 0x1e, 0x70, 0x49, 0xdf, 0x90, 0x88, 0x20,
		0x11, 0x41, 0x22, 0x82, 0x44, 0x04, 0x89, 0x08, 0x12, 0x11, 0x24, 0x22, 0x44, 0xa9, 0x90, 0x88,
		0x20, 0x11, 0x41, 0x22, 0x82, 0x44, 0x04, 0x89, 0x08, 0x12, 0x51, 0xb1, 0x25, 0x22, 0xab, 0xa3,
		0x7f, 0x19, 0xf4, 0x14, 0x97, 0x15, 0xe1, 0x9a, 0x0f, 0xfe, 0x27, 0x5d, 0x23, 0xf6, 0x47, 0xec,
		0x8f, 0xd8, 0x1f, 0xb1, 0x3f, 0x62, 0x7f, 0x64, 0xdb, 0xdb, 0x17, 0x79, 0x20, 0xdb, 0x5e, 0x7f,
		0xbf, 0xc8, 0xb6, 0xdf, 0xd8, 0xa5, 0x84, 0xaa, 0x92, 0x08, 0xa9, 0xcc, 0x85, 0x54, 0x76, 0x5d,
		0x7f, 0xde, 0xeb, 0xf4, 0x89, 0x1a, 0x77, 0xb5, 0xba, 0x4d, 0x43, 0x61, 0xdf, 0x6e, 0x9f, 0x6b,
		0xb6, 0x8f, 0xa7, 0x6e, 0x4b, 0x9f, 0xfb, 0x41, 0xfc, 0xfd, 0xec, 0x8d, 0xea, 0x8b, 0x3f, 0x1b,
		0xfc, 0x28, 0x3c, 0x1e, 0xdc, 0xae, 0x3e, 0xfc, 0x72, 0x72, 0xc7, 0xfa, 0xcc, 0xf7, 0x0b, 0x37,
		0xad, 0xeb, 0xbc, 0x4b, 0x7b, 0xfc, 0x71, 0x4f, 0x79, 0xe4, 0x48, 0x11, 0xc6, 0x77, 0xd6, 0x97,
		0x4f, 0x5c, 0x57, 0xf4, 0xbf, 0x66, 0x5e, 0xe9, 0xdb, 0xd7, 0xaf, 0x57, 0x25, 0x97, 0x29, 0x56,
		0x6a, 0x07, 0xb2, 0x74, 0x7e, 0xf5, 0xd0, 0x2c, 0x4d, 0x3e, 0xa8, 0xa1, 0x18, 0xb8, 0x86, 0x18,
		0x18, 0x31, 0x30, 0x62, 0x60, 0xc4, 0xc0, 0x89, 0x61, 0x4d, 0x18, 0xca, 0x51, 0xcb, 0x21, 0x2d,
		0x69, 0xc1, 0xd0, 0x8d, 0xa7, 0x27, 0xad, 0xf2, 0x1e, 0x9f, 0x02, 0x39, 0x74, 0x1b, 0x81, 0x3f,
		0xef, 0x30, 0xde, 0x95, 0x22, 0xae, 0xa2, 0x92, 0xba, 0xe7, 0xa5, 0xf8, 0x75, 0x4b, 0xfd, 0xd7,
		0x2d, 0x0d, 0x5e, 0xf7, 0x87, 0x6f, 0x76, 0x07, 0xcc, 0x70, 0x0c, 0x61, 0xcc, 0xcd, 0xe4, 0xe1,
		0x6e, 0x72, 0x73, 0x3b, 0x79, 0xb9, 0x9f, 0xdc, 0xdd, 0x50, 0xee, 0xee, 0x28, 0x4f, 0xb7, 0x64,
		0x38, 0x32, 0x35, 0x64, 0xaf, 0xc6, 0x24, 0xdb, 0x05, 0x6b, 0x35, 0x9a, 0xb6, 0xb5, 0x40, 0xef,
		0x8f, 0x0c, 0xf6, 0x69, 0x34, 0x8d, 0xcb, 0x4c, 0xb0, 0xfa, 0xca, 0xcc, 0xe6, 0x92, 0xd6, 0xb5,
		0x30, 0xc7, 0x87, 0x39, 0xf4, 0x9d, 0x57, 0xa6, 0xc9, 0xf8, 0x05, 0x36, 0x35, 0xdd, 0xcb, 0x8c,
		0xa0, 0x96, 0x13, 0x0c, 0x17, 0xc3, 0x68, 0x9b, 0x30, 0xda, 0x7c, 0x8d, 0x16, 0x69, 0x62, 0x1b,
		0x9d, 0x26, 0x96, 0x13, 0x84, 0x21, 0x0d, 0xae, 0x58, 0x02, 0x94, 0x65, 0x7b, 0x36, 0x2d, 0x5d,
		0x7b, 0x36, 0xbe, 0x1f, 0x28, 0x16, 0x0b, 0x38, 0xfa, 0x1c, 0x5f, 0x39, 0x72, 0xee, 0x79, 0x97,
		0x85, 0x4c, 0xdd, 0x0f, 0x37, 0x57, 0x42, 0xee, 0x3b, 0x03, 0x55, 0xa4, 0x32, 0xb5, 0x7b, 0xb2,
		0xec, 0xcb, 0xdd, 0xd9, 0x0d, 0x96, 0x99, 0xad, 0x95, 0xc1, 0xa6, 0xca, 0x64, 0x3b, 0xe5, 0xe5,
		0x8d, 0x94, 0x1d, 0x3b, 0x26, 0x5b, 0x03, 0xd7, 0x31, 0x98, 0x3d, 0x69, 0x3c, 0x6b, 0x52, 0xb3,
		0x94, 0xa7, 0x5d, 0xba, 0x33, 0x21, 0xd5, 0x19, 0x93, 0xe6, 0x4c, 0x49, 0x71, 0xc6, 0xa5, 0x37,
		0xe3, 0x52, 0x9b, 0x49, 0x69, 0xcd, 0xae, 0x24, 0x03, 0xed, 0x52, 0xd9, 0xd8, 0x5a, 0x3c, 0xce,
		0xda, 0x92, 0xb7, 0x75, 0xda, 0xcb, 0x28, 0xdc, 0x3a, 0xd0, 0xd8, 0xc7, 0x55, 0xec, 0x73, 0xdf,
		0xbf, 0xdf, 0x1d, 0x7a, 0xdc, 0xdd, 0x45, 0x6c, 0xb6, 0xc5, 0x37, 0xee, 0x14, 0x78, 0x85, 0xf6,
		0x41, 0xc9, 0x84, 0xe7, 0xd3, 0x5b, 0x84, 0xc3, 0x48, 0xd1, 0x0d, 0x23, 0x45, 0x36, 0xf4, 0x16,
		0xd5, 0xa0, 0x5e, 0x3c, 0x9a, 0x79, 0x78, 0x9e, 0xfc, 0x5b, 0x03, 0x80, 0x96, 0x23, 0x25, 0x7b,
		0x8e, 0xf2, 0x63, 0xa4, 0x3e, 0x1f, 0xbd, 0xd1, 0xed, 0xf5, 0xd4, 0xeb, 0xdd, 0x9e, 0x87, 0x0f,
		0xcd, 0xdb, 0x93, 0xe1, 0x4b, 0xdd, 0x7e, 0x93, 0x32, 0xfc, 0x63, 0xf0, 0x3a, 0x3b, 0xc5, 0x84,
		0x24, 0x9a, 0x96, 0x88, 0xd6, 0xa5, 0xae, 0xf5, 0x68, 0x7c, 0x1d, 0xd2, 0xcc, 0x76, 0xf6, 0xb9,
		0xc9, 0xd6, 0x42, 0xc6, 0x59, 0x1d, 0xb9, 0xa6, 0xcc, 0xe4, 0x9f, 0xd6, 0xf7, 0x68, 0xf1, 0x35,
		0x5a, 0x7c, 0x0b, 0xad, 0x2f, 0xc9, 0x3a, 0x9b, 0xb4, 0x79, 0xb6, 0x34, 0xc6, 0x9d, 0x5f, 0xde,
		0x2c, 0x91, 0x7b, 0x79, 0x21, 0x13, 0xf6, 0xfc, 0xaa, 0xd4, 0xef, 0xab, 0xd4, 0x66, 0x5d, 0xe1,
		0x3d, 0x95, 0x86, 0x78, 0xd5, 0x93, 0x03, 0x74, 0x2c, 0xb5, 0x03, 0xf9, 0xc3, 0x27, 0x4f, 0x8c,
		0x25, 0x4e, 0x80, 0x25, 0x97, 0x31, 0x74, 0xc8, 0x16, 0xda, 0x64, 0x0a, 0x5d, 0xb2, 0x84, 0x76,
		0x19, 0x42, 0xbb, 0xec, 0xa0, 0x53, 0x66, 0x28, 0x16, 0x9f, 0xa1, 0x4e, 0x08, 0x2d, 0x0f, 0xc8,
		0x05, 0xf9, 0x8a, 0x1a, 0xcb, 0xa7, 0xfd, 0xd6, 0x89, 0xe7, 0x7a, 0x0e, 0xe0, 0xce, 0x7c, 0xc7,
		0x0b, 0x22, 0xe1, 0x77, 0xfa, 0x80, 0xa6, 0x98, 0xf0, 0xb9, 0x1c, 0x64, 0xfa, 0x0f, 0x12, 0x38,
		0x07, 0xc4, 0x3d, 0x2a, 0xdd, 0x33, 0xdf, 0xf5, 0xb8, 0x5b, 0xba, 0x7b, 0x2a, 0xa9, 0x7b, 0x11,
		0xfd, 0xf0, 0xcf, 0xaf, 0x26, 0x39, 0x9d, 0xd4, 0xef, 0xa7, 0x27, 0xe7, 0x5f, 0x9b, 0x82, 0xab,
		0x53, 0xb9, 0xd5, 0xae, 0xd8, 0xea, 0x56, 0x6a, 0x8d, 0x29, 0xb4, 0xc6, 0x94, 0x59, 0x13, 0x8a,
		0xec, 0xf3, 0x66, 0x87, 0xa6, 0x39, 0x07, 0x51, 0xad, 0xac, 0xb4, 0x9b, 0x36, 0x24, 0x36, 0x19,
		0x0a, 0x13, 0x18, 0x5f, 0x72, 0xc9, 0x25, 0x9b, 0x7d, 0xa4, 0x9f, 0xeb, 0x74, 0x4f, 0xa6, 0x24,
		0x1a, 0x54, 0xab, 0xc2, 0xc4, 0x6a, 0x48, 0x37, 0x21, 0xc9, 0x87, 0x33, 0xc5, 0x50, 0x96, 0x59,
		0x4f, 0x05, 0xfd, 0xcf, 0x9b, 0x7a, 0x10, 0xc7, 0x2e, 0x73, 0xdc, 0x52, 0xca, 0x09, 0xcd, 0x46,
		0x43, 0x32, 0xd3, 0x0d, 0x0a, 0x5a, 0x31, 0x4b, 0x1f, 0x2a, 0xfc, 0x51, 0x65, 0x00, 0x00, 0x2a,
		0xaa, 0x40, 0x4e, 0x09, 0xc8, 0x5d, 0xff, 0xa2, 0x8b, 0x1f, 0x0c, 0x9d, 0x25, 0x40, 0x94, 0x35,
		0xc2, 0x29, 0x3b, 0xa3, 0x95, 0x9b, 0x71, 0x9e, 0x47, 0x8b, 0x2f, 0x6e, 0x2f, 0xab, 0x74, 0x49,
		0x12, 0x15, 0x90, 0x45, 0x01, 0x94, 0xac, 0x9f, 0xd4, 0x4c, 0x75, 0x31, 0x7b, 0x6d, 0x4c, 0x5e,
		0x1b, 0x73, 0xa7, 0x36, 0x63, 0x1a, 0xf6, 0x99, 0x55, 0xf4, 0xa5, 0x12, 0x30, 0xca, 0x8e, 0xe4,
		0x4c, 0xf1, 0x4a, 0xc7, 0x0b, 0xee, 0x26, 0x57, 0x1e, 0x72, 0xba, 0xdb, 0x16, 0x27, 0xf6, 0xbf,
		0xa2, 0x23, 0x32, 0xbd, 0x76, 0x7c, 0x05, 0x7e, 0x7f, 0xed, 0x10, 0x0b, 0xaf, 0xd5, 0xad, 0x15,
		0x5e, 0x89, 0x70, 0x48, 0xb7, 0xd2, 0xb0, 0x89, 0xe2, 0x2b, 0x0d, 0x4e, 0x11, 0x47, 0xed, 0x44,
		0xeb, 0x96, 0x3c, 0x6f, 0x6b, 0xbc, 0x6a, 0xef, 0x82, 0xc0, 0xe3, 0xcc, 0xa7, 0x5c, 0xb3, 0x23,
		0xd2, 0x51, 0x2b, 0x8a, 0xf0, 0xf1, 0x8e, 0x0c, 0xf7, 0x15, 0xef, 0x86, 0x81, 0x64, 0xf2, 0xc9,
		0x00, 0xf4, 0x2f, 0xeb, 0x8b, 0x1e, 0xfd, 0xdb, 0xcc, 0x8b, 0x00, 0xff, 0x80, 0x7f, 0xc0, 0x3f,
		0xe0, 0x1f, 0xf0, 0xbf, 0xea, 0x33, 0x4d, 0xb0, 0xb8, 0x6f, 0x2e, 0x5c, 0x4a, 0xee, 0x56, 0x3c,
		0xd1, 0xe6, 0x4a, 0x74, 0x39, 0xbd, 0x03, 0x78, 0xb1, 0x37, 0x7a, 0x17, 0x70, 0xd8, 0x6c, 0x54,
		0xab, 0x70, 0x01, 0x70, 0x01, 0x70, 0x01, 0xdb, 0xe8, 0x02, 0x7a, 0xc2, 0x57, 0x7b, 0x75, 0x0d,
		0x1e, 0x80, 0xf0, 0x5c, 0x86, 0xa6, 0x82, 0xd2, 0x7a, 0x4e, 0x00, 0x68, 0xcc, 0x0b, 0xd0, 0x7b,
		0x5c, 0x6f, 0x54, 0xa5, 0x57, 0x57, 0xfb, 0x06, 0x6a, 0xf1, 0x3e, 0xeb, 0x39, 0x6f, 0x61, 0xfd,
		0x94, 0x36, 0xea, 0x47, 0x8d, 0xa3, 0xe6, 0x41, 0xfd, 0x68, 0xdf, 0xe2, 0xb9, 0x2d, 0x68, 0x82,
		0x47, 0x6b, 0x23, 0x89, 0xee, 0x03, 0xf3, 0x84, 0x19, 0x92, 0x3b, 0xd7, 0x13, 0x3d, 0xc1, 0x6d,
		0x56, 0x1b, 0x87, 0x60, 0xb8, 0x60, 0xb8, 0x60, 0xb8, 0x60, 0xb8, 0x60, 0xb8, 0x60, 0xb8, 0x60,
		0xb8, 0x60, 0xb8, 0x60, 0xb8, 0x36, 0x32, 0xdc, 0x7c, 0x4f, 0x0e, 0xda, 0x93, 0xc2, 0x1c, 0x67,
		0x71, 0xc6, 0x35, 0x2b, 0x72, 0xcb, 0x25, 0xce, 0x90, 0x37, 0x39, 0x2c, 0x3b, 0x45, 0x96, 0x4e,
		0x47, 0x71, 0x1d, 0x08, 0x79, 0x36, 0x5d, 0x1d, 0xd9, 0x74, 0xc5, 0x60, 0xf4, 0xc8, 0xa6, 0x4b,
		0x16, 0x5a, 0x23, 0x9b, 0x6e, 0xa5, 0xd6, 0x80, 0x6c, 0x3a, 0x28, 0x0d, 0x50, 0x1a, 0xb6, 0x55,
		0x69, 0x40, 0x3a, 0x45, 0x12, 0xdc, 0x47, 0x36, 0x1d, 0xe0, 0x1f, 0xf0, 0x0f, 0xf8, 0x07, 0xfc,
		0x6f, 0x17, 0xfc, 0x23, 0x9b, 0x0e, 0x2e, 0x00, 0x2e, 0x00, 0x2e, 0x60, 0x13, 0x5d, 0x00, 0xf6,
		0x1a, 0x29, 0x17, 0x25, 0xf6, 0x1a, 0x57, 0xb7, 0x8f, 0xbd, 0xc6, 0xdc, 0xa6, 0x14, 0x7b, 0x8d,
		0xfa, 0x5a, 0x43, 0x36, 0x5d, 0x36, 0x92, 0x8b, 0x6c, 0x3a, 0x30, 0x5c, 0x30, 0x5c, 0x30, 0x5c,
		0x30, 0x5c, 0x30, 0x5c, 0x30, 0x5c, 0x30, 0x5c, 0x30, 0x5c, 0x30, 0x5c, 0x1d, 0x2d, 0x6c, 0x61,
		0x36, 0x1d, 0xc1, 0x55, 0x88, 0x28, 0xcc, 0x49, 0x3d, 0x2b, 0xe5, 0x4c, 0x49, 0x86, 0x6b, 0x57,
		0x65, 0x1d, 0xf5, 0x56, 0xe0, 0x2a, 0xa0, 0x19, 0x4b, 0x10, 0xd2, 0x94, 0x1e, 0xdc, 0xbc, 0x0a,
		0xa0, 0xa8, 0xfe, 0x99, 0x2a, 0xb8, 0xda, 0x9a, 0xca, 0x9f, 0xee, 0xbd, 0x13, 0x56, 0x1c, 0x4f,
		0x0c, 0x3f, 0x3c, 0x51, 0xbe, 0xf2, 0x74, 0xa3, 0x59, 0xb3, 0x35, 0x69, 0xd3, 0x53, 0x88, 0x18,
		0xa8, 0x05, 0x35, 0x45, 0x91, 0x01, 0xad, 0x45, 0x75, 0xb1, 0x3d, 0xfb, 0x99, 0x4c, 0x59, 0xd1,
		0x90, 0x36, 0x42, 0x94, 0x2e, 0x92, 0xcf, 0x91, 0x0f, 0xb7, 0x17, 0x0e, 0x92, 0xf3, 0x2a, 0x2e,
		0x57, 0xdc, 0x51, 0x15, 0x25, 0x99, 0x1f, 0x75, 0x87, 0xd1, 0x21, 0x15, 0xac, 0xae, 0xec, 0x82,
		0x0e, 0x64, 0x6b, 0x00, 0x58, 0x00, 0x2c, 0x00, 0xb6, 0x48, 0x00, 0x4b, 0x26, 0x59, 0x13, 0x4a,
		0xd5, 0xc4, 0x12, 0x35, 0xa1, 0xd0, 0xaf, 0x43, 0x92, 0xd6, 0xa4, 0x5b, 0xea, 0x92, 0xa0, 0x75,
		0xca, 0x93, 0x84, 0x92, 0xb3, 0x16, 0xa9, 0x59, 0xf7, 0x54, 0xe9, 0x92, 0x96, 0xb5, 0xce, 0x59,
		0x41, 0x24, 0xdb, 0x96, 0x85, 0xb4, 0x8e, 0xfb, 0xec, 0xce, 0x1b, 0x5c, 0xb7, 0x4a, 0x44, 0xe2,
		0x46, 0x0d, 0xd2, 0x51, 0x36, 0x82, 0x43, 0x7b, 0x60, 0x6d, 0x60, 0x6d, 0x60, 0x6d, 0x08, 0x8b,
		0xe9, 0xf1, 0xb3, 0xab, 0x7a, 0x74, 0xd8, 0xd9, 0x6f, 0x0c, 0x40, 0x07, 0xa0, 0x03, 0xd0, 0x21,
		0x3c, 0x45, 0x78, 0x6a, 0x2c, 0xe6, 0xa9, 0xd5, 0x0f, 0x11, 0xa1, 0x92, 0xcf, 0xd6, 0x1e, 0xc4,
		0x84, 0xad, 0x0f, 0x4c, 0x91, 0x15, 0x33, 0x93, 0x15, 0x93, 0xa5, 0xe0, 0x97, 0x99, 0x2c, 0x15,
		0x9f, 0x8b, 0xce, 0xfd, 0x5d, 0x20, 0xa3, 0xec, 0x89, 0x2a, 0x93, 0xa6, 0x90, 0xab, 0x82, 0x5c,
		0x95, 0x5c, 0x28, 0xa9, 0x65, 0xb9, 0x2a, 0x23, 0x8b, 0xa1, 0x0b, 0x28, 0xc7, 0x2d, 0xe2, 0xa6,
		0x5a, 0x44, 0x95, 0x88, 0x2a, 0x53, 0x7f, 0x20, 0xba, 0x9a, 0x7a, 0x34, 0x17, 0x51, 0x2f, 0x2c,
		0x5e, 0x92, 0x0b, 0xa9, 0x89, 0xcd, 0x9d, 0xdc, 0xec, 0x75, 0x98, 0xbf, 0x36, 0x18, 0xd0, 0x05,
		0x07, 0xda, 0x61, 0x41, 0x3b, 0x3c, 0xe8, 0x84, 0x09, 0xe2, 0xc8, 0x8b, 0xea, 0x7c, 0x2e, 0x11,
		0x7c, 0x8c, 0x1b, 0x14, 0x21, 0xfd, 0x7a, 0x1a, 0x19, 0x00, 0xe9, 0xea, 0xd7, 0x29, 0xdf, 0x50,
		0xc3, 0x8a, 0x4e, 0x78, 0xd1, 0x0e, 0x33, 0xba, 0xe1, 0xc6, 0x18, 0xec, 0x18, 0x83, 0x1f, 0x13,
		0x30, 0x44, 0x0b, 0x47, 0x1a, 0x14, 0xc0, 0x92, 0x96, 0xd3, 0xc8, 0x4b, 0x30, 0xe5, 0xa1, 0x39,
		0x2a, 0xed, 0xa8, 0x63, 0xd1, 0x8f, 0x08, 0xcb, 0xa1, 0x86, 0xb6, 0xaf, 0x98, 0x52, 0x5c, 0xfa,
		0xe4, 0xc7, 0x95, 0xc7, 0x1d, 0xfc, 0xe7, 0xcd, 0x9b, 0xef, 0xd5, 0xca, 0x11, 0xab, 0xb4, 0x4f,
		0x2a, 0x9f, 0x5a, 0x7f, 0xd7, 0xde, 0x35, 0x9e, 0x8f, 0xdf, 0xfe, 0x7d, 0xf0, 0x3c, 0xff, 0xc3,
		0xdf, 0xcb, 0xfe, 0xac, 0xf6, 0xee, 0xe0, 0xf9, 0x78, 0xc5, 0x6f, 0x9a, 0xcf, 0xc7, 0x6b, 0xb6,
		0xb1, 0xff, 0xfc, 0x66, 0xe1, 0x4f, 0xfb, 0x3f, 0xaf, 0xaf, 0x7a, 0xa0, 0xb1, 0xe2, 0x81, 0xbd,
		0x55, 0x0f, 0xec, 0xad, 0x78, 0x60, 0xe5, 0x2b, 0xd5, 0x57, 0x3c, 0xb0, 0xff, 0xfc, 0x7b, 0xe1,
		0xef, 0xdf, 0x2c, 0xff, 0xd3, 0xe6, 0xf3, 0xdb, 0xdf, 0xab, 0x7e, 0x77, 0xf0, 0xfc, 0xfb, 0xf8,
		0xed, 0xdb, 0x7f, 0xd0, 0x9b, 0x7a, 0xab, 0xa0, 0xe7, 0x5a, 0x29, 0xb7, 0x0d, 0x3c, 0xe1, 0xff,
		0xac, 0x78, 0xec, 0x89, 0xcb, 0xb1, 0x51, 0x6b, 0xa3, 0x23, 0x4b, 0xfa, 0x02, 0x3d, 0x01, 0x3d,
		0x01, 0x3d, 0x01, 0x3d, 0x21, 0x5b, 0xed, 0xe1, 0xfd, 0x53, 0x04, 0x7a, 0xb2, 0x92, 0x9e, 0x4c,
		0xfb, 0xcf, 0x79, 0xb7, 0x5c, 0x7f, 0x7e, 0xfb, 0x3f, 0x6f, 0xff, 0xcf, 0x36, 0xf9, 0xd1, 0x42,
		0x29, 0x0b, 0xc4, 0x75, 0x1a, 0xc6, 0xed, 0xea, 0xdb, 0x03, 0x1d, 0x6f, 0x0b, 0x8e, 0xbf, 0x22,
		0xb9, 0x07, 0x89, 0x6e, 0x7a, 0x28, 0x4a, 0xcb, 0x11, 0xea, 0x33, 0xf4, 0xba, 0x0c, 0xaa, 0xba,
		0x41, 0xde, 0x85, 0xbc, 0x6b, 0x45, 0x35, 0x37, 0x8f, 0xb3, 0xb6, 0xe4, 0x6d, 0x1d, 0x25, 0xeb,
		0x29, 0xeb, 0xb9, 0x5d, 0xc5, 0x7e, 0xe2, 0xfd, 0xfb, 0x18, 0xcb, 0x77, 0xa9, 0x26, 0xbb, 0x18,
		0x70, 0x4e, 0x73, 0xdd, 0xdd, 0xc2, 0xec, 0x52, 0x5c, 0x7b, 0xb7, 0x30, 0xaf, 0xd4, 0xa0, 0x5e,
		0x07, 0xa8, 0x03, 0xd4, 0xb7, 0x10, 0xd4, 0xb1, 0x67, 0x07, 0x51, 0x0c, 0xa2, 0x18, 0x44, 0xb1,
		0xad, 0x15, 0xc5, 0xb0, 0x67, 0xf7, 0xa2, 0x28, 0x86, 0x3d, 0x3b, 0xec, 0xd9, 0x69, 0xd7, 0x1a,
		0x09, 0x29, 0xad, 0x88, 0x2a, 0x32, 0xe8, 0x29, 0x2e, 0x35, 0xb2, 0x90, 0x71, 0x17, 0x20, 0x23,
		0x20, 0x23, 0x20, 0x23, 0x20, 0x23, 0x64, 0xab, 0x9d, 0xfe, 0xee, 0xc6, 0x05, 0x1e, 0x52, 0x43,
		0xe2, 0x06, 0xad, 0x76, 0x89, 0xc4, 0x0d, 0xb8, 0x05, 0xb8, 0x05, 0xb8, 0x05, 0x24, 0x6e, 0xe4,
		0x15, 0xa3, 0x22, 0x71, 0x43, 0x93, 0x1f, 0x1d, 0xa5, 0x2e, 0x54, 0x68, 0x77, 0x86, 0x16, 0xd6,
		0xf7, 0x5c, 0x3f, 0xf0, 0x9f, 0xf0, 0x9f, 0xf0, 0x9f, 0xf0, 0x9f, 0x64, 0xab, 0x9d, 0xfb, 0xbd,
		0x2e, 0x97, 0xc3, 0xfc, 0x31, 0x8d, 0xee, 0xb3, 0xa1, 0xa1, 0xed, 0x33, 0xbf, 0xd7, 0xed, 0x0f,
		0xce, 0xf3, 0x16, 0xb8, 0x9b, 0x40, 0x8a, 0x8e, 0x8e, 0xba, 0x4a, 0x63, 0xd0, 0x1b, 0xb6, 0x0f,
		0xf7, 0x02, 0xf7, 0x02, 0xf7, 0x02, 0xf7, 0x42, 0x4f, 0x5f, 0xb5, 0x00, 0x0c, 0x5c, 0x0c, 0x52,
		0xd1, 0xa9, 0x53, 0xd1, 0x09, 0x2e, 0x11, 0xa4, 0x9b, 0x9d, 0x7c, 0x6b, 0x9e, 0xfc, 0x5f, 0xfe,
		0x44, 0x92, 0x5a, 0x54, 0xbe, 0x10, 0x91, 0x3a, 0x51, 0x8a, 0xa8, 0x82, 0xca, 0xa5, 0xf0, 0xcf,
		0x3c, 0xde, 0x07, 0xee, 0xa8, 0x7c, 0x5c, 0xf2, 0x7b, 0x9e, 0x47, 0x90, 0xe0, 0x79, 0xc9, 0x1e,
		0xe9, 0x1b, 0xfd, 0x22, 0x5d, 0x2e, 0xb9, 0xfb, 0xe1, 0x29, 0x6e, 0x12, 0x17, 0x7a, 0xa6, 0xb4,
		0xca, 0x32, 0x49, 0x0a, 0xef, 0xba, 0x97, 0x49, 0x7e, 0x1e, 0xf5, 0x8a, 0xa2, 0x89, 0xc5, 0x5a,
		0x0f, 0x45, 0xae, 0x9b, 0x38, 0xcc, 0x7b, 0xa8, 0x30, 0xf7, 0x81, 0x4b, 0x25, 0x22, 0xde, 0xcd,
		0x72, 0xdf, 0xe0, 0x98, 0x3f, 0x2d, 0x6d, 0x15, 0xd5, 0x14, 0x51, 0x4d, 0x31, 0x97, 0x28, 0xc7,
		0xb2, 0x6a, 0x8a, 0x44, 0xa5, 0xd6, 0x68, 0x4b, 0xac, 0xa1, 0x92, 0x62, 0x8e, 0xa2, 0x06, 0x2a,
		0x29, 0x96, 0x36, 0xa7, 0x92, 0xe2, 0x80, 0x25, 0x3c, 0x30, 0x4f, 0xc3, 0x41, 0xdb, 0x51, 0xcb,
		0x38, 0x6e, 0x5b, 0x38, 0xbd, 0x13, 0x27, 0xb3, 0xf2, 0xd0, 0x33, 0xb7, 0xe5, 0xb8, 0x2d, 0xd9,
		0x55, 0x1f, 0xf3, 0xb6, 0x4f, 0x79, 0xd8, 0x96, 0xf6, 0xea, 0x8f, 0xd1, 0x3f, 0x0d, 0x2a, 0xb0,
		0x8e, 0xab, 0x40, 0x34, 0x81, 0xea, 0x42, 0xf3, 0x9a, 0x2e, 0x9b, 0x18, 0xb7, 0xaf, 0xf1, 0xd2,
		0x09, 0x62, 0x73, 0x9b, 0xd7, 0xc9, 0xac, 0x9f, 0x52, 0x5d, 0x37, 0x5c, 0x1a, 0x9d, 0xdb, 0x82,
		0xee, 0x48, 0xb4, 0x36, 0xe8, 0xd0, 0xbf, 0x27, 0xda, 0x5c, 0x89, 0xae, 0x86, 0x73, 0xff, 0xe3,
		0x96, 0x41, 0x30, 0x41, 0x30, 0x41, 0x30, 0x41, 0x30, 0x41, 0x30, 0x41, 0x30, 0x41, 0x30, 0x41,
		0x30, 0x41, 0x30, 0xb7, 0x89, 0x60, 0x46, 0xbd, 0x30, 0x24, 0x3d, 0x82, 0x37, 0x29, 0x2c, 0x35,
		0x6a, 0x99, 0xaa, 0x16, 0xce, 0xe4, 0x32, 0xf6, 0x36, 0xf3, 0x22, 0x10, 0x57, 0x10, 0x57, 0x10,
		0xd7, 0xad, 0x22, 0xae, 0xf4, 0xe7, 0xaf, 0x89, 0xcf, 0x5d, 0xdb, 0x9e, 0x6d, 0x67, 0x4f, 0x7e,
		0xd6, 0xb2, 0xa4, 0x14, 0x92, 0x12, 0xbe, 0xf9, 0x5c, 0xe0, 0x4f, 0x73, 0x82, 0x8f, 0xb4, 0xa6,
		0x23, 0x79, 0x92, 0x40, 0x1d, 0x49, 0x02, 0xf9, 0xfb, 0x3b, 0x24, 0x09, 0xac, 0xcf, 0x37, 0x91,
		0x24, 0x00, 0x2a, 0x0c, 0x2a, 0x0c, 0x2a, 0x5c, 0x44, 0x2a, 0x0c, 0x0d, 0x97, 0x54, 0xf0, 0x83,
		0x86, 0x9b, 0xab, 0xce, 0x07, 0x0d, 0x77, 0xe9, 0x94, 0x42, 0xc3, 0xd5, 0xd7, 0x1a, 0x92, 0x04,
		0xd6, 0x71, 0x33, 0x48, 0x12, 0x00, 0xc1, 0x04, 0xc1, 0x04, 0xc1, 0x04, 0xc1, 0x04, 0xc1, 0x04,
		0xc1, 0x04, 0xc1, 0x04, 0xc1, 0xdc, 0x4a, 0x82, 0x89, 0x24, 0x01, 0x10, 0x57, 0x10, 0x57, 0x10,
		0x57, 0x24, 0x09, 0x14, 0x03, 0xd2, 0x91, 0x24, 0x90, 0x3e, 0x49, 0x80, 0xa0, 0xb8, 0x12, 0xca,
		0xaa, 0xe8, 0x9c, 0xa1, 0x72, 0xa6, 0x3c, 0x8a, 0x75, 0x0b, 0xec, 0x7c, 0x1d, 0xf4, 0x7c, 0x32,
		0xd3, 0x71, 0x81, 0x4b, 0xbb, 0x64, 0x4b, 0x10, 0x21, 0x49, 0x0c, 0x21, 0x2b, 0xde, 0x52, 0x47,
		0xf1, 0x16, 0x7d, 0x9c, 0x05, 0xc5, 0x5b, 0x26, 0xb1, 0x40, 0xf6, 0xe2, 0x2d, 0xbd, 0x3e, 0x68,
		0x44, 0x94, 0xe5, 0x5b, 0xe2, 0x16, 0x51, 0xc0, 0xc5, 0x58, 0xd8, 0x81, 0xdc, 0x2c, 0xe4, 0x66,
		0xad, 0x6c, 0x48, 0xf8, 0x15, 0x57, 0x44, 0x0e, 0x93, 0x2e, 0x77, 0x2b, 0xe1, 0x4f, 0x15, 0xe9,
		0x48, 0xd2, 0x9a, 0xef, 0x02, 0x9a, 0x04, 0x34, 0x09, 0x68, 0x12, 0x5b, 0xa4, 0x49, 0xc4, 0x6e,
		0xbf, 0xd9, 0xd0, 0xa0, 0x4a, 0x1c, 0x62, 0x3f, 0x8d, 0xb8, 0x71, 0xec, 0xa7, 0x19, 0xb2, 0xb8,
		0xd9, 0x29, 0xdd, 0x80, 0xfd, 0xb4, 0xda, 0x61, 0xa3, 0xd1, 0x3c, 0x68, 0x34, 0xaa, 0x07, 0x7b,
		0x07, 0xd5, 0xa3, 0xfd, 0xfd, 0x5a, 0xb3, 0x86, 0x9d, 0x35, 0xf2, 0xd6, 0x36, 0x69, 0x67, 0x4d,
		0xf8, 0x15, 0x2e, 0x65, 0x20, 0xf5, 0x71, 0xcf, 0xa9, 0xe6, 0xc1, 0x3b, 0xc1, 0x3b, 0xc1, 0x3b,
		0xc1, 0x3b, 0xc1, 0x3b, 0xc1, 0x3b, 0xc1, 0x3b, 0xc1, 0x3b, 0xc1, 0x3b, 0xb7, 0x99, 0x77, 0xb6,
		0x03, 0xf9, 0x6b, 0x28, 0x4a, 0x06, 0x8e, 0xe2, 0x9a, 0xd8, 0xe7, 0x42, 0x27, 0xe0, 0xa0, 0xe0,
		0xa0, 0xe0, 0xa0, 0xe0, 0xa0, 0xe0, 0xa0, 0xe0, 0xa0, 0xe0, 0xa0, 0xe0, 0xa0, 0xe0, 0xa0, 0xe0,
		0xa0, 0x5a, 0xf7, 0xde, 0xe7, 0xba, 0x00, 0xff, 0x04, 0xff, 0x04, 0xff, 0x04, 0xff, 0x04, 0xff,
		0x04, 0xff, 0x04, 0xff, 0x04, 0xff, 0x04, 0xff, 0xdc, 0x66, 0xfe, 0xa9, 0x51, 0xf9, 0x84, 0xde,
		0x09, 0xbe, 0x09, 0xbe, 0x09, 0xbe, 0x09, 0xbe, 0x09, 0xbe, 0x09, 0xbe, 0x09, 0xbe, 0x09, 0xbe,
		0x09, 0xbe, 0xa9, 0x4f, 0xe5, 0x84, 0xb6, 0x09, 0xae, 0x09, 0xae, 0x09, 0xae, 0x09, 0xae, 0x09,
		0xae, 0x09, 0xae, 0x09, 0xae, 0x09, 0xae, 0xb9, 0xdd, 0x5c, 0x33, 0xe8, 0x29, 0xed, 0x07, 0xdb,
		0x97, 0xf4, 0x01, 0x06, 0x0a, 0x06, 0x0a, 0x06, 0x0a, 0x06, 0x0a, 0x06, 0x0a, 0x06, 0x0a, 0x06,
		0x0a, 0x06, 0x0a, 0x06, 0xba, 0xd5, 0x0c, 0x54, 0xe7, 0xd1, 0xf6, 0xb9, 0xf6, 0xc1, 0x3c, 0xc1,
		0x3c, 0xc1, 0x3c, 0xc1, 0x3c, 0xc1, 0x3c, 0xc1, 0x3c, 0xc1, 0x3c, 0xc1, 0x3c, 0xc1, 0x3c, 0xb7,
		0x9a, 0x79, 0xea, 0x3f, 0xdc, 0xbe, 0xb4, 0x17, 0xb0, 0x50, 0xb0, 0x50, 0xb0, 0x50, 0xb0, 0x50,
		0xb0, 0x50, 0xb0, 0x50, 0xb0, 0x50, 0xb0, 0x50, 0xb0, 0x50, 0xb0, 0x50, 0xcd, 0x3b, 0xf0, 0x38,
		0xdf, 0x0e, 0x06, 0x0a, 0x06, 0x0a, 0x06, 0x0a, 0x06, 0x0a, 0x06, 0x0a, 0x06, 0x0a, 0x06, 0x0a,
		0x06, 0x0a, 0x06, 0x3a, 0x61, 0xa0, 0x3a, 0xd5, 0x4f, 0x68, 0x9e, 0x60, 0x9c, 0x60, 0x9c, 0x60,
		0x9c, 0x60, 0x9c, 0x60, 0x9c, 0x60, 0x9c, 0x60, 0x9c, 0x60, 0x9c, 0x60, 0x9c, 0x4a, 0xa3, 0xd2,
		0x09, 0x7d, 0x13, 0x6c, 0x13, 0x6c, 0x13, 0x6c, 0x13, 0x6c, 0x13, 0x6c, 0x13, 0x6c, 0x13, 0x6c,
		0x13, 0x6c, 0xd3, 0x62, 0xb6, 0x99, 0xeb, 0xf5, 0xf1, 0x27, 0xbe, 0x1f, 0x28, 0xd6, 0x5f, 0x02,
		0x34, 0xb7, 0xc8, 0x47, 0xce, 0x3d, 0xef, 0xb2, 0x90, 0xa9, 0xfb, 0xbe, 0xc7, 0xda, 0x0d, 0x42,
		0xee, 0x3b, 0x03, 0x46, 0x58, 0x11, 0x7d, 0xdf, 0xd5, 0x66, 0x0e, 0x8f, 0x76, 0x97, 0x7d, 0xb9,
		0x1b, 0xf5, 0xee, 0xa6, 0x7e, 0x3e, 0xfd, 0xdd, 0xae, 0x08, 0x1f, 0x9a, 0xbb, 0x91, 0x62, 0x8a,
		0xef, 0xc6, 0x3e, 0x90, 0x82, 0xfd, 0x96, 0x23, 0x25, 0x7b, 0x8e, 0xf2, 0x63, 0xef, 0x7a, 0x3e,
		0xea, 0xee, 0xf6, 0x7a, 0xaa, 0xef, 0xdb, 0xf3, 0xf0, 0xa1, 0x79, 0xfb, 0x71, 0xd4, 0xeb, 0x4e,
		0x3e, 0x33, 0x9d, 0x61, 0x96, 0xcb, 0xee, 0xbd, 0x13, 0x56, 0x1c, 0x4f, 0x0c, 0xb9, 0x57, 0xb6,
		0x29, 0x1e, 0x53, 0x91, 0xe9, 0x46, 0x33, 0xae, 0xc0, 0x53, 0xde, 0x66, 0x3d, 0x6f, 0xc0, 0x0b,
		0xdb, 0xcc, 0x8b, 0x78, 0xd6, 0xf6, 0x68, 0x40, 0x9a, 0x2c, 0x8e, 0xa1, 0x8c, 0x5f, 0xc8, 0xe3,
		0x16, 0xea, 0x78, 0x45, 0x5b, 0x9c, 0xa2, 0x2d, 0x3e, 0xd1, 0x11, 0x97, 0xe4, 0x8b, 0xe8, 0x64,
		0xf1, 0xc7, 0x78, 0xb5, 0xdd, 0x05, 0x81, 0xc7, 0x99, 0x4f, 0xb1, 0xde, 0x62, 0xe3, 0xac, 0xd5,
		0x6c, 0x04, 0xd2, 0x5e, 0x58, 0x61, 0xae, 0x2b, 0x2b, 0x2e, 0x57, 0xdc, 0x51, 0x15, 0x25, 0x99,
		0x1f, 0x75, 0x05, 0x81, 0xc6, 0x33, 0x81, 0xd5, 0x95, 0x5d, 0xd0, 0x81, 0x6c, 0x0d, 0x00, 0x0b,
		0x80, 0x05, 0xc0, 0x16, 0x09, 0x60, 0x7b, 0xc2, 0x57, 0x7b, 0x75, 0x42, 0x7c, 0x3d, 0x20, 0x68,
		0x8a, 0x56, 0xc5, 0x21, 0x94, 0xc3, 0x74, 0xa8, 0x36, 0x9a, 0x42, 0x7b, 0x5d, 0x2a, 0x8d, 0xce,
		0xb8, 0x9d, 0x50, 0x95, 0xd1, 0xa2, 0xc6, 0xe8, 0x9e, 0xaa, 0x46, 0xfd, 0xa8, 0x71, 0xd4, 0x3c,
		0xa8, 0x1f, 0xed, 0x5b, 0x34, 0x67, 0x05, 0xd1, 0x32, 0x5a, 0x16, 0xd2, 0x3a, 0xee, 0xb3, 0x3b,
		0x8f, 0xbb, 0x74, 0x24, 0x6e, 0xd4, 0x20, 0x1d, 0x65, 0xeb, 0x7b, 0x63, 0xb0, 0x36, 0xb0, 0x36,
		0xb0, 0x36, 0x84, 0xc5, 0x85, 0xc3, 0xcf, 0xae, 0xea, 0xd1, 0x61, 0x67, 0xbf, 0x31, 0x00, 0x1d,
		0x80, 0x0e, 0x40, 0x87, 0xf0, 0x14, 0xe1, 0xa9, 0xb1, 0x98, 0xa7, 0x56, 0x3f, 0x44, 0x84, 0x4a,
		0x3e, 0x5b, 0x7b, 0x10, 0x13, 0xb6, 0x3e, 0x30, 0xdd, 0x31, 0xb8, 0xc0, 0xa9, 0x36, 0xf3, 0x75,
		0x6f, 0xe2, 0xa7, 0xf3, 0xb0, 0xc9, 0x87, 0x32, 0xc5, 0x30, 0x96, 0x7b, 0xbe, 0xdf, 0xeb, 0xde,
		0x71, 0x99, 0x41, 0x10, 0x98, 0xf8, 0xcd, 0x49, 0x5b, 0x29, 0x27, 0x74, 0x14, 0x17, 0xa4, 0x7c,
		0x3c, 0x2b, 0x87, 0xa5, 0xe0, 0xae, 0x33, 0x9c, 0xb5, 0x9d, 0x81, 0x44, 0x50, 0x71, 0x55, 0x72,
		0x8e, 0x4a, 0xce, 0x4d, 0x17, 0x38, 0x69, 0xbb, 0x6c, 0x09, 0x00, 0x9d, 0x0a, 0x99, 0x6d, 0xb1,
		0x38, 0xa3, 0x15, 0x4b, 0x14, 0x4f, 0xc6, 0xed, 0xd1, 0x84, 0x94, 0xb5, 0x4d, 0x0f, 0x29, 0xdb,
		0x08, 0x29, 0x75, 0x84, 0x94, 0x6d, 0xdb, 0x43, 0xca, 0xac, 0x66, 0x3d, 0x6e, 0x88, 0x4a, 0x6b,
		0x5f, 0x58, 0xbd, 0x34, 0x9a, 0xfb, 0xe4, 0x03, 0xd3, 0xe6, 0xa4, 0x69, 0x0a, 0xe3, 0xec, 0x3b,
		0x6b, 0xd3, 0xc6, 0x59, 0x9b, 0x3c, 0xce, 0xda, 0xb4, 0x71, 0xd6, 0x26, 0xe9, 0x6a, 0xa5, 0x13,
		0xf7, 0x17, 0x58, 0x44, 0x0d, 0x89, 0xe7, 0xa5, 0x52, 0xf9, 0xec, 0x71, 0x20, 0x35, 0x64, 0x97,
		0xef, 0xe8, 0x69, 0x46, 0xe0, 0x54, 0xf8, 0xa3, 0x3a, 0x56, 0xdc, 0xe3, 0x5d, 0xae, 0xe4, 0x53,
		0x25, 0xf0, 0x2b, 0xce, 0xfd, 0x40, 0x6f, 0xd4, 0x42, 0x3d, 0x06, 0x2e, 0x46, 0x03, 0xf7, 0xc8,
		0x9b, 0x76, 0xb4, 0xb6, 0xe6, 0x6c, 0xc2, 0x24, 0xd2, 0xdf, 0x8d, 0x23, 0x0e, 0x0b, 0x37, 0xf2,
		0xc6, 0x9f, 0xa9, 0x22, 0x79, 0x9b, 0x2e, 0x04, 0x9b, 0x6d, 0x16, 0x91, 0x18, 0x22, 0x31, 0x44,
		0x62, 0xf9, 0x47, 0x62, 0x44, 0x42, 0x8b, 0x1e, 0xc1, 0x85, 0xd8, 0xdc, 0x11, 0x2f, 0x21, 0x5e,
		0x42, 0xbc, 0x44, 0x09, 0x1f, 0x8b, 0x9c, 0x81, 0x7e, 0x59, 0x2d, 0xf0, 0x07, 0xea, 0x65, 0xa5,
		0x69, 0x4f, 0x9d, 0x1a, 0x64, 0x74, 0x82, 0x8d, 0x76, 0xd0, 0xd1, 0x0d, 0x3e, 0xc6, 0x40, 0xc8,
		0x18, 0x18, 0x99, 0x00, 0x25, 0x5a, 0x70, 0x22, 0x06, 0x29, 0x7d, 0xe2, 0xce, 0xc2, 0x6a, 0xf7,
		0x38, 0x6b, 0x67, 0x0f, 0x4a, 0x5e, 0x64, 0x2e, 0x07, 0x1a, 0xda, 0xbe, 0x1a, 0x47, 0xb0, 0xfd,
		0x65, 0x71, 0x3c, 0x15, 0x99, 0xce, 0xfd, 0x20, 0xfe, 0x7e, 0x70, 0xc2, 0xbd, 0xa0, 0x55, 0x18,
		0x28, 0x73, 0x79, 0xa6, 0xe3, 0x72, 0x7d, 0xfe, 0x68, 0xa6, 0x17, 0xb8, 0x24, 0xb8, 0x24, 0xb8,
		0x24, 0xb8, 0x24, 0xb8, 0xa4, 0x35, 0x5d, 0xd2, 0xf7, 0x89, 0x4b, 0xfa, 0x5f, 0xa7, 0x27, 0x25,
		0xf7, 0xd5, 0x9b, 0xb7, 0xbb, 0xef, 0xdf, 0x4f, 0xc4, 0xd6, 0x56, 0xfc, 0xc8, 0xac, 0xe6, 0xba,
		0xf8, 0xb3, 0x71, 0xcb, 0x2e, 0x7f, 0x2c, 0xac, 0x77, 0x2b, 0x54, 0xf4, 0x47, 0xb6, 0xe5, 0x32,
		0xfa, 0xa7, 0x4f, 0x48, 0xd0, 0xbe, 0x05, 0xb3, 0x02, 0x3c, 0x09, 0xb7, 0x62, 0x96, 0xa2, 0x66,
		0xd1, 0x84, 0x85, 0x16, 0x95, 0xd0, 0x4a, 0xbb, 0x55, 0x33, 0xa1, 0x74, 0x26, 0xb6, 0x6c, 0x66,
		0x76, 0x28, 0x48, 0x36, 0x70, 0xe8, 0x26, 0xe9, 0x99, 0xa4, 0xce, 0x15, 0x53, 0x9c, 0x5e, 0xea,
		0x1d, 0x36, 0x5b, 0x70, 0xa5, 0xb7, 0x0e, 0xa5, 0xd7, 0x1e, 0x46, 0x0b, 0xa5, 0x17, 0x4a, 0x2f,
		0xc2, 0x6a, 0x84, 0xd5, 0x08, 0xab, 0x11, 0x56, 0x23, 0xac, 0x86, 0xd2, 0xbb, 0x9a, 0xd1, 0x42,
		0xe9, 0x85, 0x4b, 0x82, 0x4b, 0x82, 0x4b, 0x82, 0x4b, 0x2a, 0xac, 0x4b, 0x82, 0xd2, 0x9b, 0x5f,
		0xf4, 0xb7, 0x41, 0x72, 0x5c, 0x86, 0x13, 0xe3, 0x1a, 0xd4, 0x38, 0xd4, 0xea, 0xcf, 0x34, 0x9b,
		0x66, 0xab, 0xf6, 0xff, 0x39, 0x7e, 0x8b, 0xdb, 0xf1, 0x9f, 0x7d, 0xe5, 0x6d, 0x1b, 0x73, 0xf3,
		0x69, 0x24, 0x5c, 0x52, 0xe9, 0x96, 0x3c, 0x17, 0xbf, 0x8e, 0x5c, 0xfc, 0xfc, 0x29, 0x27, 0x72,
		0xf1, 0xd7, 0xfe, 0x40, 0x38, 0x15, 0x8d, 0x53, 0xd1, 0x85, 0x8b, 0x79, 0xb1, 0xf7, 0x93, 0x47,
		0x4c, 0x8b, 0x53, 0xd1, 0x99, 0x59, 0x04, 0x4e, 0x45, 0x5b, 0x4b, 0xf1, 0x09, 0x42, 0x34, 0x54,
		0x58, 0xa3, 0x9f, 0x97, 0x72, 0xa6, 0x78, 0x23, 0x79, 0x90, 0x65, 0xac, 0xac, 0xdb, 0x8e, 0xc6,
		0x99, 0x2e, 0x9f, 0xf4, 0x3a, 0x7d, 0x27, 0x31, 0xa0, 0x63, 0xc9, 0x33, 0xe5, 0x32, 0x56, 0x8c,
		0x5b, 0x77, 0x9f, 0x67, 0x2d, 0xc5, 0x2c, 0x3c, 0xee, 0x2f, 0x88, 0xb4, 0xa5, 0xe7, 0x4e, 0x79,
		0xe4, 0x48, 0x11, 0xc6, 0x4b, 0xbd, 0x7c, 0xe2, 0xba, 0x51, 0x89, 0xb9, 0xae, 0xe4, 0x51, 0x54,
		0x62, 0x3d, 0x15, 0x0c, 0x97, 0x6b, 0x4f, 0x0e, 0x8c, 0xa1, 0xa4, 0x82, 0x92, 0xba, 0xe7, 0xa5,
		0x3b, 0x16, 0xf1, 0xd2, 0xf9, 0x55, 0xa9, 0x1b, 0xb8, 0xdc, 0x43, 0xd1, 0xbb, 0xb8, 0xa2, 0x70,
		0x85, 0x3f, 0x2a, 0x14, 0xbe, 0x4b, 0x43, 0xd1, 0x86, 0x43, 0xb7, 0x2d, 0xc5, 0xef, 0x46, 0x66,
		0x45, 0xa7, 0xf3, 0x8c, 0x5b, 0xcc, 0x7c, 0x17, 0xc5, 0x0c, 0x18, 0xdc, 0x04, 0x61, 0xc5, 0xe3,
		0x0f, 0xdc, 0x2b, 0x39, 0x81, 0xaf, 0x98, 0xf0, 0xb9, 0x2c, 0xb5, 0x03, 0x59, 0x3a, 0xbf, 0x7a,
		0x68, 0x96, 0xa8, 0xfa, 0xdc, 0x96, 0x52, 0x0f, 0x59, 0xe1, 0x01, 0x12, 0x93, 0x2e, 0xf8, 0x20,
		0x0a, 0x09, 0x4c, 0xc3, 0x97, 0x66, 0x42, 0xd5, 0x4a, 0x4a, 0xa8, 0xb2, 0x51, 0x66, 0x7d, 0x54,
		0x39, 0xc5, 0x72, 0x5e, 0x9f, 0x17, 0x27, 0x5b, 0x75, 0xeb, 0xcf, 0x40, 0x02, 0xe7, 0x94, 0x72,
		0xd3, 0x20, 0xd3, 0x26, 0x41, 0x4a, 0xd4, 0x4e, 0xbd, 0x09, 0x90, 0x05, 0x95, 0x33, 0x6b, 0x70,
		0x59, 0x11, 0x97, 0x0c, 0x61, 0xc9, 0x10, 0x95, 0x42, 0x23, 0xd3, 0x1b, 0x9e, 0xa5, 0x25, 0x59,
		0x65, 0xe6, 0x76, 0x85, 0x5f, 0xe9, 0xaf, 0xe9, 0x5e, 0x94, 0xbd, 0xb4, 0xf7, 0x4c, 0x6b, 0xd9,
		0xe2, 0x9c, 0x2a, 0x8a, 0x7b, 0xa3, 0xb8, 0xb7, 0x0d, 0xf1, 0x4d, 0x66, 0x59, 0x79, 0x6a, 0x5f,
		0xaa, 0xd7, 0xe5, 0x43, 0xe5, 0x20, 0xcb, 0x9a, 0x19, 0xf9, 0x9a, 0x46, 0x86, 0x36, 0xce, 0xfc,
		0x5e, 0xb7, 0xff, 0xa1, 0xcc, 0x0e, 0x65, 0xe6, 0x93, 0x98, 0x74, 0x56, 0xa2, 0xed, 0xa4, 0x25,
		0xfd, 0xc9, 0x4a, 0xa2, 0x93, 0x94, 0x19, 0x34, 0x7a, 0xf2, 0x61, 0x0f, 0xc2, 0xd8, 0x0e, 0x98,
		0x87, 0xe1, 0xc6, 0x70, 0x53, 0x0c, 0x77, 0xaa, 0x27, 0x5b, 0x46, 0x2e, 0x57, 0x71, 0x82, 0x5e,
		0x3f, 0x48, 0x22, 0xe0, 0x5f, 0xe3, 0x96, 0xa0, 0x31, 0x83, 0x7b, 0x6d, 0x01, 0xf7, 0xca, 0x7e,
		0xb1, 0x0a, 0x93, 0x52, 0x70, 0x59, 0x51, 0x92, 0xf9, 0x91, 0xe8, 0x43, 0x60, 0x44, 0x78, 0xcb,
		0xca, 0x92, 0xc6, 0x71, 0x8b, 0xa7, 0x76, 0xc3, 0xa5, 0x36, 0x60, 0x6d, 0x86, 0xac, 0xcd, 0xa0,
		0x75, 0x18, 0x76, 0x36, 0x03, 0x27, 0x60, 0x3d, 0x25, 0x3d, 0xb7, 0x78, 0xc6, 0x2e, 0xb3, 0xd9,
		0x20, 0xbc, 0xc8, 0xf3, 0x10, 0x17, 0x79, 0xe6, 0x82, 0x6b, 0x0b, 0xcd, 0xda, 0x78, 0x35, 0xa4,
		0x25, 0xb7, 0x78, 0x6a, 0xbb, 0x73, 0xf5, 0xb0, 0xd1, 0x68, 0x1e, 0x34, 0x1a, 0xd5, 0x83, 0xbd,
		0x83, 0xea, 0xd1, 0xfe, 0x7e, 0xad, 0x59, 0xdb, 0xc7, 0xc5, 0x9e, 0xfa, 0x03, 0x17, 0x4a, 0x94,
		0xc6, 0x25, 0x26, 0x9b, 0x7f, 0x89, 0x49, 0x4e, 0x77, 0x71, 0x54, 0xee, 0x64, 0xc0, 0x5c, 0x87,
		0x45, 0xaa, 0x12, 0xfe, 0x54, 0x11, 0xe5, 0x7d, 0x1c, 0xf3, 0x4d, 0x83, 0xaa, 0x83, 0xaa, 0x83,
		0xaa, 0x83, 0xaa, 0x83, 0xaa, 0x83, 0xaa, 0x83, 0xaa, 0x83, 0xaa, 0x17, 0x93, 0xaa, 0xe7, 0xc5,
		0xc3, 0x5c, 0x11, 0x39, 0x4c, 0xba, 0xb4, 0x0c, 0x6c, 0xdc, 0x28, 0xb8, 0x17, 0xb8, 0x17, 0xb8,
		0x17, 0xb8, 0x17, 0xb8, 0x17, 0xb8, 0x17, 0xb8, 0x17, 0xb8, 0x17, 0xb8, 0xd7, 0x34, 0xf7, 0xe2,
		0x52, 0x06, 0x92, 0x96, 0x79, 0xc5, 0x4d, 0x82, 0x77, 0x81, 0x77, 0x81, 0x77, 0x81, 0x77, 0x81,
		0x77, 0x81, 0x77, 0x81, 0x77, 0x81, 0x77, 0x81, 0x77, 0x4d, 0xf3, 0xae, 0xb6, 0x13, 0xe9, 0xe0,
		0x5e, 0x53, 0xcd, 0x82, 0x7f, 0x81, 0x7f, 0x81, 0x7f, 0x81, 0x7f, 0x81, 0x7f, 0x81, 0x7f, 0x81,
		0x7f, 0x81, 0x7f, 0x81, 0x7f, 0x4d, 0xf3, 0xaf, 0x6e, 0xcf, 0x53, 0x42, 0x4f, 0xee, 0xd7, 0x5c,
		0xd3, 0xe0, 0x61, 0xe0, 0x61, 0xe0, 0x61, 0xe0, 0x61, 0xe0, 0x61, 0xe0, 0x61, 0xe0, 0x61, 0xe0,
		0x61, 0xe0, 0x61, 0xd3, 0x3c, 0x2c, 0x70, 0x14, 0x27, 0xe6, 0x5f, 0x71, 0x93, 0xe0, 0x5d, 0xe0,
		0x5d, 0xe0, 0x5d, 0xe0, 0x5d, 0xe0, 0x5d, 0xe0, 0x5d, 0xe0, 0x5d, 0xe0, 0x5d, 0xe0, 0x5d, 0xd3,
		0xbc, 0x8b, 0x5c, 0xf5, 0x82, 0xd6, 0x05, 0xce, 0x05, 0xce, 0x05, 0xce, 0x05, 0xce, 0x05, 0xce,
		0x05, 0xce, 0x05, 0xce, 0x05, 0xce, 0xb5, 0xc0, 0xb9, 0x7a, 0xbe, 0xa6, 0x1d, 0xc7, 0x99, 0x86,
		0xc1, 0xc1, 0xc0, 0xc1, 0xc0, 0xc1, 0xc0, 0xc1, 0xc0, 0xc1, 0xc0, 0xc1, 0xc0, 0xc1, 0xc0, 0xc1,
		0xc0, 0xc1, 0x66, 0x39, 0xd8, 0x4f, 0x3f, 0xf8, 0xe5, 0x57, 0x42, 0x19, 0xa8, 0x80, 0x9a, 0x85,
		0xcd, 0x34, 0x0d, 0x1e, 0x06, 0x1e, 0x06, 0x1e, 0x06, 0x1e, 0x06, 0x1e, 0x06, 0x1e, 0x06, 0x1e,
		0x06, 0x1e, 0x06, 0x1e, 0x36, 0x9e, 0x16, 0x8f, 0x45, 0xaa, 0xe2, 0x78, 0x9c, 0x49, 0x3a, 0x02,
		0x36, 0xd5, 0x26, 0x98, 0x17, 0x98, 0x17, 0x98, 0x57, 0x81, 0x98, 0x97, 0x12, 0x5d, 0xae, 0x84,
		0xf3, 0x33, 0x2a, 0x1c, 0xf7, 0xfa, 0xd3, 0x1f, 0xfa, 0x85, 0xb2, 0xcf, 0xfc, 0x20, 0xe2, 0x4e,
		0xe0, 0x67, 0xae, 0x18, 0x08, 0x4e, 0x07, 0x4e, 0x07, 0x4e, 0x07, 0x4e, 0x97, 0x1f, 0xa7, 0xc3,
		0x95, 0x0b, 0x54, 0x34, 0x01, 0x57, 0x2e, 0x50, 0xd2, 0xfe, 0xa0, 0xa7, 0xb4, 0xdd, 0xb9, 0xb0,
		0xa4, 0x6d, 0x84, 0x01, 0x08, 0x03, 0x10, 0x06, 0x14, 0x28, 0x0c, 0x80, 0x00, 0x0b, 0xb2, 0x0e,
		0xb2, 0x0e, 0xb2, 0x0e, 0xb2, 0x4e, 0xd1, 0x7f, 0x56, 0x26, 0x46, 0x7f, 0xeb, 0xc2, 0x4c, 0xab,
		0x60, 0x5f, 0x60, 0x5f, 0x60, 0x5f, 0x60, 0x5f, 0x60, 0x5f, 0x60, 0x5f, 0x60, 0x5f, 0x60, 0x5f,
		0x60, 0x5f, 0x33, 0xec, 0x8b, 0xba, 0xf6, 0xef, 0x54, 0x9b, 0x60, 0x5e, 0x60, 0x5e, 0x60, 0x5e,
		0x60, 0x5e, 0x60, 0x5e, 0x60, 0x5e, 0x60, 0x5e, 0x60, 0x5e, 0x60, 0x5e, 0x33, 0xcc, 0x4b, 0x57,
		0xe5, 0xdf, 0x25, 0x6d, 0x83, 0x89, 0x81, 0x89, 0x81, 0x89, 0x81, 0x89, 0x81, 0x89, 0x81, 0x89,
		0x81, 0x89, 0x81, 0x89, 0x81, 0x89, 0xcd, 0x30, 0x31, 0xea, 0xda, 0xbf, 0x53, 0x6d, 0x82, 0x79,
		0x81, 0x79, 0x81, 0x79, 0x81, 0x79, 0x81, 0x79, 0x81, 0x79, 0x81, 0x79, 0x81, 0x79, 0x81, 0x79,
		0xcd, 0x30, 0x2f, 0x7a, 0xe5, 0x0b, 0x7a, 0x17, 0x58, 0x17, 0x58, 0x17, 0x58, 0x17, 0x58, 0x17,
		0x58, 0x17, 0x58, 0x17, 0x58, 0x17, 0x58, 0xd7, 0x22, 0xeb, 0xd2, 0x53, 0xff, 0x77, 0xa1, 0x65,
		0xb0, 0x30, 0xb0, 0x30, 0xb0, 0x30, 0xb0, 0x30, 0xb0, 0x30, 0xb0, 0x30, 0xb0, 0x30, 0xb0, 0xb0,
		0x4d, 0x63, 0x61, 0x3b, 0x06, 0xd7, 0x7c, 0xf6, 0x62, 0x28, 0x19, 0x59, 0xde, 0x62, 0xf1, 0x93,
		0x20, 0xe4, 0x92, 0xf5, 0xd7, 0x16, 0xf3, 0xb2, 0x52, 0x3d, 0xf2, 0x62, 0x27, 0x44, 0x45, 0x4e,
		0x32, 0x00, 0x14, 0x86, 0xdb, 0x94, 0x45, 0xb5, 0x52, 0x5a, 0xd4, 0x89, 0xef, 0x07, 0x6a, 0x30,
		0xa2, 0x99, 0x1c, 0x47, 0x39, 0x72, 0xee, 0x79, 0x97, 0x85, 0x4c, 0xdd, 0xf7, 0x3f, 0xfd, 0x6e,
		0x10, 0x72, 0xdf, 0x19, 0xc4, 0x1c, 0x15, 0xd1, 0x67, 0x5b, 0x6d, 0xe6, 0xf0, 0x68, 0x77, 0xd9,
		0x97, 0xbb, 0x51, 0xef, 0x6e, 0xea, 0xe7, 0xd3, 0xdf, 0xed, 0x46, 0x8a, 0x29, 0xbe, 0x1b, 0x13,
		0xb6, 0x2c, 0xa1, 0x54, 0x39, 0x52, 0xb2, 0xe7, 0x28, 0x3f, 0xa6, 0x80, 0xe7, 0xa3, 0x1e, 0x6e,
		0xaf, 0xa7, 0xba, 0xbb, 0xfd, 0x38, 0xea, 0x68, 0xc7, 0xcc, 0xbc, 0xa5, 0x30, 0xac, 0xb2, 0xcb,
		0x23, 0x47, 0x8a, 0x30, 0xd3, 0x84, 0x8d, 0xa9, 0xf0, 0x74, 0x63, 0x29, 0xd7, 0x4f, 0x36, 0x72,
		0x90, 0x39, 0x2e, 0xa5, 0x88, 0x47, 0xc9, 0xe2, 0x50, 0xaa, 0xf8, 0x93, 0x3c, 0xee, 0x24, 0x8f,
		0x37, 0x29, 0xe3, 0x4c, 0xb3, 0x0c, 0x22, 0x73, 0x3c, 0x39, 0x5e, 0x2d, 0x91, 0x92, 0xc2, 0xef,
		0x64, 0x59, 0x2e, 0xb1, 0xed, 0xd4, 0x0e, 0x0b, 0x8c, 0x37, 0xdc, 0x67, 0x77, 0x1e, 0x77, 0xb3,
		0x63, 0xcd, 0xa8, 0xa1, 0x94, 0xf3, 0x76, 0xca, 0xdb, 0xac, 0xe7, 0x0d, 0xd6, 0x5b, 0x7f, 0xf9,
		0x02, 0xae, 0x00, 0x57, 0x80, 0xab, 0x24, 0xab, 0xe5, 0x2e, 0x08, 0x3c, 0xce, 0x7c, 0x0a, 0xbc,
		0xaa, 0x15, 0x18, 0xaf, 0x44, 0x5b, 0xf8, 0x2e, 0x7f, 0xcc, 0x8e, 0x57, 0xa3, 0x86, 0x00, 0x34,
		0x00, 0x1a, 0x00, 0x4d, 0x82, 0xd5, 0xd2, 0x13, 0xbe, 0xda, 0xab, 0x13, 0xe0, 0xcc, 0x41, 0x86,
		0x26, 0x68, 0xc4, 0x74, 0x82, 0x5d, 0x07, 0x4a, 0xf1, 0x9c, 0x58, 0x89, 0xa5, 0x16, 0xcb, 0x75,
		0xc8, 0xac, 0x04, 0xe2, 0x38, 0xa9, 0x28, 0xae, 0x6b, 0x0a, 0x1a, 0xf5, 0xa3, 0xc6, 0x51, 0xf3,
		0xa0, 0x7e, 0xb4, 0x5f, 0xe0, 0xb9, 0xc8, 0x49, 0x62, 0x6e, 0x6d, 0xb9, 0xc4, 0x4c, 0x5f, 0x5f,
		0x1b, 0x52, 0xf3, 0x1a, 0xc3, 0x0e, 0x65, 0x1f, 0xc3, 0x4d, 0x3c, 0xdc, 0x3b, 0x66, 0xe0, 0x2f,
		0x55, 0xdc, 0x44, 0x14, 0x35, 0x65, 0x89, 0x99, 0xa6, 0x34, 0x9e, 0x2a, 0xe2, 0x2e, 0xc4, 0x5d,
		0x88, 0xbb, 0x10, 0x77, 0x21, 0xee, 0x42, 0xdc, 0x85, 0xb8, 0xcb, 0xa6, 0xb8, 0xcb, 0x08, 0x5d,
		0x19, 0xde, 0x2f, 0x79, 0x1f, 0xa3, 0x4d, 0x46, 0xd2, 0x32, 0xdd, 0x18, 0x68, 0x07, 0x68, 0x07,
		0x68, 0x47, 0x82, 0xd5, 0x42, 0x73, 0x9b, 0x24, 0x41, 0x22, 0x35, 0xf5, 0xed, 0x91, 0xe0, 0x32,
		0xe0, 0x32, 0x56, 0x71, 0x19, 0x7d, 0x89, 0xd4, 0x60, 0x35, 0x50, 0x93, 0x6d, 0xd4, 0xdb, 0x20,
		0x6f, 0x62, 0xb8, 0xa1, 0x26, 0x67, 0x84, 0xbf, 0x54, 0xe1, 0x59, 0xd0, 0x11, 0x0e, 0xf3, 0x08,
		0x42, 0xb3, 0xb8, 0x21, 0x84, 0x65, 0x08, 0xcb, 0x10, 0x96, 0x25, 0x58, 0x2d, 0xf9, 0xa7, 0xfb,
		0x81, 0x31, 0xc1, 0x85, 0xc3, 0x85, 0x63, 0xb8, 0xc1, 0x98, 0xd6, 0xf9, 0x84, 0xf1, 0xd1, 0xb4,
		0x8c, 0x74, 0x69, 0xd0, 0x0a, 0xb8, 0x12, 0xb8, 0x12, 0xb8, 0x52, 0x82, 0xd5, 0x92, 0xfb, 0x49,
		0x2e, 0x50, 0x25, 0xf8, 0x6e, 0xf8, 0x6e, 0x6b, 0x7d, 0x77, 0x7f, 0xf8, 0x2b, 0x91, 0x62, 0xaa,
		0x17, 0x65, 0x77, 0xe1, 0xd3, 0x8d, 0xc1, 0x93, 0xc3, 0x93, 0xc3, 0x93, 0x27, 0x58, 0x2d, 0xdc,
		0xef, 0x75, 0x63, 0x28, 0xa4, 0x70, 0xe7, 0x8d, 0x0c, 0x6d, 0x9c, 0xf9, 0xbd, 0x6e, 0xff, 0x43,
		0x3d, 0x83, 0x12, 0x80, 0x12, 0x80, 0x12, 0x60, 0xb8, 0xc1, 0xc0, 0x74, 0xf4, 0x93, 0x70, 0x11,
		0x64, 0xad, 0x77, 0xa4, 0xb1, 0xce, 0x51, 0xb2, 0x99, 0x59, 0x7f, 0x94, 0x12, 0x8c, 0x50, 0xf9,
		0xc1, 0x63, 0xc9, 0xc7, 0x65, 0xec, 0x7d, 0x07, 0x4f, 0x27, 0x9c, 0x8f, 0x91, 0xab, 0x4d, 0xf8,
		0x58, 0x5a, 0x8e, 0x9a, 0x85, 0x9b, 0x4e, 0x73, 0xd2, 0x14, 0x1f, 0x95, 0x82, 0x8d, 0x92, 0xb1,
		0x50, 0x32, 0xf6, 0x39, 0xcf, 0x3a, 0x07, 0x03, 0x53, 0x30, 0x9b, 0x3f, 0x15, 0x32, 0xdd, 0x84,
		0x3b, 0xa3, 0x55, 0x96, 0x31, 0xa6, 0x8b, 0xdb, 0xc9, 0x16, 0xce, 0xd5, 0x36, 0x24, 0x9c, 0x4b,
		0x69, 0x3a, 0x08, 0xe8, 0xd2, 0x99, 0x56, 0x3e, 0x21, 0x5d, 0x5a, 0x93, 0x9b, 0xf1, 0x44, 0x15,
		0xe1, 0xd2, 0x15, 0x66, 0x1f, 0x35, 0x88, 0x7a, 0xec, 0x06, 0x8c, 0x94, 0xda, 0x58, 0xb5, 0x19,
		0xad, 0x36, 0xe3, 0xd5, 0x63, 0xc4, 0xd9, 0x8c, 0x99, 0x20, 0x70, 0x2a, 0xe9, 0xa9, 0xc9, 0xde,
		0xf3, 0xb3, 0x29, 0x36, 0x0b, 0xbe, 0xf2, 0x88, 0xa0, 0xad, 0xf8, 0x63, 0x16, 0xae, 0x1e, 0x3b,
		0x2d, 0xa2, 0x2d, 0x1b, 0xbe, 0x26, 0x61, 0x93, 0xb4, 0x65, 0xed, 0xe9, 0x87, 0x73, 0xfc, 0xa2,
		0x3a, 0xca, 0xdc, 0x13, 0xbb, 0x8d, 0x95, 0xcd, 0x8f, 0x8f, 0x00, 0x68, 0x6a, 0x5f, 0x63, 0x01,
		0x75, 0x22, 0x50, 0x5a, 0x3e, 0xa5, 0x1a, 0xca, 0xe1, 0x9b, 0x9e, 0xd2, 0x46, 0xf5, 0xa8, 0x61,
		0xf1, 0xac, 0xee, 0x14, 0xb3, 0xb5, 0xd6, 0x4e, 0x81, 0xd6, 0xac, 0x06, 0xdf, 0xf0, 0x5f, 0xe1,
		0xff, 0x57, 0x8f, 0x6f, 0xa8, 0x1d, 0x12, 0xb6, 0x79, 0xc5, 0x94, 0xe2, 0xd2, 0x27, 0x77, 0x0f,
		0xe5, 0xff, 0xbc, 0x69, 0x54, 0x8f, 0xbe, 0x57, 0x2b, 0x8d, 0xd6, 0xef, 0x46, 0xf5, 0x7b, 0xb5,
		0x72, 0xd8, 0xfa, 0x5e, 0xad, 0x1c, 0xb5, 0x7e, 0x7f, 0xaf, 0x55, 0xf6, 0x86, 0x5f, 0xfe, 0xbd,
		0xf7, 0xdc, 0xff, 0xee, 0x28, 0xfe, 0xae, 0xf6, 0xae, 0x1e, 0x7f, 0xff, 0xf6, 0xc7, 0x8f, 0xf7,
		0x6f, 0x32, 0x3c, 0xfe, 0xfb, 0xc7, 0x8f, 0xff, 0x79, 0xfb, 0x8f, 0x72, 0xd1, 0x96, 0x2a, 0x6e,
		0x98, 0x58, 0x8f, 0xae, 0x17, 0xb9, 0x1e, 0x7e, 0x9f, 0xf1, 0xed, 0xc6, 0x62, 0x52, 0x91, 0x6b,
		0x46, 0x77, 0x24, 0x8f, 0xa2, 0x4a, 0x97, 0x85, 0xa1, 0xf0, 0x09, 0xe4, 0xb3, 0xb9, 0xf6, 0x20,
		0xa3, 0x41, 0x46, 0x83, 0x8c, 0xb6, 0x5e, 0x03, 0x19, 0x15, 0xec, 0x85, 0x85, 0x97, 0x49, 0xc9,
		0x26, 0x32, 0x45, 0x88, 0x68, 0x10, 0xd1, 0xec, 0x17, 0xd1, 0xb2, 0x9a, 0xf6, 0xb8, 0x21, 0x15,
		0x12, 0xc8, 0xe4, 0x0b, 0xcb, 0x77, 0xd0, 0xea, 0xbb, 0x42, 0xd6, 0x3b, 0xa0, 0x32, 0x7b, 0x1d,
		0xe6, 0xaf, 0x11, 0x06, 0x74, 0xc1, 0x81, 0x76, 0x58, 0xd0, 0x0e, 0x0f, 0x7a, 0x61, 0x82, 0x56,
		0x7c, 0x20, 0x92, 0x0c, 0xe8, 0x34, 0xf8, 0x85, 0x15, 0x2b, 0x5c, 0xee, 0x2b, 0xa1, 0x9e, 0x24,
		0x6f, 0xeb, 0x90, 0x0f, 0x08, 0xef, 0x76, 0x2c, 0x9f, 0xc7, 0xaf, 0xfa, 0x81, 0x45, 0x1a, 0xec,
		0x61, 0x34, 0x20, 0x37, 0x57, 0xe7, 0xa7, 0xb7, 0x37, 0xff, 0xbe, 0x3a, 0xbb, 0x2e, 0xeb, 0xb8,
		0x02, 0x33, 0x22, 0x57, 0x3f, 0x4a, 0x5a, 0x04, 0xf2, 0xc5, 0x31, 0xa9, 0xfe, 0xeb, 0xa8, 0x56,
		0xad, 0x96, 0x6d, 0x90, 0x82, 0xcd, 0x0c, 0xc7, 0x21, 0x86, 0x63, 0x66, 0x75, 0xd4, 0x31, 0x1c,
		0xe3, 0xe1, 0x38, 0xf9, 0xfc, 0x6f, 0x8c, 0xc5, 0xc4, 0x52, 0x0e, 0x4f, 0x0e, 0xcb, 0x05, 0xdf,
		0x6d, 0x68, 0x6d, 0xdc, 0x25, 0xc1, 0x14, 0x95, 0xd0, 0xa8, 0x12, 0x73, 0x16, 0x56, 0x06, 0xed,
		0x76, 0x36, 0x82, 0x0e, 0x04, 0x1d, 0x08, 0x3a, 0xac, 0x09, 0x3a, 0x90, 0xcb, 0x42, 0xba, 0x26,
		0x91, 0xcb, 0xb2, 0xba, 0x7d, 0xe4, 0xb2, 0xe4, 0x36, 0xa5, 0xc8, 0x65, 0xd1, 0xd1, 0x5a, 0x6b,
		0xd3, 0xd8, 0x65, 0xa4, 0x98, 0xf3, 0xb3, 0x32, 0x9c, 0x4f, 0x4d, 0x3c, 0x73, 0xa6, 0x0b, 0x30,
		0x4e, 0x30, 0x4e, 0x30, 0xce, 0x6d, 0x64, 0x9c, 0x1a, 0x60, 0xa0, 0x44, 0x54, 0x40, 0x60, 0xa1,
		0xcd, 0x6c, 0x05, 0x05, 0x34, 0xc0, 0x7d, 0xae, 0xdb, 0xa7, 0x44, 0x79, 0x5a, 0xe3, 0xf6, 0xf4,
		0xe5, 0x6b, 0xcd, 0x66, 0x2f, 0x65, 0x4a, 0xdf, 0xca, 0x3e, 0xf4, 0x19, 0x86, 0xbd, 0x3c, 0x3c,
		0xa5, 0x4c, 0x96, 0x4a, 0x32, 0x6c, 0xae, 0x60, 0x99, 0x24, 0x75, 0x64, 0x92, 0x14, 0xc1, 0x97,
		0x22, 0x93, 0x24, 0xc1, 0x47, 0x42, 0x26, 0x09, 0x28, 0x36, 0x28, 0x36, 0x28, 0x76, 0xe1, 0x28,
		0x36, 0x32, 0x49, 0xe6, 0x06, 0x04, 0x99, 0x24, 0x2b, 0xc6, 0x04, 0x99, 0x24, 0xc8, 0x24, 0x79,
		0x71, 0x75, 0x20, 0x93, 0x04, 0x99, 0x24, 0x2b, 0x2c, 0x05, 0x99, 0x24, 0x79, 0x88, 0x3f, 0xc8,
		0x24, 0x41, 0xd0, 0x81, 0xa0, 0x03, 0x41, 0x47, 0xe1, 0x82, 0x0e, 0x64, 0x92, 0x90, 0xae, 0x49,
		0x64, 0x92, 0xac, 0x6e, 0x1f, 0x99, 0x24, 0xb9, 0x4d, 0x29, 0x32, 0x49, 0x74, 0xb4, 0x86, 0x4c,
		0x92, 0xe4, 0xae, 0x06, 0x99, 0x24, 0x60, 0x9c, 0x60, 0x9c, 0x5b, 0xcf, 0x38, 0x91, 0x49, 0x92,
		0x57, 0x0b, 0x5b, 0x9b, 0x49, 0x92, 0xa2, 0x6a, 0x3c, 0xdd, 0xc8, 0xa3, 0x2a, 0xd3, 0x4b, 0x73,
		0x53, 0xce, 0x94, 0x66, 0x23, 0x7b, 0x8e, 0x8a, 0xef, 0x83, 0x2c, 0x9f, 0x8f, 0xba, 0xb9, 0xbd,
		0x9e, 0xea, 0xf3, 0xf6, 0x9b, 0xc7, 0xfc, 0xdb, 0xb3, 0x41, 0x9f, 0x97, 0x71, 0x97, 0x05, 0x2e,
		0x08, 0x25, 0x7c, 0xe2, 0x8a, 0x50, 0xf3, 0x0d, 0xa2, 0x24, 0x14, 0x4a, 0x42, 0xe5, 0xc6, 0x7b,
		0x50, 0x12, 0x0a, 0x25, 0xa1, 0x0c, 0x87, 0x36, 0x48, 0xe4, 0x43, 0x22, 0xdf, 0x0b, 0x0d, 0x21,
		0x91, 0x0f, 0x0a, 0x07, 0x14, 0x0e, 0x28, 0x1c, 0x54, 0x2b, 0x16, 0x89, 0x7c, 0x73, 0x03, 0x82,
		0x44, 0xbe, 0x15, 0x63, 0x82, 0x44, 0x3e, 0x24, 0xf2, 0xbd, 0xb8, 0x3a, 0x90, 0xc8, 0x87, 0x44,
		0xbe, 0x15, 0x96, 0x82, 0x44, 0xbe, 0x1c, 0x5a, 0x41, 0x22, 0x1f, 0x82, 0x0e, 0x04, 0x1d, 0x08,
		0x3a, 0x8a, 0x17, 0x74, 0x20, 0x91, 0x8f, 0x74, 0x4d, 0x22, 0x91, 0x6f, 0x75, 0xfb, 0x48, 0xe4,
		0xcb, 0x6d, 0x4a, 0x91, 0xc8, 0xa7, 0xa3, 0x35, 0x24, 0xf2, 0x25, 0x77, 0x35, 0x48, 0xe4, 0x03,
		0xe3, 0x04, 0xe3, 0xdc, 0x7a, 0xc6, 0x89, 0x44, 0xbe, 0xbc, 0x5a, 0xd8, 0x9e, 0x44, 0xbe, 0xb9,
		0xf4, 0x25, 0xd4, 0x84, 0x42, 0x4d, 0xa8, 0xdc, 0x9c, 0x2b, 0x52, 0x49, 0x90, 0x4a, 0xf2, 0x42,
		0x43, 0x48, 0x25, 0x01, 0xc7, 0x06, 0xc7, 0x06, 0xc7, 0xa6, 0x5a, 0xb1, 0x48, 0x25, 0x99, 0x1b,
		0x10, 0xa4, 0x92, 0xac, 0x18, 0x13, 0xa4, 0x92, 0x20, 0x95, 0xe4, 0xc5, 0xd5, 0x81, 0x54, 0x12,
		0xa4, 0x92, 0xac, 0xb0, 0x14, 0xa4, 0x92, 0xe4, 0xa1, 0xfe, 0x20, 0x95, 0x04, 0x41, 0x07, 0x82,
		0x0e, 0x04, 0x1d, 0x85, 0x0b, 0x3a, 0x90, 0x4a, 0x42, 0xba, 0x26, 0x91, 0x4a, 0xb2, 0xba, 0x7d,
		0xa4, 0x92, 0xe4, 0x36, 0xa5, 0x48, 0x25, 0xd1, 0xd1, 0x1a, 0x52, 0x49, 0x92, 0xbb, 0x1a, 0xa4,
		0x92, 0x80, 0x71, 0x82, 0x71, 0x6e, 0x3d, 0xe3, 0x44, 0x2a, 0x49, 0x5e, 0x2d, 0x6c, 0x6f, 0x2a,
		0x09, 0x8a, 0x42, 0x15, 0x77, 0x72, 0xcc, 0x54, 0x85, 0x3a, 0xf7, 0x6d, 0x29, 0x0b, 0xd5, 0x65,
		0xca, 0xb9, 0xcf, 0x5e, 0x0c, 0x6a, 0xd8, 0x0c, 0x4a, 0x40, 0xa1, 0x04, 0x54, 0x6e, 0x34, 0xc7,
		0xb2, 0x12, 0x50, 0x6e, 0xd0, 0xbb, 0xf3, 0x78, 0x45, 0xb1, 0x4e, 0x87, 0xbb, 0x74, 0xd9, 0x7b,
		0xb3, 0xcd, 0xa2, 0x20, 0x94, 0xc1, 0xb8, 0x06, 0x59, 0x7c, 0xc8, 0xe2, 0x7b, 0xa1, 0x21, 0xa2,
		0x9a, 0x6f, 0x0b, 0x0b, 0x98, 0xa4, 0xf6, 0x1b, 0xb1, 0xc9, 0x43, 0xe2, 0x80, 0xc4, 0x01, 0x89,
		0x83, 0x1a, 0x42, 0xc6, 0x0d, 0x0a, 0xdf, 0xe7, 0xb2, 0x42, 0xbd, 0x4f, 0xbf, 0x60, 0x0f, 0xb3,
		0xdd, 0x10, 0xcf, 0xbf, 0x9e, 0x0d, 0x09, 0x72, 0xc0, 0xd1, 0x09, 0x3c, 0x06, 0x00, 0x48, 0x37,
		0x10, 0x19, 0x03, 0x24, 0x63, 0xc0, 0x64, 0x06, 0xa0, 0x68, 0x81, 0x8a, 0x18, 0xb0, 0xc6, 0x43,
		0x40, 0xae, 0xcd, 0x2e, 0xac, 0x78, 0x3d, 0xe0, 0x52, 0xd2, 0x93, 0x1d, 0x30, 0x6e, 0x5a, 0x4f,
		0x96, 0xc0, 0xe8, 0x9f, 0x1e, 0x0b, 0x2d, 0xe9, 0xce, 0x1a, 0xd0, 0x8c, 0xec, 0x0b, 0xdd, 0x68,
		0xce, 0x22, 0x18, 0xf7, 0x63, 0x60, 0xdf, 0x59, 0x93, 0xfd, 0xce, 0x4e, 0xbd, 0xc6, 0xec, 0x82,
		0xbc, 0xa6, 0x5e, 0x5f, 0xb6, 0x41, 0x2e, 0xb3, 0xbf, 0x63, 0x47, 0xab, 0xad, 0x82, 0x66, 0x49,
		0x10, 0x5a, 0x4f, 0x39, 0xe8, 0x29, 0x13, 0x0c, 0x7b, 0xb6, 0x1b, 0x30, 0x6c, 0x30, 0x6c, 0x30,
		0x6c, 0x30, 0x6c, 0x30, 0x6c, 0x30, 0x6c, 0x30, 0x6c, 0x30, 0x6c, 0x30, 0x6c, 0x30, 0xec, 0x62,
		0x31, 0xec, 0x42, 0xc9, 0xea, 0xc4, 0x09, 0x62, 0xe3, 0x76, 0xf5, 0xe5, 0x22, 0x0d, 0xb2, 0x64,
		0x76, 0x67, 0xb6, 0xe8, 0x49, 0xea, 0x0e, 0xd1, 0xcd, 0x0f, 0x45, 0x86, 0x37, 0x4d, 0x3d, 0xa2,
		0x05, 0x22, 0x43, 0x51, 0x97, 0x68, 0x1e, 0x46, 0xc9, 0xb7, 0x39, 0xeb, 0xd8, 0xe6, 0xb4, 0x29,
		0xe6, 0xc1, 0x36, 0x27, 0xb6, 0x39, 0xb1, 0xcd, 0x09, 0x11, 0x06, 0x22, 0x0c, 0x44, 0x18, 0x88,
		0x30, 0x10, 0x61, 0x20, 0xc2, 0x40, 0x84, 0x81, 0x08, 0x03, 0x11, 0xa6, 0x84, 0x6d, 0x4e, 0x52,
		0xc2, 0x87, 0x6d, 0x4e, 0x30, 0x6c, 0x30, 0x6c, 0x30, 0x6c, 0x30, 0x6c, 0x30, 0x6c, 0x30, 0x6c,
		0x30, 0x6c, 0x30, 0x6c, 0x30, 0x6c, 0x6c, 0x73, 0xae, 0x49, 0x1f, 0x36, 0x62, 0x9b, 0x93, 0xa0,
		0x26, 0x06, 0xdd, 0xf4, 0xa0, 0xb0, 0x49, 0xea, 0x89, 0x2c, 0x93, 0x6c, 0x10, 0xaf, 0x5b, 0x47,
		0xe3, 0xb2, 0xff, 0x02, 0xb7, 0xa7, 0x83, 0x17, 0xb8, 0x19, 0xf6, 0x6f, 0xe1, 0x05, 0x3d, 0x33,
		0x03, 0x58, 0x19, 0x6e, 0x37, 0x79, 0x22, 0x52, 0x9a, 0x4e, 0xfd, 0x4f, 0xf7, 0x80, 0x02, 0x00,
		0x06, 0x63, 0x65, 0x14, 0x00, 0x40, 0x01, 0x80, 0x17, 0x1a, 0x42, 0x01, 0x80, 0x82, 0xca, 0x67,
		0xc8, 0x8c, 0xc9, 0x41, 0x1e, 0x43, 0x66, 0x4c, 0x86, 0x06, 0x67, 0x52, 0x56, 0x22, 0x43, 0xa9,
		0x31, 0x11, 0x94, 0x7b, 0x28, 0xf7, 0x39, 0x42, 0x92, 0x31, 0x68, 0x32, 0x03, 0x51, 0x7a, 0x74,
		0x15, 0x28, 0xf7, 0x8b, 0x00, 0x03, 0xe5, 0x7e, 0xea, 0xc5, 0xa1, 0xdc, 0x27, 0xef, 0x07, 0xca,
		0x7d, 0x61, 0xa7, 0x1e, 0xca, 0x7d, 0x1e, 0xad, 0xb6, 0x0a, 0xed, 0xb3, 0x2e, 0x44, 0xa4, 0x4e,
		0x94, 0x92, 0x7a, 0xfc, 0xd6, 0xa5, 0xf0, 0xcf, 0x3c, 0xde, 0xa7, 0x05, 0xfd, 0xb5, 0xe0, 0xf7,
		0x3c, 0x4f, 0xcf, 0x5d, 0x20, 0xfa, 0x3b, 0xf9, 0x22, 0x5d, 0x2e, 0xb9, 0xfb, 0xe1, 0x29, 0xee,
		0x02, 0x09, 0x4f, 0x64, 0x2c, 0x1e, 0x09, 0x4f, 0x08, 0x9b, 0x10, 0x36, 0x21, 0x6c, 0x42, 0xd8,
		0x84, 0xb0, 0x09, 0x61, 0x13, 0xc2, 0x26, 0x84, 0x4d, 0x08, 0x9b, 0x90, 0xf0, 0xb4, 0x26, 0x7d,
		0xd8, 0x84, 0x84, 0xa7, 0xa9, 0x24, 0x0c, 0x94, 0x78, 0x58, 0x97, 0xd3, 0xa0, 0xc4, 0x43, 0x61,
		0xc3, 0x21, 0x6c, 0x64, 0xe7, 0x13, 0xee, 0x60, 0x23, 0x9b, 0xc4, 0x20, 0xb0, 0x91, 0x0d, 0x45,
		0x06, 0x8a, 0x0c, 0x14, 0x19, 0x28, 0x32, 0x50, 0x64, 0xa0, 0xc8, 0x40, 0x91, 0x81, 0x22, 0x03,
		0x45, 0xa6, 0x84, 0x8d, 0x6c, 0x6c, 0x64, 0x1b, 0x95, 0xd9, 0xb0, 0x91, 0x8d, 0xb0, 0x09, 0x61,
		0x13, 0xc2, 0x26, 0x84, 0x4d, 0x08, 0x9b, 0x10, 0x36, 0x21, 0x6c, 0x42, 0xd8, 0x84, 0xb0, 0x09,
		0x61, 0x13, 0x36, 0xb2, 0x13, 0xb6, 0x9b, 0xdb, 0x46, 0x36, 0x8a, 0x78, 0xe8, 0x9a, 0xdb, 0xdc,
		0xe6, 0x34, 0xef, 0x7a, 0x1e, 0xe7, 0xfd, 0x37, 0xb9, 0xe8, 0xbf, 0xc8, 0x86, 0x14, 0xf6, 0x18,
		0x46, 0xcc, 0x32, 0xa6, 0x87, 0x1a, 0xeb, 0x7b, 0x4c, 0x77, 0x84, 0x32, 0x1f, 0x06, 0x03, 0x6b,
		0x94, 0xf9, 0x40, 0x99, 0x8f, 0x17, 0x1a, 0x42, 0x99, 0x8f, 0x82, 0x6a, 0x6d, 0xc8, 0x8e, 0xca,
		0x41, 0x4b, 0x43, 0x76, 0x54, 0x86, 0x06, 0x87, 0x8e, 0xfe, 0x5e, 0x74, 0xee, 0x4d, 0xdd, 0x82,
		0x33, 0xd3, 0x17, 0xe4, 0x7e, 0xc8, 0xfd, 0xf9, 0x41, 0x93, 0x31, 0x88, 0x32, 0x03, 0x55, 0x7a,
		0xc4, 0x18, 0xc8, 0xfd, 0x8b, 0x00, 0x03, 0xb9, 0x7f, 0xea, 0xc5, 0x21, 0xf7, 0x27, 0xef, 0x07,
		0x72, 0x7f, 0x61, 0xa7, 0x1e, 0x72, 0x7f, 0x1e, 0xad, 0x6e, 0xc3, 0x55, 0x38, 0xb1, 0x24, 0x1a,
		0xfc, 0x32, 0x45, 0xb5, 0xa7, 0xbb, 0x02, 0xd3, 0x06, 0xd3, 0x06, 0xd3, 0x06, 0xd3, 0x06, 0xd3,
		0x06, 0xd3, 0x06, 0xd3, 0x06, 0xd3, 0x06, 0xd3, 0x06, 0xd3, 0xde, 0x58, 0xa6, 0x3d, 0xdc, 0xb8,
		0x36, 0xa3, 0x6a, 0x2f, 0xe9, 0x0b, 0x5c, 0x1b, 0x5c, 0x1b, 0x5c, 0x1b, 0x5c, 0x1b, 0x5c, 0x1b,
		0x5c, 0x1b, 0x5c, 0x1b, 0x5c, 0x1b, 0x5c, 0x1b, 0x5c, 0x7b, 0xc3, 0xb9, 0xb6, 0x11, 0x55, 0x7b,
		0xb1, 0x2b, 0x30, 0x6d, 0x30, 0x6d, 0x30, 0x6d, 0x30, 0x6d, 0x30, 0x6d, 0x30, 0x6d, 0x30, 0x6d,
		0x30, 0x6d, 0x30, 0x6d, 0x30, 0xed, 0x62, 0x31, 0x6d, 0x1c, 0x17, 0xd5, 0x74, 0xb4, 0x70, 0xea,
		0x70, 0x1a, 0xca, 0x1f, 0xaf, 0x4b, 0x6d, 0x50, 0xfe, 0xb8, 0xb0, 0x51, 0x11, 0x0e, 0xf8, 0xe4,
		0x13, 0xf5, 0xe0, 0x80, 0x0f, 0x99, 0x51, 0xe0, 0x80, 0x0f, 0x04, 0x1a, 0x08, 0x34, 0x10, 0x68,
		0x20, 0xd0, 0x40, 0xa0, 0x81, 0x40, 0x03, 0x81, 0x06, 0x02, 0x0d, 0x04, 0x9a, 0xc2, 0x0b, 0x34,
		0x38, 0xe0, 0x03, 0xa6, 0x0d, 0xa6, 0x0d, 0xa6, 0x0d, 0xa6, 0x0d, 0xa6, 0x0d, 0xa6, 0x0d, 0xa6,
		0x0d, 0xa6, 0x0d, 0xa6, 0x0d, 0xa6, 0x5d, 0x70, 0xa6, 0x8d, 0x03, 0x3e, 0xe0, 0xda, 0xe0, 0xda,
		0xe0, 0xda, 0xe0, 0xda, 0xe0, 0xda, 0xe0, 0xda, 0xe0, 0xda, 0xe0, 0xda, 0xe0, 0xda, 0xe0, 0xda,
		0x3a, 0xb9, 0x36, 0x0e, 0xf8, 0x80, 0x69, 0x83, 0x69, 0x83, 0x69, 0x83, 0x69, 0x83, 0x69, 0x83,
		0x69, 0x83, 0x69, 0x83, 0x69, 0x83, 0x69, 0x83, 0x69, 0xe3, 0x80, 0x8f, 0x99, 0x03, 0x3e, 0xb8,
		0x16, 0x4e, 0xd7, 0x14, 0xe7, 0x3d, 0xb5, 0x85, 0xb8, 0x1d, 0xee, 0x4b, 0xff, 0x7d, 0x86, 0xfc,
		0x6a, 0x43, 0xee, 0x88, 0x33, 0x70, 0x3b, 0x1c, 0xee, 0x85, 0x33, 0x1e, 0x60, 0xe3, 0x5e, 0x38,
		0xdc, 0x0b, 0xf7, 0x42, 0x43, 0xb8, 0x17, 0xae, 0xa0, 0x9a, 0x1b, 0x8e, 0x8d, 0xe6, 0xa0, 0xa9,
		0xe1, 0xd8, 0x68, 0x86, 0x06, 0x71, 0x6c, 0x34, 0x07, 0xe8, 0xd1, 0x09, 0x41, 0x06, 0xa0, 0x48,
		0x37, 0x24, 0x19, 0x83, 0x26, 0x63, 0x10, 0x65, 0x06, 0xaa, 0xf4, 0x88, 0x32, 0x90, 0xfd, 0x17,
		0x01, 0x06, 0xb2, 0xff, 0xd4, 0x8b, 0x43, 0xf6, 0x4f, 0xde, 0x0f, 0x64, 0xff, 0xc2, 0x4e, 0x3d,
		0x64, 0xff, 0x3c, 0x5a, 0xc5, 0xb1, 0x51, 0x0d, 0x54, 0x1b, 0x09, 0x36, 0x60, 0xda, 0x60, 0xda,
		0x60, 0xda, 0x60, 0xda, 0x60, 0xda, 0x60, 0xda, 0x60, 0xda, 0x60, 0xda, 0x60, 0xda, 0x5b, 0x94,
		0xca, 0x6e, 0x28, 0x8d, 0x1d, 0x0c, 0x1b, 0x0c, 0x1b, 0x0c, 0x1b, 0x0c, 0x1b, 0x0c, 0x1b, 0x0c,
		0x1b, 0x0c, 0x1b, 0x0c, 0x1b, 0x0c, 0x1b, 0x0c, 0xbb, 0xc0, 0x3e, 0xeb, 0x42, 0x44, 0xea, 0x44,
		0x29, 0xa9, 0xc7, 0x6f, 0x5d, 0x0a, 0xff, 0xcc, 0xe3, 0x7d, 0x5a, 0xd0, 0x5f, 0x0b, 0x7e, 0xcf,
		0xf3, 0x34, 0xb8, 0x97, 0x4b, 0xf6, 0xa8, 0xbf, 0x93, 0x2f, 0xd2, 0xe5, 0x92, 0xbb, 0x1f, 0x9e,
		0xe2, 0x2e, 0x70, 0x2e, 0x61, 0x1d, 0x4e, 0xb8, 0x41, 0xe7, 0x12, 0x70, 0xe5, 0x48, 0x22, 0xa6,
		0x8a, 0x2b, 0x47, 0x0a, 0x1b, 0xe4, 0x22, 0x77, 0x34, 0x9f, 0x20, 0x16, 0xb9, 0xa3, 0x64, 0x46,
		0x81, 0xdc, 0x51, 0xe8, 0x6d, 0xd0, 0xdb, 0xa0, 0xb7, 0x41, 0x6f, 0x83, 0xde, 0x06, 0xbd, 0x0d,
		0x7a, 0x1b, 0xf4, 0x36, 0xe8, 0x6d, 0x9a, 0xf4, 0x36, 0xe4, 0x8e, 0x22, 0x77, 0x14, 0x4c, 0x1b,
		0x4c, 0x1b, 0x4c, 0x1b, 0x4c, 0x1b, 0x4c, 0x1b, 0x4c, 0x1b, 0x4c, 0x1b, 0x4c, 0x1b, 0x4c, 0x7b,
		0x6b, 0x98, 0x36, 0x72, 0x47, 0xc1, 0xb0, 0xc1, 0xb0, 0xc1, 0xb0, 0xc1, 0xb0, 0xc1, 0xb0, 0xc1,
		0xb0, 0xc1, 0xb0, 0xc1, 0xb0, 0xc1, 0xb0, 0xad, 0x65, 0xd8, 0xc8, 0x1d, 0x5d, 0x62, 0xaa, 0xc8,
		0x1d, 0x25, 0x6d, 0x09, 0xb9, 0xa3, 0xab, 0x72, 0x47, 0x51, 0xcd, 0x5a, 0xd7, 0xe4, 0xe6, 0x37,
		0xa9, 0x85, 0xa8, 0x63, 0xbd, 0x21, 0x25, 0xac, 0xe3, 0x6b, 0xa0, 0x44, 0xa4, 0x74, 0x55, 0xb0,
		0x9e, 0xea, 0x01, 0x05, 0xac, 0x0d, 0x4a, 0x24, 0x28, 0x60, 0x8d, 0x02, 0xd6, 0x2f, 0x34, 0x84,
		0x02, 0xd6, 0x14, 0x0d, 0xe2, 0x10, 0x42, 0x09, 0x87, 0x10, 0x2c, 0x23, 0xf9, 0x9a, 0x0e, 0x21,
		0x18, 0x4a, 0x8a, 0xc2, 0x76, 0x4d, 0x09, 0xdb, 0x35, 0xb9, 0x03, 0x92, 0x31, 0x60, 0x32, 0x03,
		0x50, 0x7a, 0xc4, 0x34, 0x6c, 0xd7, 0x2c, 0x02, 0x0c, 0xb6, 0x6b, 0x66, 0xd5, 0x46, 0x6c, 0xd7,
		0x24, 0xec, 0x07, 0xdb, 0x35, 0x85, 0x9d, 0x7a, 0x6c, 0xd7, 0xe4, 0xd1, 0xea, 0xd6, 0x25, 0x44,
		0x45, 0x86, 0x32, 0xa2, 0x22, 0x70, 0x6c, 0x70, 0x6c, 0x70, 0x6c, 0x70, 0x6c, 0x70, 0x6c, 0x70,
		0x6c, 0x70, 0x6c, 0x70, 0x6c, 0x70, 0x6c, 0x70, 0xec, 0x22, 0xfa, 0x2c, 0xa4, 0x44, 0xad, 0xd7,
		0x09, 0x52, 0xa2, 0xd2, 0x70, 0xc2, 0x8d, 0x48, 0x89, 0x9a, 0x24, 0x61, 0xa0, 0x9a, 0xde, 0xba,
		0x44, 0x15, 0xd5, 0xf4, 0x0a, 0x1b, 0xe3, 0x62, 0x23, 0x3b, 0x9f, 0x18, 0x16, 0x1b, 0xd9, 0x14,
		0xf6, 0x80, 0x8d, 0x6c, 0x88, 0x6c, 0x10, 0xd9, 0x20, 0xb2, 0x41, 0x64, 0x83, 0xc8, 0x06, 0x91,
		0x0d, 0x22, 0x1b, 0x44, 0x36, 0x88, 0x6c, 0xd8, 0xc8, 0xa6, 0x65, 0x7c, 0xd8, 0xc8, 0x06, 0xc7,
		0x06, 0xc7, 0x06, 0xc7, 0x06, 0xc7, 0x06, 0xc7, 0x06, 0xc7, 0x06, 0xc7, 0x06, 0xc7, 0x06, 0xc7,
		0xc6, 0x46, 0x36, 0x36, 0xb2, 0x8d, 0x06, 0x4e, 0xd8, 0xc8, 0xd6, 0xb9, 0x91, 0x8d, 0xd2, 0x1e,
		0xba, 0xe6, 0x36, 0xb7, 0x39, 0xcd, 0xbb, 0xb2, 0xc7, 0x97, 0xfe, 0x9b, 0xf4, 0x51, 0x78, 0x53,
		0x0a, 0x7b, 0xc8, 0x98, 0xed, 0x6b, 0xac, 0xec, 0x41, 0x51, 0x92, 0x05, 0xa5, 0x3d, 0x72, 0x55,
		0x44, 0x50, 0xda, 0xa3, 0x08, 0x20, 0x8e, 0xd2, 0x1e, 0x45, 0x30, 0x7d, 0x1d, 0x10, 0xa0, 0x11,
		0x0a, 0x74, 0x41, 0x82, 0x76, 0x68, 0xd0, 0x0e, 0x11, 0x7a, 0xa1, 0xa2, 0x98, 0x1c, 0x1f, 0x19,
		0x51, 0xc6, 0x84, 0x1d, 0xec, 0xd6, 0x98, 0x05, 0x22, 0x63, 0x80, 0x64, 0x0c, 0x98, 0xcc, 0x00,
		0x94, 0x1e, 0x2d, 0x0d, 0xbb, 0x35, 0x8b, 0x00, 0x83, 0xdd, 0x9a, 0x59, 0xb1, 0x11, 0xbb, 0x35,
		0x09, 0xfb, 0xc1, 0x6e, 0x4d, 0x61, 0xa7, 0x1e, 0xbb, 0x35, 0x79, 0xb4, 0xba, 0x3d, 0x19, 0x51,
		0x66, 0x6e, 0xf0, 0x5f, 0xd2, 0x17, 0xb8, 0x36, 0xb8, 0x36, 0xb8, 0x36, 0xb8, 0x36, 0xb8, 0x36,
		0xb8, 0x36, 0xb8, 0x36, 0xb8, 0x36, 0xb8, 0x36, 0xb8, 0xf6, 0x86, 0x73, 0x6d, 0x23, 0x37, 0xf8,
		0x2f, 0x76, 0x05, 0xa6, 0x0d, 0xa6, 0x0d, 0xa6, 0x0d, 0xa6, 0x0d, 0xa6, 0x0d, 0xa6, 0x0d, 0xa6,
		0x0d, 0xa6, 0x0d, 0xa6, 0x0d, 0xa6, 0x5d, 0x2c, 0xa6, 0x8d, 0x74, 0x75, 0x4d, 0xa9, 0xcd, 0xc3,
		0xab, 0x28, 0x51, 0x78, 0x6d, 0x4d, 0x52, 0x83, 0xc2, 0x6b, 0x85, 0x8d, 0x87, 0x90, 0x66, 0x98,
		0x4f, 0xbc, 0x83, 0x34, 0x43, 0x0a, 0x7b, 0x40, 0x9a, 0x21, 0x04, 0x19, 0x08, 0x32, 0x10, 0x64,
		0x20, 0xc8, 0x40, 0x90, 0x81, 0x20, 0x03, 0x41, 0x06, 0x82, 0x0c, 0x04, 0x19, 0xa4, 0x19, 0xd2,
		0xb3, 0x3e, 0xa4, 0x19, 0x82, 0x6b, 0x83, 0x6b, 0x83, 0x6b, 0x83, 0x6b, 0x83, 0x6b, 0x83, 0x6b,
		0x83, 0x6b, 0x83, 0x6b, 0x83, 0x6b, 0x6f, 0x1d, 0xd7, 0x46, 0x9a, 0x21, 0x98, 0x36, 0x98, 0x36,
		0x98, 0x36, 0x98, 0x36, 0x98, 0x36, 0x98, 0x36, 0x98, 0x36, 0x98, 0x36, 0x98, 0x36, 0x98, 0x36,
		0xd2, 0x0c, 0x75, 0xa7, 0x19, 0xa2, 0x2c, 0xae, 0xae, 0xc9, 0xcd, 0x6f, 0x52, 0x0b, 0x51, 0x17,
		0x77, 0x48, 0xa7, 0x2c, 0x2c, 0x8c, 0x1b, 0x09, 0xbf, 0x33, 0x1e, 0x56, 0xba, 0x62, 0xb8, 0xb3,
		0xcd, 0xa2, 0x00, 0xae, 0xc1, 0xb8, 0x19, 0x05, 0x70, 0x51, 0x00, 0xf7, 0x85, 0x86, 0x50, 0x00,
		0xb7, 0xa0, 0x52, 0x1a, 0x32, 0xd3, 0x73, 0x90, 0xca, 0x90, 0x99, 0x9e, 0xa1, 0x41, 0xed, 0x0a,
		0x3e, 0x74, 0xfb, 0x12, 0x74, 0xfb, 0xdc, 0x41, 0xc8, 0x18, 0x18, 0x99, 0x01, 0x25, 0x3d, 0xaa,
		0x0a, 0x74, 0xfb, 0x45, 0x80, 0x81, 0x6e, 0x3f, 0xf5, 0xe2, 0xd0, 0xed, 0x93, 0xf7, 0x03, 0xdd,
		0xbe, 0xb0, 0x53, 0x0f, 0xdd, 0x3e, 0x8f, 0x56, 0xa1, 0xdb, 0xaf, 0x45, 0x1f, 0x2c, 0xd5, 0xed,
		0x67, 0x44, 0x43, 0x94, 0x04, 0x58, 0x97, 0xc8, 0xa0, 0x24, 0x00, 0x84, 0x17, 0x08, 0x2f, 0x10,
		0x5e, 0x20, 0xbc, 0x40, 0x78, 0x81, 0xf0, 0x02, 0xe1, 0x05, 0xc2, 0x0b, 0x84, 0x17, 0x08, 0x2f,
		0x10, 0x5e, 0x20, 0xbc, 0x40, 0x78, 0x81, 0xf0, 0x02, 0xe1, 0x25, 0xa9, 0xf0, 0x82, 0x24, 0x49,
		0x5d, 0x13, 0x6a, 0x76, 0x22, 0xf3, 0x48, 0x8c, 0xbc, 0x1e, 0xbc, 0xc0, 0x30, 0x31, 0xd2, 0xfa,
		0x74, 0xc8, 0x8a, 0x27, 0x22, 0xa5, 0x29, 0x27, 0x72, 0xd8, 0x36, 0x12, 0x23, 0x0d, 0xc6, 0xc7,
		0x48, 0x8c, 0x44, 0x62, 0xe4, 0x0b, 0x0d, 0x21, 0x31, 0xb2, 0xa0, 0x92, 0x19, 0xf4, 0xf9, 0x1c,
		0x24, 0x31, 0xe8, 0xf3, 0x19, 0x1a, 0x8c, 0x15, 0xae, 0x48, 0xbb, 0x40, 0x1f, 0x41, 0xa1, 0x87,
		0x42, 0x9f, 0x23, 0x0c, 0x19, 0x83, 0x23, 0x33, 0xb0, 0xa4, 0x47, 0x3f, 0x81, 0x42, 0xbf, 0x08,
		0x30, 0x50, 0xe8, 0xa7, 0x5e, 0x1c, 0x0a, 0x7d, 0xf2, 0x7e, 0xa0, 0xd0, 0x17, 0x76, 0xea, 0xa1,
		0xd0, 0xe7, 0xd1, 0x6a, 0xab, 0xd0, 0x3e, 0xeb, 0x42, 0x44, 0xea, 0x44, 0x29, 0xa9, 0xc7, 0x6f,
		0x5d, 0x0a, 0xff, 0xcc, 0xe3, 0x7d, 0x5a, 0xd0, 0x5f, 0x0b, 0x7e, 0xcf, 0xf3, 0x34, 0xb8, 0x97,
		0x4b, 0xf6, 0xa8, 0xbf, 0x93, 0x2f, 0xd2, 0xe5, 0x92, 0xbb, 0x1f, 0x9e, 0xe2, 0x2e, 0xb0, 0xed,
		0xb2, 0x0e, 0x27, 0xdc, 0x84, 0x6d, 0x97, 0x81, 0x20, 0x8c, 0xa4, 0xd7, 0x75, 0x29, 0x2a, 0x92,
		0x5e, 0x21, 0xaa, 0x41, 0x54, 0x83, 0xa8, 0x06, 0x51, 0x0d, 0xa2, 0x1a, 0x44, 0x35, 0x88, 0x6a,
		0x10, 0xd5, 0x20, 0xaa, 0x41, 0x54, 0x83, 0xa8, 0x06, 0x51, 0x0d, 0xa2, 0x1a, 0x44, 0x35, 0x88,
		0x6a, 0x10, 0xd5, 0x20, 0xaa, 0x8d, 0x44, 0x35, 0x24, 0x34, 0xeb, 0x9a, 0xd5, 0x1c, 0x66, 0x33,
		0xef, 0xac, 0xe6, 0x3e, 0xe8, 0xda, 0x9f, 0xd9, 0x2c, 0x63, 0x5a, 0xaf, 0x25, 0xb5, 0x99, 0xa2,
		0x2c, 0x2f, 0x72, 0x9b, 0x73, 0x15, 0x3d, 0x90, 0xdb, 0x5c, 0x04, 0xb4, 0x46, 0x6e, 0x73, 0x11,
		0x4c, 0x5f, 0x07, 0x04, 0x68, 0x84, 0x02, 0x5d, 0x90, 0xa0, 0x1d, 0x1a, 0xb4, 0x43, 0x84, 0x5e,
		0xa8, 0x28, 0x26, 0x8d, 0x27, 0xdf, 0x86, 0x31, 0x73, 0x4d, 0x32, 0x2e, 0x48, 0xd6, 0x0a, 0x3b,
		0x06, 0xe0, 0x47, 0x37, 0x0c, 0x19, 0x83, 0x23, 0x63, 0xb0, 0x64, 0x06, 0x9e, 0xf4, 0x88, 0x65,
		0xd8, 0x8e, 0x59, 0x04, 0x18, 0x6c, 0xc7, 0xcc, 0xaa, 0x89, 0xd8, 0x8e, 0x49, 0xd8, 0x0f, 0xb6,
		0x63, 0x0a, 0x3b, 0xf5, 0xd8, 0x8e, 0xc9, 0xa3, 0xd5, 0x6d, 0xb8, 0x20, 0xd9, 0xc8, 0xd5, 0xc8,
		0xb8, 0x14, 0x19, 0xec, 0x1a, 0xec, 0x1a, 0xec, 0x1a, 0xec, 0x1a, 0xec, 0x1a, 0xec, 0x1a, 0xec,
		0x1a, 0xec, 0x1a, 0xec, 0x1a, 0x35, 0xfe, 0xd6, 0xa3, 0x0f, 0x1b, 0x91, 0x17, 0x33, 0xbc, 0x0e,
		0x19, 0xa7, 0xcd, 0xd6, 0xa4, 0x33, 0x38, 0x6d, 0x56, 0xd8, 0x48, 0x08, 0xdb, 0x9c, 0xf9, 0x44,
		0x3a, 0xd8, 0xe6, 0x24, 0x30, 0x07, 0x6c, 0x73, 0x42, 0x88, 0x81, 0x10, 0x03, 0x21, 0x06, 0x42,
		0x0c, 0x84, 0x18, 0x08, 0x31, 0x10, 0x62, 0x20, 0xc4, 0x40, 0x88, 0xc1, 0x36, 0x27, 0x99, 0xf3,
		0xc3, 0x36, 0x27, 0xd8, 0x35, 0xd8, 0x35, 0xd8, 0x35, 0xd8, 0x35, 0xd8, 0x35, 0xd8, 0x35, 0xd8,
		0x35, 0xd8, 0x35, 0xd8, 0x35, 0xb6, 0x39, 0xd7, 0xa3, 0x0f, 0x1b, 0xb4, 0xcd, 0x89, 0xf3, 0xff,
		0xba, 0xa6, 0x35, 0x8f, 0xe9, 0xcc, 0xbb, 0x00, 0xc0, 0x90, 0x3d, 0xe5, 0x55, 0x01, 0x60, 0xc7,
		0xe0, 0xaa, 0xa1, 0x5a, 0x2d, 0xba, 0x57, 0x49, 0x39, 0x4b, 0x59, 0x84, 0x64, 0x2b, 0x21, 0xdd,
		0xbc, 0x27, 0x9f, 0xb5, 0x14, 0x33, 0x96, 0x31, 0xf7, 0x81, 0x24, 0xd7, 0x21, 0x63, 0x6e, 0x43,
		0xe6, 0x5c, 0x06, 0x0a, 0x99, 0x83, 0x50, 0xce, 0xa0, 0x92, 0x2d, 0xc8, 0xe5, 0x09, 0x72, 0x19,
		0x82, 0x56, 0x6e, 0x30, 0x8b, 0x72, 0x59, 0x73, 0x07, 0xca, 0x54, 0x3a, 0x26, 0xb1, 0xac, 0x40,
		0x14, 0xce, 0xa0, 0x84, 0x4a, 0xc1, 0x34, 0x45, 0x94, 0x50, 0xc9, 0x43, 0x03, 0x1c, 0xaf, 0xb8,
		0x9e, 0xdf, 0xe7, 0x43, 0x04, 0xeb, 0x6d, 0xe4, 0x2b, 0x8f, 0x08, 0xda, 0x8a, 0x3f, 0x26, 0x8d,
		0xa2, 0xa7, 0x21, 0xef, 0x8f, 0x5e, 0x28, 0xd5, 0x20, 0x90, 0x6a, 0x12, 0x46, 0xf5, 0xd4, 0x66,
		0xd4, 0xb8, 0x17, 0xa2, 0x55, 0x05, 0xd3, 0x2d, 0x7c, 0x9a, 0x90, 0xbc, 0x9e, 0xf5, 0x54, 0xc2,
		0xb4, 0x7e, 0x4a, 0xf5, 0x09, 0x9a, 0x46, 0x66, 0xb5, 0xa0, 0xc2, 0x60, 0xab, 0x48, 0xc2, 0xa0,
		0x06, 0xdf, 0xf0, 0x5f, 0xe1, 0xff, 0x57, 0x8f, 0x6f, 0xa8, 0x1d, 0x12, 0xb6, 0x79, 0xc5, 0x94,
		0xe2, 0xd2, 0x27, 0x77, 0x0f, 0xe5, 0xff, 0xbc, 0x69, 0x54, 0x8f, 0xbe, 0x57, 0x2b, 0x8d, 0xd6,
		0xef, 0x46, 0xf5, 0x7b, 0xb5, 0x72, 0xd8, 0xfa, 0x5e, 0xad, 0x1c, 0xb5, 0x7e, 0x7f, 0xaf, 0x55,
		0xf6, 0x86, 0x5f, 0xfe, 0xbd, 0xf7, 0xdc, 0xff, 0xee, 0x28, 0xfe, 0xae, 0xf6, 0xae, 0x1e, 0x7f,
		0xff, 0xf6, 0xc7, 0x8f, 0xf7, 0x6f, 0x32, 0x3c, 0xfe, 0xfb, 0xc7, 0x8f, 0xff, 0x79, 0xfb, 0x8f,
		0x72, 0xd1, 0x96, 0xea, 0x4e, 0xbe, 0xef, 0x01, 0x79, 0x8e, 0x4a, 0x9e, 0xcb, 0xa0, 0xbc, 0xa7,
		0xd0, 0xcc, 0x76, 0x34, 0x0e, 0x7a, 0xd6, 0xc1, 0xd6, 0x37, 0xc8, 0xe5, 0x54, 0x52, 0xe1, 0x9a,
		0xaa, 0x67, 0xb2, 0xb9, 0x5b, 0x7f, 0x06, 0xd6, 0xfb, 0xcb, 0x35, 0xe7, 0xa8, 0x1f, 0x69, 0xf7,
		0x3f, 0x87, 0xf0, 0x5d, 0xbe, 0x6e, 0x90, 0x9d, 0xae, 0x78, 0x7a, 0xa6, 0xa2, 0xe8, 0x99, 0x8a,
		0x9d, 0xa7, 0x2b, 0x62, 0xbe, 0xee, 0x00, 0x9e, 0xf4, 0x3a, 0xfd, 0xd7, 0xe2, 0x6e, 0x22, 0xef,
		0x96, 0xcc, 0x0a, 0xc6, 0xfe, 0x7e, 0x37, 0x70, 0x2a, 0xa2, 0x7d, 0x3c, 0xb5, 0xa6, 0xe7, 0x7e,
		0x10, 0x7f, 0x3f, 0xbb, 0xee, 0x17, 0x7f, 0x96, 0x70, 0xe1, 0x97, 0x4f, 0x79, 0xe4, 0x48, 0x11,
		0xc6, 0x26, 0x5c, 0x3e, 0xbf, 0x7a, 0x68, 0x94, 0x98, 0xeb, 0x4a, 0x1e, 0x45, 0xa5, 0x36, 0xeb,
		0x0a, 0xef, 0xa9, 0x34, 0xb4, 0xc8, 0x9e, 0x1c, 0xd8, 0x79, 0xa9, 0x1d, 0xc8, 0x1f, 0xfe, 0xe4,
		0x15, 0x92, 0xf6, 0x97, 0x4e, 0x0b, 0x4f, 0x2d, 0xb7, 0x65, 0x91, 0xd7, 0xa6, 0xe5, 0x34, 0x11,
		0xa6, 0x41, 0x94, 0x8c, 0xe2, 0x19, 0x99, 0x58, 0x46, 0x26, 0x8e, 0xcd, 0x8b, 0x61, 0x22, 0x2c,
		0x17, 0xcc, 0x23, 0xa5, 0xd5, 0xad, 0xcb, 0x22, 0x7c, 0x68, 0x64, 0xdf, 0x27, 0x1a, 0xb4, 0x92,
		0x56, 0x72, 0x9f, 0x35, 0xc5, 0x2b, 0x26, 0x59, 0x97, 0x2b, 0x2e, 0xa3, 0xbe, 0xcd, 0x95, 0xd4,
		0x3d, 0x2f, 0x2d, 0xb1, 0xce, 0xf7, 0x79, 0x6f, 0x4a, 0x55, 0x8b, 0xb1, 0x29, 0x95, 0xca, 0x40,
		0xa9, 0x0c, 0x95, 0xdc, 0x60, 0xc9, 0x0d, 0x97, 0xd2, 0x80, 0x33, 0xf2, 0x7a, 0xdd, 0x80, 0xb1,
		0xa3, 0x01, 0x5a, 0xac, 0x77, 0xea, 0x4d, 0x38, 0x75, 0x38, 0xf5, 0xad, 0x74, 0xea, 0x4d, 0x12,
		0xa7, 0xde, 0xd4, 0xea, 0xd4, 0x9b, 0x70, 0xea, 0x70, 0xea, 0x70, 0xea, 0x70, 0xea, 0x09, 0x90,
		0xe4, 0xc4, 0x75, 0xa3, 0xd2, 0xb7, 0x8b, 0x93, 0xcf, 0xa5, 0x88, 0x2b, 0x25, 0xfc, 0x4e, 0x54,
		0x52, 0x41, 0x49, 0xf8, 0xae, 0x78, 0x10, 0x6e, 0x8f, 0x79, 0xa5, 0x99, 0xfe, 0xb7, 0xc4, 0xa3,
		0xa7, 0x95, 0xfe, 0x36, 0xde, 0xa7, 0xa7, 0xcb, 0x5a, 0x29, 0xa8, 0x57, 0x1f, 0x7c, 0x98, 0xcc,
		0x5e, 0x3d, 0x43, 0x86, 0xd4, 0xbc, 0x2d, 0x9e, 0xf9, 0x8e, 0x17, 0x44, 0xc2, 0xef, 0xf4, 0x69,
		0xb5, 0x62, 0xc2, 0xe7, 0x72, 0xe0, 0xde, 0x07, 0xe6, 0x39, 0x36, 0xc2, 0x4a, 0x14, 0x72, 0x47,
		0xb4, 0x85, 0xf3, 0xc3, 0x77, 0x99, 0x62, 0xa5, 0xc0, 0xcf, 0x64, 0xa3, 0x9b, 0xea, 0xf4, 0x91,
		0x5e, 0x6a, 0xd4, 0xc6, 0x37, 0xc6, 0xf1, 0xaf, 0xf5, 0x97, 0xad, 0x75, 0xb5, 0xff, 0x74, 0x1b,
		0x5b, 0x5a, 0x36, 0xb4, 0x12, 0xac, 0xbb, 0xb5, 0xf6, 0xb0, 0xd6, 0x5b, 0x23, 0xaf, 0x8f, 0xe7,
		0xcb, 0x7f, 0xf1, 0x8a, 0x37, 0x48, 0x3a, 0xc2, 0x54, 0x23, 0xfb, 0xf2, 0x87, 0x5f, 0xfd, 0x91,
		0x96, 0xff, 0x66, 0xc5, 0x87, 0x1c, 0xed, 0xbd, 0x0d, 0xe6, 0x61, 0xc5, 0x9f, 0xac, 0xb5, 0xd5,
		0x96, 0x68, 0x6b, 0x2d, 0xd1, 0x56, 0xda, 0x7a, 0x5b, 0x67, 0xab, 0x3e, 0xdf, 0x7a, 0x5b, 0x63,
		0x2f, 0xcf, 0xea, 0xfa, 0x84, 0xfa, 0x15, 0x03, 0x58, 0xca, 0x8c, 0x99, 0xeb, 0xf6, 0xbf, 0x67,
		0x5e, 0xe9, 0x4c, 0xdd, 0x73, 0xe9, 0x73, 0x35, 0x76, 0xbf, 0x73, 0xda, 0x97, 0x0a, 0xa6, 0xa5,
		0xaf, 0x52, 0x37, 0x70, 0xb9, 0xf7, 0x5a, 0x8f, 0xeb, 0xb9, 0xdc, 0xb5, 0x5d, 0x6b, 0x12, 0x17,
		0x3a, 0xed, 0x2a, 0xb9, 0x5a, 0xe7, 0x98, 0x4f, 0x52, 0x8f, 0x98, 0xda, 0xf3, 0xa5, 0xf6, 0x70,
		0xf3, 0x9e, 0xac, 0xff, 0xb9, 0x34, 0xc3, 0xcf, 0xba, 0xe4, 0xb3, 0xcc, 0xe3, 0xe5, 0xb3, 0xfe,
		0xf0, 0x8d, 0x26, 0x68, 0xfc, 0xe4, 0x9a, 0x83, 0x30, 0xb7, 0x8c, 0x6f, 0x82, 0xb0, 0xe2, 0xf1,
		0x07, 0xee, 0xcd, 0x91, 0xca, 0x51, 0xb3, 0xb3, 0xcb, 0xf8, 0x87, 0xcf, 0x7c, 0xb7, 0x94, 0xe4,
		0x98, 0x52, 0x42, 0xde, 0x98, 0x98, 0x27, 0xa6, 0xe1, 0x85, 0xc9, 0x17, 0x77, 0x56, 0xda, 0x97,
		0x99, 0xe6, 0x65, 0xa6, 0x75, 0xa9, 0x16, 0x7f, 0x32, 0xd6, 0x93, 0xd9, 0x97, 0xef, 0xa4, 0x30,
		0xb3, 0x3c, 0xd1, 0x7f, 0x16, 0xe1, 0xc7, 0x96, 0x31, 0xb0, 0x1f, 0x19, 0xf4, 0x14, 0x77, 0xe7,
		0x62, 0xb3, 0xc8, 0x12, 0xc4, 0x5f, 0x33, 0x38, 0xb2, 0x0f, 0xf2, 0xd7, 0x0b, 0x5e, 0x0c, 0x61,
		0xfe, 0x70, 0x89, 0x54, 0x12, 0xe9, 0x0c, 0xe3, 0x59, 0x9a, 0x7e, 0x98, 0x16, 0xf9, 0xe3, 0x95,
		0xdb, 0x6f, 0x79, 0x6a, 0xe5, 0xbe, 0x2f, 0x95, 0x6e, 0xee, 0x79, 0xc4, 0x7f, 0xf8, 0x5e, 0xd0,
		0x11, 0x0e, 0xf3, 0xa6, 0x7e, 0x57, 0x62, 0x92, 0x97, 0x98, 0x17, 0x05, 0xa5, 0x9f, 0x7e, 0xf0,
		0xcb, 0x2f, 0xb1, 0xa8, 0x74, 0xfd, 0xed, 0xbc, 0xf4, 0x26, 0xfa, 0x25, 0x94, 0x73, 0xdf, 0x6f,
		0x4b, 0x48, 0xd5, 0x63, 0xde, 0x14, 0x03, 0x7a, 0xfb, 0xae, 0x74, 0xfe, 0xf5, 0x43, 0xe9, 0x4d,
		0xff, 0x07, 0x1d, 0xc9, 0xfa, 0x1d, 0xf6, 0xfb, 0x15, 0x7e, 0x67, 0x60, 0x47, 0x77, 0x52, 0xb8,
		0x1d, 0xe1, 0x77, 0xde, 0xbe, 0x2b, 0x7d, 0xfd, 0x76, 0xfe, 0xc3, 0x7f, 0xb3, 0xd4, 0x9c, 0xde,
		0x6e, 0x88, 0x0f, 0x4a, 0xa8, 0x45, 0x6c, 0x8e, 0x13, 0x4a, 0xa6, 0x25, 0xc0, 0x0b, 0x2d, 0xf5,
		0x42, 0x17, 0x27, 0x7f, 0x2c, 0xc4, 0x1a, 0x83, 0x2d, 0xbf, 0x71, 0xab, 0xfd, 0x68, 0xa3, 0xe7,
		0x71, 0x4b, 0x9c, 0x8f, 0xc7, 0x3a, 0x1b, 0xe9, 0x7b, 0xfa, 0x9f, 0xab, 0x28, 0xae, 0x87, 0x75,
		0x3a, 0x92, 0x77, 0x92, 0x29, 0x4f, 0xe3, 0x39, 0x9a, 0x7e, 0x38, 0x9d, 0xeb, 0xf9, 0x32, 0xf8,
		0x6a, 0xb8, 0x39, 0xbd, 0xc4, 0x9d, 0x48, 0x1e, 0x4a, 0x1e, 0x71, 0xbf, 0xef, 0x0e, 0x7e, 0xf8,
		0xa3, 0xee, 0xd6, 0x96, 0xae, 0x8b, 0x0e, 0xf7, 0xeb, 0x2d, 0xf0, 0xcd, 0x43, 0xfb, 0xb5, 0x0c,
		0xa0, 0x30, 0x60, 0xbf, 0x93, 0x40, 0xd8, 0x5d, 0x57, 0x66, 0x4c, 0x2f, 0x2f, 0xbe, 0x30, 0x77,
		0xab, 0xd4, 0xd8, 0xe5, 0x63, 0xbd, 0xf8, 0xb9, 0x66, 0x7f, 0x32, 0x07, 0x31, 0xaf, 0x7d, 0xb2,
		0xa4, 0x9f, 0x68, 0xf6, 0xa5, 0x26, 0x5d, 0x4f, 0x75, 0x5b, 0xf6, 0x98, 0x13, 0x2e, 0x74, 0x36,
		0x29, 0x2c, 0xdb, 0xff, 0xed, 0xdc, 0x4b, 0x2e, 0x37, 0xf8, 0x95, 0x86, 0xfd, 0x92, 0x01, 0xcf,
		0x1a, 0xaa, 0xb3, 0x2c, 0x35, 0xe4, 0x35, 0x8b, 0x5c, 0xdb, 0xf2, 0xd6, 0xb6, 0xb0, 0x45, 0x4b,
		0x72, 0x96, 0x24, 0x5f, 0xbc, 0x3c, 0x91, 0xab, 0x7c, 0x43, 0xd9, 0x19, 0x8d, 0xd2, 0x8a, 0x4f,
		0x33, 0x1a, 0x90, 0xf8, 0xef, 0x56, 0x69, 0xd1, 0x2f, 0x62, 0xee, 0xab, 0x18, 0xbb, 0x0e, 0xa6,
		0xae, 0x31, 0x35, 0x49, 0x41, 0x33, 0x31, 0x48, 0x26, 0x06, 0xc5, 0xf5, 0xa6, 0x2e, 0x9d, 0xfe,
		0xff, 0x9a, 0xbb, 0x2f, 0x47, 0x4f, 0x91, 0xe2, 0xdd, 0x4a, 0x28, 0x45, 0x20, 0x85, 0x7a, 0x7a,
		0x7d, 0x38, 0xc6, 0x85, 0x88, 0xe6, 0x1e, 0x5c, 0x8f, 0x39, 0x56, 0x73, 0x67, 0x8e, 0x4e, 0xb8,
		0xa1, 0xd4, 0xd1, 0x09, 0x75, 0x73, 0xc7, 0xb5, 0xab, 0x75, 0x4c, 0xaa, 0x71, 0x08, 0x5f, 0xd5,
		0xd6, 0x49, 0x59, 0x4c, 0x50, 0x2f, 0x22, 0x61, 0x1d, 0x88, 0x64, 0xc7, 0xc7, 0x52, 0x70, 0xa8,
		0x54, 0x87, 0xf7, 0xc7, 0x87, 0xf2, 0x93, 0x3e, 0x97, 0xe1, 0xa4, 0xfd, 0x73, 0xb2, 0xc3, 0x70,
		0xc6, 0x87, 0xa2, 0xb9, 0xbf, 0xbf, 0xb7, 0x6f, 0x70, 0x38, 0x88, 0xe8, 0x63, 0xcb, 0xc8, 0x46,
		0x6e, 0x76, 0xfa, 0xd8, 0x47, 0x88, 0xdd, 0xc1, 0x7f, 0x5e, 0xba, 0x58, 0x70, 0x09, 0xf9, 0x5b,
		0x42, 0x6f, 0xa6, 0xd8, 0xda, 0xab, 0xa4, 0xe0, 0x55, 0x69, 0x1b, 0xc4, 0xa0, 0x88, 0xc4, 0x60,
		0x12, 0x57, 0xac, 0x4d, 0x09, 0xd6, 0xd6, 0xa8, 0x0a, 0x23, 0x23, 0x81, 0x0c, 0xe8, 0x17, 0x92,
		0x5e, 0x09, 0x1e, 0xd2, 0x05, 0x13, 0xf6, 0x09, 0x3a, 0x4e, 0xb8, 0xa5, 0x8a, 0x8e, 0x13, 0x96,
		0x73, 0x2a, 0x3c, 0x90, 0x34, 0xaf, 0x77, 0x08, 0x60, 0x0f, 0xcc, 0x4b, 0x3e, 0xee, 0x33, 0x10,
		0xd8, 0x6f, 0x21, 0x71, 0x4e, 0x7d, 0x9b, 0xf5, 0xbc, 0xc1, 0xa0, 0x5d, 0x5f, 0x7c, 0xf9, 0x2b,
		0x65, 0x96, 0x7c, 0xd5, 0xb2, 0x2c, 0xf9, 0x84, 0x56, 0x91, 0xd5, 0x3a, 0xc8, 0xac, 0x84, 0xcc,
		0x5a, 0x68, 0xac, 0x26, 0x99, 0xf5, 0xa4, 0x08, 0x07, 0x4a, 0x99, 0x6a, 0x35, 0xce, 0xe8, 0x72,
		0x95, 0x90, 0x4b, 0x11, 0xb8, 0x15, 0xd5, 0x6f, 0x2d, 0xc5, 0xd4, 0x8f, 0x70, 0x3e, 0x45, 0x25,
		0xb3, 0xf2, 0x99, 0xdf, 0xeb, 0xf6, 0x3f, 0x41, 0x01, 0x8e, 0xfc, 0x0c, 0xc7, 0xa2, 0x1b, 0xb8,
		0x3c, 0x3d, 0xd6, 0x4c, 0x9a, 0x48, 0x0f, 0x36, 0x27, 0x1f, 0x6f, 0xce, 0xbf, 0x9d, 0x01, 0x6e,
		0x00, 0x37, 0x1b, 0x0a, 0x37, 0xcc, 0x51, 0xe2, 0x41, 0xa8, 0xa7, 0xad, 0x07, 0x9c, 0x78, 0xf3,
		0x27, 0x25, 0xd6, 0xbc, 0x90, 0x40, 0x0e, 0x94, 0x00, 0x4a, 0x58, 0x8c, 0x12, 0x77, 0x2c, 0xe2,
		0x93, 0x8d, 0xc8, 0x8a, 0xe4, 0xed, 0x2c, 0x28, 0x71, 0x90, 0xe2, 0xd9, 0xab, 0xb1, 0x58, 0xb7,
		0xde, 0x79, 0xde, 0x81, 0x2d, 0x16, 0x00, 0x51, 0xe2, 0x1d, 0x20, 0xe1, 0x56, 0xba, 0xcc, 0x49,
		0x0f, 0x2d, 0xb3, 0xcd, 0x00, 0x63, 0x80, 0x31, 0x1b, 0x87, 0x31, 0x5d, 0xe6, 0x54, 0xe2, 0xc2,
		0x1a, 0x59, 0xc0, 0xe5, 0x30, 0x1d, 0xb8, 0x64, 0xaa, 0x8b, 0x5b, 0xfe, 0xcf, 0xf7, 0x6a, 0xe5,
		0x88, 0x55, 0xda, 0x27, 0x95, 0x4f, 0xad, 0xbf, 0xeb, 0xcf, 0x6f, 0x8e, 0x67, 0xbf, 0x7f, 0xfb,
		0xf7, 0xfe, 0x73, 0x8a, 0x12, 0xb5, 0xad, 0xe2, 0xe0, 0xd7, 0xda, 0x5b, 0xdf, 0xaf, 0x21, 0xd8,
		0x9a, 0x5b, 0xe1, 0xc0, 0x30, 0x60, 0x98, 0x85, 0x18, 0xb6, 0xf6, 0x56, 0xfe, 0xaa, 0xf5, 0x9d,
		0xe2, 0x2a, 0x88, 0x8c, 0x57, 0x3e, 0x64, 0x28, 0x03, 0x40, 0x71, 0x85, 0x03, 0xd5, 0x0d, 0x3f,
		0x29, 0x53, 0x05, 0x16, 0xda, 0x21, 0x2c, 0xd2, 0x9f, 0xa1, 0x5c, 0x3d, 0xc9, 0x55, 0x0a, 0xd4,
		0x43, 0x9b, 0x22, 0xf5, 0x40, 0xeb, 0xf0, 0x1a, 0x2a, 0x81, 0xd0, 0xb2, 0xa2, 0x7e, 0x34, 0x7d,
		0x09, 0x84, 0x49, 0x2a, 0xc4, 0xd2, 0x73, 0xfa, 0x2f, 0xe5, 0x47, 0x24, 0xff, 0xa8, 0x6b, 0x7c,
		0xcc, 0x72, 0x97, 0x77, 0xef, 0xb8, 0x8c, 0x92, 0x6f, 0x92, 0x8e, 0x1e, 0xd4, 0xbc, 0x4b, 0x5a,
		0xc7, 0x2e, 0x29, 0x29, 0x75, 0xb0, 0x7a, 0x97, 0x74, 0xb8, 0xe6, 0xd2, 0xd3, 0xe5, 0xf8, 0xf9,
		0xed, 0x28, 0x04, 0x06, 0x96, 0x6c, 0x11, 0x4b, 0x4e, 0x5f, 0xde, 0x73, 0xed, 0x64, 0xa9, 0x57,
		0xd7, 0x4c, 0xda, 0xb2, 0x7c, 0x44, 0xd4, 0xa8, 0x70, 0x55, 0xb8, 0x52, 0x1a, 0x10, 0x95, 0x21,
		0x91, 0x1b, 0x14, 0xb9, 0x61, 0xd1, 0x1a, 0x58, 0x46, 0x0a, 0x9a, 0x72, 0xcd, 0x64, 0xbe, 0x07,
		0x72, 0xb2, 0xe9, 0xc7, 0x59, 0x3b, 0x9d, 0x86, 0xbf, 0xe0, 0x69, 0x0e, 0x32, 0xb4, 0x31, 0xd2,
		0xf4, 0xdf, 0xbf, 0x1f, 0xde, 0xb2, 0xb3, 0x9b, 0xb0, 0xe8, 0x55, 0xf6, 0xe9, 0xc0, 0x1d, 0xd5,
		0x80, 0x2f, 0xc0, 0x97, 0x19, 0xf8, 0xca, 0x7c, 0x47, 0xf5, 0x28, 0x4b, 0x81, 0xee, 0x92, 0xea,
		0x71, 0x8b, 0xb8, 0xa5, 0xda, 0x80, 0x99, 0x52, 0x9b, 0xab, 0x36, 0xb3, 0xd5, 0x66, 0xbe, 0x7a,
		0xcc, 0x38, 0x9b, 0x39, 0x13, 0xa8, 0x95, 0x25, 0x3d, 0xb7, 0x54, 0x93, 0xa4, 0x26, 0xad, 0x74,
		0x9d, 0x04, 0xb7, 0xbc, 0xa6, 0x4c, 0x5d, 0xa2, 0x9b, 0xb7, 0x2c, 0x0a, 0xf3, 0xa8, 0x1c, 0x04,
		0xbb, 0xf3, 0x38, 0x21, 0xa2, 0x4e, 0xb7, 0x0a, 0x54, 0x05, 0xaa, 0x02, 0x55, 0x0b, 0x86, 0xaa,
		0x77, 0x41, 0xe0, 0x71, 0x46, 0x7a, 0xfb, 0x7f, 0xcd, 0x42, 0xf8, 0x73, 0x02, 0xcf, 0xe3, 0x8e,
		0x12, 0x7e, 0x87, 0x0e, 0xfc, 0xa6, 0xda, 0x04, 0xf4, 0x01, 0xfa, 0x00, 0x7d, 0x80, 0xbe, 0x62,
		0x42, 0x5f, 0xcf, 0x57, 0x49, 0x36, 0x52, 0xd7, 0x00, 0xbe, 0xb8, 0x45, 0x1a, 0xd8, 0xab, 0x01,
		0xf6, 0x00, 0x7b, 0xdb, 0x0a, 0x7b, 0x59, 0x65, 0xb2, 0x71, 0x43, 0x83, 0xf0, 0x99, 0x4b, 0x19,
		0x10, 0x58, 0xfa, 0xf2, 0xd8, 0x3c, 0x6e, 0x9c, 0x68, 0x2e, 0x69, 0x38, 0x0f, 0x39, 0x08, 0xe8,
		0x00, 0x03, 0x8d, 0xa0, 0xa0, 0x0b, 0x1c, 0xb4, 0x83, 0x84, 0x76, 0xb0, 0xd0, 0x0b, 0x1a, 0x34,
		0xe0, 0x41, 0x04, 0x22, 0xf4, 0x1c, 0x6a, 0x95, 0xcb, 0x6f, 0x36, 0x28, 0xd7, 0x6c, 0x0c, 0x01,
		0x87, 0x84, 0x4d, 0x66, 0x4b, 0x8e, 0x5d, 0xf5, 0x8f, 0xd6, 0xa6, 0x4a, 0x54, 0xc9, 0xb4, 0x86,
		0xb0, 0x75, 0xa1, 0x79, 0xa2, 0xe4, 0xdb, 0x95, 0xed, 0x13, 0x66, 0x8d, 0x6a, 0xb6, 0xb8, 0xd9,
		0x29, 0x65, 0x8f, 0xd6, 0x4f, 0x69, 0xed, 0xb0, 0xd1, 0x68, 0x1e, 0x34, 0x1a, 0xd5, 0x83, 0xbd,
		0x83, 0xea, 0xd1, 0xfe, 0x7e, 0xad, 0x59, 0xdb, 0xb7, 0x78, 0x96, 0x77, 0x8a, 0xd9, 0x5a, 0x6b,
		0xa7, 0x18, 0xef, 0x43, 0x60, 0x05, 0x43, 0x6a, 0x28, 0xfc, 0x4a, 0xf8, 0x53, 0xe9, 0x22, 0x9e,
		0xa3, 0xd6, 0xc1, 0x3c, 0xc1, 0x3c, 0xc1, 0x3c, 0xc1, 0x3c, 0xc1, 0x3c, 0xc1, 0x3c, 0xc1, 0x3c,
		0xc1, 0x3c, 0xc1, 0x3c, 0xc1, 0x3c, 0x83, 0x9e, 0xd2, 0x49, 0x3d, 0xc7, 0xcd, 0x83, 0x7b, 0x82,
		0x7b, 0x82, 0x7b, 0x82, 0x7b, 0x82, 0x7b, 0x82, 0x7b, 0x82, 0x7b, 0x82, 0x7b, 0x82, 0x7b, 0x82,
		0x7b, 0xca, 0x47, 0xbd, 0x1b, 0xee, 0x93, 0xf6, 0xc1, 0x3e, 0xc1, 0x3e, 0xc1, 0x3e, 0xc1, 0x3e,
		0xc1, 0x3e, 0xc1, 0x3e, 0xc1, 0x3e, 0xc1, 0x3e, 0xc1, 0x3e, 0xc1, 0x3e, 0x95, 0x66, 0xf6, 0xa9,
		0xc0, 0x3e, 0xc1, 0x3e, 0xc1, 0x3e, 0xc1, 0x3e, 0xc1, 0x3e, 0xc1, 0x3e, 0xc1, 0x3e, 0xc1, 0x3e,
		0xc1, 0x3e, 0xc1, 0x3e, 0xc7, 0xec, 0xb3, 0xe7, 0xff, 0xf4, 0x83, 0x5f, 0xbe, 0x5e, 0x0a, 0x3a,
		0xd7, 0x09, 0x78, 0x28, 0x78, 0x28, 0x78, 0x28, 0x78, 0x28, 0x78, 0x28, 0x78, 0x28, 0x78, 0x28,
		0x78, 0x28, 0x78, 0xa8, 0xbd, 0x3c, 0x34, 0xd7, 0x43, 0xf7, 0x29, 0x6f, 0x4f, 0x58, 0xd9, 0x5e,
		0xea, 0x5b, 0x15, 0xe2, 0xab, 0x0a, 0xe2, 0xff, 0xc7, 0x65, 0x71, 0x89, 0xca, 0x6b, 0x0c, 0xdf,
		0x4c, 0xc9, 0x9e, 0xa3, 0xe2, 0x7b, 0x2e, 0xcb, 0x17, 0xcc, 0x09, 0x6f, 0xcf, 0x47, 0xbd, 0xdf,
		0x5e, 0x0e, 0x7a, 0xbd, 0xfd, 0x38, 0xea, 0xcf, 0xc2, 0xe2, 0x26, 0xae, 0x88, 0x94, 0x14, 0x77,
		0x3d, 0xda, 0xca, 0x4e, 0x33, 0xad, 0xa2, 0xb6, 0x93, 0xc1, 0xa8, 0x02, 0x45, 0x4e, 0x50, 0xdb,
		0x69, 0x9d, 0x15, 0x87, 0xda, 0x4e, 0x25, 0x9a, 0x3b, 0x16, 0x16, 0x46, 0x36, 0xeb, 0x5d, 0x0b,
		0x00, 0x3e, 0x00, 0x1f, 0x80, 0x4f, 0x1f, 0xf0, 0x51, 0x5c, 0xcd, 0xbc, 0x12, 0x03, 0x0f, 0x08,
		0xda, 0xd2, 0x7f, 0x75, 0x73, 0x31, 0xb0, 0x37, 0x08, 0xb9, 0xac, 0xfc, 0xe4, 0x84, 0xf5, 0xe9,
		0xc7, 0x2d, 0x02, 0x79, 0x81, 0xbc, 0x40, 0xde, 0x82, 0x21, 0x6f, 0xea, 0xcb, 0x5e, 0x57, 0xd9,
		0x67, 0x93, 0xa0, 0x29, 0x5a, 0xd5, 0x99, 0x50, 0xbe, 0xd7, 0xa1, 0x32, 0x6b, 0x92, 0x22, 0x75,
		0xa9, 0xca, 0x3a, 0x75, 0x46, 0x42, 0x15, 0x59, 0x8b, 0x7a, 0xac, 0x7b, 0xaa, 0x08, 0x2e, 0xa7,
		0x35, 0x3a, 0x5d, 0x05, 0x91, 0x5d, 0x5b, 0x16, 0xf2, 0xac, 0x90, 0x49, 0xe5, 0x73, 0x59, 0x11,
		0x2e, 0x1d, 0xd3, 0x9a, 0x6a, 0x13, 0x5c, 0x0b, 0x5c, 0x0b, 0x5c, 0xab, 0x60, 0x5c, 0xab, 0xcb,
		0x9c, 0x0a, 0x73, 0x5d, 0xc9, 0xa3, 0x88, 0x32, 0xbc, 0x3d, 0xa4, 0x09, 0x6f, 0x15, 0x97, 0x3e,
		0x19, 0xe7, 0x2a, 0xff, 0xe7, 0x7b, 0xb5, 0x72, 0xc4, 0x2a, 0xed, 0x93, 0xca, 0xa7, 0xd6, 0xdf,
		0xf5, 0xe7, 0x37, 0xc7, 0xb3, 0xdf, 0xbf, 0xfd, 0x7b, 0xff, 0xf9, 0x1f, 0xe5, 0xad, 0x46, 0x7e,
		0xd2, 0x20, 0x7b, 0xba, 0x51, 0x60, 0x3f, 0xb0, 0x1f, 0xd8, 0x8f, 0x38, 0x1b, 0x71, 0x36, 0xe2,
		0x6c, 0xc4, 0xd9, 0x88, 0xb3, 0x11, 0x67, 0x73, 0x59, 0x09, 0x03, 0xa9, 0x2a, 0xf1, 0x4d, 0x97,
		0xb4, 0x94, 0x6b, 0xdc, 0x32, 0x78, 0x17, 0x78, 0x17, 0x78, 0x17, 0x78, 0x17, 0x78, 0x17, 0x78,
		0x17, 0x78, 0x17, 0x78, 0xd7, 0x76, 0xf3, 0x2e, 0x7a, 0xbe, 0x05, 0x9e, 0x05, 0x9e, 0x05, 0x9e,
		0x05, 0x9e, 0x05, 0x9e, 0x05, 0x9e, 0x05, 0x9e, 0x05, 0x9e, 0x05, 0x9e, 0x55, 0x2a, 0x95, 0xa3,
		0x27, 0xdf, 0xb9, 0x97, 0x81, 0x2f, 0xfe, 0x1f, 0xcd, 0xc9, 0xbf, 0x31, 0xa0, 0xcf, 0x37, 0x0c,
		0xd6, 0x05, 0xd6, 0x05, 0xd6, 0x55, 0x30, 0xd6, 0x35, 0xa8, 0x27, 0x33, 0x67, 0xa9, 0x15, 0xd5,
		0xef, 0x86, 0x30, 0xbf, 0xa4, 0x41, 0xd0, 0xd6, 0x59, 0x1c, 0x0a, 0x3e, 0x5b, 0x09, 0xb1, 0x91,
		0xe2, 0x5d, 0xd2, 0x4c, 0xbd, 0x49, 0x93, 0x80, 0x55, 0xc0, 0x2a, 0x60, 0xb5, 0x60, 0xb0, 0x8a,
		0x44, 0x3d, 0x24, 0xea, 0x95, 0xca, 0x4a, 0x74, 0x79, 0xd0, 0x53, 0x74, 0xa8, 0x3f, 0x6a, 0x10,
		0x98, 0x0f, 0xcc, 0x07, 0xe6, 0x17, 0x91, 0x4a, 0xc7, 0x16, 0x0a, 0x0a, 0x4d, 0xf6, 0x64, 0xca,
		0x89, 0xa6, 0x2a, 0x66, 0x44, 0x5b, 0xc4, 0x28, 0x9d, 0xd5, 0x24, 0x1f, 0xb8, 0x64, 0x4f, 0x24,
		0x1c, 0xe2, 0x3e, 0x80, 0x65, 0x29, 0x89, 0x51, 0xbe, 0x10, 0x91, 0x3a, 0x51, 0x4a, 0xa6, 0x9a,
		0x98, 0xf2, 0xa5, 0xf0, 0xcf, 0x3c, 0xde, 0x87, 0xa3, 0xa8, 0x7c, 0x5c, 0xf2, 0x7b, 0x9e, 0xf7,
		0x2e, 0x45, 0x23, 0xec, 0x31, 0x7b, 0x23, 0x5f, 0xa4, 0xcb, 0x25, 0x77, 0x3f, 0x3c, 0xc5, 0x4d,
		0x68, 0x1d, 0xf4, 0x8c, 0xeb, 0x99, 0x6a, 0x1d, 0xa7, 0x00, 0xb5, 0x75, 0xaa, 0x6d, 0x25, 0x33,
		0x8c, 0xf5, 0x97, 0xf7, 0x7a, 0x7f, 0xb9, 0xe6, 0x5c, 0xa4, 0x9d, 0x83, 0xcc, 0x63, 0xbf, 0xde,
		0xe8, 0xbc, 0xfe, 0x59, 0xd7, 0xf8, 0x9c, 0xe5, 0x78, 0x9a, 0xd6, 0xfb, 0x74, 0x63, 0xe7, 0x37,
		0x78, 0x6a, 0xcd, 0x51, 0x4c, 0x46, 0x3f, 0x13, 0xd3, 0xcc, 0x34, 0x74, 0x32, 0x03, 0x6d, 0x4c,
		0x4b, 0x0f, 0x33, 0xd3, 0xc0, 0xcc, 0x74, 0x2f, 0x1b, 0xad, 0xa3, 0xb5, 0xac, 0xc4, 0x74, 0x6c,
		0x42, 0xbb, 0x38, 0x6b, 0x27, 0x2b, 0xf7, 0x92, 0xa6, 0xac, 0xcb, 0xb8, 0x7c, 0xcb, 0xfb, 0xf7,
		0xbb, 0x43, 0xd3, 0xdd, 0x5d, 0xbf, 0x40, 0x0b, 0x8d, 0x61, 0x0e, 0x09, 0x44, 0x62, 0xcb, 0x1c,
		0x3e, 0x96, 0xcc, 0x34, 0x6b, 0x49, 0x4d, 0xb3, 0x0e, 0xd3, 0xdc, 0x58, 0xd3, 0x3c, 0x15, 0xc9,
		0x88, 0xda, 0x90, 0x17, 0x3e, 0x30, 0x2f, 0xf9, 0xb8, 0xcf, 0x14, 0x5b, 0xeb, 0xb7, 0x90, 0x70,
		0xd4, 0x4e, 0x79, 0x9b, 0xf5, 0xbc, 0xc1, 0xa0, 0x5d, 0x5f, 0x7c, 0xf9, 0x2b, 0xe9, 0xe3, 0xe9,
		0x74, 0x91, 0xd4, 0x3a, 0x48, 0x16, 0xdd, 0x83, 0x40, 0xe7, 0xc8, 0xaa, 0x6b, 0x90, 0xe9, 0x18,
		0x64, 0xba, 0x05, 0x8d, 0x4e, 0xa1, 0x37, 0x76, 0x4a, 0xad, 0x3b, 0xcc, 0xea, 0x0c, 0x21, 0x97,
		0x22, 0x70, 0xd3, 0xca, 0x0c, 0x59, 0x64, 0x85, 0x94, 0x32, 0x42, 0x02, 0xca, 0x9e, 0x00, 0xe0,
		0x07, 0x63, 0xd1, 0x0d, 0x5c, 0x9e, 0x1e, 0x6b, 0x26, 0x4d, 0xa4, 0x07, 0x9b, 0x93, 0x8f, 0x37,
		0xe7, 0xdf, 0xce, 0x00, 0x37, 0x80, 0x9b, 0x0d, 0x85, 0x1b, 0xe6, 0x28, 0xf1, 0x20, 0xd4, 0xd3,
		0xd6, 0x03, 0x4e, 0xa2, 0xe8, 0x38, 0x4b, 0x94, 0x0c, 0x94, 0x00, 0x4a, 0x58, 0x84, 0x12, 0x24,
		0xf5, 0x57, 0xb3, 0xd4, 0x5b, 0x35, 0x50, 0x5f, 0x55, 0x0f, 0xa2, 0x8c, 0x33, 0x79, 0x2a, 0x5d,
		0xe6, 0xa4, 0x87, 0x96, 0xd9, 0x66, 0x80, 0x31, 0xc0, 0x98, 0x8d, 0xc3, 0x98, 0x6c, 0x49, 0x35,
		0x59, 0x92, 0x68, 0x32, 0x27, 0xcd, 0x68, 0x4a, 0x92, 0x69, 0x15, 0x07, 0xbf, 0x42, 0x29, 0x02,
		0x29, 0xd4, 0x53, 0x66, 0x04, 0x1b, 0x37, 0x04, 0x0c, 0x03, 0x86, 0x6d, 0x1c, 0x86, 0xa5, 0x3e,
		0xe5, 0x96, 0xe1, 0x54, 0x5b, 0xc6, 0x53, 0x6c, 0x19, 0x72, 0x27, 0x28, 0x4e, 0xa9, 0x51, 0x65,
		0xab, 0x11, 0x9d, 0x42, 0xa3, 0x3c, 0xc6, 0x94, 0x25, 0xb7, 0x90, 0xe2, 0x54, 0x19, 0xf5, 0xd0,
		0x12, 0x9c, 0x1a, 0x23, 0x1d, 0x5e, 0x43, 0xc9, 0x36, 0x2d, 0xe4, 0x2e, 0x2c, 0xcb, 0x5d, 0x48,
		0x90, 0xf0, 0xb4, 0xc6, 0x06, 0xe9, 0x4e, 0x86, 0x31, 0x18, 0x25, 0x2c, 0xad, 0x21, 0xbf, 0x24,
		0xcb, 0x4d, 0x4a, 0x95, 0x8b, 0x94, 0x2a, 0xf7, 0x28, 0x59, 0xae, 0xd1, 0x6b, 0xe3, 0x91, 0x70,
		0x2d, 0xa4, 0x5e, 0x03, 0xe5, 0xb5, 0xb6, 0xb5, 0x57, 0x27, 0x07, 0xbd, 0xbc, 0x7a, 0x56, 0xaf,
		0x89, 0xe5, 0xbf, 0x59, 0x31, 0x2a, 0xeb, 0x8e, 0x46, 0xc2, 0x51, 0x58, 0xfe, 0xee, 0x8b, 0x6f,
		0xb6, 0xe4, 0xad, 0x5e, 0xd9, 0xea, 0x5f, 0x6b, 0x6b, 0xff, 0x95, 0xad, 0xfc, 0x57, 0xb7, 0xee,
		0xd7, 0xe1, 0xb7, 0x09, 0x78, 0xec, 0xba, 0x7c, 0x35, 0x31, 0x2f, 0x4d, 0xcc, 0x3f, 0x93, 0xf1,
		0xcc, 0x64, 0x2b, 0xe9, 0xb5, 0xad, 0xf2, 0xc4, 0xc1, 0x52, 0xca, 0xe0, 0x68, 0x4d, 0xc7, 0xbe,
		0x76, 0xf0, 0x93, 0x24, 0xd8, 0x49, 0x11, 0xdc, 0x24, 0x0d, 0x66, 0x52, 0x07, 0x2f, 0xa9, 0x83,
		0x95, 0x74, 0xc1, 0x49, 0x36, 0xa7, 0xb5, 0x76, 0xb0, 0x91, 0x3c, 0xb8, 0x48, 0x10, 0x4c, 0x24,
		0x0c, 0x1e, 0x12, 0x10, 0x8b, 0x34, 0xc1, 0x41, 0xda, 0x28, 0x3f, 0x25, 0xf9, 0xcf, 0xc2, 0x46,
		0x93, 0x68, 0x28, 0x69, 0xc8, 0x7c, 0xd6, 0xa1, 0x48, 0x41, 0xd6, 0x33, 0x0d, 0x07, 0x11, 0x11,
		0x6c, 0x59, 0x47, 0x09, 0x5e, 0xe0, 0xc1, 0x4b, 0xd8, 0xc0, 0xce, 0x0b, 0xaf, 0xf7, 0xda, 0x6b,
		0xad, 0xf3, 0x3a, 0xe5, 0xa5, 0x74, 0x63, 0x9e, 0x82, 0xcd, 0xbe, 0xee, 0xe4, 0xa5, 0xa6, 0x5e,
		0xa8, 0xec, 0x79, 0x6e, 0xb8, 0xf0, 0x1a, 0x93, 0x6d, 0xe3, 0xfe, 0x6f, 0xe7, 0x5e, 0x7f, 0x39,
		0x25, 0x59, 0xe9, 0x85, 0x5e, 0xf2, 0x3a, 0x33, 0x5e, 0x66, 0xb1, 0xab, 0x75, 0xbc, 0xca, 0xda,
		0x5e, 0x64, 0x6d, 0xaf, 0xb1, 0xe0, 0x25, 0xfa, 0x2f, 0x96, 0x70, 0x8a, 0x57, 0x51, 0x88, 0xb2,
		0x33, 0x1a, 0xa5, 0x57, 0x48, 0x61, 0xfc, 0x77, 0x19, 0x59, 0x61, 0x95, 0x88, 0x15, 0x2e, 0x9f,
		0x1a, 0x0b, 0x58, 0xe1, 0xd2, 0xa9, 0xd3, 0xc4, 0x0a, 0x9d, 0x7b, 0x16, 0x45, 0x22, 0x5a, 0xa7,
		0x40, 0xc0, 0x64, 0x9a, 0x27, 0xcf, 0x58, 0xc2, 0x05, 0x5f, 0x5e, 0x0a, 0x16, 0x73, 0xc1, 0x17,
		0x97, 0x4a, 0x5e, 0x5c, 0x30, 0x52, 0x72, 0xbd, 0x5b, 0xda, 0x27, 0xfb, 0x62, 0x69, 0x3d, 0xeb,
		0xbb, 0x75, 0x56, 0xf6, 0x30, 0x73, 0x28, 0xc5, 0xf2, 0x5e, 0x27, 0xe5, 0x08, 0x6b, 0x7c, 0x2b,
		0xd7, 0x78, 0xb2, 0x45, 0x52, 0x4a, 0x98, 0x87, 0xb6, 0x66, 0xde, 0x59, 0x3a, 0xc3, 0xe0, 0x3e,
		0xbb, 0xf3, 0x78, 0x02, 0xbc, 0x1f, 0x3d, 0xf0, 0xca, 0x20, 0x4e, 0x25, 0xa5, 0xf6, 0x67, 0x1b,
		0x76, 0x03, 0xbb, 0x59, 0x1c, 0xf1, 0xbb, 0x20, 0xf0, 0x38, 0xf3, 0x93, 0xd8, 0x4b, 0x4d, 0x83,
		0x0d, 0xdc, 0x73, 0xcf, 0x0b, 0x06, 0x27, 0xe6, 0xe5, 0xfa, 0x76, 0x30, 0xfd, 0x10, 0x16, 0x37,
		0x16, 0xf7, 0x52, 0x11, 0xac, 0xd9, 0x48, 0xb0, 0xb6, 0x0f, 0x21, 0x82, 0x6d, 0xad, 0x08, 0x56,
		0x3b, 0x6c, 0x34, 0x9a, 0x07, 0x8d, 0x46, 0xf5, 0x60, 0xef, 0xa0, 0x7a, 0xb4, 0xbf, 0x5f, 0x6b,
		0xd6, 0xb6, 0x49, 0x13, 0x7b, 0x01, 0x9c, 0xa3, 0x5e, 0x18, 0x4a, 0x1e, 0x45, 0x15, 0xe5, 0x3d,
		0x54, 0x98, 0xfb, 0xc0, 0xa5, 0x12, 0x11, 0x8f, 0xad, 0x7f, 0xdd, 0x4d, 0x8b, 0xd5, 0x6d, 0x00,
		0xba, 0x01, 0xdd, 0x0b, 0x23, 0x2e, 0x5c, 0xee, 0x2b, 0xa1, 0x9e, 0xd6, 0xcb, 0x1e, 0x1f, 0x73,
		0x93, 0x35, 0x2c, 0xb6, 0x7c, 0x1e, 0x37, 0xfd, 0x81, 0x45, 0x29, 0xce, 0x50, 0x5f, 0x5c, 0x9c,
		0x5e, 0xdd, 0xde, 0x5c, 0x7c, 0x5b, 0x77, 0x9a, 0x06, 0xf0, 0x12, 0x25, 0xca, 0xb8, 0x4a, 0x99,
		0x34, 0x79, 0xf5, 0xe5, 0xeb, 0xcd, 0xed, 0xf9, 0x69, 0x59, 0x07, 0x22, 0xa7, 0x7c, 0xa5, 0xeb,
		0x7f, 0x5f, 0xdf, 0x9c, 0x5d, 0xde, 0x9e, 0x9e, 0x5d, 0x7f, 0xfc, 0x7a, 0x7e, 0x75, 0x73, 0xfe,
		0xe5, 0x73, 0x01, 0xdf, 0xee, 0xe3, 0xc9, 0xd5, 0xc9, 0x87, 0xf3, 0x8b, 0xf3, 0x9b, 0xf3, 0xb3,
		0xeb, 0x22, 0xbd, 0xde, 0xc7, 0x7f, 0x9e, 0x5c, 0x5f, 0x9f, 0x5f, 0x17, 0x6c, 0x4a, 0x2f, 0x4f,
		0x3e, 0x9f, 0xfc, 0x71, 0x76, 0x79, 0xf6, 0xf9, 0xe6, 0xf6, 0xe4, 0xf4, 0xf4, 0xeb, 0xd9, 0x75,
		0xa1, 0xc6, 0x6c, 0x60, 0x03, 0xc5, 0x5e, 0x6e, 0x9f, 0x4f, 0x2e, 0xcf, 0xa8, 0xcf, 0xef, 0xb7,
		0x34, 0xe3, 0xf7, 0x66, 0x64, 0x42, 0xa5, 0x23, 0x3f, 0xc3, 0x6c, 0x0b, 0x97, 0x47, 0x8e, 0x14,
		0xe1, 0x5a, 0x79, 0x52, 0xf3, 0x99, 0x1a, 0xd3, 0xcf, 0x82, 0xec, 0x80, 0xec, 0x50, 0x08, 0xf4,
		0x6b, 0xfc, 0xed, 0x05, 0xf7, 0x3b, 0x83, 0xdd, 0x5f, 0x44, 0xaa, 0x9b, 0x15, 0xa9, 0xd6, 0xf7,
		0x11, 0x98, 0x4e, 0x63, 0xf3, 0x5a, 0x07, 0xb1, 0xe7, 0x41, 0x79, 0x9d, 0x04, 0x60, 0xa0, 0x31,
		0xd0, 0x18, 0x68, 0x0c, 0x34, 0x06, 0x1a, 0xbf, 0xfc, 0x1b, 0x8d, 0xa9, 0x73, 0x9e, 0x1b, 0xee,
		0x0e, 0xfe, 0x13, 0xe7, 0x32, 0x65, 0xc8, 0xa4, 0x9f, 0xca, 0xc7, 0x7f, 0x35, 0x73, 0x6a, 0xea,
		0x6f, 0x91, 0x3d, 0x65, 0x4f, 0xf6, 0xd4, 0xe4, 0xb4, 0xc9, 0xda, 0x74, 0x60, 0xdd, 0x03, 0x2a,
		0x6b, 0xd6, 0x43, 0x04, 0x19, 0x28, 0x32, 0x19, 0x58, 0xb7, 0x7e, 0xe1, 0x6b, 0x19, 0x96, 0x2b,
		0x27, 0xe8, 0xc5, 0x8c, 0xcb, 0x94, 0x4b, 0x2a, 0xf1, 0xd2, 0x4a, 0xb3, 0xc4, 0x32, 0x2c, 0xb5,
		0xb4, 0x4b, 0x2e, 0xf3, 0xd2, 0xcb, 0xbc, 0x04, 0xb3, 0x2d, 0xc5, 0x84, 0x3e, 0x59, 0x57, 0x89,
		0xcd, 0x75, 0xd3, 0x87, 0x56, 0xce, 0xf4, 0x7a, 0xe9, 0x44, 0x8b, 0x2f, 0x9a, 0x28, 0xbd, 0x88,
		0x8a, 0x75, 0xe5, 0x5e, 0xa3, 0x21, 0x99, 0x4d, 0x64, 0xb5, 0x0d, 0x32, 0x1b, 0x21, 0xb3, 0x15,
		0x1a, 0x9b, 0x49, 0x66, 0x3b, 0x29, 0x42, 0x81, 0x12, 0x51, 0x2d, 0xab, 0xb5, 0xd3, 0xa3, 0x56,
		0x82, 0x7b, 0x0d, 0xa5, 0xea, 0x60, 0xde, 0x30, 0xef, 0x62, 0x9a, 0x37, 0x4a, 0xd5, 0x69, 0x23,
		0x32, 0x1a, 0x8a, 0x4c, 0x8c, 0xc5, 0x80, 0xa5, 0x45, 0x26, 0x5e, 0x52, 0x08, 0x92, 0x7f, 0x54,
		0xdc, 0x8f, 0x81, 0x08, 0xa1, 0x98, 0x11, 0x02, 0xee, 0xc7, 0x78, 0xdd, 0x30, 0xb9, 0xe8, 0xdc,
		0xdf, 0x05, 0x32, 0x4a, 0x61, 0x9d, 0xe3, 0x47, 0x37, 0xe4, 0x9e, 0x0c, 0x98, 0xa8, 0x05, 0x41,
		0xfc, 0x68, 0xd5, 0x65, 0x20, 0xe9, 0xa3, 0x16, 0xd2, 0x11, 0xf5, 0x1a, 0x88, 0x3a, 0x88, 0xba,
		0x2e, 0xa2, 0x9e, 0xd4, 0x1c, 0x26, 0x32, 0x2c, 0x0b, 0xd9, 0x9d, 0xf0, 0x84, 0x12, 0x3c, 0x4a,
		0x3f, 0x67, 0x63, 0x71, 0x76, 0xba, 0xb5, 0x94, 0xa3, 0x9d, 0xce, 0x5c, 0x52, 0xa3, 0x3f, 0xa5,
		0xf9, 0x10, 0x9a, 0x11, 0x95, 0x39, 0x91, 0x9b, 0x15, 0xb9, 0x79, 0xd1, 0x9a, 0x59, 0x3a, 0x73,
		0x4b, 0x69, 0x76, 0x99, 0xcd, 0x6f, 0xd1, 0x0c, 0x9f, 0xe8, 0xee, 0xaf, 0x9e, 0x6a, 0x93, 0xe6,
		0x0a, 0xeb, 0xda, 0xa6, 0x5f, 0x61, 0x9d, 0xcd, 0x54, 0xa9, 0x4d, 0x56, 0x9b, 0xe9, 0x6a, 0x33,
		0x61, 0x3d, 0xa6, 0x9c, 0xcd, 0xa4, 0x33, 0x9a, 0x36, 0x99, 0x89, 0x4f, 0x4c, 0x3d, 0xd9, 0xc6,
		0xe7, 0xfa, 0xe6, 0x9e, 0x64, 0x63, 0xd4, 0x90, 0xc9, 0x93, 0x9b, 0xbe, 0x0e, 0x08, 0xd0, 0x08,
		0x05, 0xba, 0x20, 0x41, 0x3b, 0x34, 0x68, 0x87, 0x08, 0xbd, 0x50, 0x41, 0x03, 0x19, 0x44, 0xd0,
		0x91, 0x55, 0xaf, 0x7d, 0xb5, 0xdd, 0xd4, 0x7a, 0xee, 0x58, 0x89, 0x19, 0x7f, 0xb5, 0x3b, 0xcd,
		0xe0, 0x27, 0xdf, 0x3c, 0x25, 0x92, 0x7e, 0xf5, 0xcf, 0x0a, 0xc1, 0x8c, 0xa4, 0xdb, 0xb1, 0x7b,
		0x5d, 0x24, 0x48, 0xbe, 0x93, 0xf7, 0x1a, 0x06, 0x57, 0x81, 0xc1, 0xc0, 0x60, 0x60, 0x30, 0xcd,
		0x9a, 0x4d, 0xbd, 0xa3, 0xf9, 0xea, 0x8a, 0x4d, 0x2e, 0xfd, 0xaf, 0x4d, 0xc2, 0x0e, 0x08, 0xdb,
		0x9c, 0xda, 0x3a, 0x18, 0xd4, 0xca, 0xdc, 0x4d, 0xbe, 0xdf, 0x59, 0x6c, 0x5c, 0x4f, 0x76, 0x73,
		0xf7, 0xda, 0xd3, 0x9b, 0xe4, 0x66, 0xef, 0xdc, 0xd8, 0x75, 0x1d, 0xc8, 0x0e, 0x64, 0xdf, 0x52,
		0x64, 0xa7, 0x0a, 0xd0, 0xc7, 0x0d, 0xa6, 0x4d, 0xfb, 0x5c, 0xdb, 0x12, 0xd2, 0xa5, 0x85, 0x1a,
		0xa6, 0x8d, 0xda, 0xe8, 0xa3, 0x4e, 0xb0, 0x31, 0x00, 0x3a, 0xba, 0xc1, 0xc7, 0x18, 0x08, 0x19,
		0x03, 0x23, 0x33, 0xa0, 0x44, 0x0b, 0x4e, 0xc4, 0x20, 0xa5, 0x8f, 0x86, 0x2e, 0xac, 0xf8, 0xf4,
		0x79, 0xb5, 0x6b, 0xb3, 0x97, 0xda, 0x4e, 0x31, 0x27, 0x8c, 0x70, 0xb2, 0x68, 0x55, 0x02, 0x9d,
		0x6a, 0x01, 0xe0, 0x1f, 0xf0, 0x0f, 0xf8, 0x07, 0xfc, 0xa7, 0xaa, 0xee, 0x96, 0xda, 0x05, 0xec,
		0x6b, 0x68, 0x3b, 0x55, 0xf5, 0xb8, 0xd4, 0x03, 0x35, 0xa8, 0x36, 0x37, 0x5f, 0xa7, 0xec, 0xdf,
		0xba, 0x8c, 0x2c, 0x45, 0xad, 0xba, 0xa4, 0xff, 0xfe, 0xd6, 0xd6, 0xf2, 0xcc, 0xb8, 0x7d, 0xbc,
		0xfd, 0x76, 0x71, 0xf2, 0xb9, 0xac, 0xad, 0xb3, 0xe7, 0x77, 0xb6, 0x8f, 0xd0, 0x97, 0x9b, 0x7f,
		0x9e, 0x7d, 0xc5, 0x00, 0xad, 0x1e, 0xa0, 0xd3, 0x2f, 0x1f, 0xaf, 0xcf, 0xaf, 0x6f, 0x3f, 0x9e,
		0x7c, 0xb8, 0x38, 0xbb, 0x3d, 0x3d, 0xfb, 0x76, 0xfe, 0xf1, 0x0c, 0xc3, 0xb5, 0x7a, 0xb8, 0x6e,
		0xfe, 0xfa, 0x72, 0x3b, 0xa8, 0xbe, 0x77, 0x79, 0xf2, 0xf1, 0xf6, 0xeb, 0xd9, 0xc5, 0xc9, 0xbf,
		0x31, 0x5a, 0xab, 0x47, 0xeb, 0xfa, 0xe6, 0xe4, 0xe6, 0xfc, 0xcb, 0xe7, 0xdb, 0x2f, 0x9f, 0x2f,
		0x30, 0x4e, 0x2f, 0x8c, 0xd3, 0x5f, 0x17, 0x27, 0x9f, 0x6f, 0x4f, 0x3e, 0x7e, 0x3c, 0xbb, 0xbe,
		0xbe, 0xbd, 0xfa, 0x72, 0xfe, 0xf9, 0x06, 0x83, 0xb5, 0x7a, 0xb0, 0xbe, 0x7e, 0xf9, 0xf3, 0x06,
		0x98, 0xfe, 0x22, 0x48, 0x9d, 0x5d, 0x9c, 0x5d, 0xfd, 0xf3, 0xcb, 0x67, 0x20, 0xf9, 0x4b, 0xd8,
		0x04, 0xee, 0xf4, 0x9a, 0xa1, 0x9d, 0x5d, 0x9d, 0x9d, 0xc0, 0xd4, 0x5e, 0x1c, 0xa3, 0x3e, 0x0d,
		0xf8, 0xf0, 0xf5, 0xfc, 0xf4, 0x0f, 0x9d, 0xb6, 0xa6, 0xa5, 0xe5, 0x56, 0xd1, 0xc3, 0x7d, 0x24,
		0xa0, 0x25, 0x6a, 0xd7, 0x44, 0x02, 0x5a, 0x82, 0x0b, 0xee, 0xf5, 0x4f, 0x4a, 0xbe, 0xa9, 0xc8,
		0xeb, 0x5f, 0xb0, 0xff, 0x6a, 0x53, 0x89, 0xca, 0x4e, 0xbf, 0xda, 0x5a, 0x9a, 0xb2, 0xd4, 0xaf,
		0x37, 0x9a, 0xa2, 0x6c, 0xf5, 0xab, 0x8d, 0x26, 0x2a, 0x6b, 0xad, 0x7b, 0x3e, 0x89, 0xcd, 0xd2,
		0x84, 0x39, 0x96, 0x49, 0x12, 0x75, 0x66, 0x2e, 0xc2, 0xf5, 0xdc, 0xf0, 0xf6, 0x7c, 0xf4, 0x2a,
		0xb7, 0x9f, 0xe3, 0x17, 0xb8, 0xfd, 0x38, 0xe9, 0x73, 0x27, 0x1f, 0x93, 0x35, 0x7b, 0x94, 0x88,
		0x68, 0x31, 0x68, 0x5b, 0x04, 0xe9, 0x66, 0x21, 0xf9, 0x18, 0xa6, 0x18, 0xbf, 0xac, 0x47, 0x2b,
		0x68, 0x8e, 0x52, 0x90, 0x1d, 0x60, 0xac, 0xe2, 0x00, 0xe3, 0x9c, 0xd7, 0xc3, 0x01, 0xc6, 0xad,
		0x42, 0x9d, 0x0c, 0x47, 0x0e, 0x0c, 0xe1, 0x4d, 0x2f, 0x52, 0x41, 0xb7, 0xa2, 0xbc, 0x07, 0x8a,
		0xb3, 0xd3, 0x53, 0x8d, 0xe1, 0xe8, 0x34, 0x90, 0x67, 0x4b, 0x90, 0x27, 0xf3, 0xd1, 0x69, 0xe5,
		0x3d, 0xd0, 0x9d, 0x99, 0xee, 0x37, 0x86, 0xc3, 0xd2, 0x06, 0x8c, 0x93, 0xda, 0x48, 0xb5, 0x19,
		0xab, 0x36, 0xa3, 0xd5, 0x63, 0xbc, 0xc5, 0x50, 0x28, 0x70, 0x58, 0xba, 0x08, 0xa6, 0xaf, 0x03,
		0x02, 0x34, 0x42, 0x81, 0x2e, 0x48, 0xd0, 0x0e, 0x0d, 0xda, 0x21, 0x42, 0x2f, 0x54, 0xd0, 0xc9,
		0xa2, 0xa5, 0x6d, 0xd3, 0xaa, 0x27, 0x94, 0x7d, 0x57, 0x79, 0x0f, 0x1b, 0x78, 0x48, 0x3a, 0xe8,
		0x09, 0x7a, 0xf0, 0xed, 0x37, 0x8a, 0x23, 0xd2, 0x40, 0x5e, 0x20, 0x6f, 0x21, 0x91, 0x17, 0x47,
		0xa4, 0xe7, 0x8f, 0x48, 0xf7, 0x01, 0x6b, 0xb3, 0x40, 0xbd, 0x12, 0xf5, 0xee, 0x14, 0xe5, 0x3c,
		0x4f, 0x83, 0xfb, 0xb8, 0x71, 0x80, 0x3c, 0x40, 0x1e, 0x20, 0x0f, 0x90, 0xb7, 0x05, 0xe4, 0xc7,
		0xc0, 0x85, 0x72, 0x18, 0xaf, 0xcd, 0x32, 0xca, 0x61, 0x00, 0xe0, 0x01, 0xf0, 0x05, 0x06, 0x78,
		0xf2, 0x72, 0x18, 0x94, 0x52, 0x80, 0x46, 0x49, 0x40, 0x13, 0x6b, 0xd4, 0xc6, 0x1e, 0x75, 0x82,
		0x8c, 0x01, 0xb0, 0xd1, 0x0d, 0x3a, 0xc6, 0xc0, 0xc7, 0x18, 0x08, 0x99, 0x01, 0x23, 0x5a, 0x50,
		0x22, 0x06, 0x27, 0x7d, 0x2c, 0x74, 0x09, 0x4f, 0x59, 0xf3, 0xaa, 0xf1, 0xd4, 0xa4, 0xe5, 0x70,
		0x0b, 0xaa, 0x60, 0xe8, 0x50, 0x0c, 0x0c, 0x28, 0x07, 0xf0, 0x05, 0xf0, 0x05, 0xf0, 0x05, 0xf0,
		0x05, 0xf0, 0x05, 0x84, 0xbe, 0x40, 0xaf, 0x13, 0x00, 0xfa, 0x03, 0xfd, 0x81, 0xfe, 0x40, 0x7f,
		0xfa, 0x15, 0x2f, 0x7c, 0xb5, 0x57, 0xd7, 0x08, 0xfe, 0x7b, 0x1a, 0x9a, 0xfe, 0xca, 0xfc, 0x0e,
		0xd7, 0x56, 0x2d, 0x48, 0xdf, 0x39, 0xe5, 0xf2, 0xa5, 0xf0, 0xb5, 0x01, 0xc0, 0x82, 0xd7, 0x7d,
		0xa7, 0xb7, 0x9b, 0x41, 0xcd, 0xa6, 0xf2, 0x71, 0xa9, 0x5e, 0x6b, 0x1c, 0x34, 0x0e, 0xf7, 0x9a,
		0x8d, 0x43, 0xcd, 0x1d, 0x7e, 0x92, 0xcc, 0x51, 0x22, 0xf0, 0x4f, 0x45, 0x47, 0x0c, 0x0e, 0x3d,
		0x56, 0x6d, 0x3c, 0x05, 0x5f, 0xbe, 0x64, 0x8f, 0xc6, 0xd6, 0x40, 0xd5, 0xf4, 0x1a, 0x38, 0xd8,
		0xa0, 0x35, 0xb0, 0x63, 0x47, 0xab, 0xad, 0x2d, 0x20, 0xd7, 0x0f, 0xf1, 0x3a, 0xd3, 0xc4, 0xae,
		0x87, 0xcd, 0x83, 0x5e, 0x83, 0x5e, 0x83, 0x5e, 0x83, 0x5e, 0x93, 0xae, 0xf8, 0x3b, 0xe1, 0xff,
		0x7f, 0xf6, 0xbe, 0xae, 0x39, 0x71, 0xe3, 0x79, 0xf7, 0xde, 0x9f, 0xc2, 0xa5, 0xca, 0x45, 0x52,
		0xff, 0xd5, 0x1a, 0x30, 0x60, 0xb3, 0x37, 0xa7, 0xd8, 0x35, 0xc9, 0x71, 0xc5, 0xbb, 0x76, 0xd9,
		0xe4, 0xf7, 0xab, 0x73, 0xd6, 0xc4, 0xa5, 0x45, 0xb2, 0xad, 0x8a, 0x2c, 0x51, 0x92, 0xd8, 0xc4,
		0xb5, 0xf1, 0x77, 0xff, 0x17, 0x02, 0xc4, 0x3b, 0xcc, 0xf4, 0xf4, 0xe8, 0x05, 0x9e, 0xbd, 0x48,
		0xc2, 0x86, 0x69, 0xa4, 0x99, 0xe9, 0x7e, 0x9e, 0xee, 0xe9, 0xe9, 0xb6, 0xc2, 0x57, 0x8d, 0xfc,
		0xba, 0x85, 0x12, 0x2f, 0x22, 0x7b, 0xbd, 0x84, 0x69, 0xf3, 0xc5, 0x2a, 0xed, 0xc2, 0x90, 0x73,
		0xa3, 0x27, 0xb3, 0x12, 0x29, 0x95, 0x45, 0xc5, 0x66, 0x64, 0xdc, 0xe4, 0x83, 0xbd, 0x48, 0xa9,
		0x54, 0x8e, 0x9d, 0x68, 0x4d, 0xa9, 0x2c, 0x54, 0x2e, 0x65, 0x11, 0x4a, 0x76, 0x8d, 0x26, 0xe4,
		0x38, 0x18, 0xba, 0xc7, 0x7c, 0x67, 0xdd, 0x28, 0xe1, 0x85, 0x12, 0x5e, 0x52, 0x74, 0x2b, 0xbb,
		0xd2, 0x5d, 0x5d, 0xef, 0x3b, 0x6a, 0x76, 0x15, 0x60, 0xd5, 0x8b, 0x5c, 0x42, 0xc7, 0xb5, 0xd5,
		0x2b, 0xe7, 0xb8, 0xb6, 0x62, 0xc1, 0x9c, 0x0a, 0x4a, 0x75, 0x1d, 0xa3, 0x60, 0x4e, 0x49, 0x8c,
		0x8d, 0x32, 0xcd, 0x64, 0xa4, 0x95, 0x1c, 0x34, 0x72, 0x95, 0x36, 0xba, 0x76, 0x91, 0x2d, 0x96,
		0xda, 0x85, 0x1a, 0x96, 0x0b, 0x34, 0x28, 0xf4, 0x05, 0xbb, 0x75, 0x78, 0x85, 0xbe, 0xac, 0x27,
		0x87, 0xaf, 0xd0, 0xd7, 0x48, 0x18, 0x4f, 0xa1, 0xaf, 0x0a, 0x0a, 0x7d, 0xe5, 0x11, 0x23, 0x43,
		0xa1, 0xaf, 0x22, 0xc4, 0x35, 0xd8, 0x62, 0x5e, 0xe9, 0x8e, 0x1b, 0xba, 0x7e, 0xdc, 0xac, 0x73,
		0x6c, 0xb8, 0x89, 0x7e, 0x32, 0x64, 0xeb, 0x30, 0xe7, 0x61, 0x31, 0x46, 0x08, 0x75, 0xe4, 0x59,
		0xe9, 0x3a, 0xd0, 0x9f, 0xe6, 0xd0, 0x70, 0xcb, 0xd5, 0x98, 0x2a, 0xc3, 0x99, 0xda, 0xa1, 0x23,
		0x1d, 0x4a, 0xf7, 0x52, 0x55, 0xcf, 0xeb, 0xf5, 0xe6, 0x59, 0xbd, 0x5e, 0x39, 0x3b, 0x3d, 0xab,
		0xb4, 0x1a, 0x8d, 0x6a, 0x93, 0xbb, 0xe3, 0xa3, 0xd6, 0xd5, 0x2b, 0x48, 0xe8, 0xb9, 0x97, 0x57,
		0x10, 0x4c, 0x81, 0x52, 0xf7, 0x9f, 0xad, 0x28, 0x72, 0x23, 0xd3, 0xb5, 0xf9, 0x38, 0xd7, 0x9c,
		0x4c, 0x50, 0x2f, 0x50, 0x2f, 0x50, 0xaf, 0x82, 0x51, 0x2f, 0xb6, 0xfb, 0x51, 0x4c, 0xf7, 0xa1,
		0xf2, 0xb6, 0x7c, 0x26, 0x4b, 0x1e, 0xc7, 0x1a, 0xf3, 0x67, 0x72, 0x9c, 0xfb, 0xc1, 0x06, 0xc2,
		0x06, 0xc2, 0x06, 0x72, 0xdb, 0x40, 0x5e, 0x25, 0x5d, 0x30, 0x86, 0x75, 0x06, 0x59, 0x1d, 0x7f,
		0xf8, 0x32, 0x7a, 0xe1, 0xb7, 0x12, 0x1a, 0x56, 0x4e, 0x2a, 0x09, 0x0a, 0x09, 0xf3, 0x09, 0xf3,
		0x09, 0x0a, 0x59, 0x4c, 0x4b, 0xe7, 0x59, 0x51, 0x6c, 0x0e, 0x07, 0x36, 0x47, 0xe5, 0xbd, 0xd9,
		0x69, 0xed, 0x9c, 0x50, 0xd8, 0x3e, 0xd8, 0x3e, 0xd8, 0xbe, 0x82, 0xd9, 0x3e, 0xee, 0x83, 0x8b,
		0x3a, 0x0e, 0x2e, 0x88, 0x98, 0xa1, 0x29, 0x1a, 0xde, 0xaa, 0xd5, 0x4e, 0x4f, 0xcf, 0x6a, 0x95,
		0xd3, 0xe6, 0x79, 0xa3, 0x7e, 0x76, 0xd6, 0x38, 0xaf, 0x9c, 0xe3, 0x28, 0x83, 0x7b, 0xf1, 0x2a,
		0x99, 0x2d, 0xde, 0x19, 0x4e, 0x32, 0x64, 0xff, 0x94, 0xf1, 0x24, 0xe3, 0xc5, 0xf2, 0xad, 0xa7,
		0x24, 0xf9, 0xdc, 0xb4, 0x6c, 0x3b, 0x74, 0xa2, 0x88, 0x8f, 0x93, 0xad, 0x91, 0x0d, 0x6a, 0x06,
		0x6a, 0x06, 0x6a, 0x06, 0xb7, 0xb4, 0x14, 0x96, 0x90, 0xf9, 0x84, 0x63, 0xd3, 0x0f, 0xc0, 0x26,
		0xc2, 0x26, 0xc2, 0x26, 0xc2, 0x26, 0x16, 0xd0, 0x26, 0x0e, 0x82, 0x30, 0x36, 0x6d, 0x27, 0xea,
		0x87, 0xee, 0x80, 0xe5, 0xfa, 0x5e, 0x3a, 0xbf, 0x2b, 0x92, 0x61, 0x05, 0x61, 0x05, 0x61, 0x05,
		0x61, 0x05, 0x8b, 0x6a, 0x05, 0x39, 0xcf, 0x67, 0xa7, 0x02, 0x61, 0xf3, 0x60, 0xf3, 0x60, 0xf3,
		0x60, 0xf3, 0x8a, 0x6b, 0xf3, 0x98, 0x5d, 0xe0, 0x05, 0xa9, 0xb0, 0x7e, 0xb0, 0x7e, 0xb0, 0x7e,
		0x05, 0xb3, 0x7e, 0x8c, 0x1a, 0x7a, 0x8c, 0xf4, 0xbe, 0xd9, 0xb3, 0x47, 0xaf, 0x51, 0xec, 0xbc,
		0xe8, 0xf1, 0xa5, 0xd7, 0xc8, 0x86, 0x6d, 0x85, 0x6d, 0x85, 0x6d, 0xdd, 0x7f, 0x66, 0xc9, 0x20,
		0xeb, 0xca, 0xf1, 0x9f, 0x92, 0x12, 0x23, 0xb8, 0xbe, 0xab, 0x20, 0x16, 0xd7, 0x77, 0x4b, 0xb7,
		0x54, 0xb5, 0x06, 0x6e, 0xeb, 0x4a, 0xff, 0xe9, 0x95, 0x97, 0x7b, 0x4d, 0x0a, 0xf2, 0xf1, 0x92,
		0xae, 0x44, 0x28, 0xd8, 0x16, 0xd8, 0x16, 0xd8, 0x16, 0xd8, 0x16, 0xd8, 0x16, 0xd8, 0x16, 0xd8,
		0x16, 0xd8, 0xd6, 0x41, 0xb3, 0xad, 0x38, 0xf6, 0xf8, 0x58, 0xd6, 0x48, 0x18, 0xd8, 0x15, 0xd8,
		0x15, 0xd8, 0x55, 0xc1, 0xd8, 0xd5, 0xd0, 0xf5, 0xe3, 0x6a, 0x93, 0x91, 0x5d, 0x35, 0x71, 0x9f,
		0x0b, 0xdc, 0x0a, 0xdc, 0x8a, 0xb4, 0x54, 0xcd, 0x46, 0xe3, 0x14, 0xec, 0xaa, 0x3c, 0xec, 0xea,
		0xe0, 0xdb, 0x2f, 0x28, 0xf4, 0x34, 0x23, 0x94, 0x31, 0x3f, 0xd2, 0x38, 0xcd, 0xd3, 0xde, 0x35,
		0xd2, 0xd9, 0x7c, 0x6a, 0x9d, 0x69, 0x58, 0x3a, 0xd1, 0xb0, 0x74, 0x9e, 0x51, 0xeb, 0x34, 0x23,
		0x3b, 0xdb, 0x8a, 0x9b, 0x99, 0x73, 0x13, 0x1b, 0xa4, 0xea, 0xf8, 0x02, 0x9d, 0x61, 0xe4, 0xf4,
		0x42, 0x7c, 0x77, 0x8b, 0x7d, 0x53, 0x70, 0x45, 0xa8, 0x2b, 0xc1, 0xb0, 0x02, 0x62, 0xf3, 0xb3,
		0xfb, 0x6d, 0x05, 0xde, 0x54, 0xb2, 0x9d, 0x01, 0xa9, 0x7d, 0x81, 0xe4, 0xbd, 0x7c, 0xe9, 0xf6,
		0x04, 0x14, 0x87, 0x53, 0xc1, 0xb1, 0xa4, 0x3a, 0x90, 0xca, 0x8e, 0xa2, 0xb2, 0x43, 0xa8, 0xe6,
		0xf8, 0xf1, 0x6a, 0x97, 0x6c, 0x3b, 0x00, 0xa3, 0x1f, 0x0c, 0x47, 0x9a, 0x22, 0x7f, 0x7b, 0x7b,
		0x56, 0xdb, 0x6d, 0x2a, 0x41, 0x16, 0x00, 0x49, 0x65, 0x25, 0xc8, 0xf1, 0x14, 0x95, 0xf8, 0x09,
		0x43, 0xbc, 0x44, 0x35, 0x3e, 0xc2, 0x16, 0x0f, 0x61, 0x8b, 0x7f, 0xf0, 0xc4, 0x3b, 0xf4, 0x92,
		0x2c, 0x6a, 0x77, 0x0c, 0xe3, 0x31, 0xb4, 0x5e, 0x1c, 0xd3, 0x76, 0xa3, 0xbe, 0x15, 0x32, 0xf4,
		0xd2, 0x5a, 0x14, 0x87, 0xb6, 0x5a, 0x68, 0x4f, 0x93, 0x5b, 0x60, 0xb1, 0xac, 0x6d, 0xb5, 0x26,
		0x30, 0xa3, 0x54, 0x0b, 0x8a, 0xa1, 0x79, 0x05, 0x53, 0xac, 0x90, 0xa7, 0xa7, 0x28, 0x63, 0xb4,
		0x9d, 0xb7, 0x73, 0x35, 0x73, 0x2c, 0x50, 0x47, 0x50, 0xe9, 0x8d, 0xa7, 0x03, 0x6b, 0xe1, 0x97,
		0x40, 0x5f, 0xb3, 0x09, 0x2d, 0xab, 0x92, 0x53, 0x68, 0xad, 0x57, 0xe0, 0xd6, 0x78, 0x63, 0xf2,
		0xe0, 0x84, 0x61, 0x10, 0x9a, 0x0a, 0x3a, 0xbf, 0x44, 0x46, 0x52, 0x79, 0x60, 0x23, 0x60, 0x23,
		0x60, 0x23, 0x60, 0x23, 0x60, 0x23, 0x60, 0x23, 0x60, 0x23, 0x60, 0x23, 0x12, 0x6c, 0x24, 0x18,
		0xc6, 0xbc, 0x74, 0x64, 0x24, 0x10, 0x7c, 0x04, 0x7c, 0x04, 0x7c, 0x04, 0x7c, 0x04, 0x7c, 0x04,
		0x7c, 0x04, 0x7c, 0x04, 0x7c, 0x44, 0x88, 0x8f, 0xf0, 0xc5, 0x45, 0x10, 0x11, 0x01, 0x03, 0x01,
		0x03, 0x01, 0x03, 0x01, 0x03, 0x01, 0x03, 0x01, 0x03, 0x01, 0x03, 0x11, 0x65, 0x20, 0x8c, 0xb1,
		0x10, 0x44, 0x41, 0xc0, 0x41, 0xc0, 0x41, 0xc0, 0x41, 0xc0, 0x41, 0xc0, 0x41, 0xc0, 0x41, 0xc0,
		0x41, 0x04, 0xa6, 0x39, 0x69, 0x63, 0xda, 0xf7, 0x1c, 0x2b, 0x54, 0x27, 0x21, 0x73, 0xb2, 0xc0,
		0x42, 0xc0, 0x42, 0xc0, 0x42, 0x24, 0x77, 0x8c, 0x6d, 0xc5, 0x8e, 0x69, 0xf9, 0xb6, 0x19, 0xbb,
		0x4a, 0x35, 0xbe, 0x38, 0xea, 0x07, 0x19, 0x37, 0x56, 0x1c, 0x3b, 0xa1, 0xaf, 0x4c, 0x46, 0x8c,
		0xfb, 0x7b, 0xfb, 0x47, 0xfd, 0xcd, 0x1c, 0xfd, 0xab, 0x36, 0xfd, 0x57, 0x77, 0xfc, 0xaf, 0x0f,
		0x0b, 0xff, 0xfa, 0xf9, 0xfe, 0xfe, 0xfd, 0xfd, 0xbd, 0xfd, 0x3f, 0xbf, 0xfc, 0x9f, 0x9f, 0xff,
		0xff, 0xbf, 0x5f, 0xef, 0xef, 0xff, 0xe7, 0xfe, 0xde, 0xec, 0x2d, 0x7c, 0xe3, 0x17, 0x63, 0x2f,
		0x6d, 0x70, 0xec, 0x7d, 0xe7, 0xbb, 0x31, 0x30, 0x2f, 0x0c, 0x56, 0x18, 0x56, 0x18, 0x56, 0x18,
		0xbe, 0x20, 0x7c, 0x41, 0xf8, 0x82, 0xf0, 0x05, 0xe1, 0x0b, 0x0a, 0xf0, 0x90, 0xa1, 0xff, 0x97,
		0x1f, 0xfc, 0xed, 0xf3, 0xf0, 0x90, 0xa9, 0x30, 0xf0, 0x10, 0xf0, 0x10, 0xf0, 0x10, 0xf0, 0x10,
		0xf0, 0x10, 0xf0, 0x10, 0xf0, 0x90, 0xc3, 0xe2, 0x21, 0xfb, 0x59, 0x9d, 0x29, 0xa9, 0xb7, 0x73,
		0x42, 0xac, 0x60, 0x72, 0xbc, 0xb3, 0x32, 0xd3, 0xa7, 0xa9, 0x60, 0x5d, 0x95, 0x99, 0x24, 0xca,
		0xeb, 0x38, 0xbe, 0xf5, 0xcd, 0x73, 0x6c, 0x7a, 0x9d, 0x97, 0xa9, 0x00, 0xd9, 0x12, 0x1c, 0xce,
		0xa3, 0x35, 0xf4, 0x12, 0x0e, 0x30, 0xa2, 0x14, 0xc4, 0x2a, 0x31, 0x15, 0x54, 0x89, 0xc9, 0x94,
		0x14, 0x1e, 0x54, 0x95, 0x18, 0x32, 0xd9, 0x4b, 0x57, 0xfc, 0x5b, 0x10, 0x78, 0x8e, 0x45, 0xf1,
		0x90, 0xd2, 0x20, 0x7f, 0xb5, 0x00, 0x36, 0x82, 0xd4, 0xe9, 0x24, 0x9d, 0x04, 0x42, 0x4b, 0x13,
		0xa8, 0x37, 0xd4, 0xbb, 0x0c, 0xea, 0x6d, 0x45, 0x8e, 0x99, 0xb2, 0x06, 0x33, 0x74, 0x1e, 0x55,
		0x34, 0xfd, 0x8c, 0x30, 0xf6, 0x26, 0xe5, 0x36, 0x7d, 0xd3, 0x7d, 0xfc, 0x30, 0x47, 0x66, 0x96,
		0xfe, 0x62, 0xf2, 0x39, 0xd1, 0x45, 0xd4, 0x83, 0xdc, 0xc8, 0xf9, 0xd8, 0x6a, 0x41, 0x1e, 0x29,
		0xcc, 0xc1, 0xb4, 0x06, 0xac, 0x80, 0xe1, 0x94, 0xab, 0xfa, 0x4a, 0xaa, 0xf2, 0x4a, 0xaa, 0xea,
		0x2a, 0x57, 0xc5, 0x75, 0xd7, 0x7c, 0x48, 0xee, 0x05, 0xf2, 0x1e, 0x30, 0x84, 0x2a, 0x78, 0x6e,
		0x26, 0xf6, 0xdb, 0x77, 0xcf, 0xe6, 0x3d, 0xb1, 0xfe, 0xff, 0x6c, 0x98, 0x15, 0xd1, 0xd9, 0x90,
		0x9c, 0x85, 0xf5, 0xcf, 0xbe, 0xfa, 0x64, 0x6b, 0x9e, 0x6a, 0x47, 0x55, 0x53, 0xa1, 0x2a, 0xa6,
		0x3b, 0xca, 0x3e, 0xee, 0xac, 0x52, 0x2a, 0x82, 0xe0, 0x12, 0x48, 0x2d, 0x8a, 0xc8, 0xd2, 0xc8,
		0x2b, 0x8d, 0xb0, 0x72, 0x48, 0x2a, 0xb7, 0x93, 0x76, 0x95, 0x41, 0x34, 0xfa, 0xcf, 0x56, 0x14,
		0xb9, 0x91, 0xe9, 0xee, 0xf6, 0x0f, 0x67, 0x81, 0xcd, 0xd9, 0x98, 0x5d, 0x66, 0x4e, 0x88, 0xe4,
		0x09, 0x93, 0x3a, 0x19, 0x12, 0x47, 0x20, 0x6d, 0xb2, 0x24, 0x8d, 0x4c, 0xca, 0xc8, 0x24, 0x8c,
		0x46, 0xba, 0xd4, 0xa0, 0x4a, 0x98, 0x44, 0xc9, 0xf7, 0x51, 0x9b, 0xe5, 0x39, 0x51, 0xcd, 0xea,
		0x3b, 0x91, 0x9d, 0x3d, 0x6e, 0x4d, 0x4e, 0xd8, 0xde, 0x22, 0x3d, 0xcd, 0xb1, 0xc7, 0x0f, 0x72,
		0x8f, 0xcb, 0x6d, 0x92, 0x63, 0xc9, 0xc6, 0xf6, 0x82, 0x8d, 0xeb, 0x89, 0x8a, 0x21, 0x5a, 0xf8,
		0x59, 0xb6, 0xd0, 0xb3, 0x60, 0x61, 0x67, 0xa8, 0x42, 0x91, 0x55, 0x41, 0xb4, 0x70, 0xb2, 0xe1,
		0xf8, 0x71, 0xe8, 0x3a, 0x91, 0x69, 0x3d, 0x39, 0xb6, 0xd4, 0x1d, 0xb8, 0xb9, 0xb8, 0xf2, 0x92,
		0x04, 0xb9, 0xf2, 0xf7, 0x15, 0xd9, 0xf2, 0xf7, 0x15, 0x94, 0xbf, 0x67, 0x0d, 0x05, 0x15, 0xa9,
		0xfc, 0xbd, 0x74, 0xa8, 0x47, 0xe9, 0x98, 0x9e, 0x70, 0x2c, 0x4f, 0x3c, 0x86, 0xa7, 0x35, 0x7a,
		0x51, 0x88, 0x33, 0xaa, 0xa5, 0xec, 0x28, 0x1e, 0xa3, 0x73, 0x1c, 0xd0, 0xbe, 0xd1, 0xda, 0xda,
		0xe4, 0x3e, 0x65, 0x7c, 0xc7, 0xde, 0x2c, 0xb3, 0xa8, 0x29, 0x84, 0xd8, 0xcb, 0xb0, 0x15, 0x0b,
		0xad, 0x94, 0xbf, 0x52, 0xe9, 0x7e, 0x60, 0x13, 0xb0, 0x09, 0xd8, 0x04, 0x6c, 0x02, 0x36, 0x01,
		0x9b, 0x04, 0xb0, 0x49, 0xba, 0xb4, 0xbb, 0x5a, 0x29, 0x77, 0xa0, 0x13, 0xd0, 0x09, 0xe8, 0x04,
		0x74, 0x02, 0x3a, 0x01, 0x9d, 0x04, 0xd0, 0x89, 0x8e, 0x4b, 0x40, 0x24, 0x20, 0x12, 0x10, 0x09,
		0x88, 0x04, 0x44, 0x02, 0x22, 0x71, 0x22, 0x12, 0xe9, 0x98, 0x49, 0xb6, 0xb4, 0x22, 0x30, 0x09,
		0x98, 0x04, 0x4c, 0x02, 0x26, 0x01, 0x93, 0x80, 0x49, 0x5b, 0xa7, 0x81, 0x50, 0x7a, 0x8f, 0x5e,
		0x6a, 0x0f, 0xa8, 0x04, 0x54, 0x62, 0x44, 0x25, 0x6a, 0xa9, 0x3a, 0x4a, 0x69, 0x3a, 0x72, 0x29,
		0xba, 0x9c, 0x4a, 0xcf, 0x65, 0x69, 0x43, 0x62, 0xef, 0xbb, 0x69, 0xf5, 0xfb, 0xce, 0x20, 0x76,
		0x08, 0x47, 0xd4, 0x0b, 0xa3, 0x61, 0x47, 0x60, 0x47, 0xc0, 0x6e, 0xc1, 0x6e, 0xc1, 0x6e, 0xc1,
		0x6e, 0x99, 0x90, 0x89, 0x9c, 0x3b, 0x25, 0x5f, 0xc4, 0x14, 0xb8, 0x04, 0x5c, 0x02, 0x2e, 0x01,
		0x97, 0x80, 0x4b, 0xc0, 0xa5, 0x9d, 0xb8, 0x24, 0x5b, 0xe4, 0x52, 0xa1, 0xa8, 0x25, 0x70, 0x09,
		0xb8, 0x04, 0x5c, 0x02, 0x2e, 0x01, 0x97, 0x0e, 0x19, 0x97, 0x0a, 0x57, 0xdc, 0x44, 0xba, 0x7e,
		0xe1, 0xba, 0xb2, 0x26, 0x62, 0x55, 0x0a, 0x69, 0xb7, 0x8c, 0x45, 0xab, 0x0e, 0x4a, 0x56, 0x19,
		0x94, 0xac, 0x2a, 0x88, 0xdb, 0xf9, 0xcc, 0x68, 0x5c, 0x8e, 0xdb, 0xf9, 0xe2, 0x55, 0xf9, 0x04,
		0xab, 0xf0, 0xd1, 0x74, 0xe0, 0xd9, 0xf1, 0xbc, 0x20, 0x39, 0x61, 0x09, 0xc5, 0xf5, 0x60, 0x7e,
		0x10, 0x36, 0x37, 0x36, 0xf7, 0xca, 0x8c, 0x0f, 0x5d, 0x3f, 0x16, 0xe2, 0x8f, 0x12, 0xbc, 0x51,
		0x92, 0x2f, 0x4a, 0x10, 0x5f, 0x0a, 0x3f, 0xa4, 0x16, 0x87, 0x24, 0xf2, 0x41, 0x15, 0x06, 0x23,
		0x53, 0x64, 0x93, 0xc2, 0xfb, 0x54, 0xa7, 0x42, 0x9d, 0xe7, 0x29, 0xcd, 0x0e, 0x13, 0xff, 0xea,
		0x69, 0x30, 0xce, 0xd1, 0x70, 0x30, 0x08, 0x9d, 0x28, 0x32, 0x93, 0x43, 0x54, 0xfb, 0xbb, 0x13,
		0xc6, 0x6e, 0xe4, 0x4c, 0xb4, 0x5f, 0xd0, 0x56, 0x6f, 0x91, 0x01, 0xd3, 0x0d, 0xd3, 0xbd, 0x32,
		0xe3, 0xae, 0xed, 0xf8, 0xb1, 0x1b, 0xbf, 0x8a, 0xd5, 0x11, 0x4d, 0xb9, 0x89, 0x80, 0xc6, 0x1a,
		0x97, 0x13, 0xd1, 0x1f, 0xad, 0xc8, 0x91, 0x8f, 0x8b, 0x5d, 0x5d, 0x5d, 0xdc, 0x3c, 0x74, 0xaf,
		0xfe, 0x23, 0xba, 0x4c, 0x89, 0x79, 0x89, 0xa4, 0xe2, 0x0b, 0xc4, 0xda, 0xc2, 0x37, 0xd7, 0xb7,
		0xdd, 0x87, 0xcb, 0x0b, 0x43, 0x87, 0x45, 0x26, 0x3e, 0xd2, 0xdd, 0xff, 0xbb, 0xeb, 0x76, 0x3e,
		0x3f, 0x5c, 0x74, 0xee, 0x3e, 0xdd, 0x5e, 0xde, 0x74, 0x2f, 0xaf, 0xbf, 0x14, 0xf0, 0xe9, 0x3e,
		0xb5, 0x6f, 0xda, 0x1f, 0x2f, 0xaf, 0x2e, 0xbb, 0x97, 0x9d, 0xbb, 0x22, 0x3d, 0xde, 0xa7, 0xff,
		0xdb, 0xbe, 0xbb, 0xbb, 0xbc, 0x2b, 0xd8, 0x92, 0x7e, 0x6e, 0x7f, 0x69, 0xff, 0xd6, 0xf9, 0xdc,
		0xf9, 0xd2, 0x7d, 0x68, 0x5f, 0x5c, 0xdc, 0x76, 0xee, 0x0a, 0x35, 0x67, 0x89, 0x0e, 0x14, 0x7b,
		0xbb, 0x7d, 0x69, 0x7f, 0xee, 0x70, 0x47, 0x63, 0x7b, 0x9a, 0xed, 0xf7, 0x7e, 0x54, 0xd6, 0xa5,
		0x91, 0x9f, 0xd7, 0x28, 0x76, 0x5e, 0x4c, 0xdb, 0x89, 0xfa, 0xa1, 0x3b, 0x10, 0x0a, 0x4d, 0xcd,
		0x48, 0xcf, 0xea, 0x58, 0x90, 0x1d, 0x90, 0x9d, 0xd5, 0x7d, 0x22, 0x5f, 0x06, 0x54, 0xe0, 0xbb,
		0x57, 0x8e, 0xff, 0x94, 0x04, 0x46, 0xe1, 0xa9, 0xee, 0x97, 0xa7, 0x5a, 0x6b, 0xc0, 0x31, 0x9d,
		0xb7, 0xcd, 0x42, 0x2d, 0x39, 0x96, 0x8d, 0xb2, 0x48, 0x41, 0x79, 0x58, 0x63, 0x58, 0x63, 0x58,
		0x63, 0x58, 0x63, 0x58, 0xe3, 0xed, 0xff, 0x27, 0x8b, 0xee, 0x0c, 0x5b, 0x5a, 0x92, 0xac, 0x69,
		0xcc, 0x70, 0xb4, 0xe5, 0xf1, 0x76, 0x3d, 0x96, 0xc8, 0xe3, 0x18, 0x6b, 0x3b, 0x3f, 0x2c, 0x1f,
		0x1b, 0x2f, 0x3e, 0xee, 0xec, 0xa1, 0xe6, 0x1e, 0xc8, 0x88, 0xe2, 0xc1, 0xca, 0x53, 0xcc, 0x99,
		0xa2, 0xe5, 0x5f, 0xda, 0x50, 0x39, 0x7a, 0x23, 0x06, 0x6d, 0xc3, 0x9c, 0x79, 0x8c, 0x59, 0xfd,
		0x25, 0x11, 0x48, 0x11, 0x86, 0x10, 0x61, 0xc8, 0x58, 0x86, 0x88, 0xd1, 0x73, 0x49, 0x2e, 0xef,
		0xa6, 0xba, 0xcc, 0xc6, 0x93, 0x17, 0x7c, 0xb3, 0xbc, 0xdd, 0xbd, 0x39, 0x26, 0xdf, 0x53, 0x6c,
		0xce, 0x51, 0xe1, 0x69, 0xce, 0xb1, 0x7e, 0x61, 0x64, 0x31, 0x3f, 0xfb, 0xde, 0x1c, 0x6b, 0x17,
		0x8e, 0x66, 0x46, 0x76, 0xb7, 0xe6, 0x98, 0xce, 0xb9, 0x70, 0x95, 0xf6, 0xe4, 0xfb, 0xe5, 0xa8,
		0xd1, 0xbe, 0x7d, 0x03, 0x94, 0x97, 0xfc, 0x6d, 0xdd, 0x20, 0x3c, 0xdc, 0x4f, 0xb8, 0x42, 0xfb,
		0xb7, 0x81, 0x3d, 0x34, 0x1f, 0x5d, 0x2f, 0x76, 0x08, 0x17, 0x94, 0xe7, 0x07, 0xef, 0x47, 0xa6,
		0xac, 0xd8, 0x96, 0xa3, 0x6e, 0x3d, 0xe5, 0x2d, 0xa8, 0xbc, 0x15, 0x95, 0xb6, 0xa4, 0x24, 0x15,
		0xd3, 0x9e, 0x27, 0x2b, 0xdf, 0x57, 0x53, 0xb2, 0x9f, 0x26, 0x4f, 0x32, 0x7a, 0xa2, 0x25, 0x4f,
		0x43, 0xd2, 0x1d, 0xa9, 0xb9, 0xb1, 0x50, 0x30, 0x28, 0x18, 0x14, 0x6c, 0x93, 0x82, 0x25, 0x3a,
		0x92, 0x64, 0xc4, 0x05, 0xc3, 0xd8, 0x0c, 0x9d, 0x7e, 0xf0, 0xdd, 0x09, 0x5f, 0x69, 0x0a, 0xb7,
		0x41, 0x16, 0x14, 0x10, 0x0a, 0x98, 0xb1, 0x02, 0x0e, 0x5d, 0x3f, 0x3e, 0x27, 0xa8, 0x5f, 0x03,
		0xb7, 0x40, 0x58, 0xa2, 0x77, 0x1c, 0x81, 0x2b, 0x42, 0x34, 0x4f, 0x29, 0xaa, 0xc7, 0x3d, 0x65,
		0xd2, 0x51, 0x3e, 0xd6, 0x49, 0xdb, 0x83, 0xcb, 0x88, 0xdf, 0x42, 0xd7, 0x7e, 0x72, 0x4c, 0x2b,
		0x8a, 0x86, 0xa1, 0xe5, 0xf7, 0x09, 0x99, 0x57, 0x2b, 0x12, 0x00, 0x45, 0x80, 0x22, 0x70, 0xc1,
		0x75, 0xbf, 0x39, 0xb9, 0x21, 0x64, 0x0e, 0xc2, 0x20, 0x0e, 0xfa, 0x81, 0x47, 0xe9, 0x38, 0xb7,
		0x24, 0x01, 0xca, 0x06, 0x65, 0xcb, 0x58, 0xd9, 0xe4, 0x72, 0x80, 0x57, 0x14, 0x4e, 0x86, 0xfe,
		0x91, 0x72, 0x82, 0x57, 0x1e, 0xf8, 0xae, 0x7b, 0xf3, 0x70, 0x73, 0x7b, 0xdd, 0xbd, 0xfe, 0x74,
		0x7d, 0x65, 0x50, 0x8e, 0x13, 0x23, 0x69, 0x06, 0x4a, 0x63, 0xa1, 0x0b, 0x4f, 0x7d, 0xdb, 0xbe,
		0xb9, 0xbc, 0x78, 0xb8, 0xf9, 0xcf, 0x5d, 0xd7, 0xc8, 0x82, 0xce, 0x29, 0x3e, 0xed, 0xe7, 0xbb,
		0xee, 0x4d, 0x19, 0x9e, 0xf3, 0x96, 0xf6, 0x9c, 0x52, 0x23, 0x7a, 0x39, 0xa9, 0xb4, 0x54, 0x3a,
		0xe8, 0xbc, 0xe7, 0x23, 0x9d, 0xe1, 0x39, 0xef, 0x03, 0xd0, 0x07, 0x4b, 0xa5, 0x89, 0x32, 0x23,
		0x71, 0xfc, 0xec, 0x84, 0xfd, 0x67, 0xcb, 0xf7, 0x1d, 0xcf, 0x7c, 0x71, 0xa3, 0xc9, 0x41, 0x32,
		0x31, 0x10, 0xba, 0x55, 0x1a, 0x10, 0x1a, 0x08, 0x0d, 0x3a, 0xbc, 0xee, 0x37, 0xbd, 0x20, 0x18,
		0x50, 0x55, 0x6e, 0x6e, 0x2c, 0x14, 0x0c, 0x0a, 0x76, 0x80, 0x0a, 0x56, 0x90, 0x8a, 0x1e, 0xd1,
		0xc0, 0xf2, 0x7d, 0xd7, 0x7f, 0x32, 0xe3, 0xd0, 0x71, 0x4e, 0xa2, 0x78, 0x70, 0x32, 0xce, 0xd3,
		0x39, 0x99, 0x64, 0x73, 0xe8, 0xc8, 0x2f, 0x4e, 0x72, 0xce, 0xc4, 0x33, 0x8b, 0x93, 0xaf, 0x33,
		0x67, 0x95, 0xd4, 0x90, 0x55, 0xc2, 0xae, 0xe5, 0xc8, 0x2a, 0x01, 0xf0, 0x00, 0x78, 0xf6, 0x81,
		0xd9, 0x21, 0xab, 0x04, 0x0a, 0x06, 0x05, 0xd3, 0xac, 0x60, 0xc8, 0x2a, 0x81, 0x02, 0xee, 0x9f,
		0x02, 0x22, 0xab, 0x84, 0xa6, 0x55, 0x2b, 0xc3, 0x91, 0x55, 0x42, 0x9e, 0x32, 0x64, 0x95, 0xa8,
		0xc2, 0x13, 0xb2, 0x4a, 0x00, 0x45, 0xe0, 0x82, 0xd9, 0x28, 0x1b, 0xb2, 0x4a, 0xa0, 0x6c, 0xc8,
		0x2a, 0x41, 0x56, 0x89, 0xd0, 0x53, 0x23, 0xab, 0x44, 0xcb, 0xac, 0x22, 0xab, 0x64, 0xd5, 0xf3,
		0x41, 0x56, 0x09, 0xb2, 0x4a, 0x80, 0xd0, 0xa0, 0xc3, 0xc8, 0x2a, 0x81, 0x82, 0x41, 0xc1, 0x4a,
		0xa2, 0x60, 0x45, 0xcf, 0x2a, 0xd9, 0x52, 0x6f, 0x68, 0xf7, 0x3b, 0x64, 0x5d, 0x26, 0x69, 0xd3,
		0x5b, 0x18, 0x5b, 0x93, 0x5b, 0xe6, 0xcb, 0x15, 0xdd, 0xc5, 0x83, 0x87, 0xdf, 0xc6, 0x63, 0x44,
		0x6b, 0x2c, 0xad, 0x29, 0x17, 0xe4, 0xfa, 0xb1, 0x13, 0x3e, 0x5a, 0xfd, 0xc4, 0xe5, 0xd8, 0x51,
		0x65, 0x67, 0xee, 0xbb, 0xa8, 0xb4, 0x53, 0x96, 0x4a, 0x3b, 0xe9, 0xa2, 0x89, 0x67, 0x45, 0xcd,
		0x86, 0xa0, 0xde, 0x0e, 0x32, 0xa3, 0xc6, 0x5f, 0x14, 0x2c, 0xd8, 0xb4, 0xb2, 0x3c, 0x42, 0x85,
		0x9b, 0x24, 0x37, 0x14, 0x28, 0xd3, 0xe1, 0x50, 0x26, 0xd1, 0x0d, 0x9a, 0x0e, 0xa0, 0xa4, 0xf0,
		0xad, 0xd2, 0x2d, 0xe9, 0x54, 0x3e, 0x22, 0xeb, 0x27, 0x6f, 0x65, 0x95, 0x2d, 0xad, 0xbe, 0xb5,
		0x55, 0xb7, 0x38, 0xdb, 0x56, 0x67, 0xdb, 0xf2, 0x2c, 0x5b, 0x9f, 0x16, 0xbd, 0x93, 0x8c, 0x49,
		0xca, 0x7b, 0x11, 0x0c, 0xde, 0x04, 0xd1, 0xab, 0x90, 0x9f, 0x10, 0x99, 0xda, 0xb1, 0x84, 0x54,
		0xc2, 0xf5, 0x9a, 0x2e, 0xe3, 0xd6, 0x43, 0xd1, 0xa1, 0xe8, 0x50, 0xf4, 0x6c, 0x15, 0xdd, 0xb1,
		0x9f, 0x1c, 0x73, 0x10, 0x84, 0x31, 0x5d, 0xcf, 0x67, 0x22, 0xa0, 0xe6, 0x50, 0xf3, 0x3d, 0x53,
		0x73, 0xda, 0x01, 0xf9, 0x8a, 0xaa, 0x13, 0x32, 0xdb, 0xd4, 0x0e, 0xcc, 0x57, 0x5e, 0xe4, 0xae,
		0x7b, 0xf3, 0xd0, 0xb9, 0xf8, 0xad, 0xf3, 0x70, 0x73, 0x7d, 0xdb, 0x35, 0x54, 0x52, 0xf5, 0x68,
		0x27, 0xe8, 0xd3, 0x3f, 0x3f, 0xc8, 0x23, 0x17, 0x5e, 0x27, 0x79, 0x95, 0x8b, 0xcb, 0xbb, 0xf6,
		0xc7, 0xab, 0x8e, 0x41, 0x16, 0xf9, 0xf6, 0xae, 0x10, 0xef, 0xd1, 0xfe, 0xa3, 0x7b, 0x5d, 0xfa,
		0x97, 0xe8, 0x7c, 0x51, 0x5c, 0x0b, 0xd2, 0xc8, 0x5e, 0x61, 0x32, 0x3d, 0x65, 0x50, 0x57, 0x91,
		0x59, 0x83, 0x54, 0x03, 0x6d, 0xf7, 0x12, 0x6d, 0xa3, 0x78, 0x72, 0x10, 0x6c, 0xc6, 0x23, 0x59,
		0x0a, 0x80, 0x5b, 0x27, 0x8c, 0xed, 0xf8, 0xc3, 0x97, 0xd1, 0xf3, 0x17, 0xc1, 0x42, 0x78, 0xae,
		0xff, 0xd7, 0x78, 0x12, 0xc8, 0x56, 0x62, 0x26, 0x02, 0x96, 0x02, 0x96, 0x62, 0x0f, 0x2d, 0x05,
		0x75, 0x83, 0xef, 0x95, 0xa1, 0x10, 0xea, 0xf7, 0xb6, 0x71, 0x1a, 0x05, 0x1a, 0xbf, 0xc1, 0x3c,
		0xc0, 0x3c, 0x94, 0x2f, 0x3a, 0x67, 0x45, 0x8e, 0x99, 0x1e, 0xb6, 0x9b, 0x8a, 0xde, 0xfb, 0x19,
		0x61, 0xec, 0x4d, 0x9a, 0x99, 0xd2, 0x37, 0xdd, 0xc7, 0x0f, 0xb3, 0x04, 0x8f, 0xe5, 0xbf, 0x98,
		0x7c, 0x4e, 0x34, 0x51, 0x97, 0x3d, 0x61, 0x3d, 0x37, 0x94, 0xcc, 0x37, 0x4a, 0xc7, 0xc9, 0x64,
		0xec, 0xcc, 0x4d, 0xd7, 0x6c, 0xa2, 0x44, 0x6a, 0xdb, 0x88, 0xbf, 0xb2, 0x48, 0x56, 0xa3, 0x94,
		0x71, 0xa5, 0x18, 0x55, 0x64, 0x32, 0x1e, 0xe3, 0x58, 0x5e, 0xd1, 0xf8, 0xcd, 0x08, 0xbf, 0x63,
		0x3d, 0x12, 0x2f, 0xf2, 0x48, 0x58, 0xb8, 0xd4, 0xb2, 0xbd, 0x7f, 0x3f, 0xd1, 0xc8, 0x13, 0x71,
		0xdb, 0xc5, 0xa3, 0x96, 0x62, 0xa5, 0xa8, 0xd6, 0x70, 0xc6, 0xdd, 0x25, 0xa9, 0x56, 0x66, 0x46,
		0x56, 0x31, 0x6b, 0x50, 0xcc, 0x3d, 0x55, 0x4c, 0xe4, 0xcb, 0x80, 0xa8, 0x83, 0xa8, 0x73, 0x13,
		0x75, 0xe4, 0xcb, 0x20, 0x5f, 0x06, 0x8a, 0x0e, 0x45, 0x2f, 0x89, 0xa2, 0x23, 0x5f, 0x06, 0x6a,
		0x0e, 0x35, 0xdf, 0xbc, 0xde, 0xc8, 0x97, 0x99, 0x17, 0x86, 0x7c, 0x19, 0x2d, 0xef, 0x81, 0x7c,
		0x19, 0xe4, 0xcb, 0xc8, 0xcc, 0x37, 0x48, 0x35, 0xd0, 0x16, 0xf9, 0x32, 0x5b, 0x01, 0x17, 0xf9,
		0x32, 0xc8, 0x97, 0x81, 0xa5, 0x40, 0xbe, 0xcc, 0xde, 0x1b, 0x0a, 0xe4, 0xcb, 0xc0, 0x3c, 0xc0,
		0x3c, 0xac, 0x44, 0xe7, 0x90, 0x2f, 0x23, 0xfd, 0xcd, 0xc2, 0xe7, 0xcb, 0x08, 0x54, 0xed, 0x11,
		0x7f, 0x63, 0xb5, 0x62, 0x18, 0xbf, 0x3b, 0xaf, 0x82, 0xe6, 0x53, 0xae, 0xf2, 0x21, 0xa9, 0xe2,
		0x21, 0xa9, 0xd2, 0xa1, 0x5c, 0x85, 0xc3, 0x3c, 0x6b, 0x36, 0xad, 0xdb, 0x0b, 0x86, 0x50, 0x56,
		0xc5, 0x72, 0x0d, 0xa4, 0xcb, 0x74, 0x78, 0x69, 0x4b, 0x3f, 0xcd, 0x15, 0x56, 0x52, 0x28, 0xe5,
		0xf4, 0x32, 0x32, 0xfa, 0x3b, 0x8b, 0x38, 0xbd, 0x6c, 0x86, 0x4c, 0x94, 0x6f, 0x62, 0x00, 0x57,
		0xe6, 0xf2, 0x4d, 0x82, 0x75, 0x77, 0xe4, 0xea, 0xed, 0xa0, 0x70, 0x13, 0x2f, 0x1b, 0x2b, 0x72,
		0xe1, 0xa6, 0xc7, 0x20, 0xfc, 0xdb, 0x0a, 0xed, 0x91, 0xbd, 0xb1, 0x1d, 0xcf, 0x22, 0x34, 0x01,
		0x5a, 0x91, 0x80, 0xac, 0xd1, 0x0c, 0x5d, 0x05, 0x64, 0x8d, 0xa2, 0xf5, 0x8f, 0xba, 0xa3, 0x9e,
		0x0e, 0x9f, 0xf6, 0xb1, 0xa9, 0xa3, 0xf5, 0x8f, 0xec, 0x94, 0x9d, 0x56, 0xd0, 0xf9, 0x47, 0x61,
		0x4d, 0x8d, 0x67, 0xc7, 0xf3, 0x82, 0xa4, 0x91, 0x9c, 0x3c, 0x06, 0xcd, 0x8d, 0x05, 0xfa, 0x00,
		0x7d, 0x80, 0x3e, 0xe5, 0x46, 0x9f, 0x2a, 0xd0, 0x47, 0x7a, 0xca, 0x80, 0x3e, 0x6a, 0xe8, 0x13,
		0x78, 0xb6, 0xd9, 0x0f, 0x86, 0x7e, 0x4c, 0x40, 0x9f, 0xd9, 0x58, 0xd1, 0x6b, 0x18, 0xce, 0xa3,
		0x35, 0xf4, 0x12, 0xa3, 0xd7, 0x04, 0x62, 0x01, 0xb1, 0x80, 0x58, 0x40, 0x2c, 0x20, 0x16, 0x10,
		0x4b, 0x06, 0xb1, 0x5e, 0xac, 0x7f, 0x4c, 0xeb, 0x89, 0xe0, 0x2c, 0x4d, 0x07, 0x02, 0x77, 0x80,
		0x3b, 0xc0, 0x9d, 0x72, 0xe3, 0x4e, 0x13, 0xb8, 0x23, 0x1d, 0xda, 0x04, 0xee, 0x28, 0xe3, 0xce,
		0x73, 0x30, 0xa0, 0xe1, 0xce, 0x68, 0x20, 0x70, 0x07, 0xb8, 0x03, 0xdc, 0x81, 0xbf, 0x73, 0x60,
		0xb8, 0x53, 0x6b, 0x34, 0x00, 0x3c, 0x2a, 0xc0, 0x83, 0x42, 0x56, 0x80, 0x9c, 0xf2, 0x40, 0x4e,
		0x14, 0x87, 0xae, 0xff, 0x44, 0xa9, 0x63, 0x75, 0x2e, 0x31, 0xe6, 0xca, 0xf1, 0x9f, 0x92, 0x14,
		0x42, 0xa0, 0x0e, 0x50, 0x67, 0xdd, 0x94, 0x9d, 0xd6, 0x00, 0x3a, 0x2a, 0xa0, 0x13, 0x3a, 0xdf,
		0xdd, 0x48, 0x26, 0xed, 0x3d, 0x35, 0x00, 0xe9, 0x48, 0x80, 0x0f, 0xc0, 0x27, 0x07, 0x7f, 0xe7,
		0xb4, 0x46, 0x00, 0x9f, 0x33, 0x38, 0x3c, 0xeb, 0xed, 0x68, 0x05, 0xd0, 0x23, 0x1d, 0x68, 0xab,
		0xb5, 0xea, 0xad, 0xe6, 0x59, 0xad, 0x05, 0xbf, 0x87, 0xf8, 0x8d, 0x3c, 0x6f, 0xe0, 0xbc, 0x8c,
		0xfe, 0x21, 0x52, 0xad, 0x78, 0xcb, 0xcd, 0x99, 0x2d, 0xb7, 0x37, 0x5e, 0xa2, 0xd8, 0x74, 0xfd,
		0x28, 0xb6, 0xfc, 0x6d, 0xbd, 0xc5, 0x57, 0x63, 0x88, 0x0b, 0xc3, 0x70, 0x8d, 0x01, 0xd7, 0x18,
		0x56, 0xb7, 0x13, 0x21, 0x32, 0x3d, 0x3f, 0x1a, 0xbd, 0xa8, 0x41, 0xd7, 0x48, 0x74, 0x4d, 0xba,
		0xb6, 0xae, 0x64, 0xd3, 0xf4, 0x95, 0x65, 0x96, 0x6a, 0x9e, 0x4e, 0xdc, 0xb8, 0xe4, 0x0d, 0xac,
		0xb2, 0x91, 0xd5, 0x37, 0xb4, 0xea, 0xc6, 0x66, 0xdb, 0xe0, 0x6c, 0x1b, 0x9d, 0x65, 0xc3, 0x13,
		0x69, 0x91, 0xe4, 0x8a, 0xcb, 0x2a, 0x42, 0x3a, 0xf0, 0x5b, 0xe8, 0x26, 0x75, 0x25, 0x43, 0x37,
		0x08, 0xdd, 0xf8, 0x55, 0xbd, 0x00, 0xde, 0xb2, 0xc0, 0x77, 0xb9, 0x10, 0x62, 0xaa, 0xea, 0x70,
		0xa8, 0x10, 0x9f, 0x2a, 0x71, 0xa9, 0x14, 0xbb, 0x6a, 0xb1, 0xab, 0x18, 0xab, 0xaa, 0xd1, 0x54,
		0x4e, 0xc1, 0xf7, 0x3b, 0x56, 0xaa, 0xa6, 0xb1, 0xb2, 0x5f, 0xa2, 0x78, 0x60, 0x2e, 0xa9, 0x11,
		0xb5, 0xfe, 0x8e, 0x42, 0xb0, 0x81, 0x29, 0xf8, 0xa0, 0x1e, 0x8c, 0x60, 0x0d, 0x4e, 0x30, 0x1b,
		0x9a, 0x8d, 0x9e, 0x78, 0x95, 0x49, 0x1e, 0x83, 0x43, 0xce, 0xb4, 0xc1, 0xd9, 0x82, 0x1d, 0x59,
		0x2d, 0x41, 0xb3, 0x5a, 0xad, 0xd7, 0x2b, 0x05, 0x5e, 0x87, 0xa3, 0x7c, 0x46, 0xf7, 0x8e, 0xb2,
		0xf9, 0x3d, 0x4a, 0x10, 0x2d, 0x71, 0x0b, 0x6d, 0x75, 0x16, 0x32, 0x91, 0x03, 0xf2, 0x01, 0xf2,
		0x01, 0xf2, 0x21, 0xb5, 0x5f, 0x86, 0xae, 0x1f, 0x57, 0x9b, 0x0c, 0x54, 0xa3, 0x09, 0xaa, 0x01,
		0xaa, 0x71, 0x20, 0x54, 0xa3, 0x5e, 0x69, 0xd5, 0x41, 0x34, 0xca, 0x44, 0x34, 0xbe, 0x7b, 0x96,
		0xaf, 0x4e, 0x33, 0x12, 0x29, 0x20, 0x19, 0x20, 0x19, 0x20, 0x19, 0x72, 0x24, 0xc3, 0x17, 0xcf,
		0xd2, 0xd9, 0xa6, 0x3c, 0xd5, 0x96, 0x82, 0x8c, 0xc9, 0xeb, 0xe4, 0xce, 0x31, 0xe6, 0x8d, 0x09,
		0xdd, 0x69, 0x61, 0xa6, 0x60, 0xcc, 0x54, 0x8c, 0x6f, 0xba, 0xb4, 0x50, 0x33, 0x4d, 0xfc, 0x40,
		0x17, 0x55, 0xd3, 0x49, 0x16, 0x18, 0xa9, 0x9b, 0x16, 0x0a, 0x97, 0xd5, 0x52, 0xf1, 0x51, 0xba,
		0x4c, 0x56, 0xeb, 0xa8, 0x18, 0x52, 0x7a, 0x47, 0x39, 0xee, 0x39, 0x6e, 0x5b, 0x1c, 0x26, 0xa6,
		0x8f, 0xcf, 0x1c, 0xcb, 0xa4, 0x99, 0x6f, 0xa6, 0x6d, 0x56, 0x1c, 0x3b, 0xa1, 0xcf, 0x66, 0x91,
		0x8d, 0x3f, 0x7f, 0xae, 0x57, 0x5a, 0x5f, 0x2b, 0x66, 0xbd, 0xf7, 0x6f, 0xbd, 0xf2, 0xb5, 0x62,
		0x9e, 0xf7, 0xbe, 0x56, 0xcc, 0x56, 0xef, 0xdf, 0xaf, 0x55, 0xf3, 0x74, 0xfc, 0x9f, 0x3f, 0x4e,
		0xdf, 0x46, 0x9f, 0x5a, 0x93, 0x4f, 0xd5, 0x77, 0xb5, 0xc9, 0xe7, 0x5f, 0xee, 0xef, 0xdf, 0xdf,
		0xdf, 0xbf, 0x57, 0x10, 0xf0, 0x93, 0x91, 0xf7, 0x96, 0xcb, 0xda, 0xbb, 0x21, 0x72, 0x2f, 0xa9,
		0xf2, 0xd6, 0xdb, 0x30, 0x53, 0xba, 0x82, 0xf5, 0x36, 0xab, 0xce, 0x27, 0x4c, 0xaa, 0x4c, 0x36,
		0xa3, 0xeb, 0xa8, 0xf5, 0x54, 0x9e, 0x58, 0xc2, 0x3d, 0x1d, 0x2f, 0x9d, 0x3c, 0xb8, 0x90, 0xab,
		0xb7, 0xf0, 0x49, 0x28, 0xaf, 0x90, 0x3e, 0x3b, 0x32, 0xad, 0x34, 0xe6, 0x6a, 0x6b, 0x93, 0xf3,
		0x70, 0xe6, 0x64, 0x20, 0x17, 0x47, 0x9f, 0x5b, 0x8d, 0x5c, 0x9c, 0x2c, 0x73, 0x71, 0x66, 0x65,
		0xf7, 0x95, 0x03, 0x53, 0x32, 0x15, 0xfc, 0x19, 0xd5, 0x04, 0xd1, 0x29, 0x44, 0xa7, 0xf2, 0x8a,
		0x4e, 0x51, 0xd5, 0x2e, 0x15, 0x40, 0xcc, 0x0d, 0xdd, 0xb8, 0xed, 0x48, 0xb9, 0xa2, 0xcc, 0x8a,
		0xc8, 0xa6, 0x90, 0x9c, 0x8a, 0xc9, 0xaf, 0xa0, 0xdc, 0x8a, 0xaa, 0x4d, 0x61, 0xb5, 0x29, 0xae,
		0x16, 0x05, 0xe6, 0x89, 0x0b, 0x28, 0x7a, 0xf5, 0xca, 0x8a, 0x3d, 0xa7, 0xe0, 0x51, 0xcc, 0xb7,
		0x35, 0x66, 0x6a, 0x1e, 0xc5, 0x5c, 0xbb, 0x82, 0xf9, 0x78, 0x92, 0x4b, 0xe9, 0x75, 0x28, 0xbf,
		0x3e, 0x23, 0xa0, 0xcb, 0x18, 0x68, 0x37, 0x0a, 0xda, 0x8d, 0x83, 0x56, 0x23, 0xc1, 0x1c, 0x8a,
		0x64, 0xda, 0xb1, 0xca, 0x67, 0x56, 0x1b, 0xf7, 0xab, 0xf4, 0x85, 0x5f, 0x51, 0xed, 0x3f, 0x63,
		0x14, 0xc9, 0x7b, 0x7a, 0x33, 0xfd, 0xc3, 0xab, 0x4f, 0xc7, 0xba, 0x4e, 0x73, 0x34, 0x99, 0xd5,
		0x15, 0xf1, 0x9a, 0x4e, 0x77, 0x52, 0xf9, 0x1a, 0xcf, 0x0d, 0x98, 0xd5, 0x6d, 0x39, 0x3e, 0x58,
		0xfa, 0x25, 0xad, 0x55, 0x26, 0x7f, 0x4a, 0xbc, 0xb4, 0x47, 0xc5, 0x94, 0xd6, 0x2b, 0xc8, 0x91,
		0x15, 0x47, 0x8e, 0x1a, 0xa9, 0x3b, 0xf0, 0x4e, 0x84, 0x21, 0x74, 0x0d, 0x06, 0xb3, 0x04, 0xb3,
		0x04, 0xb3, 0x2c, 0x39, 0xb3, 0x64, 0xe9, 0xaa, 0xbc, 0x33, 0xa0, 0xc4, 0x49, 0x33, 0xf5, 0x77,
		0x61, 0x2e, 0xb6, 0xfd, 0x1f, 0x04, 0x61, 0xac, 0x7e, 0x87, 0x76, 0xe3, 0x86, 0x58, 0x14, 0x0f,
		0x44, 0x00, 0x22, 0x00, 0x11, 0x0e, 0x0a, 0x11, 0xa2, 0x78, 0x60, 0x2e, 0x18, 0x01, 0xd5, 0xfb,
		0xc0, 0x9b, 0xac, 0x41, 0x03, 0xb1, 0x07, 0xc4, 0x1e, 0x10, 0x7b, 0x28, 0x46, 0xec, 0xa1, 0x8e,
		0xa8, 0xc3, 0xfe, 0x46, 0x1d, 0x72, 0x3d, 0x52, 0x53, 0x4c, 0x4c, 0x5b, 0x91, 0xc7, 0x99, 0xa8,
		0x36, 0xe7, 0x3c, 0xcc, 0xdc, 0x06, 0x4a, 0xf6, 0x1a, 0xdf, 0x94, 0x2b, 0x4c, 0x37, 0x4f, 0x68,
		0x88, 0x33, 0x24, 0xc4, 0x64, 0xbe, 0x90, 0x51, 0x50, 0x2c, 0x42, 0x8f, 0x8c, 0x82, 0x1c, 0x88,
		0x7a, 0xba, 0xdf, 0x3c, 0xc7, 0x7a, 0xe4, 0x89, 0xd3, 0x70, 0xc6, 0x67, 0xd2, 0xb8, 0xcc, 0xfb,
		0xf7, 0x13, 0x0b, 0x7a, 0xa2, 0x1e, 0x79, 0xc9, 0xc7, 0x8c, 0x46, 0xb1, 0x15, 0x33, 0xda, 0xd1,
		0xb1, 0xb8, 0x82, 0xa5, 0x66, 0xd5, 0x60, 0x48, 0x61, 0x48, 0x4b, 0x65, 0x48, 0x91, 0x9a, 0x95,
		0x37, 0x7b, 0xd2, 0xa1, 0xfc, 0xfa, 0x8c, 0x80, 0x2e, 0x63, 0xa0, 0xdd, 0x28, 0x68, 0x37, 0x0e,
		0x5a, 0x8d, 0x04, 0xaf, 0x1b, 0x8d, 0xd4, 0x2c, 0x16, 0x91, 0x08, 0x8f, 0x22, 0x3c, 0x9a, 0xa1,
		0xba, 0x2d, 0x2e, 0x29, 0x52, 0xb3, 0x0a, 0xb1, 0xb4, 0x08, 0x92, 0xea, 0xde, 0xfa, 0x46, 0x3f,
		0x18, 0xfa, 0xb1, 0x13, 0x46, 0x3a, 0xd8, 0xe5, 0x44, 0x32, 0x2f, 0xc3, 0xac, 0x82, 0x61, 0x82,
		0x61, 0x82, 0x61, 0x72, 0xbc, 0x29, 0x97, 0x7b, 0x9a, 0x0a, 0xfc, 0x36, 0xb0, 0x87, 0x66, 0xe8,
		0xf4, 0x1d, 0xf7, 0xbb, 0x63, 0xf3, 0xef, 0xad, 0x34, 0x01, 0x6c, 0xe1, 0x67, 0xde, 0x95, 0xa2,
		0x6e, 0x0e, 0xb7, 0xb9, 0xd1, 0x69, 0x76, 0xf4, 0x9b, 0x1f, 0xdd, 0x66, 0x28, 0x33, 0x73, 0x94,
		0x99, 0x59, 0xca, 0xc4, 0x3c, 0x69, 0x22, 0x5e, 0xcc, 0x3b, 0x9e, 0xdd, 0x31, 0xde, 0x44, 0x5d,
		0x9a, 0x75, 0x1d, 0x5b, 0x7e, 0x62, 0x60, 0xce, 0x35, 0x88, 0xd6, 0xe3, 0x33, 0xeb, 0xf3, 0x9d,
		0x33, 0xf1, 0xa1, 0x33, 0x72, 0xbc, 0x56, 0x1c, 0x30, 0xdd, 0xbf, 0x93, 0x81, 0x03, 0xa6, 0xd1,
		0xc7, 0xce, 0xc4, 0xd7, 0xce, 0x6b, 0xe9, 0xab, 0xe7, 0xf5, 0x7a, 0xf3, 0xac, 0x5e, 0xaf, 0x9c,
		0x9d, 0x9e, 0x55, 0x5a, 0x8d, 0x46, 0xb5, 0x59, 0x6d, 0xec, 0xd1, 0x6e, 0x38, 0x2a, 0x87, 0xd4,
		0x5e, 0x41, 0xc3, 0x07, 0x9c, 0xa5, 0x23, 0x13, 0x2a, 0x1c, 0x8d, 0xe9, 0x80, 0x4e, 0xb6, 0x9d,
		0xfc, 0x04, 0x98, 0x36, 0x98, 0x36, 0x98, 0x36, 0x98, 0x36, 0x98, 0x36, 0x98, 0x36, 0x98, 0x36,
		0x98, 0x36, 0x98, 0x36, 0x98, 0x76, 0xb1, 0x99, 0x76, 0xa1, 0xc2, 0xed, 0xcc, 0xb7, 0x0a, 0x52,
		0xb9, 0xda, 0x6f, 0x17, 0x24, 0xd9, 0xa0, 0x27, 0xcc, 0xe7, 0x79, 0xe3, 0x47, 0x8f, 0xc3, 0x61,
		0x3f, 0x9e, 0xdc, 0x01, 0x30, 0xee, 0xe2, 0xc1, 0xc3, 0xe7, 0x68, 0xfc, 0x8f, 0xcb, 0xc9, 0x13,
		0x3d, 0x5c, 0x4e, 0x1f, 0xe3, 0xe1, 0xd3, 0xf4, 0x01, 0xf6, 0xe8, 0xf8, 0xd5, 0x76, 0x22, 0xf7,
		0xc9, 0xb7, 0x62, 0xc7, 0x9e, 0xb6, 0x34, 0xb5, 0x6c, 0x3b, 0x74, 0x22, 0x0d, 0xe7, 0xb1, 0x9b,
		0x7f, 0x0a, 0x29, 0x80, 0xc5, 0xf3, 0xdb, 0x70, 0x40, 0x9b, 0x8b, 0x5f, 0x76, 0x28, 0x29, 0x80,
		0x2f, 0x56, 0x9f, 0x59, 0xfd, 0x8f, 0x99, 0x3b, 0x39, 0xcc, 0xd4, 0x96, 0xb9, 0xa3, 0x43, 0x2a,
		0xf8, 0xcf, 0xaf, 0x15, 0xb3, 0x65, 0x99, 0x8f, 0x6d, 0xf3, 0xd7, 0xde, 0x8f, 0xda, 0xdb, 0xcf,
		0x1f, 0x16, 0x3f, 0xff, 0xf2, 0xa3, 0xf1, 0xf6, 0x93, 0x81, 0xa4, 0x21, 0x21, 0xd4, 0xd2, 0x57,
		0xdc, 0x63, 0xcb, 0x6f, 0x01, 0xb7, 0x80, 0x5b, 0xc0, 0xad, 0x83, 0xc2, 0x2d, 0x0d, 0xbd, 0xff,
		0x37, 0xd9, 0x03, 0x24, 0xb3, 0x97, 0x2b, 0x36, 0x84, 0x64, 0xf6, 0xec, 0xc3, 0x7e, 0x59, 0x2d,
		0x69, 0xb3, 0x5a, 0xad, 0xa3, 0xdc, 0x07, 0xbf, 0xb4, 0x3d, 0x25, 0xa5, 0x7a, 0xae, 0x4b, 0x2e,
		0xff, 0x00, 0xe8, 0x27, 0xe8, 0x27, 0xe8, 0xe7, 0x41, 0xd1, 0x4f, 0xdc, 0x9c, 0x04, 0xd9, 0x5c,
		0x64, 0x26, 0x15, 0x90, 0xcd, 0x7d, 0x23, 0x9b, 0xf5, 0x5a, 0xab, 0xde, 0x6a, 0x9e, 0xd5, 0x5a,
		0x0d, 0x10, 0x4e, 0x10, 0x4e, 0x21, 0xc2, 0x99, 0x14, 0x1f, 0xf5, 0x87, 0x2f, 0x5a, 0x49, 0x67,
		0xfa, 0x23, 0x20, 0x9e, 0x20, 0x9e, 0x20, 0x9e, 0x07, 0x47, 0x3c, 0xab, 0x4d, 0x0d, 0xc4, 0xb3,
		0x09, 0xe2, 0x09, 0xe2, 0x09, 0xe2, 0x59, 0x88, 0x25, 0x6d, 0x36, 0x1a, 0xa7, 0xe0, 0x9c, 0xe0,
		0x9c, 0x12, 0x9c, 0x33, 0x93, 0x73, 0x77, 0xf4, 0xd7, 0x00, 0xfb, 0x04, 0xfb, 0x3c, 0x60, 0xf6,
		0x89, 0xfe, 0x1a, 0x60, 0xa3, 0xdb, 0xa9, 0x0b, 0xce, 0xdc, 0xf7, 0x8e, 0x8d, 0xa2, 0xbf, 0x06,
		0xb8, 0xa8, 0x28, 0x17, 0x0d, 0x83, 0x20, 0xce, 0xe4, 0xe6, 0xc2, 0xc2, 0x0f, 0x81, 0x89, 0x82,
		0x89, 0x82, 0x89, 0x1e, 0x14, 0x13, 0xc5, 0xbd, 0x05, 0xdc, 0x5b, 0xe0, 0x43, 0xac, 0x4c, 0xa2,
		0x27, 0x8b, 0xbf, 0x04, 0xcc, 0x02, 0x66, 0x01, 0xb3, 0x0e, 0x2e, 0x7a, 0x82, 0x3b, 0x0b, 0x88,
		0x9f, 0x20, 0x7e, 0x72, 0x50, 0xf1, 0x13, 0xdc, 0x59, 0x40, 0x08, 0x65, 0xd7, 0x32, 0x3e, 0x06,
		0xe1, 0xdf, 0x56, 0x68, 0x9b, 0x71, 0x68, 0xf9, 0x91, 0x1b, 0xb9, 0xa3, 0x25, 0xd5, 0x10, 0x40,
		0x59, 0xff, 0x33, 0xa0, 0xa2, 0xa0, 0xa2, 0xa0, 0xa2, 0x07, 0x45, 0x45, 0x75, 0x94, 0xdb, 0xd3,
		0x50, 0x66, 0x0f, 0xdc, 0xf3, 0x18, 0x99, 0x64, 0xe0, 0x9e, 0x0a, 0xee, 0x44, 0x66, 0x65, 0xf1,
		0xc0, 0x44, 0xf7, 0x83, 0x89, 0xb2, 0xf4, 0x61, 0x5f, 0xc1, 0x1b, 0x86, 0x7e, 0xec, 0xe0, 0x99,
		0xe0, 0x99, 0xe0, 0x99, 0x25, 0xe3, 0x99, 0xdf, 0xac, 0xc8, 0x31, 0xd3, 0x02, 0x92, 0x26, 0x4f,
		0xeb, 0xf7, 0x65, 0x4b, 0x50, 0x3d, 0xe3, 0x3d, 0xad, 0x9b, 0x94, 0xcf, 0xec, 0x9b, 0xee, 0xe3,
		0x87, 0xb9, 0x3a, 0x98, 0x4b, 0x7f, 0x31, 0xf9, 0xac, 0xde, 0x28, 0xbe, 0x58, 0xf6, 0x5f, 0xdf,
		0x0d, 0x36, 0x5c, 0x5b, 0x03, 0x0e, 0x00, 0x07, 0x0e, 0x13, 0x07, 0x70, 0x6d, 0x0d, 0xc1, 0x06,
		0x04, 0x1b, 0xf6, 0x3c, 0xd8, 0x80, 0x6b, 0x6b, 0x88, 0x2e, 0x88, 0xb0, 0x4b, 0x7d, 0xd9, 0x56,
		0xb8, 0xa0, 0x06, 0x9e, 0x09, 0x9e, 0x79, 0xc0, 0x3c, 0x13, 0x17, 0xd4, 0xc0, 0x3b, 0xb7, 0x93,
		0x14, 0x24, 0x58, 0xed, 0x1d, 0xef, 0xc4, 0x05, 0x35, 0xb0, 0xce, 0xdd, 0xac, 0x33, 0x69, 0x5e,
		0xa4, 0x89, 0x72, 0x8e, 0x65, 0x83, 0x6f, 0x82, 0x6f, 0x82, 0x6f, 0x1e, 0x14, 0xdf, 0x74, 0x6d,
		0xc7, 0x8f, 0xdd, 0xf8, 0x55, 0xd3, 0xc1, 0x16, 0x27, 0xcb, 0xbc, 0x9c, 0x3c, 0xea, 0x47, 0x2b,
		0x72, 0xf4, 0x35, 0x89, 0xbe, 0xeb, 0xde, 0x3c, 0xdc, 0x5c, 0xdf, 0x76, 0x1f, 0xee, 0xba, 0xed,
		0x6e, 0x87, 0x5b, 0x27, 0x12, 0xc4, 0x8f, 0xb4, 0xb4, 0x5b, 0xd5, 0x44, 0x81, 0xa6, 0xf3, 0xf2,
		0xeb, 0xf5, 0xed, 0x7f, 0xdb, 0xb7, 0x17, 0x97, 0x5f, 0x7e, 0x33, 0xca, 0xc0, 0x0b, 0x35, 0xcf,
		0xc6, 0xc5, 0xe5, 0x5d, 0xfb, 0xe3, 0x55, 0xe7, 0x02, 0x73, 0x71, 0x6c, 0x5c, 0x5d, 0xde, 0x75,
		0x3b, 0x5f, 0xb0, 0x31, 0xc6, 0x93, 0xd1, 0x69, 0xdf, 0x62, 0x2e, 0xc6, 0x73, 0xf1, 0xf1, 0xea,
		0xfa, 0xd3, 0xef, 0x7a, 0xe6, 0x82, 0x55, 0x62, 0xaf, 0x68, 0xac, 0xa1, 0x10, 0x3e, 0x47, 0x18,
		0x78, 0x1a, 0xbc, 0x8d, 0x44, 0x2a, 0xfc, 0x0c, 0xf8, 0x19, 0xf0, 0x33, 0xe0, 0x67, 0xc0, 0xcf,
		0xb8, 0xed, 0x3e, 0xdc, 0x5e, 0x5f, 0xc1, 0xcd, 0x98, 0x11, 0xeb, 0xce, 0xdd, 0xe5, 0x6f, 0x5f,
		0xda, 0x5d, 0x50, 0xeb, 0xd1, 0x6c, 0xdc, 0x5e, 0x5f, 0x77, 0x31, 0x0f, 0xc7, 0xc6, 0xc7, 0xf6,
		0xa7, 0xdf, 0xff, 0xb8, 0xc1, 0x4c, 0x1c, 0x1b, 0xed, 0xab, 0x6e, 0xe7, 0x76, 0xa4, 0x1f, 0x20,
		0xd5, 0x99, 0x93, 0xea, 0xa3, 0x1c, 0xb7, 0x9a, 0xd1, 0xf6, 0xfd, 0x20, 0xb6, 0x62, 0x37, 0xe0,
		0x39, 0xc1, 0x34, 0xa2, 0xfe, 0xb3, 0xf3, 0x62, 0x0d, 0xd2, 0x64, 0xf1, 0x81, 0xe3, 0xf7, 0x13,
		0x02, 0x6c, 0x46, 0x03, 0xcb, 0xf7, 0x5d, 0xff, 0xc9, 0x8c, 0x43, 0xc7, 0x39, 0x89, 0xe2, 0xc1,
		0xc9, 0xcb, 0xe4, 0x1f, 0xa6, 0xeb, 0x47, 0xb1, 0xe5, 0xf7, 0x9d, 0x68, 0xe1, 0xd3, 0xc9, 0x5c,
		0x8e, 0xf9, 0x2c, 0xbb, 0x7c, 0x7c, 0xa4, 0x70, 0x94, 0xcf, 0x8c, 0xd3, 0x46, 0x12, 0xd7, 0x68,
		0x44, 0x71, 0x15, 0xef, 0x08, 0x19, 0x57, 0x6e, 0x14, 0xb7, 0xe3, 0x38, 0x54, 0x5a, 0x5c, 0xe3,
		0xb3, 0xeb, 0x77, 0x3c, 0x67, 0xc4, 0x55, 0x47, 0xe0, 0xef, 0x0f, 0x3d, 0xef, 0x9d, 0x82, 0x30,
		0xeb, 0x1f, 0x3e, 0x61, 0xd7, 0xa1, 0xed, 0x84, 0x8e, 0xfd, 0xf1, 0x75, 0x22, 0x2a, 0xd3, 0xf5,
		0x61, 0xd2, 0x1d, 0xed, 0x3a, 0xa3, 0x40, 0x03, 0x8d, 0x28, 0x0e, 0x87, 0xfd, 0xd8, 0x9f, 0xb2,
		0xcb, 0x78, 0xf0, 0xf0, 0x39, 0x1a, 0xff, 0xe3, 0x72, 0xf2, 0x93, 0x0f, 0x97, 0xe9, 0xef, 0x1c,
		0x65, 0xa3, 0x53, 0x72, 0x23, 0x24, 0x57, 0x57, 0x75, 0x55, 0x35, 0xad, 0xa6, 0xdc, 0xdc, 0x8a,
		0xcf, 0x90, 0xc4, 0xec, 0x18, 0xc9, 0xa3, 0xd9, 0xd2, 0xb3, 0x32, 0xab, 0x4d, 0x38, 0x1e, 0x2f,
		0xb9, 0x1e, 0xb4, 0x70, 0x0c, 0x39, 0xec, 0xa2, 0x12, 0x5e, 0x51, 0x0f, 0xa3, 0xa8, 0x86, 0x4b,
		0xd8, 0xc2, 0x22, 0x6c, 0xe1, 0x0f, 0x96, 0x30, 0x87, 0x5e, 0x8d, 0x27, 0x87, 0x27, 0xd2, 0xf5,
		0xf6, 0x1c, 0xeb, 0x91, 0x16, 0x82, 0x50, 0xb9, 0xab, 0x97, 0xde, 0xc9, 0x7b, 0xff, 0xfe, 0x64,
		0x6c, 0x62, 0x4e, 0x26, 0x2a, 0x56, 0x00, 0x63, 0x41, 0x4b, 0x2b, 0x99, 0x4b, 0x58, 0x94, 0xcf,
		0x1c, 0x49, 0xe7, 0x92, 0x6a, 0x2a, 0x6a, 0x30, 0x15, 0x30, 0x15, 0x5b, 0x9f, 0xf0, 0xc2, 0xa5,
		0x51, 0x69, 0x63, 0x52, 0xdf, 0x50, 0xb5, 0x04, 0xf8, 0xec, 0x02, 0xf1, 0xa2, 0x3c, 0xaa, 0x87,
		0xa1, 0x74, 0xd4, 0xa1, 0x7c, 0xb4, 0xc1, 0x71, 0x94, 0xc1, 0x77, 0x74, 0xc1, 0x75, 0x54, 0xc1,
		0x7e, 0x34, 0xc1, 0x7e, 0x14, 0xc1, 0x7a, 0xf4, 0x90, 0xad, 0x4f, 0xac, 0x7c, 0x94, 0xc0, 0x5c,
		0x29, 0x9b, 0xa3, 0x32, 0x36, 0x5b, 0x25, 0x6c, 0xcd, 0x95, 0xaf, 0x7b, 0x59, 0xf9, 0x77, 0xef,
		0xc8, 0xf6, 0x55, 0xf9, 0x0a, 0xd5, 0xb2, 0x81, 0x55, 0xbc, 0x34, 0x05, 0x0b, 0x0b, 0x0b, 0x7b,
		0xb0, 0x16, 0x56, 0x43, 0x5d, 0x67, 0x86, 0x3a, 0xce, 0x4c, 0xd7, 0x8a, 0x18, 0x62, 0xe5, 0x9c,
		0xd7, 0x86, 0xb8, 0xb3, 0x56, 0x98, 0xaf, 0x05, 0xe9, 0xb8, 0x31, 0xc2, 0x91, 0x8d, 0xc4, 0x79,
		0xcd, 0x47, 0xd7, 0x12, 0x70, 0xd6, 0x49, 0xd6, 0xb2, 0x0e, 0x39, 0x1d, 0xc6, 0x14, 0x99, 0x8e,
		0x70, 0xb7, 0x7e, 0xd2, 0xd4, 0xea, 0x09, 0xf4, 0x04, 0xf4, 0x04, 0x0e, 0x20, 0x1c, 0xc0, 0x3d,
		0xb4, 0xb8, 0x7c, 0x9e, 0x20, 0x73, 0xab, 0x22, 0xd8, 0x5c, 0xd8, 0x5c, 0xb8, 0x84, 0x70, 0x09,
		0xe1, 0x12, 0xc2, 0x25, 0x84, 0x4b, 0x78, 0x38, 0x2e, 0xe1, 0x73, 0xe0, 0xd9, 0x66, 0xec, 0x2a,
		0x54, 0x11, 0x4f, 0xad, 0xe8, 0x4c, 0x14, 0x28, 0x08, 0x28, 0x08, 0x28, 0x88, 0xd4, 0x7e, 0x19,
		0xba, 0x7e, 0x7c, 0xce, 0xc0, 0x37, 0x1a, 0xe0, 0x1b, 0xd9, 0x80, 0x5d, 0x05, 0x7c, 0x23, 0xef,
		0x25, 0xa8, 0x35, 0x1a, 0x20, 0x1b, 0x65, 0x22, 0x1b, 0x9e, 0x15, 0xc5, 0x66, 0x1c, 0x0c, 0x02,
		0x2f, 0x78, 0x7a, 0x35, 0xfb, 0xcf, 0x13, 0x7b, 0xa3, 0xc8, 0x3b, 0xd6, 0x4a, 0x05, 0x05, 0x01,
		0x05, 0x01, 0x05, 0x91, 0xda, 0x2f, 0x23, 0xea, 0x1e, 0xbb, 0xfd, 0xbf, 0x22, 0xa5, 0x3e, 0x73,
		0x0c, 0x7d, 0xe5, 0x8c, 0x3f, 0xfc, 0xb1, 0x15, 0x36, 0x7c, 0xcb, 0x0f, 0x22, 0xa7, 0x1f, 0xf8,
		0xb6, 0x52, 0x30, 0x1c, 0xc4, 0x06, 0xc4, 0xa6, 0x4c, 0xc4, 0x46, 0x5f, 0x1f, 0x38, 0x30, 0x9d,
		0x6c, 0x98, 0x0e, 0xf1, 0x52, 0xd2, 0x8a, 0x4d, 0x26, 0x5d, 0x4e, 0x02, 0x9b, 0x01, 0x9b, 0x41,
		0x40, 0x45, 0xb5, 0x87, 0x0d, 0x43, 0xcf, 0x1a, 0x10, 0x0f, 0x29, 0xd4, 0x03, 0xf1, 0xc8, 0x7b,
		0x09, 0xea, 0x95, 0x56, 0x1d, 0x44, 0xa3, 0x4c, 0x44, 0x23, 0xc9, 0xfd, 0xe8, 0x07, 0x51, 0xac,
		0xce, 0x35, 0x66, 0xa2, 0x40, 0x37, 0x40, 0x37, 0x40, 0x37, 0xa4, 0xe9, 0xc6, 0x69, 0x0d, 0x09,
		0x23, 0x88, 0x73, 0x80, 0x6e, 0x88, 0xd3, 0x8d, 0x5a, 0xab, 0xde, 0x6a, 0x9e, 0xd5, 0x5a, 0x88,
		0x6e, 0x94, 0x8f, 0x74, 0x0c, 0x82, 0x90, 0x8b, 0x74, 0x24, 0xa2, 0x40, 0x3a, 0x40, 0x3a, 0x40,
		0x3a, 0x10, 0xe3, 0x00, 0xe9, 0x00, 0xe9, 0xd0, 0xb9, 0x04, 0x8c, 0x7d, 0x6f, 0xc1, 0x37, 0xb2,
		0xe1, 0x1b, 0x4b, 0xc9, 0x1d, 0x0c, 0x17, 0x16, 0x57, 0x24, 0x82, 0x7d, 0x80, 0x7d, 0x80, 0x7d,
		0x48, 0xed, 0x97, 0x7e, 0x30, 0xf4, 0x63, 0x27, 0xcc, 0x3d, 0x5b, 0x04, 0x04, 0x04, 0x04, 0xa4,
		0x4c, 0x04, 0x04, 0xd9, 0x1d, 0x65, 0xe7, 0x23, 0xdf, 0x3d, 0xcb, 0x57, 0xe7, 0x20, 0x89, 0x14,
		0xf0, 0x0e, 0xf0, 0x0e, 0xf0, 0x0e, 0xb9, 0xa8, 0x87, 0xef, 0x06, 0x3e, 0x47, 0x6d, 0x84, 0x96,
		0x82, 0x8c, 0xc9, 0xeb, 0xe4, 0xce, 0x39, 0xe6, 0x8d, 0x09, 0x3d, 0x53, 0x8c, 0x39, 0x26, 0xc4,
		0x4c, 0xcd, 0xf8, 0xa6, 0x4b, 0x0b, 0x55, 0xd3, 0xc4, 0x17, 0x56, 0x79, 0x03, 0xb3, 0x5c, 0x8d,
		0xed, 0xd2, 0x19, 0x5b, 0xcd, 0x68, 0xe9, 0x79, 0xaf, 0x7b, 0xa9, 0xf8, 0xf2, 0x68, 0x32, 0x59,
		0xad, 0x82, 0xf4, 0x9c, 0xe9, 0xe5, 0xd9, 0x73, 0x86, 0xdb, 0x16, 0x87, 0x0a, 0xd7, 0x90, 0xd6,
		0xa2, 0xd5, 0x39, 0x83, 0x2c, 0xae, 0x8a, 0x3e, 0xa9, 0xc0, 0x3f, 0x7f, 0xae, 0x57, 0x5a, 0x5f,
		0x2b, 0x66, 0xbd, 0xf7, 0x6f, 0xbd, 0xf2, 0xb5, 0x62, 0x9e, 0xf7, 0xbe, 0x56, 0xcc, 0x56, 0xef,
		0xdf, 0xaf, 0x55, 0xf3, 0x74, 0xfc, 0x9f, 0x3f, 0x4e, 0xdf, 0x46, 0x9f, 0x5a, 0x93, 0x4f, 0xd5,
		0x77, 0xb5, 0xc9, 0xe7, 0x5f, 0xee, 0xef, 0xdf, 0xdf, 0xdf, 0xbf, 0x57, 0x10, 0xf0, 0x93, 0x91,
		0xf7, 0x96, 0xcb, 0xda, 0xbb, 0x41, 0xbf, 0x9d, 0xb5, 0xc2, 0x78, 0xfa, 0xed, 0xa0, 0xe3, 0xcb,
		0xc6, 0x8e, 0x2f, 0x84, 0xf6, 0x56, 0x12, 0xfd, 0x1b, 0x8e, 0x18, 0xa7, 0x6f, 0xda, 0x9e, 0x4a,
		0xea, 0xe2, 0x04, 0x4d, 0x41, 0x94, 0x14, 0x42, 0x49, 0x01, 0x68, 0x1b, 0x5e, 0x74, 0x06, 0x89,
		0x1b, 0x8f, 0x73, 0xc3, 0x19, 0x52, 0x2d, 0x3d, 0x76, 0xf5, 0x82, 0x12, 0xdb, 0xb8, 0xbb, 0xb7,
		0xe1, 0xf6, 0x6f, 0xec, 0x98, 0x5e, 0xd9, 0x69, 0x55, 0x9c, 0xce, 0xed, 0xef, 0xbc, 0xf9, 0x4d,
		0xb6, 0xbc, 0x85, 0x60, 0xf3, 0x14, 0xa9, 0x66, 0x29, 0x82, 0xcd, 0x51, 0x84, 0x9b, 0xa1, 0xc8,
		0x04, 0xa6, 0xe4, 0x03, 0x50, 0xb2, 0x81, 0x26, 0x72, 0x40, 0x89, 0x1c, 0x38, 0x22, 0x05, 0x88,
		0xd4, 0xf6, 0xb5, 0x68, 0xf3, 0x11, 0xe3, 0x31, 0x08, 0xff, 0xb6, 0x42, 0x7b, 0xb4, 0x71, 0x6d,
		0xc7, 0xb3, 0xc4, 0x6b, 0x20, 0xa6, 0x0b, 0xb5, 0x22, 0x41, 0x14, 0x13, 0xa4, 0xbc, 0x3d, 0xe9,
		0xe8, 0x28, 0x25, 0x1a, 0x4a, 0x8f, 0x7e, 0x52, 0xa3, 0x9d, 0xca, 0xd1, 0x4d, 0xe5, 0x68, 0xa6,
		0x52, 0xf4, 0x92, 0x97, 0x25, 0x48, 0x47, 0x23, 0xc9, 0x85, 0x7a, 0x08, 0x85, 0x79, 0x88, 0x61,
		0x33, 0x02, 0x47, 0x54, 0x09, 0x83, 0xa9, 0x9e, 0x41, 0xa4, 0xb1, 0x12, 0xe2, 0x78, 0x86, 0x80,
		0x08, 0xe5, 0xec, 0x47, 0x25, 0x1c, 0xc5, 0x35, 0x65, 0xa7, 0x95, 0x1c, 0xe7, 0x4c, 0x93, 0x17,
		0xd0, 0xe3, 0x22, 0x69, 0x02, 0x30, 0xfe, 0xec, 0x78, 0x5e, 0x20, 0x57, 0xf5, 0x6e, 0x56, 0xe5,
		0x6e, 0x36, 0x16, 0xe8, 0x03, 0xf4, 0x01, 0xfa, 0x94, 0x1b, 0x7d, 0xaa, 0x40, 0x1f, 0xe9, 0x29,
		0x03, 0xfa, 0xa8, 0xa1, 0x4f, 0xe0, 0xd9, 0x66, 0x92, 0x3c, 0x47, 0x40, 0x9f, 0xd9, 0x58, 0x41,
		0x5b, 0x73, 0xe1, 0x3c, 0x5a, 0x43, 0x2f, 0x31, 0x7a, 0x4d, 0x20, 0x16, 0x10, 0x0b, 0x88, 0x05,
		0xc4, 0x02, 0x62, 0x01, 0xb1, 0x64, 0x10, 0xeb, 0xc5, 0xfa, 0xc7, 0xb4, 0x9e, 0x08, 0xce, 0xd2,
		0x74, 0x20, 0x70, 0x07, 0xb8, 0x03, 0xdc, 0x29, 0x37, 0xee, 0x34, 0x81, 0x3b, 0xd2, 0xa1, 0x4d,
		0xe0, 0x8e, 0x32, 0xee, 0x3c, 0x07, 0x03, 0x1a, 0xee, 0x8c, 0x06, 0x02, 0x77, 0x80, 0x3b, 0xc0,
		0x1d, 0xf8, 0x3b, 0x07, 0x86, 0x3b, 0xe4, 0xc6, 0x08, 0x00, 0x9e, 0xf1, 0x34, 0x4c, 0xb2, 0x89,
		0x24, 0x51, 0x27, 0x19, 0x05, 0xc8, 0x01, 0xe4, 0x64, 0x0c, 0x39, 0x51, 0x1c, 0xba, 0xfe, 0x13,
		0x01, 0x73, 0x64, 0x72, 0xca, 0x8d, 0x2b, 0xc7, 0x7f, 0x4a, 0x72, 0xd1, 0x80, 0x3a, 0x40, 0x9d,
		0x75, 0x53, 0x76, 0x5a, 0x03, 0xe8, 0xa8, 0x80, 0x4e, 0xe8, 0x7c, 0x77, 0x23, 0x99, 0xac, 0xdb,
		0x59, 0x11, 0xb5, 0xe9, 0x48, 0x80, 0x0f, 0xc0, 0x27, 0x07, 0x7f, 0x47, 0xaa, 0xf0, 0x29, 0xa1,
		0xd0, 0xe9, 0x61, 0x39, 0x3c, 0x15, 0x40, 0x8f, 0x74, 0xa0, 0x4d, 0xb1, 0x90, 0xe8, 0x41, 0x40,
		0x50, 0xb1, 0x6f, 0x2f, 0x08, 0x5c, 0x31, 0xda, 0x72, 0x6b, 0xe1, 0x48, 0xe2, 0x9d, 0x44, 0xdf,
		0x45, 0xfa, 0x1d, 0x8c, 0xad, 0x77, 0x27, 0xd6, 0xdd, 0x52, 0x59, 0xff, 0xbe, 0xab, 0x6f, 0xb3,
		0xe6, 0x4d, 0x8c, 0xd0, 0x1a, 0xb8, 0xb6, 0x39, 0xf8, 0xbe, 0xa5, 0xf4, 0xfb, 0x8c, 0x20, 0xcc,
		0xbe, 0xbb, 0x61, 0x4e, 0xb6, 0xdf, 0xc3, 0xd8, 0x49, 0x01, 0x44, 0x20, 0x5f, 0x1c, 0xe2, 0x45,
		0x21, 0x5d, 0x1a, 0xc2, 0xa5, 0x21, 0x5b, 0x0a, 0xa2, 0xe5, 0x76, 0xe1, 0xae, 0x7b, 0x13, 0x62,
		0x55, 0x66, 0x64, 0xaa, 0xc9, 0x48, 0x5f, 0xb6, 0xa9, 0xe0, 0xb2, 0x0d, 0x3b, 0x7f, 0xcb, 0xe8,
		0xb2, 0x4d, 0x7f, 0xba, 0x86, 0x92, 0xae, 0xc4, 0x64, 0x9c, 0x9c, 0x23, 0x51, 0x85, 0x23, 0x01,
		0x47, 0x42, 0x6e, 0x83, 0xa6, 0x03, 0xbe, 0x85, 0xae, 0xfd, 0xe4, 0x98, 0x83, 0xd0, 0x0d, 0x42,
		0x37, 0x7e, 0x95, 0x9f, 0xfd, 0xe9, 0x7a, 0x2f, 0x0b, 0x92, 0x9c, 0x42, 0x1a, 0x13, 0x25, 0x57,
		0xd2, 0x52, 0xa9, 0xa0, 0xa5, 0x5e, 0x39, 0x4b, 0xb5, 0x62, 0x16, 0x5b, 0xa5, 0x2c, 0xb6, 0x0a,
		0x59, 0x2c, 0x95, 0xb1, 0xf4, 0x5e, 0xe8, 0x27, 0x57, 0xc0, 0x9a, 0x0b, 0xf4, 0x0e, 0xcc, 0xa5,
		0x6d, 0x6e, 0xc6, 0x23, 0xa9, 0x84, 0x1d, 0x40, 0x6f, 0x37, 0xa2, 0x58, 0xd5, 0x49, 0xad, 0x02,
		0x05, 0x43, 0x91, 0x37, 0x96, 0xd2, 0x3f, 0x5c, 0x55, 0x99, 0x38, 0xeb, 0xfa, 0xbc, 0xa9, 0xd5,
		0xe3, 0x28, 0xdc, 0xd4, 0x36, 0xab, 0xd5, 0x7a, 0xbd, 0x52, 0xa0, 0xf9, 0xcd, 0xa8, 0xae, 0x48,
		0x4f, 0x57, 0xa1, 0x0d, 0x09, 0x2e, 0x44, 0xbe, 0xac, 0xbd, 0x62, 0xb4, 0x88, 0x97, 0xb6, 0x01,
		0xcc, 0x00, 0xe6, 0xd2, 0x00, 0xb3, 0x6c, 0xd2, 0xcf, 0xf2, 0xe6, 0x6e, 0x00, 0x85, 0xd5, 0xa0,
		0xa2, 0x0e, 0x14, 0xd6, 0x35, 0xb5, 0xa7, 0x40, 0xe0, 0x5c, 0x10, 0x98, 0x70, 0x49, 0x7d, 0xc5,
		0x2e, 0x49, 0x5f, 0x56, 0x07, 0xea, 0x02, 0x75, 0x81, 0xba, 0x40, 0x5d, 0xf8, 0xbe, 0x79, 0x4f,
		0x2d, 0x50, 0x37, 0x1f, 0xd4, 0x95, 0xbf, 0x9c, 0xbf, 0x8a, 0xba, 0xb2, 0x97, 0xf4, 0x53, 0x09,
		0x84, 0xcb, 0xfa, 0x40, 0x6c, 0x20, 0x36, 0x10, 0x1b, 0x88, 0x0d, 0xc4, 0x06, 0x62, 0x1f, 0x24,
		0x62, 0xcb, 0x16, 0x27, 0x58, 0x31, 0x4a, 0x72, 0x45, 0x0a, 0x80, 0xb7, 0xc0, 0x5b, 0xe0, 0x2d,
		0xf0, 0x56, 0x0c, 0x14, 0x9a, 0xc0, 0x5b, 0x5d, 0x53, 0x8b, 0x93, 0xe1, 0x7c, 0xf0, 0x76, 0xda,
		0x69, 0x8c, 0x8c, 0xb7, 0xb4, 0x56, 0x65, 0xc0, 0x5b, 0xe0, 0x6d, 0xe1, 0xf1, 0x96, 0xde, 0x85,
		0x4f, 0xa1, 0xeb, 0x1e, 0x10, 0x17, 0x1e, 0x6e, 0x46, 0x88, 0xdb, 0xaa, 0x03, 0x73, 0xd9, 0x30,
		0xb7, 0x74, 0x4d, 0x7b, 0x66, 0xb7, 0x88, 0x4e, 0x46, 0x86, 0xee, 0x64, 0x72, 0x57, 0x20, 0xc3,
		0x2b, 0xd2, 0xae, 0x1f, 0x3b, 0xe1, 0xa3, 0xd5, 0x77, 0x22, 0xf9, 0x9b, 0x0d, 0x73, 0x63, 0x71,
		0xbb, 0x21, 0x43, 0x26, 0x71, 0xd0, 0xb7, 0x1b, 0xd2, 0x4d, 0x47, 0xa7, 0xcb, 0x33, 0x11, 0x34,
		0xc2, 0x5c, 0x05, 0x61, 0x06, 0x61, 0xd6, 0x43, 0x98, 0x65, 0xd5, 0x21, 0x1d, 0x28, 0x79, 0x3b,
		0x6d, 0xe3, 0x76, 0x91, 0xba, 0xad, 0xc6, 0xa4, 0x20, 0xca, 0x8a, 0xc2, 0xa1, 0x30, 0x7c, 0x8a,
		0xc3, 0xa5, 0x40, 0xec, 0x8a, 0xc4, 0xae, 0x50, 0xac, 0x8a, 0xa5, 0xc8, 0x42, 0x89, 0x3b, 0x86,
		0xaa, 0x70, 0x73, 0x8a, 0x17, 0xc5, 0xea, 0x4b, 0x3c, 0x53, 0xbf, 0x28, 0x56, 0x5d, 0x5d, 0x26,
		0x1f, 0x45, 0x55, 0x19, 0x39, 0x95, 0x92, 0x5f, 0x39, 0xb9, 0x95, 0x54, 0x9b, 0xb2, 0x6a, 0x53,
		0x5a, 0x2d, 0xca, 0xab, 0xa6, 0xc4, 0x0c, 0x6e, 0xbe, 0x5a, 0xd8, 0x69, 0xe3, 0x7e, 0x93, 0xae,
		0xc9, 0xb3, 0x4b, 0x3b, 0xcf, 0x18, 0x44, 0xa9, 0x45, 0xa9, 0xf8, 0xa2, 0x56, 0x5a, 0xa2, 0x58,
		0x9a, 0xcc, 0x9a, 0xae, 0x28, 0x97, 0xce, 0xb8, 0x0c, 0xb3, 0x7a, 0xb0, 0x47, 0xc5, 0xb2, 0x5e,
		0xaa, 0x5a, 0x65, 0xf2, 0xa7, 0x44, 0x4b, 0x76, 0x54, 0x0c, 0x29, 0x79, 0x75, 0xe7, 0x57, 0x09,
		0xdc, 0x4a, 0x95, 0x8e, 0xdd, 0x69, 0xc9, 0x25, 0x4a, 0xca, 0x82, 0x61, 0x81, 0x61, 0x81, 0x61,
		0x65, 0xc4, 0xb0, 0xbe, 0x59, 0x91, 0x63, 0xa6, 0x91, 0x39, 0x33, 0x74, 0x1e, 0x19, 0xd9, 0x56,
		0x95, 0x83, 0x6e, 0xdd, 0xa4, 0x21, 0xfd, 0xbe, 0xe9, 0x3e, 0x7e, 0x98, 0x45, 0xbf, 0x97, 0xff,
		0x62, 0xf2, 0x39, 0xb1, 0x34, 0x25, 0xb4, 0xb7, 0x83, 0x20, 0x8c, 0xe9, 0xd5, 0x63, 0x36, 0x2e,
		0xf0, 0xa2, 0x58, 0x58, 0x60, 0x58, 0x60, 0x58, 0xe0, 0x42, 0x59, 0xe0, 0x28, 0x1e, 0x98, 0x0b,
		0x4a, 0x4a, 0xad, 0x84, 0xb3, 0x49, 0x5b, 0x1b, 0xf0, 0x79, 0xe1, 0xf3, 0xc2, 0xe7, 0xa5, 0xf9,
		0xbc, 0x75, 0x78, 0xbb, 0xe5, 0xf1, 0x76, 0x33, 0x3d, 0xc2, 0x20, 0x26, 0xaa, 0xac, 0xc8, 0x51,
		0x49, 0x5c, 0x99, 0x23, 0xc3, 0x33, 0x1a, 0x2c, 0x93, 0xcd, 0xa2, 0x3e, 0x85, 0x94, 0x4a, 0xdb,
		0x4a, 0xa1, 0x05, 0x8e, 0x90, 0x82, 0x6a, 0xb9, 0x6e, 0x9c, 0x98, 0x66, 0x42, 0x50, 0x71, 0x62,
		0xca, 0x48, 0x3c, 0xd3, 0xfd, 0xe2, 0x39, 0xd6, 0xa3, 0x9a, 0x9f, 0xcf, 0xe1, 0xdf, 0xa7, 0x7e,
		0xfd, 0xfb, 0xf7, 0x13, 0x8b, 0x75, 0x42, 0xf7, 0xdc, 0xb3, 0x31, 0x5b, 0xe3, 0xca, 0xee, 0xca,
		0x76, 0x6b, 0x2c, 0x26, 0xe7, 0x54, 0x8f, 0x1a, 0x0c, 0x17, 0x0c, 0x57, 0x26, 0x86, 0x0b, 0xa9,
		0x1e, 0x08, 0x83, 0x21, 0x0c, 0x86, 0x30, 0xd8, 0x8e, 0xfd, 0x86, 0x54, 0x0f, 0x84, 0xbd, 0x10,
		0xf6, 0x2a, 0x4a, 0xd8, 0x0b, 0xa9, 0x1e, 0xa5, 0x0b, 0x7e, 0xbd, 0x53, 0x61, 0x58, 0x43, 0x3f,
		0x76, 0xc2, 0x88, 0x93, 0x65, 0x4d, 0x24, 0xf2, 0x30, 0xad, 0x2a, 0x98, 0x16, 0x98, 0xd6, 0x61,
		0x32, 0x2d, 0x55, 0xf7, 0x29, 0x15, 0xf4, 0x6d, 0x60, 0x0f, 0xcd, 0xd0, 0xe9, 0x3b, 0xee, 0x77,
		0xc7, 0xe6, 0xdb, 0x23, 0x69, 0x22, 0xc9, 0x82, 0x78, 0xa6, 0xe5, 0xe4, 0x85, 0x39, 0x36, 0x33,
		0xa0, 0xc3, 0x1c, 0xe8, 0x33, 0x0b, 0xba, 0xcc, 0x83, 0x76, 0x33, 0xa1, 0xdd, 0x5c, 0x68, 0x35,
		0x1b, 0xcc, 0xc4, 0x84, 0x69, 0xc7, 0xb2, 0x39, 0x6e, 0x9b, 0x20, 0xbf, 0x59, 0xe7, 0xdc, 0xb2,
		0x13, 0x03, 0x70, 0xce, 0x28, 0x92, 0xd7, 0xa7, 0xe3, 0xf7, 0xed, 0xb4, 0xfa, 0x78, 0x9a, 0x1d,
		0x88, 0x15, 0x47, 0x42, 0x97, 0x7c, 0x8d, 0x8e, 0x84, 0x06, 0x1f, 0x50, 0xab, 0x2f, 0x98, 0xf5,
		0x92, 0x56, 0xcf, 0xeb, 0xf5, 0xe6, 0x59, 0xbd, 0x5e, 0x39, 0x3b, 0x3d, 0xab, 0xb4, 0x1a, 0x8d,
		0x6a, 0xb3, 0xda, 0x28, 0xf1, 0x2a, 0x1f, 0x15, 0x53, 0x5a, 0xaf, 0x20, 0xee, 0x2c, 0x83, 0x16,
		0x8c, 0xa9, 0x61, 0xe4, 0xf8, 0xb1, 0x26, 0xd6, 0x99, 0x88, 0x06, 0xe3, 0x04, 0xe3, 0x04, 0xe3,
		0x04, 0xe3, 0x04, 0xe3, 0x04, 0xe3, 0x04, 0xe3, 0x04, 0xe3, 0x04, 0xe3, 0x2c, 0x2b, 0xe3, 0xcc,
		0x35, 0xdc, 0xca, 0x94, 0xd5, 0x9b, 0xca, 0x63, 0xcf, 0xee, 0x4d, 0xb2, 0xc7, 0x4e, 0x98, 0xce,
		0x57, 0xc6, 0x8f, 0x18, 0x87, 0xc3, 0x7e, 0x3c, 0xc9, 0xc9, 0x35, 0xee, 0xe2, 0xc1, 0xc3, 0x7f,
		0x3c, 0xcb, 0x7f, 0xb8, 0x9c, 0xfe, 0xe4, 0xc3, 0xa7, 0xe9, 0x8f, 0x95, 0xf0, 0x68, 0xcb, 0x76,
		0x22, 0xf7, 0xc9, 0xb7, 0x62, 0xc7, 0x9e, 0x36, 0x9c, 0xb6, 0x6c, 0x3b, 0x74, 0x22, 0xc6, 0xb3,
		0xae, 0xcd, 0x3f, 0x81, 0x34, 0xa3, 0xec, 0x7c, 0x0e, 0x1c, 0x7e, 0x21, 0xcd, 0x48, 0x60, 0xbf,
		0xbd, 0x58, 0x7d, 0x26, 0xf5, 0x9c, 0x57, 0xd1, 0xea, 0x39, 0xcf, 0x45, 0xe7, 0xd8, 0x09, 0x7d,
		0x36, 0x47, 0xc1, 0xf8, 0xf3, 0x6b, 0xc5, 0x6c, 0x59, 0xe6, 0x63, 0xdb, 0xfc, 0xb5, 0xf7, 0xa3,
		0xf6, 0xf6, 0xf3, 0x87, 0xc5, 0xcf, 0xbf, 0xfc, 0x68, 0xbc, 0xfd, 0x64, 0x1c, 0x64, 0xc2, 0xc3,
		0xaa, 0xc9, 0xe6, 0xbf, 0x78, 0xbd, 0xe5, 0x37, 0x80, 0x0b, 0xc0, 0x05, 0xe0, 0x42, 0xa1, 0x70,
		0x21, 0x8a, 0x07, 0xcb, 0x6a, 0xca, 0x7d, 0x0f, 0x1b, 0x09, 0xa9, 0xc5, 0x88, 0x2f, 0x20, 0x21,
		0xb5, 0x7c, 0x09, 0xa9, 0xcd, 0x6a, 0xb5, 0x8e, 0xab, 0xd8, 0x07, 0x47, 0xce, 0x78, 0xaf, 0xfe,
		0x2c, 0x0b, 0x06, 0x0d, 0x03, 0x0d, 0x03, 0x0d, 0x2b, 0x14, 0x0d, 0xc3, 0x2d, 0xa0, 0x7d, 0x27,
		0x5d, 0x15, 0x90, 0xae, 0xb2, 0x2c, 0x55, 0xbd, 0xd6, 0xaa, 0xb7, 0x9a, 0x67, 0xb5, 0x56, 0x03,
		0xc4, 0xeb, 0xc0, 0x88, 0x57, 0x52, 0x90, 0xcc, 0x1f, 0xbe, 0x68, 0x21, 0x5f, 0xa9, 0x70, 0x10,
		0x30, 0x10, 0x30, 0x10, 0xb0, 0xc2, 0x11, 0xb0, 0x6a, 0x93, 0x91, 0x80, 0x35, 0x41, 0xc0, 0x40,
		0xc0, 0x40, 0xc0, 0x68, 0x51, 0xaf, 0x46, 0xe3, 0x14, 0xdc, 0xeb, 0x20, 0xb9, 0x97, 0xd6, 0xf3,
		0x48, 0xd4, 0x84, 0x06, 0x0b, 0x03, 0x0b, 0x2b, 0x30, 0x0b, 0x43, 0x4d, 0xe8, 0x43, 0x63, 0x65,
		0x38, 0x8b, 0x2c, 0xcd, 0x52, 0xa1, 0x26, 0xf4, 0xe1, 0x71, 0xb2, 0x30, 0x08, 0x62, 0xad, 0x99,
		0xc3, 0x0b, 0x3f, 0x00, 0x46, 0x06, 0x46, 0x06, 0x46, 0x56, 0x28, 0x46, 0x86, 0xbc, 0x61, 0xe4,
		0x0d, 0xaf, 0x1a, 0x6c, 0xad, 0x5e, 0xfa, 0xe2, 0x2f, 0x00, 0x13, 0x80, 0x09, 0xc0, 0x84, 0xc2,
		0x79, 0xe9, 0xc8, 0x19, 0x86, 0x9f, 0x0e, 0x3f, 0xbd, 0x90, 0x4b, 0x85, 0x9c, 0xe1, 0xc3, 0x21,
		0x66, 0x8f, 0x41, 0xf8, 0xb7, 0x15, 0xda, 0x66, 0x1c, 0x5a, 0x7e, 0xe4, 0x46, 0xee, 0x68, 0x89,
		0x18, 0x1d, 0xf5, 0xf5, 0xe2, 0x41, 0xc9, 0x40, 0xc9, 0x40, 0xc9, 0x0a, 0x45, 0xc9, 0x38, 0x4b,
		0x02, 0x31, 0x96, 0x02, 0x02, 0x07, 0xe3, 0x04, 0x76, 0x64, 0xb0, 0x94, 0x87, 0x2e, 0x6b, 0x2f,
		0xdd, 0x03, 0x46, 0x56, 0x4c, 0x46, 0xa6, 0xd4, 0xe3, 0x71, 0xc5, 0xae, 0x2b, 0xf4, 0x7a, 0x04,
		0xdf, 0x02, 0xdf, 0x02, 0xdf, 0xd2, 0xc4, 0xb7, 0xbe, 0x59, 0x91, 0x63, 0xa6, 0xc5, 0xa9, 0x4c,
		0xb5, 0xb6, 0x92, 0xcb, 0x9a, 0x5a, 0x3d, 0xe3, 0x39, 0x1d, 0x99, 0x94, 0xde, 0xea, 0x9b, 0xee,
		0xe3, 0x87, 0xb9, 0x9a, 0x5a, 0x4b, 0x7f, 0x31, 0xf9, 0x4c, 0x6f, 0x42, 0x99, 0xaf, 0xbd, 0xe5,
		0xbf, 0xb1, 0x81, 0x6b, 0x1a, 0xb0, 0xbb, 0xb0, 0xbb, 0xc7, 0xb8, 0xa6, 0x01, 0x27, 0x17, 0x4e,
		0x2e, 0x9c, 0xdc, 0xcd, 0x4b, 0x85, 0x6b, 0x1a, 0x07, 0xe3, 0xd5, 0x6a, 0xba, 0x9b, 0x81, 0x0b,
		0x19, 0xe0, 0x5b, 0xe0, 0x5b, 0x05, 0xe6, 0x5b, 0xb8, 0x90, 0x71, 0x68, 0xfc, 0x0b, 0x89, 0x1e,
		0xa5, 0x59, 0x2a, 0x5c, 0xc8, 0x38, 0x24, 0xf6, 0x95, 0x14, 0xc0, 0x67, 0xa6, 0x5e, 0x63, 0x99,
		0xe0, 0x5d, 0xe0, 0x5d, 0xe0, 0x5d, 0x85, 0xe2, 0x5d, 0xae, 0xed, 0xf8, 0xb1, 0x1b, 0xbf, 0x32,
		0x1f, 0x2c, 0x70, 0xb0, 0xad, 0xcb, 0xc9, 0xa3, 0x7d, 0xb4, 0x22, 0x87, 0xbf, 0xb1, 0xdd, 0x5d,
		0xf7, 0xe6, 0xe1, 0xe6, 0xfa, 0xb6, 0xfb, 0x70, 0xd7, 0x6d, 0x77, 0x3b, 0x5c, 0x7b, 0x39, 0x41,
		0xcc, 0x88, 0xb5, 0x15, 0x15, 0x33, 0x55, 0x98, 0xbe, 0xff, 0xaf, 0xd7, 0xb7, 0xff, 0x6d, 0xdf,
		0x5e, 0x5c, 0x7e, 0xf9, 0xcd, 0x28, 0x22, 0x4f, 0xd2, 0xf4, 0xd6, 0x17, 0x97, 0x77, 0xed, 0x8f,
		0x57, 0x9d, 0x8b, 0x43, 0x7a, 0xe7, 0xab, 0xcb, 0xbb, 0x6e, 0xe7, 0xcb, 0x81, 0x2d, 0xf4, 0x55,
		0xa7, 0x7d, 0x7b, 0x68, 0xef, 0xfc, 0xf1, 0xea, 0xfa, 0xd3, 0xef, 0xbc, 0xef, 0xcc, 0x22, 0xa9,
		0x97, 0x37, 0xea, 0xe6, 0xc2, 0xa5, 0xc3, 0xc0, 0x63, 0x64, 0xd1, 0x89, 0x34, 0xf0, 0x67, 0xf0,
		0x67, 0xf0, 0x67, 0xf0, 0xe7, 0x42, 0xf1, 0xe7, 0xdb, 0xeb, 0xab, 0x03, 0xa4, 0xcf, 0x17, 0x9d,
		0xbb, 0xcb, 0xdf, 0xbe, 0xb4, 0xbb, 0x87, 0x45, 0x25, 0x6f, 0xaf, 0xaf, 0xbb, 0x07, 0xc5, 0xa8,
		0xda, 0x9f, 0x7e, 0xff, 0xe3, 0xe6, 0x90, 0xde, 0xb8, 0x7d, 0xd5, 0xed, 0xdc, 0x8e, 0xf6, 0x35,
		0x48, 0x24, 0x1b, 0x89, 0x3c, 0xca, 0x70, 0xab, 0x70, 0xf5, 0x57, 0xd5, 0xd4, 0x57, 0x95, 0xb6,
		0xab, 0xe4, 0x67, 0x50, 0x6e, 0x84, 0xe4, 0x5c, 0x8f, 0xa8, 0x1c, 0x31, 0x67, 0xde, 0xb8, 0x72,
		0xa3, 0xb8, 0x1d, 0xc7, 0x21, 0x69, 0x71, 0x8c, 0xcf, 0xae, 0xdf, 0xf1, 0x9c, 0x11, 0x27, 0x1b,
		0x81, 0xa4, 0x3f, 0xf4, 0xbc, 0x77, 0x04, 0x21, 0xd6, 0x3f, 0xea, 0x42, 0xae, 0x43, 0xdb, 0x09,
		0x1d, 0xfb, 0xe3, 0xeb, 0x44, 0x84, 0xd6, 0xf9, 0x56, 0xdc, 0xd3, 0xec, 0x7b, 0x99, 0x40, 0x77,
		0x76, 0x36, 0x01, 0x96, 0xd3, 0x0c, 0xf1, 0xfd, 0x2d, 0xf6, 0x4d, 0xc1, 0x15, 0xa1, 0xae, 0x04,
		0xd3, 0x0a, 0x88, 0xcd, 0xd1, 0xee, 0x37, 0x16, 0x78, 0x5b, 0x43, 0xee, 0x14, 0x6c, 0x2e, 0x8f,
		0x41, 0xfc, 0xa0, 0x2b, 0x65, 0xfb, 0x82, 0x5f, 0x4f, 0x1d, 0xef, 0x9a, 0xe0, 0x00, 0x82, 0x83,
		0x4d, 0x77, 0xa4, 0xa9, 0x0e, 0xb3, 0xb2, 0x63, 0xac, 0xec, 0x00, 0x2b, 0x39, 0xba, 0xbc, 0xfa,
		0x75, 0xe1, 0xca, 0x21, 0x83, 0xa1, 0xd8, 0x73, 0x7b, 0x76, 0xcf, 0x44, 0xa5, 0xb1, 0x36, 0x31,
		0xb2, 0x44, 0x8e, 0x24, 0xa9, 0x44, 0x8e, 0xd4, 0x23, 0x45, 0xaa, 0x91, 0x21, 0xb6, 0x48, 0x10,
		0x5b, 0xe4, 0x87, 0x25, 0xd2, 0xa3, 0x97, 0x72, 0x91, 0x23, 0x37, 0x4c, 0x05, 0xe6, 0x54, 0x0a,
		0xca, 0x29, 0x17, 0x90, 0xd3, 0x54, 0x30, 0xae, 0xa7, 0x8b, 0x72, 0xbc, 0x93, 0xb6, 0x5f, 0xe4,
		0x8c, 0xdf, 0x65, 0x03, 0x46, 0xcc, 0xf1, 0x85, 0x05, 0x83, 0x05, 0x2b, 0xbc, 0x05, 0x63, 0x2c,
		0x87, 0xa6, 0x50, 0xfe, 0x4c, 0x31, 0x0b, 0x56, 0x21, 0x24, 0xc1, 0x91, 0xe5, 0xca, 0x75, 0x08,
		0xc6, 0x94, 0xc5, 0xca, 0x99, 0x08, 0xa9, 0x72, 0x58, 0xc9, 0x91, 0x95, 0xca, 0x3d, 0xb5, 0x1c,
		0xe5, 0xc5, 0x58, 0xe7, 0x37, 0xa3, 0xd8, 0x55, 0x11, 0x60, 0x99, 0xab, 0x32, 0x37, 0x73, 0x25,
		0x6e, 0xc0, 0x34, 0x60, 0x1a, 0x8e, 0x06, 0x1c, 0x0d, 0x06, 0x8b, 0xa6, 0xee, 0x71, 0x30, 0x55,
		0x92, 0x86, 0x4d, 0x83, 0x4d, 0x83, 0xeb, 0x01, 0xd7, 0x03, 0xae, 0x07, 0x5c, 0x0f, 0xb8, 0x1e,
		0x69, 0x29, 0x60, 0xd7, 0x7f, 0x32, 0x6d, 0xc7, 0xb3, 0x14, 0x00, 0x7a, 0x45, 0x12, 0x80, 0x19,
		0xc0, 0xbc, 0x67, 0xc0, 0x3c, 0x74, 0xfd, 0xf8, 0x5c, 0x01, 0x85, 0x1b, 0x40, 0x61, 0x35, 0xa8,
		0xa8, 0x03, 0x85, 0x75, 0x4d, 0xed, 0x29, 0x10, 0x38, 0x17, 0x04, 0x7e, 0x76, 0x3c, 0x2f, 0x30,
		0x63, 0x97, 0x50, 0x5f, 0x36, 0xb5, 0x4b, 0x73, 0x32, 0x80, 0xba, 0x40, 0x5d, 0xa0, 0x2e, 0x50,
		0x17, 0xbe, 0x6f, 0x29, 0x50, 0xb7, 0x0a, 0xd4, 0xcd, 0x07, 0x75, 0x03, 0xcf, 0x36, 0x93, 0xf6,
		0x1a, 0x0a, 0xa8, 0x3b, 0x93, 0x21, 0x69, 0x13, 0x2f, 0x9c, 0x47, 0x6b, 0xe8, 0x25, 0x46, 0xbb,
		0x09, 0xc4, 0x06, 0x62, 0x03, 0xb1, 0x81, 0xd8, 0x40, 0x6c, 0x20, 0x36, 0x10, 0x7b, 0x07, 0x62,
		0x2b, 0xba, 0xc9, 0xa9, 0x08, 0x60, 0x2e, 0x30, 0x17, 0x98, 0x0b, 0xcc, 0xe5, 0x04, 0x86, 0x0a,
		0x30, 0x57, 0xd7, 0xd4, 0xd6, 0x1a, 0x0d, 0x80, 0x6e, 0x1e, 0xa0, 0xeb, 0x59, 0x51, 0x6c, 0xc6,
		0xc1, 0x20, 0xf0, 0x82, 0xa7, 0x57, 0xb3, 0xff, 0x3c, 0xd1, 0x77, 0x22, 0xfe, 0xae, 0x95, 0x06,
		0x28, 0x06, 0x14, 0xef, 0x19, 0x14, 0x8f, 0x28, 0x66, 0xec, 0xf6, 0xff, 0x8a, 0x48, 0x8d, 0x5b,
		0x15, 0x1a, 0xb5, 0x1a, 0x7f, 0xf8, 0x63, 0xeb, 0x66, 0xf8, 0x96, 0x1f, 0x44, 0x4e, 0x3f, 0xf0,
		0x6d, 0x52, 0x5a, 0x2c, 0x80, 0x1d, 0xc0, 0x9e, 0x89, 0x33, 0xcd, 0xde, 0x50, 0x15, 0x48, 0x4f,
		0x43, 0xfa, 0x17, 0xeb, 0x1f, 0xd3, 0x52, 0x01, 0xf7, 0xa9, 0x00, 0xe0, 0x39, 0xf0, 0x1c, 0xae,
		0x35, 0x5c, 0x6b, 0xd6, 0x0c, 0x61, 0x20, 0xb0, 0xae, 0xa9, 0x45, 0xe2, 0x75, 0x3e, 0x78, 0x9b,
		0x5c, 0x62, 0xea, 0x07, 0x91, 0xc2, 0xf9, 0xf3, 0x4c, 0x04, 0x30, 0x17, 0x98, 0xbb, 0x87, 0x98,
		0x7b, 0x5a, 0xc3, 0x8d, 0x27, 0xb8, 0xbd, 0xfb, 0x08, 0xba, 0xb5, 0x56, 0xbd, 0xd5, 0x3c, 0xab,
		0xb5, 0xe0, 0xec, 0xe6, 0x07, 0xbe, 0x83, 0x20, 0x54, 0x05, 0xdf, 0x44, 0x04, 0xc0, 0x17, 0xe0,
		0xbb, 0x87, 0xe0, 0x4b, 0xea, 0xc7, 0xae, 0xd0, 0x7f, 0x1d, 0xe0, 0x0b, 0xf0, 0xcd, 0x26, 0x98,
		0xa0, 0xde, 0xdf, 0x1c, 0xb8, 0x4b, 0xc3, 0xdd, 0xa5, 0xb3, 0x5f, 0x85, 0x0a, 0x47, 0x2b, 0x92,
		0x80, 0xc2, 0x40, 0xe1, 0x3d, 0x43, 0xe1, 0xe4, 0x6a, 0x81, 0x13, 0x66, 0x7e, 0x88, 0x0c, 0x20,
		0x06, 0x10, 0x67, 0x31, 0xb5, 0x38, 0xfc, 0x2d, 0x0a, 0x2e, 0x7f, 0xf7, 0x2c, 0xdf, 0x74, 0x6d,
		0x3a, 0x1c, 0x4f, 0x05, 0x00, 0x85, 0x81, 0xc2, 0x7b, 0x86, 0xc2, 0xb4, 0xad, 0x0d, 0x67, 0x18,
		0xb7, 0x99, 0xca, 0x80, 0xc1, 0xf5, 0x4a, 0xab, 0x0e, 0xcc, 0x65, 0xc3, 0xdc, 0xd2, 0xb7, 0xff,
		0x91, 0xe8, 0x1b, 0xc6, 0xd3, 0xf9, 0x47, 0x96, 0x7a, 0x10, 0xed, 0xb2, 0xa4, 0xde, 0x48, 0x53,
		0x0c, 0x74, 0xff, 0xc9, 0x80, 0x32, 0xf0, 0xaa, 0x97, 0x34, 0x35, 0x98, 0xdd, 0x63, 0x70, 0xac,
		0x47, 0xb9, 0x16, 0xb4, 0x69, 0x9d, 0x61, 0x89, 0x53, 0x69, 0xe3, 0x66, 0xa2, 0xc1, 0xef, 0xdf,
		0x9f, 0x8c, 0xf5, 0xf7, 0x64, 0xba, 0xe7, 0xb9, 0xf4, 0xf3, 0x48, 0x61, 0x1e, 0xa7, 0x7d, 0xf9,
		0xc4, 0xf4, 0x50, 0xae, 0x15, 0x1f, 0xa9, 0xf5, 0x1e, 0xa9, 0xd5, 0x9e, 0x5c, 0x6b, 0xbd, 0x5d,
		0x53, 0x22, 0x69, 0xb1, 0x55, 0x2c, 0xb5, 0x21, 0xd4, 0x55, 0x6d, 0x5d, 0x17, 0xbc, 0xed, 0xbb,
		0x67, 0xf3, 0x9e, 0x58, 0xff, 0x7f, 0x36, 0x4c, 0x89, 0xe8, 0x54, 0x10, 0xa7, 0x60, 0xfd, 0x3b,
		0xac, 0x3e, 0xe1, 0x9a, 0xa7, 0x33, 0xc2, 0x91, 0xcd, 0xd9, 0xf4, 0x4c, 0xb3, 0xf3, 0xdd, 0xcd,
		0x16, 0x79, 0x47, 0x27, 0xb9, 0x9d, 0xd8, 0x21, 0x82, 0x15, 0xe2, 0xd8, 0x20, 0x8a, 0x05, 0xd2,
		0xb6, 0x5f, 0xda, 0xd6, 0x4b, 0xd9, 0x76, 0xb9, 0xdd, 0xb4, 0xab, 0x53, 0x9b, 0xd1, 0x9f, 0xce,
		0xf9, 0x8e, 0x49, 0x98, 0xc5, 0x56, 0x93, 0xef, 0xef, 0x32, 0x71, 0x42, 0x2d, 0x03, 0x85, 0xc9,
		0x82, 0x0c, 0x49, 0x90, 0x27, 0x07, 0xb2, 0xa4, 0x80, 0x4c, 0x06, 0xc8, 0x24, 0x80, 0x04, 0xfe,
		0x6a, 0x20, 0x25, 0xda, 0xe2, 0x8f, 0xdc, 0x1a, 0x4b, 0xb1, 0x25, 0x16, 0x78, 0x29, 0x78, 0x29,
		0x1b, 0x2f, 0x65, 0xa8, 0x1b, 0x4f, 0xc8, 0x9e, 0x24, 0xc6, 0xaa, 0x68, 0x0d, 0x99, 0x15, 0xa2,
		0xa7, 0x4a, 0x81, 0x13, 0xd5, 0x58, 0x14, 0x47, 0x94, 0xe4, 0x8d, 0xd6, 0x7e, 0x3a, 0xf7, 0x29,
		0x53, 0xa9, 0xef, 0xce, 0x32, 0x6f, 0x9a, 0xa2, 0x3d, 0xbd, 0x0c, 0xc3, 0x24, 0xe4, 0x3a, 0xed,
		0xaa, 0xf5, 0xd9, 0x01, 0x50, 0x00, 0x28, 0x36, 0x80, 0x92, 0xbd, 0x48, 0x47, 0xb8, 0x40, 0x77,
		0x58, 0x68, 0x54, 0x07, 0x1a, 0xc9, 0x4e, 0xd9, 0x29, 0x90, 0x48, 0x09, 0x89, 0x08, 0xf5, 0xca,
		0xe9, 0x75, 0xca, 0x81, 0x3e, 0x40, 0x1f, 0xa0, 0x0f, 0x7c, 0xa1, 0xbd, 0x41, 0x9f, 0x2a, 0xd0,
		0x47, 0x0d, 0x7d, 0xe4, 0xeb, 0x76, 0xd3, 0xeb, 0x75, 0x53, 0xea, 0x74, 0x03, 0xb1, 0x80, 0x58,
		0x40, 0x2c, 0x20, 0x16, 0x10, 0x0b, 0x88, 0x75, 0x4c, 0x29, 0xac, 0x45, 0x2c, 0xa8, 0x05, 0xdc,
		0x01, 0xee, 0x00, 0x77, 0x8a, 0x8a, 0x3b, 0x4d, 0xe0, 0x8e, 0x74, 0x68, 0x13, 0xb8, 0x43, 0xfc,
		0x46, 0xae, 0x59, 0x6a, 0xa3, 0x7f, 0x4c, 0x92, 0x6b, 0xa8, 0x79, 0x66, 0x5b, 0x72, 0x9d, 0x5c,
		0x3f, 0x76, 0xc2, 0x47, 0xab, 0x2f, 0x70, 0x75, 0x38, 0x35, 0x66, 0x73, 0x63, 0x90, 0xee, 0x83,
		0x74, 0x9f, 0xa5, 0x8d, 0x24, 0xcf, 0xcb, 0x66, 0x43, 0xe5, 0x98, 0x59, 0x15, 0xcc, 0x0c, 0xcc,
		0x4c, 0x6e, 0x9b, 0xa6, 0x03, 0x04, 0xd3, 0x1b, 0x37, 0x2e, 0xb3, 0x50, 0xba, 0xa3, 0xe2, 0xc6,
		0x25, 0x6f, 0x60, 0x95, 0x8d, 0xac, 0xbe, 0xa1, 0x55, 0x37, 0x36, 0xdb, 0x06, 0x67, 0xdb, 0xe8,
		0x2c, 0x1b, 0x9e, 0x48, 0x85, 0x64, 0x1b, 0x21, 0x4a, 0x2a, 0xc2, 0x9c, 0x42, 0x10, 0x2a, 0x67,
		0xae, 0x51, 0x0b, 0xe9, 0xe2, 0x99, 0x5c, 0x34, 0x97, 0xaa, 0x24, 0x1c, 0xca, 0xc2, 0xa7, 0x34,
		0x5c, 0xca, 0xc3, 0xae, 0x44, 0xec, 0xca, 0xc4, 0xaa, 0x54, 0x34, 0xe5, 0x52, 0xf0, 0xe8, 0x8e,
		0x95, 0xee, 0x42, 0xaf, 0x8d, 0x0f, 0x90, 0x8a, 0x73, 0x2e, 0x6b, 0xcf, 0x99, 0x82, 0x08, 0xb5,
		0x2b, 0xd2, 0xf4, 0x80, 0x02, 0x6b, 0x80, 0x81, 0xd9, 0xac, 0x6c, 0x8e, 0xe2, 0x32, 0xc9, 0x63,
		0xbc, 0xec, 0xab, 0xb8, 0x9d, 0xd9, 0x02, 0x16, 0x59, 0x2d, 0x41, 0xad, 0x32, 0xf9, 0x53, 0xe0,
		0xa5, 0x38, 0xca, 0x67, 0x74, 0x2f, 0xa3, 0x7b, 0xdf, 0x94, 0x58, 0xd8, 0xe4, 0xfa, 0x9c, 0x22,
		0xd3, 0x48, 0xa4, 0x80, 0x69, 0x80, 0x69, 0x80, 0x69, 0x48, 0xed, 0x97, 0x6f, 0x56, 0xe4, 0x98,
		0x69, 0xc4, 0xc5, 0x94, 0xbb, 0x75, 0xbd, 0xd1, 0xa1, 0x55, 0xa1, 0x1d, 0x37, 0x69, 0x1c, 0xb4,
		0x6f, 0xba, 0x8f, 0x1f, 0x66, 0xd1, 0xc5, 0xe5, 0xbf, 0x98, 0x7c, 0x4e, 0x34, 0xbf, 0xc0, 0xf6,
		0x6d, 0x10, 0x84, 0xb1, 0xfc, 0xb5, 0xb7, 0x8d, 0x0b, 0xb6, 0x28, 0x0e, 0x16, 0x0f, 0x16, 0x0f,
		0x16, 0x4f, 0x6a, 0xbf, 0x44, 0xf1, 0xc0, 0x5c, 0x50, 0x22, 0xd9, 0x2b, 0x7c, 0x9b, 0xb4, 0xa9,
		0x01, 0x5f, 0x0b, 0xbe, 0xd6, 0xa1, 0xf8, 0x5a, 0x75, 0x78, 0x59, 0xf9, 0x79, 0x59, 0x5a, 0x43,
		0xc6, 0xc4, 0xaa, 0x58, 0xe9, 0x78, 0xe9, 0xd3, 0xec, 0x39, 0x86, 0x37, 0xe3, 0x76, 0x22, 0x47,
		0xdc, 0xf4, 0x79, 0x91, 0xa9, 0xdd, 0x49, 0xf2, 0x4f, 0x55, 0xfc, 0x52, 0x54, 0xed, 0xcc, 0x85,
		0x75, 0xa1, 0x6a, 0xa7, 0xcc, 0x7a, 0xcb, 0x97, 0xe8, 0xe2, 0x70, 0x12, 0xd7, 0x94, 0xec, 0x92,
		0x77, 0xff, 0xf4, 0x98, 0x89, 0x71, 0x61, 0x3f, 0xb2, 0x9d, 0x18, 0x0f, 0xcf, 0xf8, 0xfc, 0xb8,
		0x06, 0x43, 0x01, 0x43, 0xb1, 0xf5, 0x09, 0x71, 0x7e, 0x8c, 0x18, 0x07, 0x62, 0x1c, 0xa5, 0x8b,
		0x71, 0xe0, 0xfc, 0x18, 0x31, 0x0d, 0xc4, 0x34, 0x64, 0x63, 0x1a, 0x38, 0x3f, 0xce, 0x3d, 0xb2,
		0xf1, 0x8e, 0xc2, 0x34, 0x92, 0x2e, 0x3e, 0x11, 0x07, 0xdb, 0x98, 0x48, 0x52, 0x63, 0x1c, 0x55,
		0x30, 0x0e, 0x30, 0x8e, 0x72, 0x30, 0x0e, 0x2a, 0xbd, 0x4f, 0x05, 0x7c, 0x1b, 0xd8, 0x43, 0x33,
		0x74, 0xfa, 0x8e, 0xfb, 0xdd, 0xb1, 0xd5, 0xd7, 0x3a, 0x3d, 0x95, 0x5e, 0x10, 0xfb, 0xae, 0x10,
		0x1d, 0x1d, 0x54, 0xd5, 0x93, 0x53, 0x4d, 0xf9, 0xd5, 0x95, 0x5b, 0x6d, 0xb5, 0xa9, 0xaf, 0x36,
		0x35, 0xd6, 0xa2, 0xce, 0x4c, 0xc0, 0xad, 0xb8, 0xe3, 0x94, 0x1d, 0x8b, 0x4d, 0x50, 0x49, 0x6a,
		0x9d, 0xb7, 0x49, 0x41, 0xcf, 0x19, 0x44, 0xf1, 0xf8, 0x1c, 0x7c, 0xbe, 0x87, 0x16, 0x1f, 0x44,
		0x13, 0x11, 0x5e, 0x21, 0xc4, 0xdc, 0x72, 0x35, 0x10, 0x62, 0x46, 0x1f, 0x45, 0x8b, 0xaf, 0x92,
		0xd5, 0x52, 0xf1, 0xb7, 0xfa, 0xcb, 0x74, 0xf5, 0x8e, 0x8a, 0x21, 0xa5, 0x97, 0x93, 0x7b, 0xa5,
		0xd2, 0xf4, 0x2a, 0xa1, 0x4a, 0x91, 0xe3, 0xc7, 0xcc, 0xec, 0x2b, 0x11, 0x09, 0xe6, 0x05, 0xe6,
		0x05, 0xe6, 0x05, 0xe6, 0x05, 0xe6, 0x05, 0xe6, 0x05, 0xe6, 0x05, 0xe6, 0xb5, 0x7f, 0xcc, 0x2b,
		0xd3, 0x70, 0x9b, 0x62, 0x6a, 0x5d, 0x2a, 0x87, 0x27, 0xc5, 0x2e, 0x49, 0x39, 0x39, 0x51, 0x0c,
		0x7a, 0x1f, 0xaf, 0xef, 0x83, 0x76, 0x1b, 0xc5, 0x83, 0x87, 0xcb, 0xe9, 0x4f, 0x3d, 0x7c, 0x9a,
		0xfe, 0x48, 0x81, 0xcf, 0x11, 0x6c, 0x27, 0x72, 0x9f, 0x7c, 0x2b, 0x76, 0xec, 0x69, 0x8f, 0x17,
		0xcb, 0xb6, 0x43, 0x27, 0x62, 0x38, 0x58, 0xd8, 0x2c, 0x1a, 0xb9, 0x0d, 0x38, 0x69, 0xc8, 0x89,
		0x20, 0x97, 0x35, 0xb7, 0xe1, 0xc5, 0xea, 0x2b, 0xaa, 0xcf, 0xbc, 0x0a, 0x55, 0xcf, 0xd5, 0xae,
		0xaa, 0xc5, 0x4e, 0xe8, 0x2b, 0xb3, 0x5e, 0xe3, 0xcf, 0xaf, 0x15, 0xb3, 0x65, 0x99, 0x8f, 0x6d,
		0xf3, 0xd7, 0xde, 0x8f, 0xda, 0xdb, 0xcf, 0x1f, 0x16, 0x3f, 0xff, 0xf2, 0xa3, 0xf1, 0xf6, 0x93,
		0xb1, 0x97, 0xa7, 0xb7, 0xab, 0xa6, 0x91, 0xef, 0xaa, 0xdc, 0x16, 0xd9, 0xb0, 0xbb, 0xb0, 0xbb,
		0xb0, 0xbb, 0x52, 0xfb, 0x85, 0xa1, 0xf9, 0xdd, 0x26, 0x7d, 0x42, 0x96, 0x99, 0x5e, 0xa7, 0x15,
		0x59, 0x66, 0xc5, 0x59, 0x02, 0x95, 0x66, 0x7d, 0x99, 0xac, 0x03, 0x52, 0xcc, 0xb6, 0x91, 0x14,
		0x9e, 0xbc, 0xf6, 0x65, 0x81, 0xa0, 0x23, 0xa0, 0x23, 0xa0, 0x23, 0x52, 0xfb, 0x05, 0x29, 0xee,
		0x65, 0x23, 0x1f, 0x15, 0x90, 0x8f, 0xbc, 0x97, 0xa0, 0x5e, 0x6b, 0xd5, 0x5b, 0xcd, 0xb3, 0x5a,
		0xab, 0x01, 0x02, 0x52, 0x52, 0x02, 0x92, 0x94, 0x2e, 0xf1, 0x87, 0x2f, 0xac, 0x24, 0x24, 0x15,
		0x0a, 0x22, 0x02, 0x22, 0x02, 0x22, 0x22, 0x4d, 0x44, 0xaa, 0x4d, 0x06, 0x22, 0xd2, 0x04, 0x11,
		0x01, 0x11, 0x39, 0x94, 0x28, 0x48, 0xa3, 0x71, 0x0a, 0x0e, 0x52, 0x6a, 0x0e, 0xa2, 0xe5, 0x9c,
		0x06, 0xd5, 0x0d, 0xc1, 0x46, 0xc0, 0x46, 0x14, 0xf6, 0x0b, 0xaa, 0x1b, 0x96, 0x9d, 0x9d, 0xe0,
		0x8c, 0x26, 0xf7, 0x25, 0x40, 0x75, 0xc3, 0xf2, 0x72, 0x93, 0x30, 0x08, 0x62, 0x2d, 0x99, 0x7b,
		0x0b, 0x82, 0xc1, 0x4c, 0xc0, 0x4c, 0xc0, 0x4c, 0xa4, 0xf6, 0x0b, 0xf2, 0xf6, 0xf6, 0xd9, 0xe2,
		0x6a, 0xf1, 0x06, 0x17, 0x25, 0xc3, 0xe6, 0xc2, 0xe6, 0xc2, 0xe6, 0x4a, 0x7b, 0x83, 0xc8, 0xd9,
		0x83, 0x3f, 0x08, 0x7f, 0x50, 0x69, 0x09, 0x90, 0xb3, 0x57, 0x3e, 0x82, 0xf2, 0x18, 0x84, 0x7f,
		0x5b, 0xa1, 0x6d, 0xc6, 0xa1, 0xe5, 0x47, 0x6e, 0xe4, 0x8e, 0xa6, 0x9c, 0xc1, 0x21, 0x5c, 0x2f,
		0x16, 0xd4, 0x04, 0xd4, 0x04, 0xd4, 0x44, 0x6a, 0xbf, 0x70, 0xd4, 0x31, 0x60, 0xa8, 0x5f, 0x00,
		0x2e, 0x22, 0x03, 0x84, 0x38, 0x39, 0xcf, 0x9f, 0x0e, 0x6a, 0xab, 0x37, 0x00, 0x66, 0x82, 0x86,
		0xa7, 0xe0, 0x1d, 0xe0, 0x1d, 0xfb, 0xcd, 0x3b, 0xd0, 0xf0, 0x54, 0xb7, 0x7d, 0xe3, 0xcb, 0x50,
		0x46, 0x5a, 0x32, 0xec, 0x1c, 0xec, 0x1c, 0x6d, 0xbf, 0x20, 0x2d, 0x19, 0xce, 0x15, 0x9c, 0x2b,
		0xc9, 0x25, 0x40, 0x5a, 0x72, 0xe9, 0xbc, 0x29, 0xb4, 0x57, 0x07, 0xef, 0x00, 0xef, 0x28, 0x0e,
		0xef, 0x40, 0x02, 0x72, 0xd9, 0x79, 0x08, 0x0e, 0x9c, 0x73, 0x5f, 0x02, 0x24, 0x20, 0x97, 0x91,
		0x85, 0xd0, 0x5a, 0x00, 0xaf, 0xa7, 0x20, 0x94, 0x7e, 0xc0, 0xe0, 0x1f, 0xe0, 0x1f, 0x07, 0xcf,
		0x3f, 0x5c, 0xdb, 0xf1, 0x63, 0x37, 0x7e, 0x65, 0x0a, 0xec, 0xaa, 0xb0, 0x8e, 0xcb, 0xc9, 0xa3,
		0x7c, 0xb4, 0x22, 0x87, 0xaf, 0x3b, 0xc7, 0x5d, 0xf7, 0xe6, 0xe1, 0xe6, 0xfa, 0xb6, 0xfb, 0x70,
		0xd7, 0x6d, 0x77, 0x3b, 0xaa, 0x7b, 0x30, 0x41, 0x9c, 0x88, 0xa5, 0x6e, 0x3f, 0x13, 0xa4, 0x4e,
		0xdf, 0xf3, 0xd7, 0xeb, 0xdb, 0xff, 0xb6, 0x6f, 0x2f, 0x2e, 0xbf, 0xfc, 0x66, 0x14, 0x81, 0x37,
		0x30, 0xbf, 0xdd, 0xc5, 0xe5, 0x5d, 0xfb, 0xe3, 0x55, 0xe7, 0x62, 0x1f, 0xdf, 0xed, 0xea, 0xf2,
		0xae, 0xdb, 0xf9, 0xb2, 0xa7, 0x0b, 0x77, 0xd5, 0x69, 0xdf, 0xee, 0xeb, 0xbb, 0x7d, 0xbc, 0xba,
		0xfe, 0xf4, 0x3b, 0xcf, 0xbb, 0x29, 0x49, 0xe8, 0x65, 0x8d, 0x5a, 0x99, 0x70, 0xc4, 0x30, 0xf0,
		0x18, 0xd8, 0x61, 0x22, 0x05, 0xbc, 0x10, 0xbc, 0x10, 0xbc, 0x10, 0xbc, 0x70, 0x2d, 0x2f, 0xbc,
		0xbd, 0xbe, 0xda, 0x63, 0x5a, 0x78, 0xd1, 0xb9, 0xbb, 0xfc, 0xed, 0x4b, 0xbb, 0xbb, 0x9f, 0xd4,
		0xe9, 0xf6, 0xfa, 0xba, 0xbb, 0x97, 0xcc, 0xa2, 0xfd, 0xe9, 0xf7, 0x3f, 0x6e, 0xf6, 0xf1, 0xcd,
		0xda, 0x57, 0xdd, 0xce, 0xed, 0x68, 0x3f, 0x82, 0x34, 0xf1, 0x8e, 0x90, 0x5c, 0x6a, 0xd5, 0xe6,
		0x4a, 0x9c, 0x4d, 0x95, 0xe4, 0xb6, 0x82, 0xf8, 0xb4, 0x88, 0x7d, 0x53, 0x70, 0xe2, 0x46, 0xbc,
		0x45, 0x32, 0x91, 0xd4, 0xb8, 0x72, 0xa3, 0xb8, 0x1d, 0xc7, 0x72, 0x4d, 0xe3, 0x8d, 0xcf, 0xae,
		0xdf, 0xf1, 0x9c, 0x11, 0x01, 0x19, 0x21, 0x8a, 0x3f, 0xf4, 0xbc, 0x77, 0x12, 0x83, 0xad, 0x7f,
		0xe8, 0x83, 0xaf, 0x43, 0xdb, 0x09, 0x1d, 0xfb, 0xe3, 0xeb, 0x64, 0x28, 0xeb, 0xfc, 0x11, 0x37,
		0x1c, 0xcf, 0x46, 0x93, 0x00, 0xf8, 0x9d, 0xed, 0xb9, 0xc4, 0xb6, 0xeb, 0xee, 0xcd, 0xb7, 0xfd,
		0x1b, 0x3b, 0xa6, 0x55, 0x76, 0x3a, 0x55, 0xa6, 0x71, 0xfb, 0x0b, 0x6f, 0x7e, 0x8d, 0x2d, 0xaf,
		0x60, 0x88, 0x05, 0xff, 0xe7, 0x8e, 0x49, 0x77, 0xc7, 0xf7, 0x53, 0xb2, 0xb9, 0xe3, 0x6b, 0xa9,
		0x5f, 0x56, 0xdb, 0xf1, 0x45, 0x09, 0xff, 0x4b, 0xde, 0xcf, 0x92, 0xf5, 0xa7, 0xc8, 0x7e, 0x13,
		0xd9, 0x3f, 0x22, 0xf9, 0x41, 0x6a, 0x9b, 0xfa, 0xc2, 0x15, 0xb3, 0x95, 0x06, 0xb1, 0xe5, 0xdc,
		0x2c, 0xad, 0x99, 0xd2, 0x57, 0x4e, 0x32, 0x20, 0x20, 0x1d, 0x00, 0xa0, 0x38, 0xfc, 0x74, 0x07,
		0x9f, 0xea, 0xd0, 0x2b, 0x3b, 0xf0, 0xca, 0x0e, 0xbb, 0x92, 0x83, 0xce, 0x4b, 0x0a, 0xa4, 0x1d,
		0x6e, 0xc5, 0xfa, 0x2e, 0x94, 0x7a, 0x2e, 0xe4, 0xfa, 0x2d, 0xcc, 0xf5, 0x5a, 0x7a, 0x5c, 0xb8,
		0xf9, 0x4e, 0xd8, 0x3e, 0x48, 0x27, 0xba, 0x2d, 0x1b, 0x08, 0xc9, 0xd4, 0x36, 0x58, 0x08, 0x58,
		0x08, 0x36, 0x0b, 0xc1, 0x50, 0x8d, 0x84, 0x50, 0x7d, 0x84, 0x98, 0xfc, 0x45, 0xf0, 0x20, 0x55,
		0x92, 0xbb, 0x54, 0x63, 0xf3, 0x8a, 0xc9, 0x5b, 0x1c, 0x79, 0x42, 0x94, 0x33, 0x11, 0x95, 0x64,
		0x2c, 0xae, 0x29, 0x53, 0xa9, 0xee, 0xc1, 0x32, 0x6f, 0x9a, 0xa2, 0x05, 0x59, 0xc2, 0x93, 0x6a,
		0x01, 0x46, 0xa6, 0x82, 0x8b, 0x80, 0x2b, 0xc0, 0x15, 0x08, 0x6d, 0x29, 0x08, 0xad, 0x72, 0x01,
		0x41, 0xae, 0x82, 0x81, 0xb0, 0x19, 0xb0, 0x19, 0xa0, 0xb8, 0xa0, 0xb8, 0xa0, 0xb8, 0xa0, 0xb8,
		0xdb, 0xa6, 0x61, 0x52, 0xf9, 0xcd, 0xf5, 0x9f, 0x4c, 0xdb, 0xf1, 0x2c, 0x02, 0x50, 0xad, 0x48,
		0x00, 0x40, 0x01, 0xa0, 0x32, 0x06, 0xa8, 0xa1, 0xeb, 0xc7, 0xe7, 0x04, 0x34, 0x6a, 0x00, 0x8d,
		0xd6, 0x9b, 0xd6, 0x3a, 0xd0, 0x48, 0x76, 0xca, 0x4e, 0x81, 0x44, 0x4a, 0x48, 0xf4, 0xec, 0x78,
		0x5e, 0x60, 0xc6, 0xae, 0x44, 0x19, 0xb1, 0x54, 0xff, 0xe7, 0xc6, 0x02, 0x7d, 0x80, 0x3e, 0x40,
		0x1f, 0xf8, 0x42, 0x07, 0x86, 0x3e, 0x55, 0xa0, 0x8f, 0x1a, 0xfa, 0x04, 0x9e, 0x6d, 0x26, 0xd5,
		0x7b, 0x09, 0xe8, 0x33, 0x1b, 0x2b, 0x68, 0x6b, 0x2e, 0x9c, 0x47, 0x6b, 0xe8, 0x25, 0x46, 0xaf,
		0x09, 0xc4, 0x02, 0x62, 0x01, 0xb1, 0x80, 0x58, 0x40, 0x2c, 0x20, 0x96, 0x34, 0x62, 0x11, 0xdd,
		0xa5, 0x74, 0x28, 0xb0, 0x07, 0xd8, 0x03, 0xec, 0x29, 0x37, 0xf6, 0x54, 0x80, 0x3d, 0xb2, 0x53,
		0x56, 0x6b, 0x34, 0x00, 0x3e, 0x2a, 0xe0, 0xe3, 0x59, 0x51, 0x6c, 0xc6, 0xc1, 0x20, 0xf0, 0x82,
		0xa7, 0x57, 0xb3, 0xff, 0x3c, 0xd1, 0x37, 0x49, 0x1c, 0x5a, 0x2b, 0x05, 0x90, 0x04, 0x48, 0xca,
		0x18, 0x92, 0x46, 0x54, 0x28, 0x76, 0xfb, 0x7f, 0x45, 0x52, 0x7d, 0x7b, 0x08, 0x7d, 0x7a, 0x8c,
		0x3f, 0xfc, 0xb1, 0xd5, 0x30, 0x7c, 0xcb, 0x0f, 0x22, 0xa7, 0x1f, 0xf8, 0xb6, 0x54, 0x1a, 0x16,
		0x80, 0x0d, 0xc0, 0xb6, 0xd5, 0xa9, 0x62, 0xeb, 0xa3, 0x03, 0xa4, 0x1b, 0x4f, 0xc3, 0x8b, 0xf5,
		0x8f, 0x69, 0x51, 0xc0, 0x6d, 0x3a, 0x10, 0x78, 0x06, 0x3c, 0x83, 0x8b, 0x55, 0x6e, 0x24, 0x6a,
		0x02, 0x89, 0x64, 0xa7, 0x0c, 0x89, 0x79, 0x6a, 0xb8, 0x93, 0x24, 0x7d, 0xf7, 0x83, 0x88, 0x70,
		0x1e, 0x35, 0x1b, 0x0a, 0xec, 0x01, 0xf6, 0xe4, 0x80, 0x3d, 0xa7, 0x35, 0x64, 0x86, 0xc3, 0x0d,
		0xca, 0x13, 0x7c, 0x6a, 0xad, 0x7a, 0xab, 0x79, 0x56, 0x6b, 0xc1, 0xf9, 0x51, 0x07, 0xa1, 0x41,
		0x10, 0x52, 0x41, 0x28, 0x19, 0x0a, 0x10, 0x02, 0x08, 0xe5, 0x00, 0x42, 0x52, 0x6d, 0xe2, 0x08,
		0x6d, 0xe1, 0x00, 0x42, 0x00, 0xa1, 0xed, 0x4e, 0x23, 0xbd, 0xed, 0x1a, 0xf0, 0x67, 0x3c, 0x0d,
		0x4b, 0x67, 0x43, 0x84, 0x9b, 0xf7, 0x2b, 0x12, 0x80, 0x46, 0x40, 0xa3, 0x8c, 0xd1, 0x28, 0x49,
		0x0d, 0x75, 0x42, 0xed, 0x87, 0x4b, 0x00, 0x24, 0x00, 0xd2, 0xb6, 0x29, 0xc3, 0xe1, 0x90, 0x14,
		0x3e, 0x15, 0xbb, 0xee, 0xa7, 0x40, 0x49, 0xde, 0x2d, 0x25, 0x3f, 0x8f, 0x24, 0xde, 0x49, 0xf4,
		0x5d, 0xa4, 0xdf, 0xc1, 0xd8, 0x5a, 0x78, 0x74, 0x5d, 0x75, 0xd7, 0xf5, 0xef, 0xbb, 0xfa, 0x36,
		0x8b, 0x7f, 0xb3, 0xf4, 0x5e, 0xbb, 0xde, 0x47, 0xe6, 0x3d, 0xd6, 0xbc, 0xc2, 0xea, 0xa3, 0x2f,
		0x3e, 0xf5, 0xec, 0xd9, 0xc6, 0xff, 0x35, 0x79, 0xba, 0x4d, 0x4f, 0x65, 0xb8, 0xd1, 0xa7, 0xe0,
		0x65, 0x10, 0x3a, 0x51, 0xe4, 0xd8, 0x77, 0xc9, 0x93, 0xad, 0x20, 0xa9, 0xe1, 0x46, 0xbf, 0x5a,
		0x7f, 0x39, 0xb7, 0x41, 0xb0, 0x8a, 0xb2, 0xcb, 0x6f, 0x63, 0xcc, 0xff, 0xaf, 0x85, 0x27, 0xbd,
		0x70, 0xbe, 0xbb, 0xd3, 0xb2, 0xb9, 0x6f, 0x47, 0x6f, 0xff, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x01,
		0x00, 0x00, 0xff, 0xff, 0xd9, 0x0d, 0x91, 0x3a, 0x11, 0x83, 0x25, 0x00,
	}
)

// ΛEnumTypes is a map, keyed by a YANG schema path, of the enumerated types that
// correspond with the leaf. The type is represented as a reflect.Type. The naming
// of the map ensures that there are no clashes with valid YANG identifiers.
var ΛEnumTypes = map[string][]reflect.Type{
	"/components/component/port/breakout-mode/config/channel-speed": {
		reflect.TypeOf((E_OpenconfigIfEthernet_ETHERNET_SPEED)(0)),
	},
	"/components/component/state/oper-status": {
		reflect.TypeOf((E_OpenconfigPlatformTypes_COMPONENT_OPER_STATUS)(0)),
	},
	"/components/component/state/temperature/alarm-severity": {
		reflect.TypeOf((E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY)(0)),
	},
	"/components/component/state/type": {
		reflect.TypeOf((E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT)(0)),
		reflect.TypeOf((E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT)(0)),
	},
	"/components/component/transceiver/config/ethernet-pmd-preconf": {
		reflect.TypeOf((E_OpenconfigTransportTypes_ETHERNET_PMD_TYPE)(0)),
	},
	"/components/component/transceiver/config/fec-mode": {
		reflect.TypeOf((E_OpenconfigPlatformTypes_FEC_MODE_TYPE)(0)),
	},
	"/components/component/transceiver/config/form-factor-preconf": {
		reflect.TypeOf((E_OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE)(0)),
	},
	"/components/component/transceiver/state/connector-type": {
		reflect.TypeOf((E_OpenconfigTransportTypes_FIBER_CONNECTOR_TYPE)(0)),
	},
	"/components/component/transceiver/state/ethernet-pmd": {
		reflect.TypeOf((E_OpenconfigTransportTypes_ETHERNET_PMD_TYPE)(0)),
	},
	"/components/component/transceiver/state/fec-status": {
		reflect.TypeOf((E_OpenconfigPlatformTypes_FEC_STATUS_TYPE)(0)),
	},
	"/components/component/transceiver/state/form-factor": {
		reflect.TypeOf((E_OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE)(0)),
	},
	"/components/component/transceiver/state/otn-compliance-code": {
		reflect.TypeOf((E_OpenconfigTransportTypes_OTN_APPLICATION_CODE)(0)),
	},
	"/components/component/transceiver/state/present": {
		reflect.TypeOf((E_OpenconfigPlatformTransceiver_Transceiver_Present)(0)),
	},
	"/components/component/transceiver/state/sonet-sdh-compliance-code": {
		reflect.TypeOf((E_OpenconfigTransportTypes_SONET_APPLICATION_CODE)(0)),
	},
	"/interfaces/interface/aggregation/config/lag-type": {
		reflect.TypeOf((E_OpenconfigIfAggregate_AggregationType)(0)),
	},
	"/interfaces/interface/aggregation/switched-vlan/config/interface-mode": {
		reflect.TypeOf((E_OpenconfigVlan_VlanModeType)(0)),
	},
	"/interfaces/interface/config/tpid": {
		reflect.TypeOf((E_OpenconfigVlanTypes_TPID_TYPES)(0)),
	},
	"/interfaces/interface/config/type": {
		reflect.TypeOf((E_IETFInterfaces_InterfaceType)(0)),
	},
	"/interfaces/interface/ethernet/config/duplex-mode": {
		reflect.TypeOf((E_OpenconfigIfEthernet_Ethernet_DuplexMode)(0)),
	},
	"/interfaces/interface/ethernet/config/port-speed": {
		reflect.TypeOf((E_OpenconfigIfEthernet_ETHERNET_SPEED)(0)),
	},
	"/interfaces/interface/ethernet/state/negotiated-duplex-mode": {
		reflect.TypeOf((E_OpenconfigIfEthernet_Ethernet_NegotiatedDuplexMode)(0)),
	},
	"/interfaces/interface/ethernet/state/negotiated-port-speed": {
		reflect.TypeOf((E_OpenconfigIfEthernet_ETHERNET_SPEED)(0)),
	},
	"/interfaces/interface/ethernet/switched-vlan/config/interface-mode": {
		reflect.TypeOf((E_OpenconfigVlan_VlanModeType)(0)),
	},
	"/interfaces/interface/routed-vlan/ipv4/addresses/address/state/origin": {
		reflect.TypeOf((E_OpenconfigIfIp_IpAddressOrigin)(0)),
	},
	"/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor/state/origin": {
		reflect.TypeOf((E_OpenconfigIfIp_NeighborOrigin)(0)),
	},
	"/interfaces/interface/routed-vlan/ipv4/proxy-arp/config/mode": {
		reflect.TypeOf((E_OpenconfigIfIp_ProxyArp_Mode)(0)),
	},
	"/interfaces/interface/routed-vlan/ipv6/addresses/address/state/origin": {
		reflect.TypeOf((E_OpenconfigIfIp_IpAddressOrigin)(0)),
	},
	"/interfaces/interface/routed-vlan/ipv6/addresses/address/state/status": {
		reflect.TypeOf((E_OpenconfigIfIp_Address_Status)(0)),
	},
	"/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/state/neighbor-state": {
		reflect.TypeOf((E_OpenconfigIfIp_Neighbor_NeighborState)(0)),
	},
	"/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/state/origin": {
		reflect.TypeOf((E_OpenconfigIfIp_NeighborOrigin)(0)),
	},
	"/interfaces/interface/state/admin-status": {
		reflect.TypeOf((E_OpenconfigInterfaces_Interface_AdminStatus)(0)),
	},
	"/interfaces/interface/state/oper-status": {
		reflect.TypeOf((E_OpenconfigInterfaces_Interface_OperStatus)(0)),
	},
	"/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/state/origin": {
		reflect.TypeOf((E_OpenconfigIfIp_IpAddressOrigin)(0)),
	},
	"/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor/state/origin": {
		reflect.TypeOf((E_OpenconfigIfIp_NeighborOrigin)(0)),
	},
	"/interfaces/interface/subinterfaces/subinterface/ipv4/proxy-arp/config/mode": {
		reflect.TypeOf((E_OpenconfigIfIp_ProxyArp_Mode)(0)),
	},
	"/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/state/origin": {
		reflect.TypeOf((E_OpenconfigIfIp_IpAddressOrigin)(0)),
	},
	"/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/state/status": {
		reflect.TypeOf((E_OpenconfigIfIp_Address_Status)(0)),
	},
	"/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/neighbor-state": {
		reflect.TypeOf((E_OpenconfigIfIp_Neighbor_NeighborState)(0)),
	},
	"/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/origin": {
		reflect.TypeOf((E_OpenconfigIfIp_NeighborOrigin)(0)),
	},
	"/interfaces/interface/subinterfaces/subinterface/state/admin-status": {
		reflect.TypeOf((E_OpenconfigInterfaces_Interface_AdminStatus)(0)),
	},
	"/interfaces/interface/subinterfaces/subinterface/state/oper-status": {
		reflect.TypeOf((E_OpenconfigInterfaces_Interface_OperStatus)(0)),
	},
	"/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/config/tpid": {
		reflect.TypeOf((E_OpenconfigVlanTypes_TPID_TYPES)(0)),
	},
	"/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/config/vlan-stack-action": {
		reflect.TypeOf((E_OpenconfigVlan_VlanStackAction)(0)),
	},
	"/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/config/tpid": {
		reflect.TypeOf((E_OpenconfigVlanTypes_TPID_TYPES)(0)),
	},
	"/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/config/vlan-stack-action": {
		reflect.TypeOf((E_OpenconfigVlan_VlanStackAction)(0)),
	},
	"/lacp/interfaces/interface/config/interval": {
		reflect.TypeOf((E_OpenconfigLacp_LacpPeriodType)(0)),
	},
	"/lacp/interfaces/interface/config/lacp-mode": {
		reflect.TypeOf((E_OpenconfigLacp_LacpActivityType)(0)),
	},
	"/lacp/interfaces/interface/members/member/state/activity": {
		reflect.TypeOf((E_OpenconfigLacp_LacpActivityType)(0)),
	},
	"/lacp/interfaces/interface/members/member/state/synchronization": {
		reflect.TypeOf((E_OpenconfigLacp_LacpSynchronizationType)(0)),
	},
	"/lacp/interfaces/interface/members/member/state/timeout": {
		reflect.TypeOf((E_OpenconfigLacp_LacpTimeoutType)(0)),
	},
	"/lldp/config/chassis-id-type": {
		reflect.TypeOf((E_OpenconfigLldp_ChassisIdType)(0)),
	},
	"/lldp/config/suppress-tlv-advertisement": {
		reflect.TypeOf((E_OpenconfigLldpTypes_LLDP_TLV)(0)),
	},
	"/lldp/interfaces/interface/neighbors/neighbor/capabilities/capability/state/name": {
		reflect.TypeOf((E_OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY)(0)),
	},
	"/lldp/interfaces/interface/neighbors/neighbor/state/chassis-id-type": {
		reflect.TypeOf((E_OpenconfigLldp_ChassisIdType)(0)),
	},
	"/lldp/interfaces/interface/neighbors/neighbor/state/port-id-type": {
		reflect.TypeOf((E_OpenconfigLldp_PortIdType)(0)),
	},
	"/stp/global/config/enabled-protocol": {
		reflect.TypeOf((E_OpenconfigSpanningTreeTypes_STP_PROTOCOL)(0)),
	},
	"/stp/interfaces/interface/config/edge-port": {
		reflect.TypeOf((E_OpenconfigSpanningTreeTypes_STP_EDGE_PORT)(0)),
	},
	"/stp/interfaces/interface/config/guard": {
		reflect.TypeOf((E_OpenconfigSpanningTree_StpGuardType)(0)),
	},
	"/stp/interfaces/interface/config/link-type": {
		reflect.TypeOf((E_OpenconfigSpanningTree_StpLinkType)(0)),
	},
	"/stp/mstp/mst-instances/mst-instance/interfaces/interface/state/port-state": {
		reflect.TypeOf((E_OpenconfigSpanningTreeTypes_STP_PORT_STATE)(0)),
	},
	"/stp/mstp/mst-instances/mst-instance/interfaces/interface/state/role": {
		reflect.TypeOf((E_OpenconfigSpanningTreeTypes_STP_PORT_ROLE)(0)),
	},
	"/stp/rapid-pvst/vlan/interfaces/interface/state/port-state": {
		reflect.TypeOf((E_OpenconfigSpanningTreeTypes_STP_PORT_STATE)(0)),
	},
	"/stp/rapid-pvst/vlan/interfaces/interface/state/role": {
		reflect.TypeOf((E_OpenconfigSpanningTreeTypes_STP_PORT_ROLE)(0)),
	},
	"/stp/rstp/interfaces/interface/state/port-state": {
		reflect.TypeOf((E_OpenconfigSpanningTreeTypes_STP_PORT_STATE)(0)),
	},
	"/stp/rstp/interfaces/interface/state/role": {
		reflect.TypeOf((E_OpenconfigSpanningTreeTypes_STP_PORT_ROLE)(0)),
	},
}
